{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nconst MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\n\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n\n  const profileListFileName = \"profilesList.json\";\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error(\"No xrInputSource supplied\");\n  }\n\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n\n  const supportedProfilesList = await fetchProfilesList(basePath);\n  let match = void 0;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error(\"No matching profile name found\");\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = void 0;\n\n  if (getAssetPath) {\n    let layout;\n\n    if (xrInputSource.handedness === \"any\") {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n    }\n  }\n\n  return {\n    profile,\n    assetPath\n  };\n}\n\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n  const hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    __publicField(this, \"value\");\n\n    __publicField(this, \"componentProperty\");\n\n    __publicField(this, \"states\");\n\n    __publicField(this, \"valueNodeName\");\n\n    __publicField(this, \"valueNodeProperty\");\n\n    __publicField(this, \"minNodeName\");\n\n    __publicField(this, \"maxNodeName\");\n\n    __publicField(this, \"valueNode\");\n\n    __publicField(this, \"minNode\");\n\n    __publicField(this, \"maxNode\");\n\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1 : 0;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n\n}\n\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    __publicField(this, \"id\");\n\n    __publicField(this, \"values\");\n\n    __publicField(this, \"type\");\n\n    __publicField(this, \"gamepadIndices\");\n\n    __publicField(this, \"rootNodeName\");\n\n    __publicField(this, \"visualResponses\");\n\n    __publicField(this, \"touchPointNodeName\");\n\n    __publicField(this, \"touchPointNode\");\n\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n\n\n  updateFromGamepad(gamepad) {\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n\n    if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button;\n\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n\n    if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n\n    if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n\n}\n\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    __publicField(this, \"xrInputSource\");\n\n    __publicField(this, \"assetUrl\");\n\n    __publicField(this, \"layoutDescription\");\n\n    __publicField(this, \"id\");\n\n    __publicField(this, \"components\");\n\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n\n\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n\n\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n\n}\n\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/libs/MotionControllers.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","MotionControllerConstants","Handedness","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","path","response","fetch","ok","Error","statusText","json","fetchProfilesList","basePath","profileListFileName","profilesList","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","constructor","visualResponseDescription","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","updateFromComponent","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","data","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const profileListFileName = \"profilesList.json\";\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error(\"No xrInputSource supplied\");\n  }\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const supportedProfilesList = await fetchProfilesList(basePath);\n  let match = void 0;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error(\"No matching profile name found\");\n    }\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = void 0;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === \"any\") {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n    }\n  }\n  return { profile, assetPath };\n}\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n  const hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    __publicField(this, \"value\");\n    __publicField(this, \"componentProperty\");\n    __publicField(this, \"states\");\n    __publicField(this, \"valueNodeName\");\n    __publicField(this, \"valueNodeProperty\");\n    __publicField(this, \"minNodeName\");\n    __publicField(this, \"maxNodeName\");\n    __publicField(this, \"valueNode\");\n    __publicField(this, \"minNode\");\n    __publicField(this, \"maxNode\");\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1 : 0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    __publicField(this, \"id\");\n    __publicField(this, \"values\");\n    __publicField(this, \"type\");\n    __publicField(this, \"gamepadIndices\");\n    __publicField(this, \"rootNodeName\");\n    __publicField(this, \"visualResponses\");\n    __publicField(this, \"touchPointNodeName\");\n    __publicField(this, \"touchPointNode\");\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n    if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button;\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    __publicField(this, \"xrInputSource\");\n    __publicField(this, \"assetUrl\");\n    __publicField(this, \"layoutDescription\");\n    __publicField(this, \"id\");\n    __publicField(this, \"components\");\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\nexport {\n  MotionController,\n  MotionControllerConstants,\n  fetchProfile,\n  fetchProfilesList\n};\n"]},"metadata":{},"sourceType":"module"}