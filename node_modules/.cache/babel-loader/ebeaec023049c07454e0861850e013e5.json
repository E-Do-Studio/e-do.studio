{"ast":null,"code":"import { Vector3, ShaderMaterial, UniformsUtils, UniformsLib, Color, LineSegments, Ray, FileLoader, Matrix4, Group, BufferGeometry, BufferAttribute, Mesh, Loader, MeshStandardMaterial, LineBasicMaterial } from \"three\";\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5;\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst MAIN_COLOUR_CODE = \"16\";\nconst MAIN_EDGE_COLOUR_CODE = \"24\";\n\nconst _tempVec0 = /* @__PURE__ */new Vector3();\n\nconst _tempVec1 = /* @__PURE__ */new Vector3();\n\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: UniformsUtils.merge([UniformsLib.fog, {\n        diffuse: {\n          value: new Color()\n        },\n        opacity: {\n          value: 1\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      `\n        attribute vec3 control0;\n        attribute vec3 control1;\n        attribute vec3 direction;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_vertex>\n        #include <fog_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n          #include <color_vertex>\n\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n\n          // Transform the line segment ends and control points into camera clip space\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\n\n          c0.xy /= c0.w;\n          c1.xy /= c1.w;\n          p0.xy /= p0.w;\n          p1.xy /= p1.w;\n\n          // Get the direction of the segment and an orthogonal vector\n          vec2 dir = p1.xy - p0.xy;\n          vec2 norm = vec2(-dir.y, dir.x);\n\n          // Get control point directions from the line\n          vec2 c0dir = c0.xy - p1.xy;\n          vec2 c1dir = c1.xy - p1.xy;\n\n          // If the vectors to the controls points are pointed in different directions away\n          // from the line segment then the line should not be drawn.\n          float d0 = dot(normalize(norm), normalize(c0dir));\n          float d1 = dot(normalize(norm), normalize(c1dir));\n          discardFlag = float(sign(d0) != sign(d1));\n\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #include <fog_vertex>\n        }\n      `,\n      fragmentShader:\n      /* glsl */\n      `\n        uniform vec3 diffuse;\n        uniform float opacity;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_fragment>\n        #include <fog_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n          if (discardFlag > 0.5) discard;\n\n          #include <clipping_planes_fragment>\n          vec3 outgoingLight = vec3(0.0);\n          vec4 diffuseColor = vec4(diffuse, opacity);\n          #include <logdepthbuf_fragment>\n          #include <color_fragment>\n          outgoingLight = diffuseColor.rgb; // simple shader\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n          #include <fog_fragment>\n          #include <premultiplied_alpha_fragment>\n        }\n      `\n    });\n    Object.defineProperties(this, {\n      opacity: {\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function () {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    this.setValues(parameters);\n    this.isLDrawConditionalLineMaterial = true;\n  }\n\n}\n\nclass ConditionalLineSegments extends LineSegments {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isConditionalLine = true;\n  }\n\n}\n\nfunction generateFaceNormals(faces) {\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const face = faces[i];\n    const vertices = face.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n\n    _tempVec0.subVectors(v1, v0);\n\n    _tempVec1.subVectors(v2, v1);\n\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\n\nconst _ray = /* @__PURE__ */new Ray();\n\nfunction smoothNormals(faces, lineSegments, checkSubSegments = false) {\n  const hashMultiplier = (1 + 1e-10) * 100;\n\n  function hashVertex(v) {\n    const x = ~~(v.x * hashMultiplier);\n    const y = ~~(v.y * hashMultiplier);\n    const z = ~~(v.z * hashMultiplier);\n    return `${x},${y},${z}`;\n  }\n\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  }\n\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    const scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n\n  const hardEdges = /* @__PURE__ */new Set();\n  const hardEdgeRays = /* @__PURE__ */new Map();\n  const halfEdgeList = {};\n  const normals = [];\n\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const vertices = ls.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0));\n\n    if (checkSubSegments) {\n      const ray = toNormalizedRay(v0, v1, new Ray());\n      const rh1 = hashRay(ray);\n\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        const rh2 = hashRay(ray);\n        const info2 = {\n          ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, info2);\n        hardEdgeRays.set(rh2, info2);\n      }\n\n      const info = hardEdgeRays.get(rh1);\n      let d0 = info.ray.direction.dot(v0);\n      let d1 = info.ray.direction.dot(v1);\n\n      if (d0 > d1) {\n        ;\n        [d0, d1] = [d1, d0];\n      }\n\n      info.distances.push(d0, d1);\n    }\n  }\n\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const tri = faces[i];\n    const vertices = tri.vertices;\n    const vertCount = vertices.length;\n\n    for (let i2 = 0; i2 < vertCount; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % vertCount;\n      const v0 = vertices[index];\n      const v1 = vertices[next];\n      const hash = hashEdge(v0, v1);\n\n      if (hardEdges.has(hash)) {\n        continue;\n      }\n\n      if (checkSubSegments) {\n        toNormalizedRay(v0, v1, _ray);\n        const rayHash = hashRay(_ray);\n\n        if (hardEdgeRays.has(rayHash)) {\n          const info2 = hardEdgeRays.get(rayHash);\n          const {\n            ray,\n            distances\n          } = info2;\n          let d0 = ray.direction.dot(v0);\n          let d1 = ray.direction.dot(v1);\n\n          if (d0 > d1) {\n            ;\n            [d0, d1] = [d1, d0];\n          }\n\n          let found = false;\n\n          for (let i3 = 0, l2 = distances.length; i3 < l2; i3 += 2) {\n            if (d0 >= distances[i3] && d1 <= distances[i3 + 1]) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            continue;\n          }\n        }\n      }\n\n      const info = {\n        index,\n        tri\n      };\n      halfEdgeList[hash] = info;\n    }\n  }\n\n  while (true) {\n    let halfEdge = null;\n\n    for (const key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n\n    if (halfEdge === null) {\n      break;\n    }\n\n    const queue = [halfEdge];\n\n    while (queue.length > 0) {\n      const tri = queue.pop().tri;\n      const vertices = tri.vertices;\n      const vertNormals = tri.normals;\n      const faceNormal = tri.faceNormal;\n      const vertCount = vertices.length;\n\n      for (let i2 = 0; i2 < vertCount; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % vertCount;\n        const v0 = vertices[index];\n        const v1 = vertices[next];\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherInfo = halfEdgeList[reverseHash];\n\n        if (otherInfo) {\n          const otherTri = otherInfo.tri;\n          const otherIndex = otherInfo.index;\n          const otherNormals = otherTri.normals;\n          const otherVertCount = otherNormals.length;\n          const otherFaceNormal = otherTri.faceNormal;\n\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          }\n\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          }\n\n          const otherNext = (otherIndex + 1) % otherVertCount;\n\n          if (vertNormals[index] && otherNormals[otherNext] && vertNormals[index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[index].norm);\n            vertNormals[index].norm = otherNormals[otherNext].norm;\n          }\n\n          let sharedNormal1 = vertNormals[index] || otherNormals[otherNext];\n\n          if (sharedNormal1 === null) {\n            sharedNormal1 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal1.norm);\n          }\n\n          if (vertNormals[index] === null) {\n            vertNormals[index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          }\n\n          if (vertNormals[next] && otherNormals[otherIndex] && vertNormals[next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[next].norm);\n            vertNormals[next].norm = otherNormals[otherIndex].norm;\n          }\n\n          let sharedNormal2 = vertNormals[next] || otherNormals[otherIndex];\n\n          if (sharedNormal2 === null) {\n            sharedNormal2 = {\n              norm: new Vector3()\n            };\n            normals.push(sharedNormal2.norm);\n          }\n\n          if (vertNormals[next] === null) {\n            vertNormals[next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  }\n\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\n\nfunction isPartType(type) {\n  return type === \"Part\" || type === \"Unofficial_Part\";\n}\n\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === \"Subpart\";\n}\n\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = \" \";\n    this.lineNumber = lineNumber;\n  }\n\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar !== \" \" && this.currentChar !== \"\t\") {\n        return;\n      }\n\n      this.currentCharIndex++;\n    }\n  }\n\n  getToken() {\n    const pos0 = this.currentCharIndex++;\n\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n\n      if (this.currentChar === \" \" || this.currentChar === \"\t\") {\n        break;\n      }\n\n      this.currentCharIndex++;\n    }\n\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n\n  getVector() {\n    return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n  }\n\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? \" at line \" + this.lineNumber : \"\";\n  }\n\n}\n\nclass LDrawParsedCache {\n  constructor(loader) {\n    this.loader = loader;\n    this._cache = {};\n  }\n\n  cloneResult(original) {\n    const result = {};\n    result.faces = original.faces.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        normals: face.normals.map(() => null),\n        faceNormal: null\n      };\n    });\n    result.conditionalSegments = original.conditionalSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone()),\n        controlPoints: face.controlPoints.map(v => v.clone())\n      };\n    });\n    result.lineSegments = original.lineSegments.map(face => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map(v => v.clone())\n      };\n    });\n    result.type = original.type;\n    result.category = original.category;\n    result.keywords = original.keywords;\n    result.subobjects = original.subobjects;\n    result.totalFaces = original.totalFaces;\n    result.startingConstructionStep = original.startingConstructionStep;\n    result.materials = original.materials;\n    result.group = null;\n    return result;\n  }\n\n  async fetchData(fileName) {\n    let triedLowerCase = false;\n    let locationState = FILE_LOCATION_AS_IS;\n\n    while (locationState !== FILE_LOCATION_NOT_FOUND) {\n      let subobjectURL = fileName;\n\n      switch (locationState) {\n        case FILE_LOCATION_AS_IS:\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = \"parts/\" + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = \"p/\" + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = \"models/\" + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = fileName.substring(0, fileName.lastIndexOf(\"/\") + 1) + subobjectURL;\n          locationState = locationState + 1;\n          break;\n\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (triedLowerCase) {\n            locationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            fileName = fileName.toLowerCase();\n            subobjectURL = fileName;\n            triedLowerCase = true;\n            locationState = FILE_LOCATION_AS_IS;\n          }\n\n          break;\n      }\n\n      const loader = this.loader;\n      const fileLoader = new FileLoader(loader.manager);\n      fileLoader.setPath(loader.partsLibraryPath);\n      fileLoader.setRequestHeader(loader.requestHeader);\n      fileLoader.setWithCredentials(loader.withCredentials);\n\n      try {\n        const text = await fileLoader.loadAsync(subobjectURL);\n        return text;\n      } catch (e) {\n        continue;\n      }\n    }\n\n    throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n  }\n\n  parse(text, fileName = null) {\n    const loader = this.loader;\n    const faces = [];\n    const lineSegments = [];\n    const conditionalSegments = [];\n    const subobjects = [];\n    const materials = {};\n\n    const getLocalMaterial = colorCode => {\n      return materials[colorCode] || null;\n    };\n\n    let type = \"Model\";\n    let category = null;\n    let keywords = null;\n    let totalFaces = 0;\n\n    if (text.indexOf(\"\\r\\n\") !== -1) {\n      text = text.replace(/\\r\\n/g, \"\\n\");\n    }\n\n    const lines = text.split(\"\\n\");\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let startingConstructionStep = false;\n\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0) continue;\n\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith(\"0 FILE \")) {\n          this.setData(currentEmbeddedFileName, currentEmbeddedText);\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = \"\";\n        } else {\n          currentEmbeddedText += line + \"\\n\";\n        }\n\n        continue;\n      }\n\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n\n      if (lp.isAtTheEnd()) {\n        continue;\n      }\n\n      const lineType = lp.getToken();\n      let material;\n      let colorCode;\n      let segment;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, c0, c1;\n\n      switch (lineType) {\n        case \"0\":\n          const meta = lp.getToken();\n\n          if (meta) {\n            switch (meta) {\n              case \"!LDRAW_ORG\":\n                type = lp.getToken();\n                break;\n\n              case \"!COLOUR\":\n                material = loader.parseColorMetaDirective(lp);\n\n                if (material) {\n                  materials[material.userData.code] = material;\n                } else {\n                  console.warn(\"LDrawLoader: Error parsing material\" + lp.getLineNumberString());\n                }\n\n                break;\n\n              case \"!CATEGORY\":\n                category = lp.getToken();\n                break;\n\n              case \"!KEYWORDS\":\n                const newKeywords = lp.getRemainingString().split(\",\");\n\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n\n                  newKeywords.forEach(function (keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n\n                break;\n\n              case \"FILE\":\n                if (lineIndex > 0) {\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = \"\";\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n\n                break;\n\n              case \"BFC\":\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n\n                  switch (token) {\n                    case \"CERTIFY\":\n                    case \"NOCERTIFY\":\n                      bfcCertified = token === \"CERTIFY\";\n                      bfcCCW = true;\n                      break;\n\n                    case \"CW\":\n                    case \"CCW\":\n                      bfcCCW = token === \"CCW\";\n                      break;\n\n                    case \"INVERTNEXT\":\n                      bfcInverted = true;\n                      break;\n\n                    case \"CLIP\":\n                    case \"NOCLIP\":\n                      bfcCull = token === \"CLIP\";\n                      break;\n\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n\n                break;\n\n              case \"STEP\":\n                startingConstructionStep = true;\n                break;\n\n              default:\n                break;\n            }\n          }\n\n          break;\n\n        case \"1\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName2 = lp.getRemainingString().trim().replace(/\\\\/g, \"/\");\n\n          if (loader.fileMap[fileName2]) {\n            fileName2 = loader.fileMap[fileName2];\n          } else {\n            if (fileName2.startsWith(\"s/\")) {\n              fileName2 = \"parts/\" + fileName2;\n            } else if (fileName2.startsWith(\"48/\")) {\n              fileName2 = \"p/\" + fileName2;\n            }\n          }\n\n          subobjects.push({\n            material,\n            colorCode,\n            matrix,\n            fileName: fileName2,\n            inverted: bfcInverted,\n            startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n\n        case \"2\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          segment = {\n            material,\n            colorCode,\n            vertices: [v0, v1]\n          };\n          lineSegments.push(segment);\n          break;\n\n        case \"5\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          c0 = lp.getVector();\n          c1 = lp.getVector();\n          segment = {\n            material,\n            colorCode,\n            vertices: [v0, v1],\n            controlPoints: [c0, c1]\n          };\n          conditionalSegments.push(segment);\n          break;\n\n        case \"3\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n          } else {\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n\n          faces.push({\n            material,\n            colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2],\n            normals: [null, null, null]\n          });\n          totalFaces++;\n\n          if (doubleSided === true) {\n            faces.push({\n              material,\n              colorCode,\n              faceNormal: null,\n              vertices: [v2, v1, v0],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n          }\n\n          break;\n\n        case \"4\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n            v3 = lp.getVector();\n          } else {\n            v3 = lp.getVector();\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n\n          faces.push({\n            material,\n            colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2, v3],\n            normals: [null, null, null, null]\n          });\n          totalFaces += 2;\n\n          if (doubleSided === true) {\n            faces.push({\n              material,\n              colorCode,\n              faceNormal: null,\n              vertices: [v3, v2, v1, v0],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n          }\n\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + \".\");\n      }\n    }\n\n    if (parsingEmbeddedFiles) {\n      this.setData(currentEmbeddedFileName, currentEmbeddedText);\n    }\n\n    return {\n      faces,\n      conditionalSegments,\n      lineSegments,\n      type,\n      category,\n      keywords,\n      subobjects,\n      totalFaces,\n      startingConstructionStep,\n      materials,\n      fileName,\n      group: null\n    };\n  } // returns an (optionally cloned) instance of the data\n\n\n  getData(fileName, clone = true) {\n    const key = fileName.toLowerCase();\n    const result = this._cache[key];\n\n    if (result === null || result instanceof Promise) {\n      return null;\n    }\n\n    if (clone) {\n      return this.cloneResult(result);\n    } else {\n      return result;\n    }\n  } // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n  // the data is ready to use and can be retrieved synchronously with \"getData\".\n\n\n  async ensureDataLoaded(fileName) {\n    const key = fileName.toLowerCase();\n\n    if (!(key in this._cache)) {\n      this._cache[key] = this.fetchData(fileName).then(text => {\n        const info = this.parse(text, fileName);\n        this._cache[key] = info;\n        return info;\n      });\n    }\n\n    await this._cache[key];\n  } // sets the data in the cache from parsed data\n\n\n  setData(fileName, text) {\n    const key = fileName.toLowerCase();\n    this._cache[key] = this.parse(text, fileName);\n  }\n\n}\n\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n\n  return materialHierarchy[colorCode] || null;\n}\n\nclass LDrawPartsGeometryCache {\n  constructor(loader) {\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  } // Convert the given file information into a mesh by processing subobjects.\n\n\n  async processIntoMesh(info) {\n    const loader = this.loader;\n    const parseCache = this.parseCache;\n    const faceMaterials = /* @__PURE__ */new Set();\n\n    const processInfoSubobjects = async (info2, subobject = null) => {\n      const subobjects = info2.subobjects;\n      const promises = [];\n\n      for (let i = 0, l = subobjects.length; i < l; i++) {\n        const subobject2 = subobjects[i];\n        const promise = parseCache.ensureDataLoaded(subobject2.fileName).then(() => {\n          const subobjectInfo = parseCache.getData(subobject2.fileName, false);\n\n          if (!isPrimitiveType(subobjectInfo.type)) {\n            return this.loadModel(subobject2.fileName).catch(error => {\n              console.warn(error);\n              return null;\n            });\n          }\n\n          return processInfoSubobjects(parseCache.getData(subobject2.fileName), subobject2);\n        });\n        promises.push(promise);\n      }\n\n      const group2 = new Group();\n      group2.userData.category = info2.category;\n      group2.userData.keywords = info2.keywords;\n      info2.group = group2;\n      const subobjectInfos = await Promise.all(promises);\n\n      for (let i = 0, l = subobjectInfos.length; i < l; i++) {\n        const subobject2 = info2.subobjects[i];\n        const subobjectInfo = subobjectInfos[i];\n\n        if (subobjectInfo === null) {\n          continue;\n        }\n\n        if (subobjectInfo.isGroup) {\n          const subobjectGroup = subobjectInfo;\n          subobject2.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n          subobjectGroup.userData.startingConstructionStep = subobject2.startingConstructionStep;\n          subobjectGroup.name = subobject2.fileName;\n          loader.applyMaterialsToMesh(subobjectGroup, subobject2.colorCode, info2.materials);\n          group2.add(subobjectGroup);\n          continue;\n        }\n\n        if (subobjectInfo.group.children.length) {\n          group2.add(subobjectInfo.group);\n        }\n\n        const parentLineSegments = info2.lineSegments;\n        const parentConditionalSegments = info2.conditionalSegments;\n        const parentFaces = info2.faces;\n        const lineSegments = subobjectInfo.lineSegments;\n        const conditionalSegments = subobjectInfo.conditionalSegments;\n        const faces = subobjectInfo.faces;\n        const matrix = subobject2.matrix;\n        const inverted = subobject2.inverted;\n        const matrixScaleInverted = matrix.determinant() < 0;\n        const colorCode = subobject2.colorCode;\n        const lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\n        for (let i2 = 0, l2 = lineSegments.length; i2 < l2; i2++) {\n          const ls = lineSegments[i2];\n          const vertices = ls.vertices;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n          ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info2.materials, true);\n          parentLineSegments.push(ls);\n        }\n\n        for (let i2 = 0, l2 = conditionalSegments.length; i2 < l2; i2++) {\n          const os = conditionalSegments[i2];\n          const vertices = os.vertices;\n          const controlPoints = os.controlPoints;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          controlPoints[0].applyMatrix4(matrix);\n          controlPoints[1].applyMatrix4(matrix);\n          os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n          os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info2.materials, true);\n          parentConditionalSegments.push(os);\n        }\n\n        for (let i2 = 0, l2 = faces.length; i2 < l2; i2++) {\n          const tri = faces[i2];\n          const vertices = tri.vertices;\n\n          for (let i3 = 0, l3 = vertices.length; i3 < l3; i3++) {\n            vertices[i3].applyMatrix4(matrix);\n          }\n\n          tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n          tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info2.materials, false);\n          faceMaterials.add(tri.colorCode);\n\n          if (matrixScaleInverted !== inverted) {\n            vertices.reverse();\n          }\n\n          parentFaces.push(tri);\n        }\n\n        info2.totalFaces += subobjectInfo.totalFaces;\n      }\n\n      if (subobject) {\n        loader.applyMaterialsToMesh(group2, subobject.colorCode, info2.materials);\n      }\n\n      return info2;\n    };\n\n    for (let i = 0, l = info.faces; i < l; i++) {\n      faceMaterials.add(info.faces[i].colorCode);\n    }\n\n    await processInfoSubobjects(info);\n\n    if (loader.smoothNormals) {\n      const checkSubSegments = faceMaterials.size > 1;\n      generateFaceNormals(info.faces);\n      smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n    }\n\n    const group = info.group;\n\n    if (info.faces.length > 0) {\n      group.add(createObject(info.faces, 3, false, info.totalFaces));\n    }\n\n    if (info.lineSegments.length > 0) {\n      group.add(createObject(info.lineSegments, 2));\n    }\n\n    if (info.conditionalSegments.length > 0) {\n      group.add(createObject(info.conditionalSegments, 2, true));\n    }\n\n    return group;\n  }\n\n  hasCachedModel(fileName) {\n    return fileName !== null && fileName.toLowerCase() in this._cache;\n  }\n\n  async getCachedModel(fileName) {\n    if (fileName !== null && this.hasCachedModel(fileName)) {\n      const key = fileName.toLowerCase();\n      const group = await this._cache[key];\n      return group.clone();\n    } else {\n      return null;\n    }\n  } // Loads and parses the model with the given file name. Returns a cached copy if available.\n\n\n  async loadModel(fileName) {\n    const parseCache = this.parseCache;\n    const key = fileName.toLowerCase();\n\n    if (this.hasCachedModel(fileName)) {\n      return this.getCachedModel(fileName);\n    } else {\n      await parseCache.ensureDataLoaded(fileName);\n      const info = parseCache.getData(fileName);\n      const promise = this.processIntoMesh(info);\n\n      if (this.hasCachedModel(fileName)) {\n        return this.getCachedModel(fileName);\n      }\n\n      if (isPartType(info.type)) {\n        this._cache[key] = promise;\n      }\n\n      const group = await promise;\n      return group.clone();\n    }\n  } // parses the given model text into a renderable object. Returns cached copy if available.\n\n\n  async parseModel(text) {\n    const parseCache = this.parseCache;\n    const info = parseCache.parse(text);\n\n    if (isPartType(info.type) && this.hasCachedModel(info.fileName)) {\n      return this.getCachedModel(info.fileName);\n    }\n\n    return this.processIntoMesh(info);\n  }\n\n}\n\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n\n  return 1;\n}\n\nfunction createObject(elements, elementSize, isConditionalSegments = false, totalElements = null) {\n  elements.sort(sortByMaterial);\n\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n\n  const positions = new Float32Array(elementSize * totalElements * 3);\n  const normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  const materials = [];\n  const quadArray = new Array(6);\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n  let offset = 0;\n\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    let vertices = elem.vertices;\n\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n\n    for (let j = 0, l = vertices.length; j < l; j++) {\n      const v = vertices[j];\n      const index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    }\n\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        const v0 = vertices[0];\n        const v1 = vertices[1];\n        const v2 = vertices[2];\n\n        _tempVec0.subVectors(v1, v0);\n\n        _tempVec1.subVectors(v2, v1);\n\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n\n      let elemNormals = elem.normals;\n\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n\n      for (let j = 0, l = elemNormals.length; j < l; j++) {\n        let n = elem.faceNormal;\n\n        if (elemNormals[j]) {\n          n = elemNormals[j].norm;\n        }\n\n        const index = offset + j * 3;\n        normals[index + 0] = n.x;\n        normals[index + 1] = n.y;\n        normals[index + 2] = n.z;\n      }\n    }\n\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n\n      const material = elem.material;\n\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        materials.push(elem.colorCode);\n      }\n\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n\n    offset += 3 * vertices.length;\n  }\n\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n\n  bufferGeometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n\n  if (normals !== null) {\n    bufferGeometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n  }\n\n  let object3d = null;\n\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const vertices = os.vertices;\n      const controlPoints = os.controlPoints;\n      const c0 = controlPoints[0];\n      const c1 = controlPoints[1];\n      const v0 = vertices[0];\n      const v1 = vertices[1];\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n\n    bufferGeometry.setAttribute(\"control0\", new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute(\"control1\", new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute(\"direction\", new BufferAttribute(directionArray, 3, false));\n  }\n\n  return object3d;\n}\n\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = [];\n    this.materialLibrary = {};\n    this.partsCache = new LDrawPartsGeometryCache(this);\n    this.fileMap = {};\n    this.setMaterials([]);\n    this.smoothNormals = true;\n    this.partsLibraryPath = \"\";\n  }\n\n  setPartsLibraryPath(path) {\n    this.partsLibraryPath = path;\n    return this;\n  }\n\n  async preloadMaterials(url) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    const text = await fileLoader.loadAsync(url);\n    const colorLineRegex = /^0 !COLOUR/;\n    const lines = text.split(/[\\n\\r]/g);\n    const materials = [];\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n\n      if (colorLineRegex.test(line)) {\n        const directive = line.replace(colorLineRegex, \"\");\n        const material = this.parseColorMetaDirective(new LineParser(directive));\n        materials.push(material);\n      }\n    }\n\n    this.setMaterials(materials);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(url, text => {\n      this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n        this.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, this.materialLibrary, true);\n        this.computeConstructionSteps(group);\n        onLoad(group);\n      }).catch(onError);\n    }, onProgress, onError);\n  }\n\n  parse(text, onLoad) {\n    this.partsCache.parseModel(text, this.materialLibrary).then(group => {\n      this.computeConstructionSteps(group);\n      onLoad(group);\n    });\n  }\n\n  setMaterials(materials) {\n    this.materialLibrary = {};\n    this.materials = [];\n\n    for (let i = 0, l = materials.length; i < l; i++) {\n      this.addMaterial(materials[i]);\n    }\n\n    this.addMaterial(this.parseColorMetaDirective(new LineParser(\"Main_Colour CODE 16 VALUE #FF8080 EDGE #333333\")));\n    this.addMaterial(this.parseColorMetaDirective(new LineParser(\"Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333\")));\n    return this;\n  }\n\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n\n  addMaterial(material) {\n    const matLib = this.materialLibrary;\n\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n      matLib[material.userData.code] = material;\n    }\n\n    return this;\n  }\n\n  getMaterial(colorCode) {\n    if (colorCode.startsWith(\"0x2\")) {\n      const color = colorCode.substring(3);\n      return this.parseColorMetaDirective(new LineParser(\"Direct_Color_\" + color + \" CODE -1 VALUE #\" + color + \" EDGE #\" + color));\n    }\n\n    return this.materialLibrary[colorCode] || null;\n  } // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n  // in the material array if they need to be filled in.\n\n\n  applyMaterialsToMesh(group, parentColorCode, materialHierarchy, finalMaterialPass = false) {\n    const loader = this;\n    const parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n    group.traverse(c => {\n      if (c.isMesh || c.isLineSegments) {\n        if (Array.isArray(c.material)) {\n          for (let i = 0, l = c.material.length; i < l; i++) {\n            if (!c.material[i].isMaterial) {\n              c.material[i] = getMaterial(c, c.material[i]);\n            }\n          }\n        } else if (!c.material.isMaterial) {\n          c.material = getMaterial(c, c.material);\n        }\n      }\n    });\n\n    function getMaterial(c, colorCode) {\n      if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n        return colorCode;\n      }\n\n      const forEdge = c.isLineSegments || c.isConditionalLine;\n      const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\n      if (isPassthrough) {\n        colorCode = parentColorCode;\n      }\n\n      let material = null;\n\n      if (colorCode in materialHierarchy) {\n        material = materialHierarchy[colorCode];\n      } else if (finalMaterialPass) {\n        material = loader.getMaterial(colorCode);\n\n        if (material === null) {\n          throw new Error(`LDrawLoader: Material properties for code ${colorCode} not available.`);\n        }\n      } else {\n        return colorCode;\n      }\n\n      if (c.isLineSegments) {\n        material = material.userData.edgeMaterial;\n\n        if (c.isConditionalLine) {\n          material = material.userData.conditionalEdgeMaterial;\n        }\n      }\n\n      return material;\n    }\n  }\n\n  getMainMaterial() {\n    return this.getMaterial(MAIN_COLOUR_CODE);\n  }\n\n  getMainEdgeMaterial() {\n    return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n  }\n\n  parseColorMetaDirective(lineParser) {\n    let code = null;\n    let color = 16711935;\n    let edgeColor = 16711935;\n    let alpha = 1;\n    let isTransparent = false;\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n\n    if (!name) {\n      throw new Error('LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + \".\");\n    }\n\n    let token = null;\n\n    while (true) {\n      token = lineParser.getToken();\n\n      if (!token) {\n        break;\n      }\n\n      switch (token.toUpperCase()) {\n        case \"CODE\":\n          code = lineParser.getToken();\n          break;\n\n        case \"VALUE\":\n          color = lineParser.getToken();\n\n          if (color.startsWith(\"0x\")) {\n            color = \"#\" + color.substring(2);\n          } else if (!color.startsWith(\"#\")) {\n            throw new Error(\"LDrawLoader: Invalid color while parsing material\" + lineParser.getLineNumberString() + \".\");\n          }\n\n          break;\n\n        case \"EDGE\":\n          edgeColor = lineParser.getToken();\n\n          if (edgeColor.startsWith(\"0x\")) {\n            edgeColor = \"#\" + edgeColor.substring(2);\n          } else if (!edgeColor.startsWith(\"#\")) {\n            edgeMaterial = this.getMaterial(edgeColor);\n\n            if (!edgeMaterial) {\n              throw new Error(\"LDrawLoader: Invalid edge color while parsing material\" + lineParser.getLineNumberString() + \".\");\n            }\n\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n\n          break;\n\n        case \"ALPHA\":\n          alpha = parseInt(lineParser.getToken());\n\n          if (isNaN(alpha)) {\n            throw new Error(\"LDrawLoader: Invalid alpha value in material definition\" + lineParser.getLineNumberString() + \".\");\n          }\n\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n\n          break;\n\n        case \"LUMINANCE\":\n          luminance = parseInt(lineParser.getToken());\n\n          if (isNaN(luminance)) {\n            throw new Error(\"LDrawLoader: Invalid luminance value in material definition\" + LineParser.getLineNumberString() + \".\");\n          }\n\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n\n        case \"CHROME\":\n          finishType = FINISH_TYPE_CHROME;\n          break;\n\n        case \"PEARLESCENT\":\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n\n        case \"RUBBER\":\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n\n        case \"MATTE_METALLIC\":\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n\n        case \"METAL\":\n          finishType = FINISH_TYPE_METAL;\n          break;\n\n        case \"MATERIAL\":\n          lineParser.setToEnd();\n          break;\n\n        default:\n          throw new Error('LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + \".\");\n      }\n    }\n\n    let material = null;\n\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({\n          color,\n          roughness: 0.3,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_PEARLESCENT:\n        material = new MeshStandardMaterial({\n          color,\n          roughness: 0.3,\n          metalness: 0.25\n        });\n        break;\n\n      case FINISH_TYPE_CHROME:\n        material = new MeshStandardMaterial({\n          color,\n          roughness: 0,\n          metalness: 1\n        });\n        break;\n\n      case FINISH_TYPE_RUBBER:\n        material = new MeshStandardMaterial({\n          color,\n          roughness: 0.9,\n          metalness: 0\n        });\n        break;\n\n      case FINISH_TYPE_MATTE_METALLIC:\n        material = new MeshStandardMaterial({\n          color,\n          roughness: 0.8,\n          metalness: 0.4\n        });\n        break;\n\n      case FINISH_TYPE_METAL:\n        material = new MeshStandardMaterial({\n          color,\n          roughness: 0.2,\n          metalness: 0.85\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n\n    if (!edgeMaterial) {\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColor,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + \" - Edge\";\n      edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent,\n        color: edgeColor,\n        opacity: alpha\n      });\n    }\n\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    this.addMaterial(material);\n    return material;\n  }\n\n  computeConstructionSteps(model) {\n    let stepNumber = 0;\n    model.traverse(c => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n\n}\n\nexport { LDrawLoader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/LDrawLoader.js"],"names":["Vector3","ShaderMaterial","UniformsUtils","UniformsLib","Color","LineSegments","Ray","FileLoader","Matrix4","Group","BufferGeometry","BufferAttribute","Mesh","Loader","MeshStandardMaterial","LineBasicMaterial","FINISH_TYPE_DEFAULT","FINISH_TYPE_CHROME","FINISH_TYPE_PEARLESCENT","FINISH_TYPE_RUBBER","FINISH_TYPE_MATTE_METALLIC","FINISH_TYPE_METAL","FILE_LOCATION_AS_IS","FILE_LOCATION_TRY_PARTS","FILE_LOCATION_TRY_P","FILE_LOCATION_TRY_MODELS","FILE_LOCATION_TRY_RELATIVE","FILE_LOCATION_TRY_ABSOLUTE","FILE_LOCATION_NOT_FOUND","MAIN_COLOUR_CODE","MAIN_EDGE_COLOUR_CODE","_tempVec0","_tempVec1","LDrawConditionalLineMaterial","constructor","parameters","uniforms","merge","fog","diffuse","value","opacity","vertexShader","fragmentShader","Object","defineProperties","get","set","color","setValues","isLDrawConditionalLineMaterial","ConditionalLineSegments","geometry","material","isConditionalLine","generateFaceNormals","faces","i","l","length","face","vertices","v0","v1","v2","subVectors","faceNormal","crossVectors","normalize","_ray","smoothNormals","lineSegments","checkSubSegments","hashMultiplier","hashVertex","v","x","y","z","hashEdge","toNormalizedRay","targetRay","direction","scalar","dot","origin","copy","addScaledVector","hashRay","ray","hardEdges","Set","hardEdgeRays","Map","halfEdgeList","normals","ls","add","rh1","has","rh2","info2","distances","info","d0","d1","push","tri","vertCount","i2","index","next","hash","rayHash","found","i3","l2","halfEdge","key","queue","pop","vertNormals","reverseHash","otherInfo","otherTri","otherIndex","otherNormals","otherVertCount","otherFaceNormal","Math","abs","otherNext","norm","sharedNormal1","sharedNormal2","isPartType","type","isPrimitiveType","test","LineParser","line","lineNumber","lineLength","currentCharIndex","currentChar","seekNonSpace","charAt","getToken","pos0","pos1","substring","getVector","parseFloat","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","LDrawParsedCache","loader","_cache","cloneResult","original","result","map","colorCode","clone","conditionalSegments","controlPoints","category","keywords","subobjects","totalFaces","startingConstructionStep","materials","group","fetchData","fileName","triedLowerCase","locationState","subobjectURL","lastIndexOf","toLowerCase","fileLoader","manager","setPath","partsLibraryPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","loadAsync","e","Error","parse","getLocalMaterial","indexOf","replace","lines","split","numLines","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","lineIndex","startsWith","setData","lp","lineType","segment","ccw","doubleSided","v3","c0","c1","meta","parseColorMetaDirective","userData","code","console","warn","newKeywords","forEach","keyword","trim","token","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","matrix","fileName2","fileMap","inverted","getData","Promise","ensureDataLoaded","then","getMaterialFromCode","parentColorCode","materialHierarchy","forEdge","isPassthrough","LDrawPartsGeometryCache","parseCache","processIntoMesh","faceMaterials","processInfoSubobjects","subobject","promises","subobject2","promise","subobjectInfo","loadModel","catch","error","group2","subobjectInfos","all","isGroup","subobjectGroup","decompose","position","quaternion","scale","name","applyMaterialsToMesh","children","parentLineSegments","parentConditionalSegments","parentFaces","matrixScaleInverted","determinant","lineColorCode","applyMatrix4","os","l3","reverse","size","createObject","hasCachedModel","getCachedModel","parseModel","sortByMaterial","a","b","elements","elementSize","isConditionalSegments","totalElements","sort","positions","Float32Array","quadArray","Array","bufferGeometry","prevMaterial","index0","numGroupVerts","offset","iElem","nElem","elem","j","elemNormals","n","addGroup","edgeMaterial","conditionalEdgeMaterial","Infinity","setAttribute","object3d","controlArray0","controlArray1","directionArray","LDrawLoader","materialLibrary","partsCache","setMaterials","setPartsLibraryPath","path","preloadMaterials","url","colorLineRegex","directive","load","onLoad","onProgress","onError","computeConstructionSteps","addMaterial","setFileMap","matLib","getMaterial","finalMaterialPass","parentIsPassthrough","traverse","c","isMesh","isLineSegments","isArray","isMaterial","getMainMaterial","getMainEdgeMaterial","lineParser","edgeColor","alpha","isTransparent","luminance","finishType","toUpperCase","parseInt","isNaN","max","min","roughness","metalness","transparent","premultipliedAlpha","depthWrite","polygonOffset","polygonOffsetFactor","emissive","multiplyScalar","model","stepNumber","constructionStep","numConstructionSteps"],"mappings":"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","sourcesContent":["import { Vector3, ShaderMaterial, UniformsUtils, UniformsLib, Color, LineSegments, Ray, FileLoader, Matrix4, Group, BufferGeometry, BufferAttribute, Mesh, Loader, MeshStandardMaterial, LineBasicMaterial } from \"three\";\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5;\nconst FILE_LOCATION_AS_IS = 0;\nconst FILE_LOCATION_TRY_PARTS = 1;\nconst FILE_LOCATION_TRY_P = 2;\nconst FILE_LOCATION_TRY_MODELS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\nconst MAIN_COLOUR_CODE = \"16\";\nconst MAIN_EDGE_COLOUR_CODE = \"24\";\nconst _tempVec0 = /* @__PURE__ */ new Vector3();\nconst _tempVec1 = /* @__PURE__ */ new Vector3();\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: UniformsUtils.merge([\n        UniformsLib.fog,\n        {\n          diffuse: {\n            value: new Color()\n          },\n          opacity: {\n            value: 1\n          }\n        }\n      ]),\n      vertexShader: (\n        /* glsl */\n        `\n        attribute vec3 control0;\n        attribute vec3 control1;\n        attribute vec3 direction;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_vertex>\n        #include <fog_pars_vertex>\n        #include <logdepthbuf_pars_vertex>\n        #include <clipping_planes_pars_vertex>\n\n        void main() {\n          #include <color_vertex>\n\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_Position = projectionMatrix * mvPosition;\n\n          // Transform the line segment ends and control points into camera clip space\n          vec4 c0 = projectionMatrix * modelViewMatrix * vec4(control0, 1.0);\n          vec4 c1 = projectionMatrix * modelViewMatrix * vec4(control1, 1.0);\n          vec4 p0 = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vec4 p1 = projectionMatrix * modelViewMatrix * vec4(position + direction, 1.0);\n\n          c0.xy /= c0.w;\n          c1.xy /= c1.w;\n          p0.xy /= p0.w;\n          p1.xy /= p1.w;\n\n          // Get the direction of the segment and an orthogonal vector\n          vec2 dir = p1.xy - p0.xy;\n          vec2 norm = vec2(-dir.y, dir.x);\n\n          // Get control point directions from the line\n          vec2 c0dir = c0.xy - p1.xy;\n          vec2 c1dir = c1.xy - p1.xy;\n\n          // If the vectors to the controls points are pointed in different directions away\n          // from the line segment then the line should not be drawn.\n          float d0 = dot(normalize(norm), normalize(c0dir));\n          float d1 = dot(normalize(norm), normalize(c1dir));\n          discardFlag = float(sign(d0) != sign(d1));\n\n          #include <logdepthbuf_vertex>\n          #include <clipping_planes_vertex>\n          #include <fog_vertex>\n        }\n      `\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n        uniform vec3 diffuse;\n        uniform float opacity;\n        varying float discardFlag;\n\n        #include <common>\n        #include <color_pars_fragment>\n        #include <fog_pars_fragment>\n        #include <logdepthbuf_pars_fragment>\n        #include <clipping_planes_pars_fragment>\n\n        void main() {\n          if (discardFlag > 0.5) discard;\n\n          #include <clipping_planes_fragment>\n          vec3 outgoingLight = vec3(0.0);\n          vec4 diffuseColor = vec4(diffuse, opacity);\n          #include <logdepthbuf_fragment>\n          #include <color_fragment>\n          outgoingLight = diffuseColor.rgb; // simple shader\n          gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n          #include <fog_fragment>\n          #include <premultiplied_alpha_fragment>\n        }\n      `\n      )\n    });\n    Object.defineProperties(this, {\n      opacity: {\n        get: function() {\n          return this.uniforms.opacity.value;\n        },\n        set: function(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      color: {\n        get: function() {\n          return this.uniforms.diffuse.value;\n        }\n      }\n    });\n    this.setValues(parameters);\n    this.isLDrawConditionalLineMaterial = true;\n  }\n}\nclass ConditionalLineSegments extends LineSegments {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isConditionalLine = true;\n  }\n}\nfunction generateFaceNormals(faces) {\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const face = faces[i];\n    const vertices = face.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    const v2 = vertices[2];\n    _tempVec0.subVectors(v1, v0);\n    _tempVec1.subVectors(v2, v1);\n    face.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n  }\n}\nconst _ray = /* @__PURE__ */ new Ray();\nfunction smoothNormals(faces, lineSegments, checkSubSegments = false) {\n  const hashMultiplier = (1 + 1e-10) * 100;\n  function hashVertex(v) {\n    const x = ~~(v.x * hashMultiplier);\n    const y = ~~(v.y * hashMultiplier);\n    const z = ~~(v.z * hashMultiplier);\n    return `${x},${y},${z}`;\n  }\n  function hashEdge(v0, v1) {\n    return `${hashVertex(v0)}_${hashVertex(v1)}`;\n  }\n  function toNormalizedRay(v0, v1, targetRay) {\n    targetRay.direction.subVectors(v1, v0).normalize();\n    const scalar = v0.dot(targetRay.direction);\n    targetRay.origin.copy(v0).addScaledVector(targetRay.direction, -scalar);\n    return targetRay;\n  }\n  function hashRay(ray) {\n    return hashEdge(ray.origin, ray.direction);\n  }\n  const hardEdges = /* @__PURE__ */ new Set();\n  const hardEdgeRays = /* @__PURE__ */ new Map();\n  const halfEdgeList = {};\n  const normals = [];\n  for (let i = 0, l = lineSegments.length; i < l; i++) {\n    const ls = lineSegments[i];\n    const vertices = ls.vertices;\n    const v0 = vertices[0];\n    const v1 = vertices[1];\n    hardEdges.add(hashEdge(v0, v1));\n    hardEdges.add(hashEdge(v1, v0));\n    if (checkSubSegments) {\n      const ray = toNormalizedRay(v0, v1, new Ray());\n      const rh1 = hashRay(ray);\n      if (!hardEdgeRays.has(rh1)) {\n        toNormalizedRay(v1, v0, ray);\n        const rh2 = hashRay(ray);\n        const info2 = {\n          ray,\n          distances: []\n        };\n        hardEdgeRays.set(rh1, info2);\n        hardEdgeRays.set(rh2, info2);\n      }\n      const info = hardEdgeRays.get(rh1);\n      let d0 = info.ray.direction.dot(v0);\n      let d1 = info.ray.direction.dot(v1);\n      if (d0 > d1) {\n        ;\n        [d0, d1] = [d1, d0];\n      }\n      info.distances.push(d0, d1);\n    }\n  }\n  for (let i = 0, l = faces.length; i < l; i++) {\n    const tri = faces[i];\n    const vertices = tri.vertices;\n    const vertCount = vertices.length;\n    for (let i2 = 0; i2 < vertCount; i2++) {\n      const index = i2;\n      const next = (i2 + 1) % vertCount;\n      const v0 = vertices[index];\n      const v1 = vertices[next];\n      const hash = hashEdge(v0, v1);\n      if (hardEdges.has(hash)) {\n        continue;\n      }\n      if (checkSubSegments) {\n        toNormalizedRay(v0, v1, _ray);\n        const rayHash = hashRay(_ray);\n        if (hardEdgeRays.has(rayHash)) {\n          const info2 = hardEdgeRays.get(rayHash);\n          const { ray, distances } = info2;\n          let d0 = ray.direction.dot(v0);\n          let d1 = ray.direction.dot(v1);\n          if (d0 > d1) {\n            ;\n            [d0, d1] = [d1, d0];\n          }\n          let found = false;\n          for (let i3 = 0, l2 = distances.length; i3 < l2; i3 += 2) {\n            if (d0 >= distances[i3] && d1 <= distances[i3 + 1]) {\n              found = true;\n              break;\n            }\n          }\n          if (found) {\n            continue;\n          }\n        }\n      }\n      const info = {\n        index,\n        tri\n      };\n      halfEdgeList[hash] = info;\n    }\n  }\n  while (true) {\n    let halfEdge = null;\n    for (const key in halfEdgeList) {\n      halfEdge = halfEdgeList[key];\n      break;\n    }\n    if (halfEdge === null) {\n      break;\n    }\n    const queue = [halfEdge];\n    while (queue.length > 0) {\n      const tri = queue.pop().tri;\n      const vertices = tri.vertices;\n      const vertNormals = tri.normals;\n      const faceNormal = tri.faceNormal;\n      const vertCount = vertices.length;\n      for (let i2 = 0; i2 < vertCount; i2++) {\n        const index = i2;\n        const next = (i2 + 1) % vertCount;\n        const v0 = vertices[index];\n        const v1 = vertices[next];\n        const hash = hashEdge(v0, v1);\n        delete halfEdgeList[hash];\n        const reverseHash = hashEdge(v1, v0);\n        const otherInfo = halfEdgeList[reverseHash];\n        if (otherInfo) {\n          const otherTri = otherInfo.tri;\n          const otherIndex = otherInfo.index;\n          const otherNormals = otherTri.normals;\n          const otherVertCount = otherNormals.length;\n          const otherFaceNormal = otherTri.faceNormal;\n          if (Math.abs(otherTri.faceNormal.dot(tri.faceNormal)) < 0.25) {\n            continue;\n          }\n          if (reverseHash in halfEdgeList) {\n            queue.push(otherInfo);\n            delete halfEdgeList[reverseHash];\n          }\n          const otherNext = (otherIndex + 1) % otherVertCount;\n          if (vertNormals[index] && otherNormals[otherNext] && vertNormals[index] !== otherNormals[otherNext]) {\n            otherNormals[otherNext].norm.add(vertNormals[index].norm);\n            vertNormals[index].norm = otherNormals[otherNext].norm;\n          }\n          let sharedNormal1 = vertNormals[index] || otherNormals[otherNext];\n          if (sharedNormal1 === null) {\n            sharedNormal1 = { norm: new Vector3() };\n            normals.push(sharedNormal1.norm);\n          }\n          if (vertNormals[index] === null) {\n            vertNormals[index] = sharedNormal1;\n            sharedNormal1.norm.add(faceNormal);\n          }\n          if (otherNormals[otherNext] === null) {\n            otherNormals[otherNext] = sharedNormal1;\n            sharedNormal1.norm.add(otherFaceNormal);\n          }\n          if (vertNormals[next] && otherNormals[otherIndex] && vertNormals[next] !== otherNormals[otherIndex]) {\n            otherNormals[otherIndex].norm.add(vertNormals[next].norm);\n            vertNormals[next].norm = otherNormals[otherIndex].norm;\n          }\n          let sharedNormal2 = vertNormals[next] || otherNormals[otherIndex];\n          if (sharedNormal2 === null) {\n            sharedNormal2 = { norm: new Vector3() };\n            normals.push(sharedNormal2.norm);\n          }\n          if (vertNormals[next] === null) {\n            vertNormals[next] = sharedNormal2;\n            sharedNormal2.norm.add(faceNormal);\n          }\n          if (otherNormals[otherIndex] === null) {\n            otherNormals[otherIndex] = sharedNormal2;\n            sharedNormal2.norm.add(otherFaceNormal);\n          }\n        }\n      }\n    }\n  }\n  for (let i = 0, l = normals.length; i < l; i++) {\n    normals[i].normalize();\n  }\n}\nfunction isPartType(type) {\n  return type === \"Part\" || type === \"Unofficial_Part\";\n}\nfunction isPrimitiveType(type) {\n  return /primitive/i.test(type) || type === \"Subpart\";\n}\nclass LineParser {\n  constructor(line, lineNumber) {\n    this.line = line;\n    this.lineLength = line.length;\n    this.currentCharIndex = 0;\n    this.currentChar = \" \";\n    this.lineNumber = lineNumber;\n  }\n  seekNonSpace() {\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n      if (this.currentChar !== \" \" && this.currentChar !== \"\t\") {\n        return;\n      }\n      this.currentCharIndex++;\n    }\n  }\n  getToken() {\n    const pos0 = this.currentCharIndex++;\n    while (this.currentCharIndex < this.lineLength) {\n      this.currentChar = this.line.charAt(this.currentCharIndex);\n      if (this.currentChar === \" \" || this.currentChar === \"\t\") {\n        break;\n      }\n      this.currentCharIndex++;\n    }\n    const pos1 = this.currentCharIndex;\n    this.seekNonSpace();\n    return this.line.substring(pos0, pos1);\n  }\n  getVector() {\n    return new Vector3(parseFloat(this.getToken()), parseFloat(this.getToken()), parseFloat(this.getToken()));\n  }\n  getRemainingString() {\n    return this.line.substring(this.currentCharIndex, this.lineLength);\n  }\n  isAtTheEnd() {\n    return this.currentCharIndex >= this.lineLength;\n  }\n  setToEnd() {\n    this.currentCharIndex = this.lineLength;\n  }\n  getLineNumberString() {\n    return this.lineNumber >= 0 ? \" at line \" + this.lineNumber : \"\";\n  }\n}\nclass LDrawParsedCache {\n  constructor(loader) {\n    this.loader = loader;\n    this._cache = {};\n  }\n  cloneResult(original) {\n    const result = {};\n    result.faces = original.faces.map((face) => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map((v) => v.clone()),\n        normals: face.normals.map(() => null),\n        faceNormal: null\n      };\n    });\n    result.conditionalSegments = original.conditionalSegments.map((face) => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map((v) => v.clone()),\n        controlPoints: face.controlPoints.map((v) => v.clone())\n      };\n    });\n    result.lineSegments = original.lineSegments.map((face) => {\n      return {\n        colorCode: face.colorCode,\n        material: face.material,\n        vertices: face.vertices.map((v) => v.clone())\n      };\n    });\n    result.type = original.type;\n    result.category = original.category;\n    result.keywords = original.keywords;\n    result.subobjects = original.subobjects;\n    result.totalFaces = original.totalFaces;\n    result.startingConstructionStep = original.startingConstructionStep;\n    result.materials = original.materials;\n    result.group = null;\n    return result;\n  }\n  async fetchData(fileName) {\n    let triedLowerCase = false;\n    let locationState = FILE_LOCATION_AS_IS;\n    while (locationState !== FILE_LOCATION_NOT_FOUND) {\n      let subobjectURL = fileName;\n      switch (locationState) {\n        case FILE_LOCATION_AS_IS:\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_PARTS:\n          subobjectURL = \"parts/\" + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_P:\n          subobjectURL = \"p/\" + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_MODELS:\n          subobjectURL = \"models/\" + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_RELATIVE:\n          subobjectURL = fileName.substring(0, fileName.lastIndexOf(\"/\") + 1) + subobjectURL;\n          locationState = locationState + 1;\n          break;\n        case FILE_LOCATION_TRY_ABSOLUTE:\n          if (triedLowerCase) {\n            locationState = FILE_LOCATION_NOT_FOUND;\n          } else {\n            fileName = fileName.toLowerCase();\n            subobjectURL = fileName;\n            triedLowerCase = true;\n            locationState = FILE_LOCATION_AS_IS;\n          }\n          break;\n      }\n      const loader = this.loader;\n      const fileLoader = new FileLoader(loader.manager);\n      fileLoader.setPath(loader.partsLibraryPath);\n      fileLoader.setRequestHeader(loader.requestHeader);\n      fileLoader.setWithCredentials(loader.withCredentials);\n      try {\n        const text = await fileLoader.loadAsync(subobjectURL);\n        return text;\n      } catch (e) {\n        continue;\n      }\n    }\n    throw new Error('LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.');\n  }\n  parse(text, fileName = null) {\n    const loader = this.loader;\n    const faces = [];\n    const lineSegments = [];\n    const conditionalSegments = [];\n    const subobjects = [];\n    const materials = {};\n    const getLocalMaterial = (colorCode) => {\n      return materials[colorCode] || null;\n    };\n    let type = \"Model\";\n    let category = null;\n    let keywords = null;\n    let totalFaces = 0;\n    if (text.indexOf(\"\\r\\n\") !== -1) {\n      text = text.replace(/\\r\\n/g, \"\\n\");\n    }\n    const lines = text.split(\"\\n\");\n    const numLines = lines.length;\n    let parsingEmbeddedFiles = false;\n    let currentEmbeddedFileName = null;\n    let currentEmbeddedText = null;\n    let bfcCertified = false;\n    let bfcCCW = true;\n    let bfcInverted = false;\n    let bfcCull = true;\n    let startingConstructionStep = false;\n    for (let lineIndex = 0; lineIndex < numLines; lineIndex++) {\n      const line = lines[lineIndex];\n      if (line.length === 0)\n        continue;\n      if (parsingEmbeddedFiles) {\n        if (line.startsWith(\"0 FILE \")) {\n          this.setData(currentEmbeddedFileName, currentEmbeddedText);\n          currentEmbeddedFileName = line.substring(7);\n          currentEmbeddedText = \"\";\n        } else {\n          currentEmbeddedText += line + \"\\n\";\n        }\n        continue;\n      }\n      const lp = new LineParser(line, lineIndex + 1);\n      lp.seekNonSpace();\n      if (lp.isAtTheEnd()) {\n        continue;\n      }\n      const lineType = lp.getToken();\n      let material;\n      let colorCode;\n      let segment;\n      let ccw;\n      let doubleSided;\n      let v0, v1, v2, v3, c0, c1;\n      switch (lineType) {\n        case \"0\":\n          const meta = lp.getToken();\n          if (meta) {\n            switch (meta) {\n              case \"!LDRAW_ORG\":\n                type = lp.getToken();\n                break;\n              case \"!COLOUR\":\n                material = loader.parseColorMetaDirective(lp);\n                if (material) {\n                  materials[material.userData.code] = material;\n                } else {\n                  console.warn(\"LDrawLoader: Error parsing material\" + lp.getLineNumberString());\n                }\n                break;\n              case \"!CATEGORY\":\n                category = lp.getToken();\n                break;\n              case \"!KEYWORDS\":\n                const newKeywords = lp.getRemainingString().split(\",\");\n                if (newKeywords.length > 0) {\n                  if (!keywords) {\n                    keywords = [];\n                  }\n                  newKeywords.forEach(function(keyword) {\n                    keywords.push(keyword.trim());\n                  });\n                }\n                break;\n              case \"FILE\":\n                if (lineIndex > 0) {\n                  parsingEmbeddedFiles = true;\n                  currentEmbeddedFileName = lp.getRemainingString();\n                  currentEmbeddedText = \"\";\n                  bfcCertified = false;\n                  bfcCCW = true;\n                }\n                break;\n              case \"BFC\":\n                while (!lp.isAtTheEnd()) {\n                  const token = lp.getToken();\n                  switch (token) {\n                    case \"CERTIFY\":\n                    case \"NOCERTIFY\":\n                      bfcCertified = token === \"CERTIFY\";\n                      bfcCCW = true;\n                      break;\n                    case \"CW\":\n                    case \"CCW\":\n                      bfcCCW = token === \"CCW\";\n                      break;\n                    case \"INVERTNEXT\":\n                      bfcInverted = true;\n                      break;\n                    case \"CLIP\":\n                    case \"NOCLIP\":\n                      bfcCull = token === \"CLIP\";\n                      break;\n                    default:\n                      console.warn('THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.');\n                      break;\n                  }\n                }\n                break;\n              case \"STEP\":\n                startingConstructionStep = true;\n                break;\n              default:\n                break;\n            }\n          }\n          break;\n        case \"1\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          const posX = parseFloat(lp.getToken());\n          const posY = parseFloat(lp.getToken());\n          const posZ = parseFloat(lp.getToken());\n          const m0 = parseFloat(lp.getToken());\n          const m1 = parseFloat(lp.getToken());\n          const m2 = parseFloat(lp.getToken());\n          const m3 = parseFloat(lp.getToken());\n          const m4 = parseFloat(lp.getToken());\n          const m5 = parseFloat(lp.getToken());\n          const m6 = parseFloat(lp.getToken());\n          const m7 = parseFloat(lp.getToken());\n          const m8 = parseFloat(lp.getToken());\n          const matrix = new Matrix4().set(m0, m1, m2, posX, m3, m4, m5, posY, m6, m7, m8, posZ, 0, 0, 0, 1);\n          let fileName2 = lp.getRemainingString().trim().replace(/\\\\/g, \"/\");\n          if (loader.fileMap[fileName2]) {\n            fileName2 = loader.fileMap[fileName2];\n          } else {\n            if (fileName2.startsWith(\"s/\")) {\n              fileName2 = \"parts/\" + fileName2;\n            } else if (fileName2.startsWith(\"48/\")) {\n              fileName2 = \"p/\" + fileName2;\n            }\n          }\n          subobjects.push({\n            material,\n            colorCode,\n            matrix,\n            fileName: fileName2,\n            inverted: bfcInverted,\n            startingConstructionStep\n          });\n          bfcInverted = false;\n          break;\n        case \"2\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          segment = {\n            material,\n            colorCode,\n            vertices: [v0, v1]\n          };\n          lineSegments.push(segment);\n          break;\n        case \"5\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          v0 = lp.getVector();\n          v1 = lp.getVector();\n          c0 = lp.getVector();\n          c1 = lp.getVector();\n          segment = {\n            material,\n            colorCode,\n            vertices: [v0, v1],\n            controlPoints: [c0, c1]\n          };\n          conditionalSegments.push(segment);\n          break;\n        case \"3\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n          } else {\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n          faces.push({\n            material,\n            colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2],\n            normals: [null, null, null]\n          });\n          totalFaces++;\n          if (doubleSided === true) {\n            faces.push({\n              material,\n              colorCode,\n              faceNormal: null,\n              vertices: [v2, v1, v0],\n              normals: [null, null, null]\n            });\n            totalFaces++;\n          }\n          break;\n        case \"4\":\n          colorCode = lp.getToken();\n          material = getLocalMaterial(colorCode);\n          ccw = bfcCCW;\n          doubleSided = !bfcCertified || !bfcCull;\n          if (ccw === true) {\n            v0 = lp.getVector();\n            v1 = lp.getVector();\n            v2 = lp.getVector();\n            v3 = lp.getVector();\n          } else {\n            v3 = lp.getVector();\n            v2 = lp.getVector();\n            v1 = lp.getVector();\n            v0 = lp.getVector();\n          }\n          faces.push({\n            material,\n            colorCode,\n            faceNormal: null,\n            vertices: [v0, v1, v2, v3],\n            normals: [null, null, null, null]\n          });\n          totalFaces += 2;\n          if (doubleSided === true) {\n            faces.push({\n              material,\n              colorCode,\n              faceNormal: null,\n              vertices: [v3, v2, v1, v0],\n              normals: [null, null, null, null]\n            });\n            totalFaces += 2;\n          }\n          break;\n        default:\n          throw new Error('LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + \".\");\n      }\n    }\n    if (parsingEmbeddedFiles) {\n      this.setData(currentEmbeddedFileName, currentEmbeddedText);\n    }\n    return {\n      faces,\n      conditionalSegments,\n      lineSegments,\n      type,\n      category,\n      keywords,\n      subobjects,\n      totalFaces,\n      startingConstructionStep,\n      materials,\n      fileName,\n      group: null\n    };\n  }\n  // returns an (optionally cloned) instance of the data\n  getData(fileName, clone = true) {\n    const key = fileName.toLowerCase();\n    const result = this._cache[key];\n    if (result === null || result instanceof Promise) {\n      return null;\n    }\n    if (clone) {\n      return this.cloneResult(result);\n    } else {\n      return result;\n    }\n  }\n  // kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n  // the data is ready to use and can be retrieved synchronously with \"getData\".\n  async ensureDataLoaded(fileName) {\n    const key = fileName.toLowerCase();\n    if (!(key in this._cache)) {\n      this._cache[key] = this.fetchData(fileName).then((text) => {\n        const info = this.parse(text, fileName);\n        this._cache[key] = info;\n        return info;\n      });\n    }\n    await this._cache[key];\n  }\n  // sets the data in the cache from parsed data\n  setData(fileName, text) {\n    const key = fileName.toLowerCase();\n    this._cache[key] = this.parse(text, fileName);\n  }\n}\nfunction getMaterialFromCode(colorCode, parentColorCode, materialHierarchy, forEdge) {\n  const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n  if (isPassthrough) {\n    colorCode = parentColorCode;\n  }\n  return materialHierarchy[colorCode] || null;\n}\nclass LDrawPartsGeometryCache {\n  constructor(loader) {\n    this.loader = loader;\n    this.parseCache = new LDrawParsedCache(loader);\n    this._cache = {};\n  }\n  // Convert the given file information into a mesh by processing subobjects.\n  async processIntoMesh(info) {\n    const loader = this.loader;\n    const parseCache = this.parseCache;\n    const faceMaterials = /* @__PURE__ */ new Set();\n    const processInfoSubobjects = async (info2, subobject = null) => {\n      const subobjects = info2.subobjects;\n      const promises = [];\n      for (let i = 0, l = subobjects.length; i < l; i++) {\n        const subobject2 = subobjects[i];\n        const promise = parseCache.ensureDataLoaded(subobject2.fileName).then(() => {\n          const subobjectInfo = parseCache.getData(subobject2.fileName, false);\n          if (!isPrimitiveType(subobjectInfo.type)) {\n            return this.loadModel(subobject2.fileName).catch((error) => {\n              console.warn(error);\n              return null;\n            });\n          }\n          return processInfoSubobjects(parseCache.getData(subobject2.fileName), subobject2);\n        });\n        promises.push(promise);\n      }\n      const group2 = new Group();\n      group2.userData.category = info2.category;\n      group2.userData.keywords = info2.keywords;\n      info2.group = group2;\n      const subobjectInfos = await Promise.all(promises);\n      for (let i = 0, l = subobjectInfos.length; i < l; i++) {\n        const subobject2 = info2.subobjects[i];\n        const subobjectInfo = subobjectInfos[i];\n        if (subobjectInfo === null) {\n          continue;\n        }\n        if (subobjectInfo.isGroup) {\n          const subobjectGroup = subobjectInfo;\n          subobject2.matrix.decompose(subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale);\n          subobjectGroup.userData.startingConstructionStep = subobject2.startingConstructionStep;\n          subobjectGroup.name = subobject2.fileName;\n          loader.applyMaterialsToMesh(subobjectGroup, subobject2.colorCode, info2.materials);\n          group2.add(subobjectGroup);\n          continue;\n        }\n        if (subobjectInfo.group.children.length) {\n          group2.add(subobjectInfo.group);\n        }\n        const parentLineSegments = info2.lineSegments;\n        const parentConditionalSegments = info2.conditionalSegments;\n        const parentFaces = info2.faces;\n        const lineSegments = subobjectInfo.lineSegments;\n        const conditionalSegments = subobjectInfo.conditionalSegments;\n        const faces = subobjectInfo.faces;\n        const matrix = subobject2.matrix;\n        const inverted = subobject2.inverted;\n        const matrixScaleInverted = matrix.determinant() < 0;\n        const colorCode = subobject2.colorCode;\n        const lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n        for (let i2 = 0, l2 = lineSegments.length; i2 < l2; i2++) {\n          const ls = lineSegments[i2];\n          const vertices = ls.vertices;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          ls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n          ls.material = ls.material || getMaterialFromCode(ls.colorCode, ls.colorCode, info2.materials, true);\n          parentLineSegments.push(ls);\n        }\n        for (let i2 = 0, l2 = conditionalSegments.length; i2 < l2; i2++) {\n          const os = conditionalSegments[i2];\n          const vertices = os.vertices;\n          const controlPoints = os.controlPoints;\n          vertices[0].applyMatrix4(matrix);\n          vertices[1].applyMatrix4(matrix);\n          controlPoints[0].applyMatrix4(matrix);\n          controlPoints[1].applyMatrix4(matrix);\n          os.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n          os.material = os.material || getMaterialFromCode(os.colorCode, os.colorCode, info2.materials, true);\n          parentConditionalSegments.push(os);\n        }\n        for (let i2 = 0, l2 = faces.length; i2 < l2; i2++) {\n          const tri = faces[i2];\n          const vertices = tri.vertices;\n          for (let i3 = 0, l3 = vertices.length; i3 < l3; i3++) {\n            vertices[i3].applyMatrix4(matrix);\n          }\n          tri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n          tri.material = tri.material || getMaterialFromCode(tri.colorCode, colorCode, info2.materials, false);\n          faceMaterials.add(tri.colorCode);\n          if (matrixScaleInverted !== inverted) {\n            vertices.reverse();\n          }\n          parentFaces.push(tri);\n        }\n        info2.totalFaces += subobjectInfo.totalFaces;\n      }\n      if (subobject) {\n        loader.applyMaterialsToMesh(group2, subobject.colorCode, info2.materials);\n      }\n      return info2;\n    };\n    for (let i = 0, l = info.faces; i < l; i++) {\n      faceMaterials.add(info.faces[i].colorCode);\n    }\n    await processInfoSubobjects(info);\n    if (loader.smoothNormals) {\n      const checkSubSegments = faceMaterials.size > 1;\n      generateFaceNormals(info.faces);\n      smoothNormals(info.faces, info.lineSegments, checkSubSegments);\n    }\n    const group = info.group;\n    if (info.faces.length > 0) {\n      group.add(createObject(info.faces, 3, false, info.totalFaces));\n    }\n    if (info.lineSegments.length > 0) {\n      group.add(createObject(info.lineSegments, 2));\n    }\n    if (info.conditionalSegments.length > 0) {\n      group.add(createObject(info.conditionalSegments, 2, true));\n    }\n    return group;\n  }\n  hasCachedModel(fileName) {\n    return fileName !== null && fileName.toLowerCase() in this._cache;\n  }\n  async getCachedModel(fileName) {\n    if (fileName !== null && this.hasCachedModel(fileName)) {\n      const key = fileName.toLowerCase();\n      const group = await this._cache[key];\n      return group.clone();\n    } else {\n      return null;\n    }\n  }\n  // Loads and parses the model with the given file name. Returns a cached copy if available.\n  async loadModel(fileName) {\n    const parseCache = this.parseCache;\n    const key = fileName.toLowerCase();\n    if (this.hasCachedModel(fileName)) {\n      return this.getCachedModel(fileName);\n    } else {\n      await parseCache.ensureDataLoaded(fileName);\n      const info = parseCache.getData(fileName);\n      const promise = this.processIntoMesh(info);\n      if (this.hasCachedModel(fileName)) {\n        return this.getCachedModel(fileName);\n      }\n      if (isPartType(info.type)) {\n        this._cache[key] = promise;\n      }\n      const group = await promise;\n      return group.clone();\n    }\n  }\n  // parses the given model text into a renderable object. Returns cached copy if available.\n  async parseModel(text) {\n    const parseCache = this.parseCache;\n    const info = parseCache.parse(text);\n    if (isPartType(info.type) && this.hasCachedModel(info.fileName)) {\n      return this.getCachedModel(info.fileName);\n    }\n    return this.processIntoMesh(info);\n  }\n}\nfunction sortByMaterial(a, b) {\n  if (a.colorCode === b.colorCode) {\n    return 0;\n  }\n  if (a.colorCode < b.colorCode) {\n    return -1;\n  }\n  return 1;\n}\nfunction createObject(elements, elementSize, isConditionalSegments = false, totalElements = null) {\n  elements.sort(sortByMaterial);\n  if (totalElements === null) {\n    totalElements = elements.length;\n  }\n  const positions = new Float32Array(elementSize * totalElements * 3);\n  const normals = elementSize === 3 ? new Float32Array(elementSize * totalElements * 3) : null;\n  const materials = [];\n  const quadArray = new Array(6);\n  const bufferGeometry = new BufferGeometry();\n  let prevMaterial = null;\n  let index0 = 0;\n  let numGroupVerts = 0;\n  let offset = 0;\n  for (let iElem = 0, nElem = elements.length; iElem < nElem; iElem++) {\n    const elem = elements[iElem];\n    let vertices = elem.vertices;\n    if (vertices.length === 4) {\n      quadArray[0] = vertices[0];\n      quadArray[1] = vertices[1];\n      quadArray[2] = vertices[2];\n      quadArray[3] = vertices[0];\n      quadArray[4] = vertices[2];\n      quadArray[5] = vertices[3];\n      vertices = quadArray;\n    }\n    for (let j = 0, l = vertices.length; j < l; j++) {\n      const v = vertices[j];\n      const index = offset + j * 3;\n      positions[index + 0] = v.x;\n      positions[index + 1] = v.y;\n      positions[index + 2] = v.z;\n    }\n    if (elementSize === 3) {\n      if (!elem.faceNormal) {\n        const v0 = vertices[0];\n        const v1 = vertices[1];\n        const v2 = vertices[2];\n        _tempVec0.subVectors(v1, v0);\n        _tempVec1.subVectors(v2, v1);\n        elem.faceNormal = new Vector3().crossVectors(_tempVec0, _tempVec1).normalize();\n      }\n      let elemNormals = elem.normals;\n      if (elemNormals.length === 4) {\n        quadArray[0] = elemNormals[0];\n        quadArray[1] = elemNormals[1];\n        quadArray[2] = elemNormals[2];\n        quadArray[3] = elemNormals[0];\n        quadArray[4] = elemNormals[2];\n        quadArray[5] = elemNormals[3];\n        elemNormals = quadArray;\n      }\n      for (let j = 0, l = elemNormals.length; j < l; j++) {\n        let n = elem.faceNormal;\n        if (elemNormals[j]) {\n          n = elemNormals[j].norm;\n        }\n        const index = offset + j * 3;\n        normals[index + 0] = n.x;\n        normals[index + 1] = n.y;\n        normals[index + 2] = n.z;\n      }\n    }\n    if (prevMaterial !== elem.colorCode) {\n      if (prevMaterial !== null) {\n        bufferGeometry.addGroup(index0, numGroupVerts, materials.length - 1);\n      }\n      const material = elem.material;\n      if (material !== null) {\n        if (elementSize === 3) {\n          materials.push(material);\n        } else if (elementSize === 2) {\n          if (material !== null) {\n            if (isConditionalSegments) {\n              materials.push(material.userData.edgeMaterial.userData.conditionalEdgeMaterial);\n            } else {\n              materials.push(material.userData.edgeMaterial);\n            }\n          } else {\n            materials.push(null);\n          }\n        }\n      } else {\n        materials.push(elem.colorCode);\n      }\n      prevMaterial = elem.colorCode;\n      index0 = offset / 3;\n      numGroupVerts = vertices.length;\n    } else {\n      numGroupVerts += vertices.length;\n    }\n    offset += 3 * vertices.length;\n  }\n  if (numGroupVerts > 0) {\n    bufferGeometry.addGroup(index0, Infinity, materials.length - 1);\n  }\n  bufferGeometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n  if (normals !== null) {\n    bufferGeometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n  }\n  let object3d = null;\n  if (elementSize === 2) {\n    if (isConditionalSegments) {\n      object3d = new ConditionalLineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    } else {\n      object3d = new LineSegments(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n    }\n  } else if (elementSize === 3) {\n    object3d = new Mesh(bufferGeometry, materials.length === 1 ? materials[0] : materials);\n  }\n  if (isConditionalSegments) {\n    object3d.isConditionalLine = true;\n    const controlArray0 = new Float32Array(elements.length * 3 * 2);\n    const controlArray1 = new Float32Array(elements.length * 3 * 2);\n    const directionArray = new Float32Array(elements.length * 3 * 2);\n    for (let i = 0, l = elements.length; i < l; i++) {\n      const os = elements[i];\n      const vertices = os.vertices;\n      const controlPoints = os.controlPoints;\n      const c0 = controlPoints[0];\n      const c1 = controlPoints[1];\n      const v0 = vertices[0];\n      const v1 = vertices[1];\n      const index = i * 3 * 2;\n      controlArray0[index + 0] = c0.x;\n      controlArray0[index + 1] = c0.y;\n      controlArray0[index + 2] = c0.z;\n      controlArray0[index + 3] = c0.x;\n      controlArray0[index + 4] = c0.y;\n      controlArray0[index + 5] = c0.z;\n      controlArray1[index + 0] = c1.x;\n      controlArray1[index + 1] = c1.y;\n      controlArray1[index + 2] = c1.z;\n      controlArray1[index + 3] = c1.x;\n      controlArray1[index + 4] = c1.y;\n      controlArray1[index + 5] = c1.z;\n      directionArray[index + 0] = v1.x - v0.x;\n      directionArray[index + 1] = v1.y - v0.y;\n      directionArray[index + 2] = v1.z - v0.z;\n      directionArray[index + 3] = v1.x - v0.x;\n      directionArray[index + 4] = v1.y - v0.y;\n      directionArray[index + 5] = v1.z - v0.z;\n    }\n    bufferGeometry.setAttribute(\"control0\", new BufferAttribute(controlArray0, 3, false));\n    bufferGeometry.setAttribute(\"control1\", new BufferAttribute(controlArray1, 3, false));\n    bufferGeometry.setAttribute(\"direction\", new BufferAttribute(directionArray, 3, false));\n  }\n  return object3d;\n}\nclass LDrawLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = [];\n    this.materialLibrary = {};\n    this.partsCache = new LDrawPartsGeometryCache(this);\n    this.fileMap = {};\n    this.setMaterials([]);\n    this.smoothNormals = true;\n    this.partsLibraryPath = \"\";\n  }\n  setPartsLibraryPath(path) {\n    this.partsLibraryPath = path;\n    return this;\n  }\n  async preloadMaterials(url) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    const text = await fileLoader.loadAsync(url);\n    const colorLineRegex = /^0 !COLOUR/;\n    const lines = text.split(/[\\n\\r]/g);\n    const materials = [];\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      if (colorLineRegex.test(line)) {\n        const directive = line.replace(colorLineRegex, \"\");\n        const material = this.parseColorMetaDirective(new LineParser(directive));\n        materials.push(material);\n      }\n    }\n    this.setMaterials(materials);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const fileLoader = new FileLoader(this.manager);\n    fileLoader.setPath(this.path);\n    fileLoader.setRequestHeader(this.requestHeader);\n    fileLoader.setWithCredentials(this.withCredentials);\n    fileLoader.load(\n      url,\n      (text) => {\n        this.partsCache.parseModel(text, this.materialLibrary).then((group) => {\n          this.applyMaterialsToMesh(group, MAIN_COLOUR_CODE, this.materialLibrary, true);\n          this.computeConstructionSteps(group);\n          onLoad(group);\n        }).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(text, onLoad) {\n    this.partsCache.parseModel(text, this.materialLibrary).then((group) => {\n      this.computeConstructionSteps(group);\n      onLoad(group);\n    });\n  }\n  setMaterials(materials) {\n    this.materialLibrary = {};\n    this.materials = [];\n    for (let i = 0, l = materials.length; i < l; i++) {\n      this.addMaterial(materials[i]);\n    }\n    this.addMaterial(this.parseColorMetaDirective(new LineParser(\"Main_Colour CODE 16 VALUE #FF8080 EDGE #333333\")));\n    this.addMaterial(this.parseColorMetaDirective(new LineParser(\"Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333\")));\n    return this;\n  }\n  setFileMap(fileMap) {\n    this.fileMap = fileMap;\n    return this;\n  }\n  addMaterial(material) {\n    const matLib = this.materialLibrary;\n    if (!matLib[material.userData.code]) {\n      this.materials.push(material);\n      matLib[material.userData.code] = material;\n    }\n    return this;\n  }\n  getMaterial(colorCode) {\n    if (colorCode.startsWith(\"0x2\")) {\n      const color = colorCode.substring(3);\n      return this.parseColorMetaDirective(\n        new LineParser(\"Direct_Color_\" + color + \" CODE -1 VALUE #\" + color + \" EDGE #\" + color)\n      );\n    }\n    return this.materialLibrary[colorCode] || null;\n  }\n  // Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n  // in the material array if they need to be filled in.\n  applyMaterialsToMesh(group, parentColorCode, materialHierarchy, finalMaterialPass = false) {\n    const loader = this;\n    const parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n    group.traverse((c) => {\n      if (c.isMesh || c.isLineSegments) {\n        if (Array.isArray(c.material)) {\n          for (let i = 0, l = c.material.length; i < l; i++) {\n            if (!c.material[i].isMaterial) {\n              c.material[i] = getMaterial(c, c.material[i]);\n            }\n          }\n        } else if (!c.material.isMaterial) {\n          c.material = getMaterial(c, c.material);\n        }\n      }\n    });\n    function getMaterial(c, colorCode) {\n      if (parentIsPassthrough && !(colorCode in materialHierarchy) && !finalMaterialPass) {\n        return colorCode;\n      }\n      const forEdge = c.isLineSegments || c.isConditionalLine;\n      const isPassthrough = !forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n      if (isPassthrough) {\n        colorCode = parentColorCode;\n      }\n      let material = null;\n      if (colorCode in materialHierarchy) {\n        material = materialHierarchy[colorCode];\n      } else if (finalMaterialPass) {\n        material = loader.getMaterial(colorCode);\n        if (material === null) {\n          throw new Error(`LDrawLoader: Material properties for code ${colorCode} not available.`);\n        }\n      } else {\n        return colorCode;\n      }\n      if (c.isLineSegments) {\n        material = material.userData.edgeMaterial;\n        if (c.isConditionalLine) {\n          material = material.userData.conditionalEdgeMaterial;\n        }\n      }\n      return material;\n    }\n  }\n  getMainMaterial() {\n    return this.getMaterial(MAIN_COLOUR_CODE);\n  }\n  getMainEdgeMaterial() {\n    return this.getMaterial(MAIN_EDGE_COLOUR_CODE);\n  }\n  parseColorMetaDirective(lineParser) {\n    let code = null;\n    let color = 16711935;\n    let edgeColor = 16711935;\n    let alpha = 1;\n    let isTransparent = false;\n    let luminance = 0;\n    let finishType = FINISH_TYPE_DEFAULT;\n    let edgeMaterial = null;\n    const name = lineParser.getToken();\n    if (!name) {\n      throw new Error(\n        'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + \".\"\n      );\n    }\n    let token = null;\n    while (true) {\n      token = lineParser.getToken();\n      if (!token) {\n        break;\n      }\n      switch (token.toUpperCase()) {\n        case \"CODE\":\n          code = lineParser.getToken();\n          break;\n        case \"VALUE\":\n          color = lineParser.getToken();\n          if (color.startsWith(\"0x\")) {\n            color = \"#\" + color.substring(2);\n          } else if (!color.startsWith(\"#\")) {\n            throw new Error(\n              \"LDrawLoader: Invalid color while parsing material\" + lineParser.getLineNumberString() + \".\"\n            );\n          }\n          break;\n        case \"EDGE\":\n          edgeColor = lineParser.getToken();\n          if (edgeColor.startsWith(\"0x\")) {\n            edgeColor = \"#\" + edgeColor.substring(2);\n          } else if (!edgeColor.startsWith(\"#\")) {\n            edgeMaterial = this.getMaterial(edgeColor);\n            if (!edgeMaterial) {\n              throw new Error(\n                \"LDrawLoader: Invalid edge color while parsing material\" + lineParser.getLineNumberString() + \".\"\n              );\n            }\n            edgeMaterial = edgeMaterial.userData.edgeMaterial;\n          }\n          break;\n        case \"ALPHA\":\n          alpha = parseInt(lineParser.getToken());\n          if (isNaN(alpha)) {\n            throw new Error(\n              \"LDrawLoader: Invalid alpha value in material definition\" + lineParser.getLineNumberString() + \".\"\n            );\n          }\n          alpha = Math.max(0, Math.min(1, alpha / 255));\n          if (alpha < 1) {\n            isTransparent = true;\n          }\n          break;\n        case \"LUMINANCE\":\n          luminance = parseInt(lineParser.getToken());\n          if (isNaN(luminance)) {\n            throw new Error(\n              \"LDrawLoader: Invalid luminance value in material definition\" + LineParser.getLineNumberString() + \".\"\n            );\n          }\n          luminance = Math.max(0, Math.min(1, luminance / 255));\n          break;\n        case \"CHROME\":\n          finishType = FINISH_TYPE_CHROME;\n          break;\n        case \"PEARLESCENT\":\n          finishType = FINISH_TYPE_PEARLESCENT;\n          break;\n        case \"RUBBER\":\n          finishType = FINISH_TYPE_RUBBER;\n          break;\n        case \"MATTE_METALLIC\":\n          finishType = FINISH_TYPE_MATTE_METALLIC;\n          break;\n        case \"METAL\":\n          finishType = FINISH_TYPE_METAL;\n          break;\n        case \"MATERIAL\":\n          lineParser.setToEnd();\n          break;\n        default:\n          throw new Error(\n            'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + \".\"\n          );\n      }\n    }\n    let material = null;\n    switch (finishType) {\n      case FINISH_TYPE_DEFAULT:\n        material = new MeshStandardMaterial({ color, roughness: 0.3, metalness: 0 });\n        break;\n      case FINISH_TYPE_PEARLESCENT:\n        material = new MeshStandardMaterial({ color, roughness: 0.3, metalness: 0.25 });\n        break;\n      case FINISH_TYPE_CHROME:\n        material = new MeshStandardMaterial({ color, roughness: 0, metalness: 1 });\n        break;\n      case FINISH_TYPE_RUBBER:\n        material = new MeshStandardMaterial({ color, roughness: 0.9, metalness: 0 });\n        break;\n      case FINISH_TYPE_MATTE_METALLIC:\n        material = new MeshStandardMaterial({ color, roughness: 0.8, metalness: 0.4 });\n        break;\n      case FINISH_TYPE_METAL:\n        material = new MeshStandardMaterial({ color, roughness: 0.2, metalness: 0.85 });\n        break;\n      default:\n        break;\n    }\n    material.transparent = isTransparent;\n    material.premultipliedAlpha = true;\n    material.opacity = alpha;\n    material.depthWrite = !isTransparent;\n    material.polygonOffset = true;\n    material.polygonOffsetFactor = 1;\n    if (luminance !== 0) {\n      material.emissive.set(material.color).multiplyScalar(luminance);\n    }\n    if (!edgeMaterial) {\n      edgeMaterial = new LineBasicMaterial({\n        color: edgeColor,\n        transparent: isTransparent,\n        opacity: alpha,\n        depthWrite: !isTransparent\n      });\n      edgeMaterial.userData.code = code;\n      edgeMaterial.name = name + \" - Edge\";\n      edgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial({\n        fog: true,\n        transparent: isTransparent,\n        depthWrite: !isTransparent,\n        color: edgeColor,\n        opacity: alpha\n      });\n    }\n    material.userData.code = code;\n    material.name = name;\n    material.userData.edgeMaterial = edgeMaterial;\n    this.addMaterial(material);\n    return material;\n  }\n  computeConstructionSteps(model) {\n    let stepNumber = 0;\n    model.traverse((c) => {\n      if (c.isGroup) {\n        if (c.userData.startingConstructionStep) {\n          stepNumber++;\n        }\n        c.userData.constructionStep = stepNumber;\n      }\n    });\n    model.userData.numConstructionSteps = stepNumber + 1;\n  }\n}\nexport {\n  LDrawLoader\n};\n"]},"metadata":{},"sourceType":"module"}