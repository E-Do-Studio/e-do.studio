{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n          height = 4;\n\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n\n};\n\nlet SSAOPass = _SSAOPass;\n\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\n\nexport { SSAOPass };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","_SSAOPass","constructor","scene","camera","width","height","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","assign","uniforms","vertexShader","fragmentShader","blending","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get","SSAOPass"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */ new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false)\n      this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4, height = 4;\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine)\n        object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n};\nlet SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport {\n  SSAOPass\n};\n"]},"metadata":{},"sourceType":"module"}