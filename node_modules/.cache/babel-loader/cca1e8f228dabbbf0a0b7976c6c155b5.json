{"ast":null,"code":"import { UniformsUtils, ShaderMaterial, NoBlending, WebGLRenderTarget, LinearMipmapLinearFilter, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityShader } from \"../shaders/LuminosityShader.js\";\nimport { ToneMapShader } from \"../shaders/ToneMapShader.js\";\n\nclass AdaptiveToneMappingPass extends Pass {\n  constructor(adaptive, resolution) {\n    super();\n    this.resolution = resolution !== void 0 ? resolution : 256;\n    this.needsInit = true;\n    this.adaptive = adaptive !== void 0 ? !!adaptive : true;\n    this.luminanceRT = null;\n    this.previousLuminanceRT = null;\n    this.currentLuminanceRT = null;\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false\n    });\n    this.materialLuminance = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(LuminosityShader.uniforms),\n      vertexShader: LuminosityShader.vertexShader,\n      fragmentShader: LuminosityShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.adaptLuminanceShader = {\n      defines: {\n        MIP_LEVEL_1X1: (Math.log(this.resolution) / Math.log(2)).toFixed(1)\n      },\n      uniforms: {\n        lastLum: {\n          value: null\n        },\n        currentLum: {\n          value: null\n        },\n        minLuminance: {\n          value: 0.01\n        },\n        delta: {\n          value: 0.016\n        },\n        tau: {\n          value: 1\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D lastLum;\n\t\t\t\tuniform sampler2D currentLum;\n\t\t\t\tuniform float minLuminance;\n\t\t\t\tuniform float delta;\n\t\t\t\tuniform float tau;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\n\t\t\t\t\tvec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\n\n\t\t\t\t\tfloat fLastLum = max( minLuminance, lastLum.r );\n\t\t\t\t\tfloat fCurrentLum = max( minLuminance, currentLum.r );\n\n\t\t\t\t\t//The adaption seems to work better in extreme lighting differences\n\t\t\t\t\t//if the input luminance is squared.\n\t\t\t\t\tfCurrentLum *= fCurrentLum;\n\n\t\t\t\t\t// Adapt the luminance using Pattanaik's technique\n\t\t\t\t\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\n\t\t\t\t\t// \"fAdaptedLum = sqrt(fAdaptedLum);\n\t\t\t\t\tgl_FragColor.r = fAdaptedLum;\n\t\t\t\t}`\n    };\n    this.materialAdaptiveLum = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(this.adaptLuminanceShader.uniforms),\n      vertexShader: this.adaptLuminanceShader.vertexShader,\n      fragmentShader: this.adaptLuminanceShader.fragmentShader,\n      defines: Object.assign({}, this.adaptLuminanceShader.defines),\n      blending: NoBlending\n    });\n    this.materialToneMap = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(ToneMapShader.uniforms),\n      vertexShader: ToneMapShader.vertexShader,\n      fragmentShader: ToneMapShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    if (this.needsInit) {\n      this.reset(renderer);\n      this.luminanceRT.texture.type = readBuffer.texture.type;\n      this.previousLuminanceRT.texture.type = readBuffer.texture.type;\n      this.currentLuminanceRT.texture.type = readBuffer.texture.type;\n      this.needsInit = false;\n    }\n\n    if (this.adaptive) {\n      this.fsQuad.material = this.materialLuminance;\n      this.materialLuminance.uniforms.tDiffuse.value = readBuffer.texture;\n      renderer.setRenderTarget(this.currentLuminanceRT);\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialAdaptiveLum;\n      this.materialAdaptiveLum.uniforms.delta.value = deltaTime;\n      this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT.texture;\n      this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT.texture;\n      renderer.setRenderTarget(this.luminanceRT);\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms.tDiffuse.value = this.luminanceRT.texture;\n      renderer.setRenderTarget(this.previousLuminanceRT);\n      this.fsQuad.render(renderer);\n    }\n\n    this.fsQuad.material = this.materialToneMap;\n    this.materialToneMap.uniforms.tDiffuse.value = readBuffer.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  reset() {\n    if (this.luminanceRT) {\n      this.luminanceRT.dispose();\n    }\n\n    if (this.currentLuminanceRT) {\n      this.currentLuminanceRT.dispose();\n    }\n\n    if (this.previousLuminanceRT) {\n      this.previousLuminanceRT.dispose();\n    }\n\n    this.luminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n    this.luminanceRT.texture.name = \"AdaptiveToneMappingPass.l\";\n    this.luminanceRT.texture.generateMipmaps = false;\n    this.previousLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n    this.previousLuminanceRT.texture.name = \"AdaptiveToneMappingPass.pl\";\n    this.previousLuminanceRT.texture.generateMipmaps = false;\n    const pars = {\n      minFilter: LinearMipmapLinearFilter,\n      generateMipmaps: true\n    };\n    this.currentLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution, pars);\n    this.currentLuminanceRT.texture.name = \"AdaptiveToneMappingPass.cl\";\n\n    if (this.adaptive) {\n      this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n      this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n    }\n\n    this.fsQuad.material = new MeshBasicMaterial({\n      color: 7829367\n    });\n    this.materialLuminance.needsUpdate = true;\n    this.materialAdaptiveLum.needsUpdate = true;\n    this.materialToneMap.needsUpdate = true;\n  }\n\n  setAdaptive(adaptive) {\n    if (adaptive) {\n      this.adaptive = true;\n      this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n      this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n    } else {\n      this.adaptive = false;\n      delete this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"];\n      this.materialToneMap.uniforms.luminanceMap.value = null;\n    }\n\n    this.materialToneMap.needsUpdate = true;\n  }\n\n  setAdaptionRate(rate) {\n    if (rate) {\n      this.materialAdaptiveLum.uniforms.tau.value = Math.abs(rate);\n    }\n  }\n\n  setMinLuminance(minLum) {\n    if (minLum) {\n      this.materialToneMap.uniforms.minLuminance.value = minLum;\n      this.materialAdaptiveLum.uniforms.minLuminance.value = minLum;\n    }\n  }\n\n  setMaxLuminance(maxLum) {\n    if (maxLum) {\n      this.materialToneMap.uniforms.maxLuminance.value = maxLum;\n    }\n  }\n\n  setAverageLuminance(avgLum) {\n    if (avgLum) {\n      this.materialToneMap.uniforms.averageLuminance.value = avgLum;\n    }\n  }\n\n  setMiddleGrey(middleGrey) {\n    if (middleGrey) {\n      this.materialToneMap.uniforms.middleGrey.value = middleGrey;\n    }\n  }\n\n  dispose() {\n    if (this.luminanceRT) {\n      this.luminanceRT.dispose();\n    }\n\n    if (this.previousLuminanceRT) {\n      this.previousLuminanceRT.dispose();\n    }\n\n    if (this.currentLuminanceRT) {\n      this.currentLuminanceRT.dispose();\n    }\n\n    if (this.materialLuminance) {\n      this.materialLuminance.dispose();\n    }\n\n    if (this.materialAdaptiveLum) {\n      this.materialAdaptiveLum.dispose();\n    }\n\n    if (this.materialCopy) {\n      this.materialCopy.dispose();\n    }\n\n    if (this.materialToneMap) {\n      this.materialToneMap.dispose();\n    }\n  }\n\n}\n\nexport { AdaptiveToneMappingPass };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/AdaptiveToneMappingPass.js"],"names":["UniformsUtils","ShaderMaterial","NoBlending","WebGLRenderTarget","LinearMipmapLinearFilter","MeshBasicMaterial","Pass","FullScreenQuad","CopyShader","LuminosityShader","ToneMapShader","AdaptiveToneMappingPass","constructor","adaptive","resolution","needsInit","luminanceRT","previousLuminanceRT","currentLuminanceRT","copyShader","copyUniforms","clone","uniforms","materialCopy","vertexShader","fragmentShader","blending","depthTest","materialLuminance","adaptLuminanceShader","defines","MIP_LEVEL_1X1","Math","log","toFixed","lastLum","value","currentLum","minLuminance","delta","tau","materialAdaptiveLum","Object","assign","materialToneMap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","reset","texture","type","material","tDiffuse","setRenderTarget","renderToScreen","clear","dispose","name","generateMipmaps","pars","minFilter","luminanceMap","color","needsUpdate","setAdaptive","setAdaptionRate","rate","abs","setMinLuminance","minLum","setMaxLuminance","maxLum","maxLuminance","setAverageLuminance","avgLum","averageLuminance","setMiddleGrey","middleGrey"],"mappings":"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","sourcesContent":["import { UniformsUtils, ShaderMaterial, NoBlending, WebGLRenderTarget, LinearMipmapLinearFilter, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityShader } from \"../shaders/LuminosityShader.js\";\nimport { ToneMapShader } from \"../shaders/ToneMapShader.js\";\nclass AdaptiveToneMappingPass extends Pass {\n  constructor(adaptive, resolution) {\n    super();\n    this.resolution = resolution !== void 0 ? resolution : 256;\n    this.needsInit = true;\n    this.adaptive = adaptive !== void 0 ? !!adaptive : true;\n    this.luminanceRT = null;\n    this.previousLuminanceRT = null;\n    this.currentLuminanceRT = null;\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false\n    });\n    this.materialLuminance = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(LuminosityShader.uniforms),\n      vertexShader: LuminosityShader.vertexShader,\n      fragmentShader: LuminosityShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.adaptLuminanceShader = {\n      defines: {\n        MIP_LEVEL_1X1: (Math.log(this.resolution) / Math.log(2)).toFixed(1)\n      },\n      uniforms: {\n        lastLum: { value: null },\n        currentLum: { value: null },\n        minLuminance: { value: 0.01 },\n        delta: { value: 0.016 },\n        tau: { value: 1 }\n      },\n      vertexShader: `varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D lastLum;\n\t\t\t\tuniform sampler2D currentLum;\n\t\t\t\tuniform float minLuminance;\n\t\t\t\tuniform float delta;\n\t\t\t\tuniform float tau;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\n\t\t\t\t\tvec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\n\n\t\t\t\t\tfloat fLastLum = max( minLuminance, lastLum.r );\n\t\t\t\t\tfloat fCurrentLum = max( minLuminance, currentLum.r );\n\n\t\t\t\t\t//The adaption seems to work better in extreme lighting differences\n\t\t\t\t\t//if the input luminance is squared.\n\t\t\t\t\tfCurrentLum *= fCurrentLum;\n\n\t\t\t\t\t// Adapt the luminance using Pattanaik's technique\n\t\t\t\t\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\n\t\t\t\t\t// \"fAdaptedLum = sqrt(fAdaptedLum);\n\t\t\t\t\tgl_FragColor.r = fAdaptedLum;\n\t\t\t\t}`\n    };\n    this.materialAdaptiveLum = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(this.adaptLuminanceShader.uniforms),\n      vertexShader: this.adaptLuminanceShader.vertexShader,\n      fragmentShader: this.adaptLuminanceShader.fragmentShader,\n      defines: Object.assign({}, this.adaptLuminanceShader.defines),\n      blending: NoBlending\n    });\n    this.materialToneMap = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(ToneMapShader.uniforms),\n      vertexShader: ToneMapShader.vertexShader,\n      fragmentShader: ToneMapShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    if (this.needsInit) {\n      this.reset(renderer);\n      this.luminanceRT.texture.type = readBuffer.texture.type;\n      this.previousLuminanceRT.texture.type = readBuffer.texture.type;\n      this.currentLuminanceRT.texture.type = readBuffer.texture.type;\n      this.needsInit = false;\n    }\n    if (this.adaptive) {\n      this.fsQuad.material = this.materialLuminance;\n      this.materialLuminance.uniforms.tDiffuse.value = readBuffer.texture;\n      renderer.setRenderTarget(this.currentLuminanceRT);\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialAdaptiveLum;\n      this.materialAdaptiveLum.uniforms.delta.value = deltaTime;\n      this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT.texture;\n      this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT.texture;\n      renderer.setRenderTarget(this.luminanceRT);\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms.tDiffuse.value = this.luminanceRT.texture;\n      renderer.setRenderTarget(this.previousLuminanceRT);\n      this.fsQuad.render(renderer);\n    }\n    this.fsQuad.material = this.materialToneMap;\n    this.materialToneMap.uniforms.tDiffuse.value = readBuffer.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  reset() {\n    if (this.luminanceRT) {\n      this.luminanceRT.dispose();\n    }\n    if (this.currentLuminanceRT) {\n      this.currentLuminanceRT.dispose();\n    }\n    if (this.previousLuminanceRT) {\n      this.previousLuminanceRT.dispose();\n    }\n    this.luminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n    this.luminanceRT.texture.name = \"AdaptiveToneMappingPass.l\";\n    this.luminanceRT.texture.generateMipmaps = false;\n    this.previousLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n    this.previousLuminanceRT.texture.name = \"AdaptiveToneMappingPass.pl\";\n    this.previousLuminanceRT.texture.generateMipmaps = false;\n    const pars = { minFilter: LinearMipmapLinearFilter, generateMipmaps: true };\n    this.currentLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution, pars);\n    this.currentLuminanceRT.texture.name = \"AdaptiveToneMappingPass.cl\";\n    if (this.adaptive) {\n      this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n      this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n    }\n    this.fsQuad.material = new MeshBasicMaterial({ color: 7829367 });\n    this.materialLuminance.needsUpdate = true;\n    this.materialAdaptiveLum.needsUpdate = true;\n    this.materialToneMap.needsUpdate = true;\n  }\n  setAdaptive(adaptive) {\n    if (adaptive) {\n      this.adaptive = true;\n      this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n      this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n    } else {\n      this.adaptive = false;\n      delete this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"];\n      this.materialToneMap.uniforms.luminanceMap.value = null;\n    }\n    this.materialToneMap.needsUpdate = true;\n  }\n  setAdaptionRate(rate) {\n    if (rate) {\n      this.materialAdaptiveLum.uniforms.tau.value = Math.abs(rate);\n    }\n  }\n  setMinLuminance(minLum) {\n    if (minLum) {\n      this.materialToneMap.uniforms.minLuminance.value = minLum;\n      this.materialAdaptiveLum.uniforms.minLuminance.value = minLum;\n    }\n  }\n  setMaxLuminance(maxLum) {\n    if (maxLum) {\n      this.materialToneMap.uniforms.maxLuminance.value = maxLum;\n    }\n  }\n  setAverageLuminance(avgLum) {\n    if (avgLum) {\n      this.materialToneMap.uniforms.averageLuminance.value = avgLum;\n    }\n  }\n  setMiddleGrey(middleGrey) {\n    if (middleGrey) {\n      this.materialToneMap.uniforms.middleGrey.value = middleGrey;\n    }\n  }\n  dispose() {\n    if (this.luminanceRT) {\n      this.luminanceRT.dispose();\n    }\n    if (this.previousLuminanceRT) {\n      this.previousLuminanceRT.dispose();\n    }\n    if (this.currentLuminanceRT) {\n      this.currentLuminanceRT.dispose();\n    }\n    if (this.materialLuminance) {\n      this.materialLuminance.dispose();\n    }\n    if (this.materialAdaptiveLum) {\n      this.materialAdaptiveLum.dispose();\n    }\n    if (this.materialCopy) {\n      this.materialCopy.dispose();\n    }\n    if (this.materialToneMap) {\n      this.materialToneMap.dispose();\n    }\n  }\n}\nexport {\n  AdaptiveToneMappingPass\n};\n"]},"metadata":{},"sourceType":"module"}