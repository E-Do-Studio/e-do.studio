{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { UniformsUtils, Vector2, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\n\nclass WaterPass extends Pass {\n  constructor() {\n    super();\n\n    __publicField(this, \"material\");\n\n    __publicField(this, \"fsQuad\");\n\n    __publicField(this, \"factor\");\n\n    __publicField(this, \"time\");\n\n    __publicField(this, \"uniforms\");\n\n    this.uniforms = UniformsUtils.clone({\n      tex: {\n        value: null\n      },\n      time: {\n        value: 0\n      },\n      factor: {\n        value: 0\n      },\n      resolution: {\n        value: new Vector2(64, 64)\n      }\n    });\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.factor = 0;\n    this.time = 0;\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tex\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value = this.time;\n    this.uniforms[\"factor\"].value = this.factor;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { WaterPass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/WaterPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","UniformsUtils","Vector2","ShaderMaterial","Pass","FullScreenQuad","WaterPass","constructor","uniforms","clone","tex","time","factor","resolution","material","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { UniformsUtils, Vector2, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nclass WaterPass extends Pass {\n  constructor() {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"factor\");\n    __publicField(this, \"time\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone({\n      tex: { value: null },\n      time: { value: 0 },\n      factor: { value: 0 },\n      resolution: { value: new Vector2(64, 64) }\n    });\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.factor = 0;\n    this.time = 0;\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tex\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value = this.time;\n    this.uniforms[\"factor\"].value = this.factor;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport {\n  WaterPass\n};\n"]},"metadata":{},"sourceType":"module"}