{"ast":null,"code":"import { Vector2, Matrix4 } from \"three\";\nvar SAOShader = {\n  defines: {\n    NUM_SAMPLES: 7,\n    NUM_RINGS: 4,\n    NORMAL_TEXTURE: 0,\n    DIFFUSE_TEXTURE: 0,\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1\n  },\n  uniforms: {\n    tDepth: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    tNormal: {\n      value: null\n    },\n    size: {\n      value: /* @__PURE__ */new Vector2(512, 512)\n    },\n    cameraNear: {\n      value: 1\n    },\n    cameraFar: {\n      value: 100\n    },\n    cameraProjectionMatrix: {\n      value: /* @__PURE__ */new Matrix4()\n    },\n    cameraInverseProjectionMatrix: {\n      value: /* @__PURE__ */new Matrix4()\n    },\n    scale: {\n      value: 1\n    },\n    intensity: {\n      value: 0.1\n    },\n    bias: {\n      value: 0.5\n    },\n    minResolution: {\n      value: 0\n    },\n    kernelRadius: {\n      value: 100\n    },\n    randomSeed: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"varying vec2 vUv;\", \"#if DIFFUSE_TEXTURE == 1\", \"uniform sampler2D tDiffuse;\", \"#endif\", \"uniform sampler2D tDepth;\", \"#if NORMAL_TEXTURE == 1\", \"uniform sampler2D tNormal;\", \"#endif\", \"uniform float cameraNear;\", \"uniform float cameraFar;\", \"uniform mat4 cameraProjectionMatrix;\", \"uniform mat4 cameraInverseProjectionMatrix;\", \"uniform float scale;\", \"uniform float intensity;\", \"uniform float bias;\", \"uniform float kernelRadius;\", \"uniform float minResolution;\", \"uniform vec2 size;\", \"uniform float randomSeed;\", \"// RGBA depth\", \"#include <packing>\", \"vec4 getDefaultColor( const in vec2 screenPosition ) {\", \"\t#if DIFFUSE_TEXTURE == 1\", \"\treturn texture2D( tDiffuse, vUv );\", \"\t#else\", \"\treturn vec4( 1.0 );\", \"\t#endif\", \"}\", \"float getDepth( const in vec2 screenPosition ) {\", \"\t#if DEPTH_PACKING == 1\", \"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\", \"\t#else\", \"\treturn texture2D( tDepth, screenPosition ).x;\", \"\t#endif\", \"}\", \"float getViewZ( const in float depth ) {\", \"\t#if PERSPECTIVE_CAMERA == 1\", \"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\", \"\t#else\", \"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\", \"\t#endif\", \"}\", \"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\", \"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\", \"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\", \"\tclipPosition *= clipW; // unprojection.\", \"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\", \"}\", \"vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\", \"\t#if NORMAL_TEXTURE == 1\", \"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\", \"\t#else\", \"\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\", \"\t#endif\", \"}\", \"float scaleDividedByCameraFar;\", \"float minResolutionMultipliedByCameraFar;\", \"float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\", \"\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\", \"\tfloat viewDistance = length( viewDelta );\", \"\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\", \"\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\", \"}\", \"// moving costly divides into consts\", \"const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\", \"const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\", \"float getAmbientOcclusion( const in vec3 centerViewPosition ) {\", \"\t// precompute some variables require in getOcclusion.\", \"\tscaleDividedByCameraFar = scale / cameraFar;\", \"\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\", \"\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\", \"\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\", \"\tfloat angle = rand( vUv + randomSeed ) * PI2;\", \"\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\", \"\tvec2 radiusStep = radius;\", \"\tfloat occlusionSum = 0.0;\", \"\tfloat weightSum = 0.0;\", \"\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\", \"\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\", \"\t\tradius += radiusStep;\", \"\t\tangle += ANGLE_STEP;\", \"\t\tfloat sampleDepth = getDepth( sampleUv );\", \"\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\", \"\t\t\tcontinue;\", \"\t\t}\", \"\t\tfloat sampleViewZ = getViewZ( sampleDepth );\", \"\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\", \"\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\", \"\t\tweightSum += 1.0;\", \"\t}\", \"\tif( weightSum == 0.0 ) discard;\", \"\treturn occlusionSum * ( intensity / weightSum );\", \"}\", \"void main() {\", \"\tfloat centerDepth = getDepth( vUv );\", \"\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\", \"\t\tdiscard;\", \"\t}\", \"\tfloat centerViewZ = getViewZ( centerDepth );\", \"\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\", \"\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\", \"\tgl_FragColor = getDefaultColor( vUv );\", \"\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\", \"}\"].join(\"\\n\")\n};\nexport { SAOShader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/shaders/SAOShader.js"],"names":["Vector2","Matrix4","SAOShader","defines","NUM_SAMPLES","NUM_RINGS","NORMAL_TEXTURE","DIFFUSE_TEXTURE","DEPTH_PACKING","PERSPECTIVE_CAMERA","uniforms","tDepth","value","tDiffuse","tNormal","size","cameraNear","cameraFar","cameraProjectionMatrix","cameraInverseProjectionMatrix","scale","intensity","bias","minResolution","kernelRadius","randomSeed","vertexShader","join","fragmentShader"],"mappings":"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","sourcesContent":["import { Vector2, Matrix4 } from \"three\";\nconst SAOShader = {\n  defines: {\n    NUM_SAMPLES: 7,\n    NUM_RINGS: 4,\n    NORMAL_TEXTURE: 0,\n    DIFFUSE_TEXTURE: 0,\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1\n  },\n  uniforms: {\n    tDepth: { value: null },\n    tDiffuse: { value: null },\n    tNormal: { value: null },\n    size: { value: /* @__PURE__ */ new Vector2(512, 512) },\n    cameraNear: { value: 1 },\n    cameraFar: { value: 100 },\n    cameraProjectionMatrix: { value: /* @__PURE__ */ new Matrix4() },\n    cameraInverseProjectionMatrix: { value: /* @__PURE__ */ new Matrix4() },\n    scale: { value: 1 },\n    intensity: { value: 0.1 },\n    bias: { value: 0.5 },\n    minResolution: { value: 0 },\n    kernelRadius: { value: 100 },\n    randomSeed: { value: 0 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    \"varying vec2 vUv;\",\n    \"#if DIFFUSE_TEXTURE == 1\",\n    \"uniform sampler2D tDiffuse;\",\n    \"#endif\",\n    \"uniform sampler2D tDepth;\",\n    \"#if NORMAL_TEXTURE == 1\",\n    \"uniform sampler2D tNormal;\",\n    \"#endif\",\n    \"uniform float cameraNear;\",\n    \"uniform float cameraFar;\",\n    \"uniform mat4 cameraProjectionMatrix;\",\n    \"uniform mat4 cameraInverseProjectionMatrix;\",\n    \"uniform float scale;\",\n    \"uniform float intensity;\",\n    \"uniform float bias;\",\n    \"uniform float kernelRadius;\",\n    \"uniform float minResolution;\",\n    \"uniform vec2 size;\",\n    \"uniform float randomSeed;\",\n    \"// RGBA depth\",\n    \"#include <packing>\",\n    \"vec4 getDefaultColor( const in vec2 screenPosition ) {\",\n    \"\t#if DIFFUSE_TEXTURE == 1\",\n    \"\treturn texture2D( tDiffuse, vUv );\",\n    \"\t#else\",\n    \"\treturn vec4( 1.0 );\",\n    \"\t#endif\",\n    \"}\",\n    \"float getDepth( const in vec2 screenPosition ) {\",\n    \"\t#if DEPTH_PACKING == 1\",\n    \"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n    \"\t#else\",\n    \"\treturn texture2D( tDepth, screenPosition ).x;\",\n    \"\t#endif\",\n    \"}\",\n    \"float getViewZ( const in float depth ) {\",\n    \"\t#if PERSPECTIVE_CAMERA == 1\",\n    \"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\",\n    \"\t#else\",\n    \"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\",\n    \"\t#endif\",\n    \"}\",\n    \"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\",\n    \"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\",\n    \"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\",\n    \"\tclipPosition *= clipW; // unprojection.\",\n    \"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\",\n    \"}\",\n    \"vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\",\n    \"\t#if NORMAL_TEXTURE == 1\",\n    \"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\",\n    \"\t#else\",\n    \"\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\",\n    \"\t#endif\",\n    \"}\",\n    \"float scaleDividedByCameraFar;\",\n    \"float minResolutionMultipliedByCameraFar;\",\n    \"float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\",\n    \"\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\",\n    \"\tfloat viewDistance = length( viewDelta );\",\n    \"\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\",\n    \"\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\",\n    \"}\",\n    \"// moving costly divides into consts\",\n    \"const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\",\n    \"const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\",\n    \"float getAmbientOcclusion( const in vec3 centerViewPosition ) {\",\n    \"\t// precompute some variables require in getOcclusion.\",\n    \"\tscaleDividedByCameraFar = scale / cameraFar;\",\n    \"\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\",\n    \"\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\",\n    \"\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\",\n    \"\tfloat angle = rand( vUv + randomSeed ) * PI2;\",\n    \"\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\",\n    \"\tvec2 radiusStep = radius;\",\n    \"\tfloat occlusionSum = 0.0;\",\n    \"\tfloat weightSum = 0.0;\",\n    \"\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\",\n    \"\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\",\n    \"\t\tradius += radiusStep;\",\n    \"\t\tangle += ANGLE_STEP;\",\n    \"\t\tfloat sampleDepth = getDepth( sampleUv );\",\n    \"\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\",\n    \"\t\t\tcontinue;\",\n    \"\t\t}\",\n    \"\t\tfloat sampleViewZ = getViewZ( sampleDepth );\",\n    \"\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\",\n    \"\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\",\n    \"\t\tweightSum += 1.0;\",\n    \"\t}\",\n    \"\tif( weightSum == 0.0 ) discard;\",\n    \"\treturn occlusionSum * ( intensity / weightSum );\",\n    \"}\",\n    \"void main() {\",\n    \"\tfloat centerDepth = getDepth( vUv );\",\n    \"\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\",\n    \"\t\tdiscard;\",\n    \"\t}\",\n    \"\tfloat centerViewZ = getViewZ( centerDepth );\",\n    \"\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\",\n    \"\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\",\n    \"\tgl_FragColor = getDefaultColor( vUv );\",\n    \"\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  SAOShader\n};\n"]},"metadata":{},"sourceType":"module"}