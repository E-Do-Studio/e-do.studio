{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ShaderLib, Mesh, BoxGeometry, ShaderMaterial, UniformsUtils, BackSide, Scene, PerspectiveCamera } from \"three\";\nimport { Pass } from \"./Pass.js\";\n\nvar CubeTexturePass = /*#__PURE__*/function (_Pass) {\n  _inherits(CubeTexturePass, _Pass);\n\n  var _super = _createSuper(CubeTexturePass);\n\n  function CubeTexturePass(camera, tCube) {\n    var _this;\n\n    var opacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    _classCallCheck(this, CubeTexturePass);\n\n    _this = _super.call(this);\n    _this.camera = camera;\n    _this.needsSwap = false;\n    _this.cubeShader = ShaderLib[\"cube\"];\n    _this.cubeMesh = new Mesh(new BoxGeometry(10, 10, 10), new ShaderMaterial({\n      uniforms: UniformsUtils.clone(_this.cubeShader.uniforms),\n      vertexShader: _this.cubeShader.vertexShader,\n      fragmentShader: _this.cubeShader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      side: BackSide\n    }));\n    Object.defineProperty(_this.cubeMesh.material, \"envMap\", {\n      get: function get() {\n        return this.uniforms.tCube.value;\n      }\n    });\n    _this.tCube = tCube;\n    _this.opacity = opacity;\n    _this.cubeScene = new Scene();\n    _this.cubeCamera = new PerspectiveCamera();\n\n    _this.cubeScene.add(_this.cubeMesh);\n\n    return _this;\n  }\n\n  _createClass(CubeTexturePass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix);\n      this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld);\n      this.cubeMesh.material.uniforms.tCube.value = this.tCube;\n      this.cubeMesh.material.uniforms.tFlip.value = this.tCube.isCubeTexture && this.tCube.isRenderTargetTexture === false ? -1 : 1;\n      this.cubeMesh.material.uniforms.opacity.value = this.opacity;\n      this.cubeMesh.material.transparent = this.opacity < 1;\n      renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.cubeScene, this.cubeCamera);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.cubeMesh.geometry.dispose();\n      this.cubeMesh.material.dispose();\n    }\n  }]);\n\n  return CubeTexturePass;\n}(Pass);\n\nexport { CubeTexturePass };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/CubeTexturePass.js"],"names":["ShaderLib","Mesh","BoxGeometry","ShaderMaterial","UniformsUtils","BackSide","Scene","PerspectiveCamera","Pass","CubeTexturePass","camera","tCube","opacity","needsSwap","cubeShader","cubeMesh","uniforms","clone","vertexShader","fragmentShader","depthTest","depthWrite","side","Object","defineProperty","material","get","value","cubeScene","cubeCamera","add","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","projectionMatrix","copy","quaternion","setFromRotationMatrix","matrixWorld","tFlip","isCubeTexture","isRenderTargetTexture","transparent","setRenderTarget","renderToScreen","clear","render","geometry","dispose"],"mappings":"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","sourcesContent":["import { ShaderLib, Mesh, BoxGeometry, ShaderMaterial, UniformsUtils, BackSide, Scene, PerspectiveCamera } from \"three\";\nimport { Pass } from \"./Pass.js\";\nclass CubeTexturePass extends Pass {\n  constructor(camera, tCube, opacity = 1) {\n    super();\n    this.camera = camera;\n    this.needsSwap = false;\n    this.cubeShader = ShaderLib[\"cube\"];\n    this.cubeMesh = new Mesh(\n      new BoxGeometry(10, 10, 10),\n      new ShaderMaterial({\n        uniforms: UniformsUtils.clone(this.cubeShader.uniforms),\n        vertexShader: this.cubeShader.vertexShader,\n        fragmentShader: this.cubeShader.fragmentShader,\n        depthTest: false,\n        depthWrite: false,\n        side: BackSide\n      })\n    );\n    Object.defineProperty(this.cubeMesh.material, \"envMap\", {\n      get: function() {\n        return this.uniforms.tCube.value;\n      }\n    });\n    this.tCube = tCube;\n    this.opacity = opacity;\n    this.cubeScene = new Scene();\n    this.cubeCamera = new PerspectiveCamera();\n    this.cubeScene.add(this.cubeMesh);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix);\n    this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld);\n    this.cubeMesh.material.uniforms.tCube.value = this.tCube;\n    this.cubeMesh.material.uniforms.tFlip.value = this.tCube.isCubeTexture && this.tCube.isRenderTargetTexture === false ? -1 : 1;\n    this.cubeMesh.material.uniforms.opacity.value = this.opacity;\n    this.cubeMesh.material.transparent = this.opacity < 1;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear)\n      renderer.clear();\n    renderer.render(this.cubeScene, this.cubeCamera);\n    renderer.autoClear = oldAutoClear;\n  }\n  dispose() {\n    this.cubeMesh.geometry.dispose();\n    this.cubeMesh.material.dispose();\n  }\n}\nexport {\n  CubeTexturePass\n};\n"]},"metadata":{},"sourceType":"module"}