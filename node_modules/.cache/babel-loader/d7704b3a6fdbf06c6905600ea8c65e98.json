{"ast":null,"code":"import * as THREE from \"three\";\nconst PINCH_MAX = 0.05;\nconst PINCH_THRESHOLD = 0.02;\nconst PINCH_MIN = 0.01;\nconst POINTER_ADVANCE_MAX = 0.02;\nconst POINTER_OPACITY_MAX = 1;\nconst POINTER_OPACITY_MIN = 0.4;\nconst POINTER_FRONT_RADIUS = 2e-3;\nconst POINTER_REAR_RADIUS = 0.01;\nconst POINTER_REAR_RADIUS_MIN = 3e-3;\nconst POINTER_LENGTH = 0.035;\nconst POINTER_SEGMENTS = 16;\nconst POINTER_RINGS = 12;\nconst POINTER_HEMISPHERE_ANGLE = 110;\nconst YAXIS = /* @__PURE__ */new THREE.Vector3(0, 1, 0);\nconst ZAXIS = /* @__PURE__ */new THREE.Vector3(0, 0, 1);\nconst CURSOR_RADIUS = 0.02;\nconst CURSOR_MAX_DISTANCE = 1.5;\n\nclass OculusHandPointerModel extends THREE.Object3D {\n  constructor(hand, controller) {\n    super();\n    this.hand = hand;\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.pointerGeometry = null;\n    this.pointerMesh = null;\n    this.pointerObject = null;\n    this.pinched = false;\n    this.attached = false;\n    this.cursorObject = null;\n    this.raycaster = null;\n    this._onConnected = this._onConnected.bind(this);\n    this._onDisconnected = this._onDisconnected.bind(this);\n    this.hand.addEventListener(\"connected\", this._onConnected);\n    this.hand.addEventListener(\"disconnected\", this._onDisconnected);\n  }\n\n  _onConnected(event) {\n    const xrInputSource = event.data;\n\n    if (xrInputSource.hand) {\n      this.visible = true;\n      this.xrInputSource = xrInputSource;\n      this.createPointer();\n    }\n  }\n\n  _onDisconnected() {\n    this.visible = false;\n    this.xrInputSource = null;\n    this.pointerGeometry.dispose();\n    this.pointerMesh.material.dispose();\n    this.clear();\n  }\n\n  _drawVerticesRing(vertices, baseVector, ringIndex) {\n    const segmentVector = baseVector.clone();\n\n    for (var i = 0; i < POINTER_SEGMENTS; i++) {\n      segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n      const vid = ringIndex * POINTER_SEGMENTS + i;\n      vertices[3 * vid] = segmentVector.x;\n      vertices[3 * vid + 1] = segmentVector.y;\n      vertices[3 * vid + 2] = segmentVector.z;\n    }\n  }\n\n  _updatePointerVertices(rearRadius) {\n    const vertices = this.pointerGeometry.attributes.position.array;\n    const frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n\n    this._drawVerticesRing(vertices, frontFaceBase, 0);\n\n    const rearBase = new THREE.Vector3(Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, 0);\n\n    for (var i = 0; i < POINTER_RINGS; i++) {\n      this._drawVerticesRing(vertices, rearBase, i + 1);\n\n      rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n    }\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    const frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n    vertices[frontCenterIndex * 3] = frontCenter.x;\n    vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n    vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n    const rearCenter = new THREE.Vector3(0, 0, rearRadius);\n    vertices[rearCenterIndex * 3] = rearCenter.x;\n    vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n    vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n    this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n  }\n\n  createPointer() {\n    var i, j;\n    const vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0);\n    const indices = [];\n    this.pointerGeometry = new THREE.BufferGeometry();\n    this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n\n    this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n    for (i = 0; i < POINTER_RINGS; i++) {\n      for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n        indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n      }\n\n      indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n    }\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n\n    for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n      indices.push(frontCenterIndex, i + 1, i);\n      indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n    }\n\n    indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n    indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n    const material = new THREE.MeshBasicMaterial();\n    material.transparent = true;\n    material.opacity = POINTER_OPACITY_MIN;\n    this.pointerGeometry.setIndex(indices);\n    this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n    this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n    this.pointerObject = new THREE.Object3D();\n    this.pointerObject.add(this.pointerMesh);\n    this.raycaster = new THREE.Raycaster();\n    const cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n    const cursorMaterial = new THREE.MeshBasicMaterial();\n    cursorMaterial.transparent = true;\n    cursorMaterial.opacity = POINTER_OPACITY_MIN;\n    this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n    this.pointerObject.add(this.cursorObject);\n    this.add(this.pointerObject);\n  }\n\n  _updateRaycaster() {\n    if (this.raycaster) {\n      const pointerMatrix = this.pointerObject.matrixWorld;\n      const tempMatrix = new THREE.Matrix4();\n      tempMatrix.identity().extractRotation(pointerMatrix);\n      this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n      this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    }\n  }\n\n  _updatePointer() {\n    this.pointerObject.visible = this.controller.visible;\n    const indexTip = this.hand.joints[\"index-finger-tip\"];\n    const thumbTip = this.hand.joints[\"thumb-tip\"];\n    const distance = indexTip.position.distanceTo(thumbTip.position);\n    const position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n    this.pointerObject.position.copy(position);\n    this.pointerObject.quaternion.copy(this.controller.quaternion);\n    this.pinched = distance <= PINCH_THRESHOLD;\n    const pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n    const focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n\n    if (pinchScale > 1) {\n      this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n    } else if (pinchScale > 0) {\n      const rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n\n      this._updatePointerVertices(rearRadius);\n\n      if (focusScale < 1) {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n      } else {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      }\n    } else {\n      this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n    }\n\n    this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.pointerGeometry) {\n      this._updatePointer();\n\n      this._updateRaycaster();\n    }\n  }\n\n  isPinched() {\n    return this.pinched;\n  }\n\n  setAttached(attached) {\n    this.attached = attached;\n  }\n\n  isAttached() {\n    return this.attached;\n  }\n\n  intersectObject(object, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObject(object, recursive);\n    }\n  }\n\n  intersectObjects(objects, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObjects(objects, recursive);\n    }\n  }\n\n  checkIntersections(objects, recursive = false) {\n    if (this.raycaster && !this.attached) {\n      const intersections = this.raycaster.intersectObjects(objects, recursive);\n      const direction = new THREE.Vector3(0, 0, -1);\n\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const distance = intersection.distance;\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      } else {\n        this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n      }\n    }\n  }\n\n  setCursor(distance) {\n    const direction = new THREE.Vector3(0, 0, -1);\n\n    if (this.raycaster && !this.attached) {\n      this.cursorObject.position.copy(direction.multiplyScalar(distance));\n    }\n  }\n\n  dispose() {\n    this._onDisconnected();\n\n    this.hand.removeEventListener(\"connected\", this._onConnected);\n    this.hand.removeEventListener(\"disconnected\", this._onDisconnected);\n  }\n\n}\n\nexport { OculusHandPointerModel };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/webxr/OculusHandPointerModel.js"],"names":["THREE","PINCH_MAX","PINCH_THRESHOLD","PINCH_MIN","POINTER_ADVANCE_MAX","POINTER_OPACITY_MAX","POINTER_OPACITY_MIN","POINTER_FRONT_RADIUS","POINTER_REAR_RADIUS","POINTER_REAR_RADIUS_MIN","POINTER_LENGTH","POINTER_SEGMENTS","POINTER_RINGS","POINTER_HEMISPHERE_ANGLE","YAXIS","Vector3","ZAXIS","CURSOR_RADIUS","CURSOR_MAX_DISTANCE","OculusHandPointerModel","Object3D","constructor","hand","controller","motionController","envMap","mesh","pointerGeometry","pointerMesh","pointerObject","pinched","attached","cursorObject","raycaster","_onConnected","bind","_onDisconnected","addEventListener","event","xrInputSource","data","visible","createPointer","dispose","material","clear","_drawVerticesRing","vertices","baseVector","ringIndex","segmentVector","clone","i","applyAxisAngle","Math","PI","vid","x","y","z","_updatePointerVertices","rearRadius","attributes","position","array","frontFaceBase","rearBase","sin","cos","frontCenterIndex","rearCenterIndex","frontCenter","rearCenter","setAttribute","Float32BufferAttribute","j","Array","fill","indices","BufferGeometry","push","MeshBasicMaterial","transparent","opacity","setIndex","Mesh","set","add","Raycaster","cursorGeometry","SphereGeometry","cursorMaterial","_updateRaycaster","pointerMatrix","matrixWorld","tempMatrix","Matrix4","identity","extractRotation","ray","origin","setFromMatrixPosition","direction","applyMatrix4","_updatePointer","indexTip","joints","thumbTip","distance","distanceTo","multiplyScalar","copy","quaternion","pinchScale","focusScale","updateMatrixWorld","force","isPinched","setAttached","isAttached","intersectObject","object","recursive","intersectObjects","objects","checkIntersections","intersections","length","intersection","setCursor","removeEventListener"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nconst PINCH_MAX = 0.05;\nconst PINCH_THRESHOLD = 0.02;\nconst PINCH_MIN = 0.01;\nconst POINTER_ADVANCE_MAX = 0.02;\nconst POINTER_OPACITY_MAX = 1;\nconst POINTER_OPACITY_MIN = 0.4;\nconst POINTER_FRONT_RADIUS = 2e-3;\nconst POINTER_REAR_RADIUS = 0.01;\nconst POINTER_REAR_RADIUS_MIN = 3e-3;\nconst POINTER_LENGTH = 0.035;\nconst POINTER_SEGMENTS = 16;\nconst POINTER_RINGS = 12;\nconst POINTER_HEMISPHERE_ANGLE = 110;\nconst YAXIS = /* @__PURE__ */ new THREE.Vector3(0, 1, 0);\nconst ZAXIS = /* @__PURE__ */ new THREE.Vector3(0, 0, 1);\nconst CURSOR_RADIUS = 0.02;\nconst CURSOR_MAX_DISTANCE = 1.5;\nclass OculusHandPointerModel extends THREE.Object3D {\n  constructor(hand, controller) {\n    super();\n    this.hand = hand;\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.pointerGeometry = null;\n    this.pointerMesh = null;\n    this.pointerObject = null;\n    this.pinched = false;\n    this.attached = false;\n    this.cursorObject = null;\n    this.raycaster = null;\n    this._onConnected = this._onConnected.bind(this);\n    this._onDisconnected = this._onDisconnected.bind(this);\n    this.hand.addEventListener(\"connected\", this._onConnected);\n    this.hand.addEventListener(\"disconnected\", this._onDisconnected);\n  }\n  _onConnected(event) {\n    const xrInputSource = event.data;\n    if (xrInputSource.hand) {\n      this.visible = true;\n      this.xrInputSource = xrInputSource;\n      this.createPointer();\n    }\n  }\n  _onDisconnected() {\n    this.visible = false;\n    this.xrInputSource = null;\n    this.pointerGeometry.dispose();\n    this.pointerMesh.material.dispose();\n    this.clear();\n  }\n  _drawVerticesRing(vertices, baseVector, ringIndex) {\n    const segmentVector = baseVector.clone();\n    for (var i = 0; i < POINTER_SEGMENTS; i++) {\n      segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n      const vid = ringIndex * POINTER_SEGMENTS + i;\n      vertices[3 * vid] = segmentVector.x;\n      vertices[3 * vid + 1] = segmentVector.y;\n      vertices[3 * vid + 2] = segmentVector.z;\n    }\n  }\n  _updatePointerVertices(rearRadius) {\n    const vertices = this.pointerGeometry.attributes.position.array;\n    const frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n    this._drawVerticesRing(vertices, frontFaceBase, 0);\n    const rearBase = new THREE.Vector3(\n      Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius,\n      Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius,\n      0\n    );\n    for (var i = 0; i < POINTER_RINGS; i++) {\n      this._drawVerticesRing(vertices, rearBase, i + 1);\n      rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n    }\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    const frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n    vertices[frontCenterIndex * 3] = frontCenter.x;\n    vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n    vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n    const rearCenter = new THREE.Vector3(0, 0, rearRadius);\n    vertices[rearCenterIndex * 3] = rearCenter.x;\n    vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n    vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n    this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n  }\n  createPointer() {\n    var i, j;\n    const vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0);\n    const indices = [];\n    this.pointerGeometry = new THREE.BufferGeometry();\n    this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n    this._updatePointerVertices(POINTER_REAR_RADIUS);\n    for (i = 0; i < POINTER_RINGS; i++) {\n      for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n        indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n      }\n      indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n    }\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n      indices.push(frontCenterIndex, i + 1, i);\n      indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n    }\n    indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n    indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n    const material = new THREE.MeshBasicMaterial();\n    material.transparent = true;\n    material.opacity = POINTER_OPACITY_MIN;\n    this.pointerGeometry.setIndex(indices);\n    this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n    this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n    this.pointerObject = new THREE.Object3D();\n    this.pointerObject.add(this.pointerMesh);\n    this.raycaster = new THREE.Raycaster();\n    const cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n    const cursorMaterial = new THREE.MeshBasicMaterial();\n    cursorMaterial.transparent = true;\n    cursorMaterial.opacity = POINTER_OPACITY_MIN;\n    this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n    this.pointerObject.add(this.cursorObject);\n    this.add(this.pointerObject);\n  }\n  _updateRaycaster() {\n    if (this.raycaster) {\n      const pointerMatrix = this.pointerObject.matrixWorld;\n      const tempMatrix = new THREE.Matrix4();\n      tempMatrix.identity().extractRotation(pointerMatrix);\n      this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n      this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    }\n  }\n  _updatePointer() {\n    this.pointerObject.visible = this.controller.visible;\n    const indexTip = this.hand.joints[\"index-finger-tip\"];\n    const thumbTip = this.hand.joints[\"thumb-tip\"];\n    const distance = indexTip.position.distanceTo(thumbTip.position);\n    const position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n    this.pointerObject.position.copy(position);\n    this.pointerObject.quaternion.copy(this.controller.quaternion);\n    this.pinched = distance <= PINCH_THRESHOLD;\n    const pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n    const focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n    if (pinchScale > 1) {\n      this._updatePointerVertices(POINTER_REAR_RADIUS);\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n    } else if (pinchScale > 0) {\n      const rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n      this._updatePointerVertices(rearRadius);\n      if (focusScale < 1) {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n      } else {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      }\n    } else {\n      this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n    }\n    this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.pointerGeometry) {\n      this._updatePointer();\n      this._updateRaycaster();\n    }\n  }\n  isPinched() {\n    return this.pinched;\n  }\n  setAttached(attached) {\n    this.attached = attached;\n  }\n  isAttached() {\n    return this.attached;\n  }\n  intersectObject(object, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObject(object, recursive);\n    }\n  }\n  intersectObjects(objects, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObjects(objects, recursive);\n    }\n  }\n  checkIntersections(objects, recursive = false) {\n    if (this.raycaster && !this.attached) {\n      const intersections = this.raycaster.intersectObjects(objects, recursive);\n      const direction = new THREE.Vector3(0, 0, -1);\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const distance = intersection.distance;\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      } else {\n        this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n      }\n    }\n  }\n  setCursor(distance) {\n    const direction = new THREE.Vector3(0, 0, -1);\n    if (this.raycaster && !this.attached) {\n      this.cursorObject.position.copy(direction.multiplyScalar(distance));\n    }\n  }\n  dispose() {\n    this._onDisconnected();\n    this.hand.removeEventListener(\"connected\", this._onConnected);\n    this.hand.removeEventListener(\"disconnected\", this._onDisconnected);\n  }\n}\nexport {\n  OculusHandPointerModel\n};\n"]},"metadata":{},"sourceType":"module"}