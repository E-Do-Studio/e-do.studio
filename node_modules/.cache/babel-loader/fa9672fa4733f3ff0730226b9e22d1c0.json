{"ast":null,"code":"const VignetteShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    offset: {\n      value: 1\n    },\n    darkness: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float offset;\", \"uniform float darkness;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", // Eskil's vignette\n  \"\tvec4 texel = texture2D( tDiffuse, vUv );\", \"\tvec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\", \"\tgl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\",\n  /*\n  \t\t// alternative version from glfx.js\n  \t\t// this one makes more \"dusty\" look (as opposed to \"burned\")\n  \n  \t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\n  \t\t\"\tfloat dist = distance( vUv, vec2( 0.5 ) );\",\n  \t\t\"\tcolor.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\",\n  \t\t\"\tgl_FragColor = color;\",\n  \t\t*/\n  \"}\"].join(\"\\n\")\n};\nexport { VignetteShader };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/shaders/VignetteShader.js"],"names":["VignetteShader","uniforms","tDiffuse","value","offset","darkness","vertexShader","join","fragmentShader"],"mappings":"AAAA,MAAMA,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,MAAM,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFA;AAGRE,IAAAA,QAAQ,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT;AAHF,GADW;AAMrBG,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CANO;AAarBC,EAAAA,cAAc,EAAE,CACd,uBADc,EAEd,yBAFc,EAGd,6BAHc,EAId,mBAJc,EAKd,eALc,EAMd;AACA,6CAPc,EAQd,oDARc,EASd,2FATc;AAUd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,KAnBc,EAoBdD,IApBc,CAoBT,IApBS;AAbK,CAAvB;AAmCA,SACEP,cADF","sourcesContent":["const VignetteShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    offset: { value: 1 },\n    darkness: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform float offset;\",\n    \"uniform float darkness;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    // Eskil's vignette\n    \"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n    \"\tvec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\",\n    \"\tgl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\",\n    /*\n    \t\t// alternative version from glfx.js\n    \t\t// this one makes more \"dusty\" look (as opposed to \"burned\")\n    \n    \t\t\"\tvec4 color = texture2D( tDiffuse, vUv );\",\n    \t\t\"\tfloat dist = distance( vUv, vec2( 0.5 ) );\",\n    \t\t\"\tcolor.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\",\n    \t\t\"\tgl_FragColor = color;\",\n    \t\t*/\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  VignetteShader\n};\n"]},"metadata":{},"sourceType":"module"}