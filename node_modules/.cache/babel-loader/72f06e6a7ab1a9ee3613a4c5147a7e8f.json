{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack, AnimationClip, Skeleton } from \"three\";\n\nvar BVHLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(BVHLoader, _Loader);\n\n  var _super = _createSuper(BVHLoader);\n\n  function BVHLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, BVHLoader);\n\n    _this = _super.call(this, manager);\n    _this.animateBonePositions = true;\n    _this.animateBoneRotations = true;\n    return _this;\n  }\n\n  _createClass(BVHLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      function readBvh(lines2) {\n        if (nextLine(lines2) !== \"HIERARCHY\") {\n          console.error(\"THREE.BVHLoader: HIERARCHY expected.\");\n        }\n\n        var list = [];\n        var root = readNode(lines2, nextLine(lines2), list);\n\n        if (nextLine(lines2) !== \"MOTION\") {\n          console.error(\"THREE.BVHLoader: MOTION expected.\");\n        }\n\n        var tokens = nextLine(lines2).split(/[\\s]+/);\n        var numFrames = parseInt(tokens[1]);\n\n        if (isNaN(numFrames)) {\n          console.error(\"THREE.BVHLoader: Failed to read number of frames.\");\n        }\n\n        tokens = nextLine(lines2).split(/[\\s]+/);\n        var frameTime = parseFloat(tokens[2]);\n\n        if (isNaN(frameTime)) {\n          console.error(\"THREE.BVHLoader: Failed to read frame time.\");\n        }\n\n        for (var i = 0; i < numFrames; i++) {\n          tokens = nextLine(lines2).split(/[\\s]+/);\n          readFrameData(tokens, i * frameTime, root);\n        }\n\n        return list;\n      }\n\n      function readFrameData(data, frameTime, bone) {\n        if (bone.type === \"ENDSITE\") return;\n        var keyframe = {\n          time: frameTime,\n          position: new Vector3(),\n          rotation: new Quaternion()\n        };\n        bone.frames.push(keyframe);\n        var quat = new Quaternion();\n        var vx = new Vector3(1, 0, 0);\n        var vy = new Vector3(0, 1, 0);\n        var vz = new Vector3(0, 0, 1);\n\n        for (var i = 0; i < bone.channels.length; i++) {\n          switch (bone.channels[i]) {\n            case \"Xposition\":\n              keyframe.position.x = parseFloat(data.shift().trim());\n              break;\n\n            case \"Yposition\":\n              keyframe.position.y = parseFloat(data.shift().trim());\n              break;\n\n            case \"Zposition\":\n              keyframe.position.z = parseFloat(data.shift().trim());\n              break;\n\n            case \"Xrotation\":\n              quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            case \"Yrotation\":\n              quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            case \"Zrotation\":\n              quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            default:\n              console.warn(\"THREE.BVHLoader: Invalid channel type.\");\n          }\n        }\n\n        for (var _i = 0; _i < bone.children.length; _i++) {\n          readFrameData(data, frameTime, bone.children[_i]);\n        }\n      }\n\n      function readNode(lines2, firstline, list) {\n        var node = {\n          name: \"\",\n          type: \"\",\n          frames: []\n        };\n        list.push(node);\n        var tokens = firstline.split(/[\\s]+/);\n\n        if (tokens[0].toUpperCase() === \"END\" && tokens[1].toUpperCase() === \"SITE\") {\n          node.type = \"ENDSITE\";\n          node.name = \"ENDSITE\";\n        } else {\n          node.name = tokens[1];\n          node.type = tokens[0].toUpperCase();\n        }\n\n        if (nextLine(lines2) !== \"{\") {\n          console.error(\"THREE.BVHLoader: Expected opening { after type & name\");\n        }\n\n        tokens = nextLine(lines2).split(/[\\s]+/);\n\n        if (tokens[0] !== \"OFFSET\") {\n          console.error(\"THREE.BVHLoader: Expected OFFSET but got: \" + tokens[0]);\n        }\n\n        if (tokens.length !== 4) {\n          console.error(\"THREE.BVHLoader: Invalid number of values for OFFSET.\");\n        }\n\n        var offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n\n        if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n          console.error(\"THREE.BVHLoader: Invalid values of OFFSET.\");\n        }\n\n        node.offset = offset;\n\n        if (node.type !== \"ENDSITE\") {\n          tokens = nextLine(lines2).split(/[\\s]+/);\n\n          if (tokens[0] !== \"CHANNELS\") {\n            console.error(\"THREE.BVHLoader: Expected CHANNELS definition.\");\n          }\n\n          var numChannels = parseInt(tokens[1]);\n          node.channels = tokens.splice(2, numChannels);\n          node.children = [];\n        }\n\n        while (true) {\n          var line = nextLine(lines2);\n\n          if (line === \"}\") {\n            return node;\n          } else {\n            node.children.push(readNode(lines2, line, list));\n          }\n        }\n      }\n\n      function toTHREEBone(source, list) {\n        var bone = new Bone();\n        list.push(bone);\n        bone.position.add(source.offset);\n        bone.name = source.name;\n\n        if (source.type !== \"ENDSITE\") {\n          for (var i = 0; i < source.children.length; i++) {\n            bone.add(toTHREEBone(source.children[i], list));\n          }\n        }\n\n        return bone;\n      }\n\n      function toTHREEAnimation(bones2) {\n        var tracks = [];\n\n        for (var i = 0; i < bones2.length; i++) {\n          var bone = bones2[i];\n          if (bone.type === \"ENDSITE\") continue;\n          var times = [];\n          var positions = [];\n          var rotations = [];\n\n          for (var j = 0; j < bone.frames.length; j++) {\n            var frame = bone.frames[j];\n            times.push(frame.time);\n            positions.push(frame.position.x + bone.offset.x);\n            positions.push(frame.position.y + bone.offset.y);\n            positions.push(frame.position.z + bone.offset.z);\n            rotations.push(frame.rotation.x);\n            rotations.push(frame.rotation.y);\n            rotations.push(frame.rotation.z);\n            rotations.push(frame.rotation.w);\n          }\n\n          if (scope.animateBonePositions) {\n            tracks.push(new VectorKeyframeTrack(\".bones[\" + bone.name + \"].position\", times, positions));\n          }\n\n          if (scope.animateBoneRotations) {\n            tracks.push(new QuaternionKeyframeTrack(\".bones[\" + bone.name + \"].quaternion\", times, rotations));\n          }\n        }\n\n        return new AnimationClip(\"animation\", -1, tracks);\n      }\n\n      function nextLine(lines2) {\n        var line;\n\n        while ((line = lines2.shift().trim()).length === 0) {}\n\n        return line;\n      }\n\n      var scope = this;\n      var lines = text.split(/[\\r\\n]+/g);\n      var bones = readBvh(lines);\n      var threeBones = [];\n      toTHREEBone(bones[0], threeBones);\n      var threeClip = toTHREEAnimation(bones);\n      return {\n        skeleton: new Skeleton(threeBones),\n        clip: threeClip\n      };\n    }\n  }]);\n\n  return BVHLoader;\n}(Loader);\n\nexport { BVHLoader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/BVHLoader.js"],"names":["Loader","FileLoader","Vector3","Quaternion","Bone","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationClip","Skeleton","BVHLoader","manager","animateBonePositions","animateBoneRotations","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","readBvh","lines2","nextLine","list","root","readNode","tokens","split","numFrames","parseInt","isNaN","frameTime","parseFloat","i","readFrameData","data","bone","type","keyframe","time","position","rotation","frames","push","quat","vx","vy","vz","channels","length","x","shift","trim","y","z","setFromAxisAngle","Math","PI","multiply","warn","children","firstline","node","name","toUpperCase","offset","numChannels","splice","line","toTHREEBone","source","add","toTHREEAnimation","bones2","tracks","times","positions","rotations","j","frame","w","lines","bones","threeBones","threeClip","skeleton","clip"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack, AnimationClip, Skeleton } from \"three\";\nclass BVHLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.animateBonePositions = true;\n    this.animateBoneRotations = true;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(text) {\n    function readBvh(lines2) {\n      if (nextLine(lines2) !== \"HIERARCHY\") {\n        console.error(\"THREE.BVHLoader: HIERARCHY expected.\");\n      }\n      const list = [];\n      const root = readNode(lines2, nextLine(lines2), list);\n      if (nextLine(lines2) !== \"MOTION\") {\n        console.error(\"THREE.BVHLoader: MOTION expected.\");\n      }\n      let tokens = nextLine(lines2).split(/[\\s]+/);\n      const numFrames = parseInt(tokens[1]);\n      if (isNaN(numFrames)) {\n        console.error(\"THREE.BVHLoader: Failed to read number of frames.\");\n      }\n      tokens = nextLine(lines2).split(/[\\s]+/);\n      const frameTime = parseFloat(tokens[2]);\n      if (isNaN(frameTime)) {\n        console.error(\"THREE.BVHLoader: Failed to read frame time.\");\n      }\n      for (let i = 0; i < numFrames; i++) {\n        tokens = nextLine(lines2).split(/[\\s]+/);\n        readFrameData(tokens, i * frameTime, root);\n      }\n      return list;\n    }\n    function readFrameData(data, frameTime, bone) {\n      if (bone.type === \"ENDSITE\")\n        return;\n      const keyframe = {\n        time: frameTime,\n        position: new Vector3(),\n        rotation: new Quaternion()\n      };\n      bone.frames.push(keyframe);\n      const quat = new Quaternion();\n      const vx = new Vector3(1, 0, 0);\n      const vy = new Vector3(0, 1, 0);\n      const vz = new Vector3(0, 0, 1);\n      for (let i = 0; i < bone.channels.length; i++) {\n        switch (bone.channels[i]) {\n          case \"Xposition\":\n            keyframe.position.x = parseFloat(data.shift().trim());\n            break;\n          case \"Yposition\":\n            keyframe.position.y = parseFloat(data.shift().trim());\n            break;\n          case \"Zposition\":\n            keyframe.position.z = parseFloat(data.shift().trim());\n            break;\n          case \"Xrotation\":\n            quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n          case \"Yrotation\":\n            quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n          case \"Zrotation\":\n            quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n          default:\n            console.warn(\"THREE.BVHLoader: Invalid channel type.\");\n        }\n      }\n      for (let i = 0; i < bone.children.length; i++) {\n        readFrameData(data, frameTime, bone.children[i]);\n      }\n    }\n    function readNode(lines2, firstline, list) {\n      const node = { name: \"\", type: \"\", frames: [] };\n      list.push(node);\n      let tokens = firstline.split(/[\\s]+/);\n      if (tokens[0].toUpperCase() === \"END\" && tokens[1].toUpperCase() === \"SITE\") {\n        node.type = \"ENDSITE\";\n        node.name = \"ENDSITE\";\n      } else {\n        node.name = tokens[1];\n        node.type = tokens[0].toUpperCase();\n      }\n      if (nextLine(lines2) !== \"{\") {\n        console.error(\"THREE.BVHLoader: Expected opening { after type & name\");\n      }\n      tokens = nextLine(lines2).split(/[\\s]+/);\n      if (tokens[0] !== \"OFFSET\") {\n        console.error(\"THREE.BVHLoader: Expected OFFSET but got: \" + tokens[0]);\n      }\n      if (tokens.length !== 4) {\n        console.error(\"THREE.BVHLoader: Invalid number of values for OFFSET.\");\n      }\n      const offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n      if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n        console.error(\"THREE.BVHLoader: Invalid values of OFFSET.\");\n      }\n      node.offset = offset;\n      if (node.type !== \"ENDSITE\") {\n        tokens = nextLine(lines2).split(/[\\s]+/);\n        if (tokens[0] !== \"CHANNELS\") {\n          console.error(\"THREE.BVHLoader: Expected CHANNELS definition.\");\n        }\n        const numChannels = parseInt(tokens[1]);\n        node.channels = tokens.splice(2, numChannels);\n        node.children = [];\n      }\n      while (true) {\n        const line = nextLine(lines2);\n        if (line === \"}\") {\n          return node;\n        } else {\n          node.children.push(readNode(lines2, line, list));\n        }\n      }\n    }\n    function toTHREEBone(source, list) {\n      const bone = new Bone();\n      list.push(bone);\n      bone.position.add(source.offset);\n      bone.name = source.name;\n      if (source.type !== \"ENDSITE\") {\n        for (let i = 0; i < source.children.length; i++) {\n          bone.add(toTHREEBone(source.children[i], list));\n        }\n      }\n      return bone;\n    }\n    function toTHREEAnimation(bones2) {\n      const tracks = [];\n      for (let i = 0; i < bones2.length; i++) {\n        const bone = bones2[i];\n        if (bone.type === \"ENDSITE\")\n          continue;\n        const times = [];\n        const positions = [];\n        const rotations = [];\n        for (let j = 0; j < bone.frames.length; j++) {\n          const frame = bone.frames[j];\n          times.push(frame.time);\n          positions.push(frame.position.x + bone.offset.x);\n          positions.push(frame.position.y + bone.offset.y);\n          positions.push(frame.position.z + bone.offset.z);\n          rotations.push(frame.rotation.x);\n          rotations.push(frame.rotation.y);\n          rotations.push(frame.rotation.z);\n          rotations.push(frame.rotation.w);\n        }\n        if (scope.animateBonePositions) {\n          tracks.push(new VectorKeyframeTrack(\".bones[\" + bone.name + \"].position\", times, positions));\n        }\n        if (scope.animateBoneRotations) {\n          tracks.push(new QuaternionKeyframeTrack(\".bones[\" + bone.name + \"].quaternion\", times, rotations));\n        }\n      }\n      return new AnimationClip(\"animation\", -1, tracks);\n    }\n    function nextLine(lines2) {\n      let line;\n      while ((line = lines2.shift().trim()).length === 0) {\n      }\n      return line;\n    }\n    const scope = this;\n    const lines = text.split(/[\\r\\n]+/g);\n    const bones = readBvh(lines);\n    const threeBones = [];\n    toTHREEBone(bones[0], threeBones);\n    const threeClip = toTHREEAnimation(bones);\n    return {\n      skeleton: new Skeleton(threeBones),\n      clip: threeClip\n    };\n  }\n}\nexport {\n  BVHLoader\n};\n"]},"metadata":{},"sourceType":"module"}