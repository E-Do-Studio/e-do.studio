{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/e-do/src/Components/Index/Services2/textes.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from '@react-hook/media-query';\nimport anime from 'animejs/lib/anime.es.js';\nimport { useViewport } from '../../../Hooks/viewportProvider';\nimport ButtonRond from './boutonRond';\nimport './textes.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst splitLines = (container, opentag, closingtag) => {\n  var spans = container.children,\n      top = 0,\n      tmp = ''; // Put spans on each word, for now we use the <n> tag because, we want to save 5 bytes:)\n\n  container.innerHTML = container.textContent.replace(/\\S+/g, '<n>$&</n>');\n  let ligne = 0; // Loop through each words (spans) \n\n  for (let i = 0; i < spans.length; i++) {\n    // Get the height of each word\n    var rect = spans[i].getBoundingClientRect().top; // If top is different as the last height of the word use a closingtag and use an opentag after that\n\n    if (top < rect) {\n      ligne++;\n\n      if (ligne == 1) {\n        tmp += opentag;\n      } else {\n        tmp += closingtag + opentag;\n      }\n    }\n\n    top = rect; // Add the spans + space between each word\n\n    tmp += spans[i].textContent + ' ';\n  } // Add the lines back to the paragraph \n\n\n  container.innerHTML = tmp += closingtag;\n};\n\nconst Textes = ({\n  titre,\n  texte,\n  AnimationBloc3\n}) => {\n  _s();\n\n  const matches = useMediaQuery('only screen and (min-width: 1150px)'); //Force le rendu après le redimensionnement de l'écran\n\n  const windowSize = useViewport();\n  const [windowSizeState, setWindowSizeState] = useState({\n    width: windowSize.width,\n    height: windowSize.height\n  });\n  const [CalculLigne, setCalculLigne] = useState(false);\n  useEffect(() => {\n    if (document.querySelector('#text21') && !CalculLigne) {\n      splitLines(document.querySelector('#text21'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>');\n      splitLines(document.querySelector('#text22'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>');\n      setCalculLigne(true);\n    }\n\n    if (windowSize.width !== windowSizeState.width || windowSize.height !== windowSizeState.height) {\n      setWindowSizeState({\n        width: windowSize.width,\n        height: windowSize.height\n      });\n\n      if (document.querySelector('#text21')) {\n        splitLines(document.querySelector('#text21'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>');\n        splitLines(document.querySelector('#text22'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>');\n        let sousligneServices = document.querySelectorAll('.sousligneServices2');\n        let servicesTitreSousLigne = document.querySelectorAll('.servicesTitreSousLigne2');\n        sousligneServices.forEach(element => {\n          element.style.opacity = 1;\n        });\n        servicesTitreSousLigne.forEach(element => {\n          element.style.opacity = 1;\n        });\n      }\n    }\n  }); // Animation du texte \n\n  useEffect(() => {\n    if (AnimationBloc3) {\n      anime({\n        targets: '.sousligneServices2',\n        translateY: [1000, 0],\n        easing: \"easeOutExpo\",\n        duration: 1200,\n        delay: (el, i) => 70 * i\n      });\n      anime({\n        targets: '.servicesTitreSousLigne2',\n        translateY: [1000, 0],\n        easing: \"easeOutExpo\",\n        duration: 1500,\n        delay: 0\n      });\n      let sousligneServices = document.querySelectorAll('.sousligneServices2');\n      let servicesTitreSousLigne = document.querySelectorAll('.servicesTitreSousLigne2');\n      sousligneServices.forEach(element => {\n        element.style.opacity = 1;\n      });\n      servicesTitreSousLigne.forEach(element => {\n        element.style.opacity = 1;\n      });\n    }\n  }, [AnimationBloc3]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"servicesTextes2\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"servicesTitreLigne2\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"servicesTitreSousLigne2\",\n          children: titre[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"servicesTitreLigne2\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"servicesTitreSousLigne2\",\n          children: titre[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 161\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 123\n      }, this), !matches ? /*#__PURE__*/_jsxDEV(ButtonRond, {\n        AnimationBloc3: AnimationBloc3,\n        children: \"Tarifs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paragraphes\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"text21\",\n        children: texte[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"text22\",\n        children: texte[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), matches ? /*#__PURE__*/_jsxDEV(ButtonRond, {\n        AnimationBloc3: AnimationBloc3,\n        children: \"Tarifs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Textes, \"/AJjJDQUZfnWK+C2xua78efVUqQ=\", false, function () {\n  return [useMediaQuery, useViewport];\n});\n\n_c = Textes;\nexport default Textes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Textes\");","map":{"version":3,"sources":["/Users/theodaguier/e-do/src/Components/Index/Services2/textes.jsx"],"names":["React","useEffect","useState","useMediaQuery","anime","useViewport","ButtonRond","splitLines","container","opentag","closingtag","spans","children","top","tmp","innerHTML","textContent","replace","ligne","i","length","rect","getBoundingClientRect","Textes","titre","texte","AnimationBloc3","matches","windowSize","windowSizeState","setWindowSizeState","width","height","CalculLigne","setCalculLigne","document","querySelector","sousligneServices","querySelectorAll","servicesTitreSousLigne","forEach","element","style","opacity","targets","translateY","easing","duration","delay","el"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {useMediaQuery} from '@react-hook/media-query'\nimport anime from 'animejs/lib/anime.es.js';\n\nimport {useViewport} from '../../../Hooks/viewportProvider'\n\nimport ButtonRond from './boutonRond'\n\n\nimport './textes.scss'\n\n\n\nconst  splitLines = (container, opentag, closingtag) => {\n    var spans = container.children,\n        top = 0,\n        tmp = '';\n    // Put spans on each word, for now we use the <n> tag because, we want to save 5 bytes:)\n    container.innerHTML = container.textContent.replace(/\\S+/g, '<n>$&</n>');   \n    let ligne = 0;\n    // Loop through each words (spans) \n    for (let i = 0; i < spans.length; i++) {\n        // Get the height of each word\n        var rect = spans[i].getBoundingClientRect().top;\n        // If top is different as the last height of the word use a closingtag and use an opentag after that\n        if (top < rect) {\n            ligne++\n            if(ligne == 1){\n                tmp += opentag;\n            } else {\n                tmp += closingtag + opentag;\n            }\n            \n        }\n        top = rect;\n        // Add the spans + space between each word\n        tmp += spans[i].textContent + ' ';\n    }\n\n    // Add the lines back to the paragraph \n    container.innerHTML = tmp += closingtag;\n}\n\n\nconst Textes = ({titre, texte, AnimationBloc3}) => {\n    const matches = useMediaQuery('only screen and (min-width: 1150px)')\n    \n    //Force le rendu après le redimensionnement de l'écran\n    const windowSize = useViewport()\n    const [windowSizeState, setWindowSizeState] = useState({\n        width: windowSize.width,\n        height: windowSize.height\n    })\n    const [CalculLigne, setCalculLigne] = useState(false)\n\n    useEffect(() => {\n\n        if(document.querySelector('#text21') && !CalculLigne){\n            splitLines(document.querySelector('#text21'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>')\n            splitLines(document.querySelector('#text22'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>')\n            setCalculLigne(true)\n        }\n\n        if(windowSize.width !== windowSizeState.width || windowSize.height !== windowSizeState.height){\n            setWindowSizeState({\n                width: windowSize.width,\n                height: windowSize.height\n            })\n\n            if(document.querySelector('#text21')){\n                splitLines(document.querySelector('#text21'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>')\n                splitLines(document.querySelector('#text22'), '<span class=\"ligneServices2\"><span class=\"sousligneServices2\">', '</span></span>')\n                let sousligneServices = document.querySelectorAll('.sousligneServices2')\n                let servicesTitreSousLigne = document.querySelectorAll('.servicesTitreSousLigne2')\n\n                sousligneServices.forEach(element => {\n                    element.style.opacity = 1\n                })\n\n                servicesTitreSousLigne.forEach(element => {\n                    element.style.opacity = 1\n                })\n            \n            }\n\n        }\n    })\n\n\n\n    // Animation du texte \n    useEffect(() => {\n        \n        if(AnimationBloc3){\n            anime({\n                targets: '.sousligneServices2',\n                translateY: [1000,0],\n                easing: \"easeOutExpo\",\n                duration: 1200,\n                delay: (el, i) => 70 * i\n            })\n\n            anime({\n                targets: '.servicesTitreSousLigne2',\n                translateY: [1000,0],\n                easing: \"easeOutExpo\",\n                duration: 1500,\n                delay: 0\n            })\n\n            let sousligneServices = document.querySelectorAll('.sousligneServices2')\n            let servicesTitreSousLigne = document.querySelectorAll('.servicesTitreSousLigne2')\n\n            sousligneServices.forEach(element => {\n                element.style.opacity = 1\n            })\n\n            servicesTitreSousLigne.forEach(element => {\n                element.style.opacity = 1\n            })\n        }\n\n\n    }, [AnimationBloc3]);\n\n    return(\n        <div className=\"servicesTextes2\">\n            <h1>\n                <span className=\"servicesTitreLigne2\"><span className=\"servicesTitreSousLigne2\">{ titre[0] }</span></span><span className=\"servicesTitreLigne2\"><span className=\"servicesTitreSousLigne2\">{ titre[1] }</span></span>\n                {\n                    !matches ?\n                        <ButtonRond AnimationBloc3={AnimationBloc3}>Tarifs</ButtonRond>\n                    :\n                        ''\n                }\n            </h1>\n            <div className=\"paragraphes\">\n                <p id=\"text21\">{texte[0]}</p>\n                <p id=\"text22\">{texte[1]}</p>\n\n                {\n                    matches ?\n                        <ButtonRond AnimationBloc3={AnimationBloc3}>Tarifs</ButtonRond>\n                    :\n                        ''\n                }\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default Textes\n"]},"metadata":{},"sourceType":"module"}