{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nconst _VRButton = class {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement(\"button\");\n\n    function showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener(\"end\", onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = \"EXIT VR\";\n        currentSession = session;\n      }\n\n      function onSessionEnded() {\n        currentSession.removeEventListener(\"end\", onSessionEnded);\n        button.textContent = \"ENTER VR\";\n        currentSession = null;\n      }\n\n      button.style.display = \"\";\n      button.style.cursor = \"pointer\";\n      button.style.left = \"calc(50% - 50px)\";\n      button.style.width = \"100px\";\n      button.textContent = \"ENTER VR\";\n\n      button.onmouseenter = () => {\n        button.style.opacity = \"1.0\";\n      };\n\n      button.onmouseleave = () => {\n        button.style.opacity = \"0.5\";\n      };\n\n      button.onclick = () => {\n        var _a;\n\n        if (currentSession === null) {\n          const optionalFeatures = [sessionInit.optionalFeatures, \"local-floor\", \"bounded-floor\", \"hand-tracking\"].flat().filter(Boolean);\n          (_a = navigator.xr) == null ? void 0 : _a.requestSession(\"immersive-vr\", { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = \"\";\n      button.style.cursor = \"auto\";\n      button.style.left = \"calc(50% - 75px)\";\n      button.style.width = \"150px\";\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = \"VR NOT SUPPORTED\";\n    }\n\n    function stylizeElement(element) {\n      element.style.position = \"absolute\";\n      element.style.bottom = \"20px\";\n      element.style.padding = \"12px 6px\";\n      element.style.border = \"1px solid #fff\";\n      element.style.borderRadius = \"4px\";\n      element.style.background = \"rgba(0,0,0,0.1)\";\n      element.style.color = \"#fff\";\n      element.style.font = \"normal 13px sans-serif\";\n      element.style.textAlign = \"center\";\n      element.style.opacity = \"0.5\";\n      element.style.outline = \"none\";\n      element.style.zIndex = \"999\";\n    }\n\n    if (\"xr\" in navigator) {\n      stylizeElement(button);\n      button.id = \"VRButton\";\n      button.style.display = \"none\";\n      navigator.xr.isSessionSupported(\"immersive-vr\").then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && _VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement(\"a\");\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, \"https:\");\n        message.innerHTML = \"WEBXR NEEDS HTTPS\";\n      } else {\n        message.href = \"https://immersiveweb.dev/\";\n        message.innerHTML = \"WEBXR NOT AVAILABLE\";\n      }\n\n      message.style.left = \"calc(50% - 90px)\";\n      message.style.width = \"180px\";\n      message.style.textDecoration = \"none\";\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if (\"xr\" in navigator) {\n      ;\n      navigator.xr.addEventListener(\"sessiongranted\", () => {\n        _VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n};\n\nlet VRButton = _VRButton;\n\n__publicField(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/webxr/VRButton.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","_VRButton","createButton","renderer","sessionInit","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","_a","optionalFeatures","flat","filter","Boolean","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener","VRButton"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst _VRButton = class {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement(\"button\");\n    function showEnterVR() {\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener(\"end\", onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = \"EXIT VR\";\n        currentSession = session;\n      }\n      function onSessionEnded() {\n        currentSession.removeEventListener(\"end\", onSessionEnded);\n        button.textContent = \"ENTER VR\";\n        currentSession = null;\n      }\n      button.style.display = \"\";\n      button.style.cursor = \"pointer\";\n      button.style.left = \"calc(50% - 50px)\";\n      button.style.width = \"100px\";\n      button.textContent = \"ENTER VR\";\n      button.onmouseenter = () => {\n        button.style.opacity = \"1.0\";\n      };\n      button.onmouseleave = () => {\n        button.style.opacity = \"0.5\";\n      };\n      button.onclick = () => {\n        var _a;\n        if (currentSession === null) {\n          const optionalFeatures = [sessionInit.optionalFeatures, \"local-floor\", \"bounded-floor\", \"hand-tracking\"].flat().filter(Boolean);\n          (_a = navigator.xr) == null ? void 0 : _a.requestSession(\"immersive-vr\", { ...sessionInit, optionalFeatures }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = \"\";\n      button.style.cursor = \"auto\";\n      button.style.left = \"calc(50% - 75px)\";\n      button.style.width = \"150px\";\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = \"VR NOT SUPPORTED\";\n    }\n    function stylizeElement(element) {\n      element.style.position = \"absolute\";\n      element.style.bottom = \"20px\";\n      element.style.padding = \"12px 6px\";\n      element.style.border = \"1px solid #fff\";\n      element.style.borderRadius = \"4px\";\n      element.style.background = \"rgba(0,0,0,0.1)\";\n      element.style.color = \"#fff\";\n      element.style.font = \"normal 13px sans-serif\";\n      element.style.textAlign = \"center\";\n      element.style.opacity = \"0.5\";\n      element.style.outline = \"none\";\n      element.style.zIndex = \"999\";\n    }\n    if (\"xr\" in navigator) {\n      stylizeElement(button);\n      button.id = \"VRButton\";\n      button.style.display = \"none\";\n      navigator.xr.isSessionSupported(\"immersive-vr\").then((supported) => {\n        supported ? showEnterVR() : showWebXRNotFound();\n        if (supported && _VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement(\"a\");\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, \"https:\");\n        message.innerHTML = \"WEBXR NEEDS HTTPS\";\n      } else {\n        message.href = \"https://immersiveweb.dev/\";\n        message.innerHTML = \"WEBXR NOT AVAILABLE\";\n      }\n      message.style.left = \"calc(50% - 90px)\";\n      message.style.width = \"180px\";\n      message.style.textDecoration = \"none\";\n      stylizeElement(message);\n      return message;\n    }\n  }\n  static registerSessionGrantedListener() {\n    if (\"xr\" in navigator) {\n      ;\n      navigator.xr.addEventListener(\"sessiongranted\", () => {\n        _VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n};\nlet VRButton = _VRButton;\n__publicField(VRButton, \"xrSessionIsGranted\", false);\nexport {\n  VRButton\n};\n"]},"metadata":{},"sourceType":"module"}