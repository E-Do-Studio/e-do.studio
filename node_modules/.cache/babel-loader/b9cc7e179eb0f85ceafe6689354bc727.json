{"ast":null,"code":"import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nconst a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nconst b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nconst R = [[], [], []];\nconst AbsR = [[], [], []];\nconst t = [];\nconst xAxis = /* @__PURE__ */new Vector3();\nconst yAxis = /* @__PURE__ */new Vector3();\nconst zAxis = /* @__PURE__ */new Vector3();\nconst v1 = /* @__PURE__ */new Vector3();\nconst size = /* @__PURE__ */new Vector3();\nconst closestPoint = /* @__PURE__ */new Vector3();\nconst rotationMatrix = /* @__PURE__ */new Matrix3();\nconst aabb = /* @__PURE__ */new Box3();\nconst matrix = /* @__PURE__ */new Matrix4();\nconst inverse = /* @__PURE__ */new Matrix4();\nconst localRay = /* @__PURE__ */new Ray();\n\nclass OBB {\n  constructor(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n\n  set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  }\n\n  copy(obb2) {\n    this.center.copy(obb2.center);\n    this.halfSize.copy(obb2.halfSize);\n    this.rotation.copy(obb2.rotation);\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  }\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n\n\n  clampPoint(point, result) {\n    const halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    result.copy(this.center);\n    const x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    const y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    const z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  }\n\n  containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  }\n\n  intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  }\n\n  intersectsSphere(sphere) {\n    this.clampPoint(sphere.center, closestPoint);\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n\n\n  intersectsOBB(obb2, epsilon = Number.EPSILON) {\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb2.center;\n    b.e[0] = obb2.halfSize.x;\n    b.e[1] = obb2.halfSize.y;\n    b.e[2] = obb2.halfSize.z;\n    obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    }\n\n    v1.subVectors(b.c, a.c);\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]);\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n\n    let ra, rb;\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb) return false;\n    }\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb) return false;\n    }\n\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false;\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false;\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false;\n    return true;\n  }\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n\n\n  intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n    const d = plane.normal.dot(this.center) - plane.constant;\n    return Math.abs(d) <= r;\n  }\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n\n\n  intersectRay(ray, result) {\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n    matrix.setFromMatrix3(this.rotation);\n    matrix.setPosition(this.center);\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse);\n\n    if (localRay.intersectBox(aabb, result)) {\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n\n\n  intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  }\n\n  fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  }\n\n  equals(obb2) {\n    return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n  }\n\n  applyMatrix4(matrix2) {\n    const e = matrix2.elements;\n    let sx = v1.set(e[0], e[1], e[2]).length();\n    const sy = v1.set(e[4], e[5], e[6]).length();\n    const sz = v1.set(e[8], e[9], e[10]).length();\n    const det = matrix2.determinant();\n    if (det < 0) sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix2);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix2);\n    this.center.add(v1);\n    return this;\n  }\n\n}\n\nconst obb = /* @__PURE__ */new OBB();\nexport { OBB };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/math/OBB.js"],"names":["Vector3","Matrix3","Box3","Matrix4","Ray","MathUtils","a","c","u","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","aabb","matrix","inverse","localRay","OBB","constructor","center","halfSize","rotation","set","copy","obb2","clone","getSize","result","multiplyScalar","clampPoint","point","subVectors","extractBasis","x","clamp","dot","add","y","z","containsPoint","Math","abs","intersectsBox3","box3","intersectsOBB","obb","fromBox3","intersectsSphere","sphere","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","intersectsPlane","plane","r","normal","d","constant","intersectRay","ray","setFromCenterAndSize","setFromMatrix3","setPosition","invert","applyMatrix4","intersectBox","intersectsRay","getCenter","identity","equals","matrix2","elements","sx","length","sy","sz","det","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition"],"mappings":"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","sourcesContent":["import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nconst a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst R = [[], [], []];\nconst AbsR = [[], [], []];\nconst t = [];\nconst xAxis = /* @__PURE__ */ new Vector3();\nconst yAxis = /* @__PURE__ */ new Vector3();\nconst zAxis = /* @__PURE__ */ new Vector3();\nconst v1 = /* @__PURE__ */ new Vector3();\nconst size = /* @__PURE__ */ new Vector3();\nconst closestPoint = /* @__PURE__ */ new Vector3();\nconst rotationMatrix = /* @__PURE__ */ new Matrix3();\nconst aabb = /* @__PURE__ */ new Box3();\nconst matrix = /* @__PURE__ */ new Matrix4();\nconst inverse = /* @__PURE__ */ new Matrix4();\nconst localRay = /* @__PURE__ */ new Ray();\nclass OBB {\n  constructor(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n  set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  }\n  copy(obb2) {\n    this.center.copy(obb2.center);\n    this.halfSize.copy(obb2.halfSize);\n    this.rotation.copy(obb2.rotation);\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  }\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint(point, result) {\n    const halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    result.copy(this.center);\n    const x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    const y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    const z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  }\n  containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  }\n  intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  }\n  intersectsSphere(sphere) {\n    this.clampPoint(sphere.center, closestPoint);\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB(obb2, epsilon = Number.EPSILON) {\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb2.center;\n    b.e[0] = obb2.halfSize.x;\n    b.e[1] = obb2.halfSize.y;\n    b.e[2] = obb2.halfSize.z;\n    obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    }\n    v1.subVectors(b.c, a.c);\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n    let ra, rb;\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb)\n        return false;\n    }\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb)\n        return false;\n    }\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb)\n      return false;\n    return true;\n  }\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n    const d = plane.normal.dot(this.center) - plane.constant;\n    return Math.abs(d) <= r;\n  }\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay(ray, result) {\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n    matrix.setFromMatrix3(this.rotation);\n    matrix.setPosition(this.center);\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse);\n    if (localRay.intersectBox(aabb, result)) {\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  }\n  fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  }\n  equals(obb2) {\n    return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n  }\n  applyMatrix4(matrix2) {\n    const e = matrix2.elements;\n    let sx = v1.set(e[0], e[1], e[2]).length();\n    const sy = v1.set(e[4], e[5], e[6]).length();\n    const sz = v1.set(e[8], e[9], e[10]).length();\n    const det = matrix2.determinant();\n    if (det < 0)\n      sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix2);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix2);\n    this.center.add(v1);\n    return this;\n  }\n}\nconst obb = /* @__PURE__ */ new OBB();\nexport {\n  OBB\n};\n"]},"metadata":{},"sourceType":"module"}