{"ast":null,"code":"class LWO3Parser {\n  constructor(IFFParser) {\n    this.IFF = IFFParser;\n  }\n\n  parseBlock() {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    const blockID = this.IFF.reader.getIDTag();\n    const length = this.IFF.reader.getUint32();\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length;\n\n    switch (blockID) {\n      case \"FORM\":\n        this.IFF.parseForm(length);\n        break;\n\n      case \"ICON\":\n      case \"VMPA\":\n      case \"BBOX\":\n      case \"NORM\":\n      case \"PRE \":\n      case \"POST\":\n      case \"KEY \":\n      case \"SPAN\":\n      case \"TIME\":\n      case \"CLRS\":\n      case \"CLRA\":\n      case \"FILT\":\n      case \"DITH\":\n      case \"CONT\":\n      case \"BRIT\":\n      case \"SATR\":\n      case \"HUE \":\n      case \"GAMM\":\n      case \"NEGA\":\n      case \"IFLT\":\n      case \"PFLT\":\n      case \"PROJ\":\n      case \"AXIS\":\n      case \"AAST\":\n      case \"PIXB\":\n      case \"STCK\":\n      case \"VALU\":\n      case \"PNAM\":\n      case \"INAM\":\n      case \"GRST\":\n      case \"GREN\":\n      case \"GRPT\":\n      case \"FKEY\":\n      case \"IKEY\":\n      case \"CSYS\":\n      case \"OPAQ\":\n      case \"CMAP\":\n      case \"NLOC\":\n      case \"NZOM\":\n      case \"NVER\":\n      case \"NSRV\":\n      case \"NCRD\":\n      case \"NMOD\":\n      case \"NSEL\":\n      case \"NPRW\":\n      case \"NPLA\":\n      case \"VERS\":\n      case \"ENUM\":\n      case \"TAG \":\n      case \"CGMD\":\n      case \"CGTY\":\n      case \"CGST\":\n      case \"CGEN\":\n      case \"CGTS\":\n      case \"CGTE\":\n      case \"OSMP\":\n      case \"OMDE\":\n      case \"OUTR\":\n      case \"FLAG\":\n      case \"TRNL\":\n      case \"SHRP\":\n      case \"RFOP\":\n      case \"RSAN\":\n      case \"TROP\":\n      case \"RBLR\":\n      case \"TBLR\":\n      case \"CLRH\":\n      case \"CLRF\":\n      case \"ADTR\":\n      case \"GLOW\":\n      case \"LINE\":\n      case \"ALPH\":\n      case \"VCOL\":\n      case \"ENAB\":\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n\n      case \"IPIX\":\n      case \"IMIP\":\n      case \"IMOD\":\n      case \"AMOD\":\n      case \"IINV\":\n      case \"INCR\":\n      case \"IAXS\":\n      case \"IFOT\":\n      case \"ITIM\":\n      case \"IWRL\":\n      case \"IUTI\":\n      case \"IINX\":\n      case \"IINY\":\n      case \"IINZ\":\n      case \"IREF\":\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n\n      case \"OTAG\":\n        this.IFF.parseObjectTag();\n        break;\n\n      case \"LAYR\":\n        this.IFF.parseLayer(length);\n        break;\n\n      case \"PNTS\":\n        this.IFF.parsePoints(length);\n        break;\n\n      case \"VMAP\":\n        this.IFF.parseVertexMapping(length);\n        break;\n\n      case \"POLS\":\n        this.IFF.parsePolygonList(length);\n        break;\n\n      case \"TAGS\":\n        this.IFF.parseTagStrings(length);\n        break;\n\n      case \"PTAG\":\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n\n      case \"VMAD\":\n        this.IFF.parseVertexMapping(length, true);\n        break;\n\n      case \"DESC\":\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n\n      case \"TEXT\":\n      case \"CMNT\":\n      case \"NCOM\":\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n\n      case \"NAME\":\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n\n      case \"WRAP\":\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n\n      case \"IMAG\":\n        const index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n\n      case \"OREF\":\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n\n      case \"ROID\":\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n\n      case \"SSHN\":\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n\n      case \"AOVN\":\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n\n      case \"NSTA\":\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n\n      case \"NRNM\":\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n\n      case \"NNME\":\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n\n      case \"INME\":\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n\n      case \"IINN\":\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n\n      case \"IINM\":\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n\n      case \"IONM\":\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n\n      case \"FNAM\":\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n\n      case \"CHAN\":\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n\n      case \"SMAN\":\n        const maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n\n      case \"COLR\":\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"LUMI\":\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"SPEC\":\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"DIFF\":\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"REFL\":\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"GLOS\":\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"TRAN\":\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"BUMP\":\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"SIDE\":\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n\n      case \"RIMG\":\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case \"RIND\":\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case \"TIMG\":\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case \"IMAP\":\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n\n      case \"IUVI\":\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n\n      case \"IUTL\":\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      case \"IVTL\":\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n\n    if (blockID != \"FORM\") {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n\n}\n\nexport { LWO3Parser };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/lwo/LWO3Parser.js"],"names":["LWO3Parser","constructor","IFFParser","IFF","parseBlock","debugger","offset","reader","closeForms","blockID","getIDTag","length","getUint32","dataOffset","parseForm","skipped","skip","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","getUint16","h","index","getVariableLengthIndex","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","Color","value","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","imageMapIndex","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm"],"mappings":"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","sourcesContent":["class LWO3Parser {\n  constructor(IFFParser) {\n    this.IFF = IFFParser;\n  }\n  parseBlock() {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    const blockID = this.IFF.reader.getIDTag();\n    const length = this.IFF.reader.getUint32();\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length;\n    switch (blockID) {\n      case \"FORM\":\n        this.IFF.parseForm(length);\n        break;\n      case \"ICON\":\n      case \"VMPA\":\n      case \"BBOX\":\n      case \"NORM\":\n      case \"PRE \":\n      case \"POST\":\n      case \"KEY \":\n      case \"SPAN\":\n      case \"TIME\":\n      case \"CLRS\":\n      case \"CLRA\":\n      case \"FILT\":\n      case \"DITH\":\n      case \"CONT\":\n      case \"BRIT\":\n      case \"SATR\":\n      case \"HUE \":\n      case \"GAMM\":\n      case \"NEGA\":\n      case \"IFLT\":\n      case \"PFLT\":\n      case \"PROJ\":\n      case \"AXIS\":\n      case \"AAST\":\n      case \"PIXB\":\n      case \"STCK\":\n      case \"VALU\":\n      case \"PNAM\":\n      case \"INAM\":\n      case \"GRST\":\n      case \"GREN\":\n      case \"GRPT\":\n      case \"FKEY\":\n      case \"IKEY\":\n      case \"CSYS\":\n      case \"OPAQ\":\n      case \"CMAP\":\n      case \"NLOC\":\n      case \"NZOM\":\n      case \"NVER\":\n      case \"NSRV\":\n      case \"NCRD\":\n      case \"NMOD\":\n      case \"NSEL\":\n      case \"NPRW\":\n      case \"NPLA\":\n      case \"VERS\":\n      case \"ENUM\":\n      case \"TAG \":\n      case \"CGMD\":\n      case \"CGTY\":\n      case \"CGST\":\n      case \"CGEN\":\n      case \"CGTS\":\n      case \"CGTE\":\n      case \"OSMP\":\n      case \"OMDE\":\n      case \"OUTR\":\n      case \"FLAG\":\n      case \"TRNL\":\n      case \"SHRP\":\n      case \"RFOP\":\n      case \"RSAN\":\n      case \"TROP\":\n      case \"RBLR\":\n      case \"TBLR\":\n      case \"CLRH\":\n      case \"CLRF\":\n      case \"ADTR\":\n      case \"GLOW\":\n      case \"LINE\":\n      case \"ALPH\":\n      case \"VCOL\":\n      case \"ENAB\":\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      case \"IPIX\":\n      case \"IMIP\":\n      case \"IMOD\":\n      case \"AMOD\":\n      case \"IINV\":\n      case \"INCR\":\n      case \"IAXS\":\n      case \"IFOT\":\n      case \"ITIM\":\n      case \"IWRL\":\n      case \"IUTI\":\n      case \"IINX\":\n      case \"IINY\":\n      case \"IINZ\":\n      case \"IREF\":\n        if (length === 4)\n          this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();\n        else\n          this.IFF.reader.skip(length);\n        break;\n      case \"OTAG\":\n        this.IFF.parseObjectTag();\n        break;\n      case \"LAYR\":\n        this.IFF.parseLayer(length);\n        break;\n      case \"PNTS\":\n        this.IFF.parsePoints(length);\n        break;\n      case \"VMAP\":\n        this.IFF.parseVertexMapping(length);\n        break;\n      case \"POLS\":\n        this.IFF.parsePolygonList(length);\n        break;\n      case \"TAGS\":\n        this.IFF.parseTagStrings(length);\n        break;\n      case \"PTAG\":\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n      case \"VMAD\":\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      case \"DESC\":\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n      case \"TEXT\":\n      case \"CMNT\":\n      case \"NCOM\":\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      case \"NAME\":\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      case \"WRAP\":\n        this.IFF.currentForm.wrap = { w: this.IFF.reader.getUint16(), h: this.IFF.reader.getUint16() };\n        break;\n      case \"IMAG\":\n        const index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      case \"OREF\":\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n      case \"ROID\":\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      case \"SSHN\":\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n      case \"AOVN\":\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      case \"NSTA\":\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n      case \"NRNM\":\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n      case \"NNME\":\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      case \"INME\":\n        if (!this.IFF.currentForm.nodeName)\n          this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n      case \"IINN\":\n        if (!this.IFF.currentForm.inputNodeName)\n          this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n      case \"IINM\":\n        if (!this.IFF.currentForm.inputName)\n          this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n      case \"IONM\":\n        if (!this.IFF.currentForm.inputOutputName)\n          this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n      case \"FNAM\":\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n      case \"CHAN\":\n        if (length === 4)\n          this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();\n        else\n          this.IFF.reader.skip(length);\n        break;\n      case \"SMAN\":\n        const maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      case \"COLR\":\n        this.IFF.currentSurface.attributes.Color = { value: this.IFF.reader.getFloat32Array(3) };\n        this.IFF.reader.skip(2);\n        break;\n      case \"LUMI\":\n        this.IFF.currentSurface.attributes.Luminosity = { value: this.IFF.reader.getFloat32() };\n        this.IFF.reader.skip(2);\n        break;\n      case \"SPEC\":\n        this.IFF.currentSurface.attributes.Specular = { value: this.IFF.reader.getFloat32() };\n        this.IFF.reader.skip(2);\n        break;\n      case \"DIFF\":\n        this.IFF.currentSurface.attributes.Diffuse = { value: this.IFF.reader.getFloat32() };\n        this.IFF.reader.skip(2);\n        break;\n      case \"REFL\":\n        this.IFF.currentSurface.attributes.Reflection = { value: this.IFF.reader.getFloat32() };\n        this.IFF.reader.skip(2);\n        break;\n      case \"GLOS\":\n        this.IFF.currentSurface.attributes.Glossiness = { value: this.IFF.reader.getFloat32() };\n        this.IFF.reader.skip(2);\n        break;\n      case \"TRAN\":\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case \"BUMP\":\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case \"SIDE\":\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n      case \"RIMG\":\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case \"RIND\":\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case \"TIMG\":\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case \"IMAP\":\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n      case \"IUVI\":\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n      case \"IUTL\":\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n      case \"IVTL\":\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n    if (blockID != \"FORM\") {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n}\nexport {\n  LWO3Parser\n};\n"]},"metadata":{},"sourceType":"module"}