{"ast":null,"code":"import { OrthographicCamera, Scene, UniformsUtils, ShaderMaterial, PlaneGeometry, Mesh, Texture, LinearFilter, MeshBasicMaterial, DoubleSide } from \"three\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\n\nclass ShadowMapViewer {\n  constructor(light) {\n    const scope = this;\n    const doRenderLabel = light.name !== void 0 && light.name !== \"\";\n    let userAutoClearSetting;\n    const frame = {\n      x: 10,\n      y: 10,\n      width: 256,\n      height: 256\n    };\n    const camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 10);\n    camera.position.set(0, 0, 2);\n    const scene = new Scene();\n    const shader = UnpackDepthRGBAShader;\n    const uniforms = UniformsUtils.clone(shader.uniforms);\n    const material = new ShaderMaterial({\n      uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    const plane = new PlaneGeometry(frame.width, frame.height);\n    const mesh = new Mesh(plane, material);\n    scene.add(mesh);\n    let labelCanvas, labelMesh;\n\n    if (doRenderLabel) {\n      labelCanvas = document.createElement(\"canvas\");\n      const context = labelCanvas.getContext(\"2d\");\n      context.font = \"Bold 20px Arial\";\n      const labelWidth = context.measureText(light.name).width;\n      labelCanvas.width = labelWidth;\n      labelCanvas.height = 25;\n      context.font = \"Bold 20px Arial\";\n      context.fillStyle = \"rgba( 255, 0, 0, 1 )\";\n      context.fillText(light.name, 0, 20);\n      const labelTexture = new Texture(labelCanvas);\n      labelTexture.magFilter = LinearFilter;\n      labelTexture.minFilter = LinearFilter;\n      labelTexture.needsUpdate = true;\n      const labelMaterial = new MeshBasicMaterial({\n        map: labelTexture,\n        side: DoubleSide\n      });\n      labelMaterial.transparent = true;\n      const labelPlane = new PlaneGeometry(labelCanvas.width, labelCanvas.height);\n      labelMesh = new Mesh(labelPlane, labelMaterial);\n      scene.add(labelMesh);\n    }\n\n    function resetPosition() {\n      scope.position.set(scope.position.x, scope.position.y);\n    }\n\n    this.enabled = true;\n    this.size = {\n      width: frame.width,\n      height: frame.height,\n      set: function (width, height) {\n        this.width = width;\n        this.height = height;\n        mesh.scale.set(this.width / frame.width, this.height / frame.height, 1);\n        resetPosition();\n      }\n    };\n    this.position = {\n      x: frame.x,\n      y: frame.y,\n      set: function (x, y) {\n        this.x = x;\n        this.y = y;\n        const width = scope.size.width;\n        const height = scope.size.height;\n        mesh.position.set(-window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0);\n        if (doRenderLabel) labelMesh.position.set(mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0);\n      }\n    };\n\n    this.render = function (renderer) {\n      if (this.enabled) {\n        uniforms.tDiffuse.value = light.shadow.map.texture;\n        userAutoClearSetting = renderer.autoClear;\n        renderer.autoClear = false;\n        renderer.clearDepth();\n        renderer.render(scene, camera);\n        renderer.autoClear = userAutoClearSetting;\n      }\n    };\n\n    this.updateForWindowResize = function () {\n      if (this.enabled) {\n        camera.left = window.innerWidth / -2;\n        camera.right = window.innerWidth / 2;\n        camera.top = window.innerHeight / 2;\n        camera.bottom = window.innerHeight / -2;\n        camera.updateProjectionMatrix();\n        this.update();\n      }\n    };\n\n    this.update = function () {\n      this.position.set(this.position.x, this.position.y);\n      this.size.set(this.size.width, this.size.height);\n    };\n\n    this.update();\n  }\n\n}\n\nexport { ShadowMapViewer };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/utils/ShadowMapViewer.js"],"names":["OrthographicCamera","Scene","UniformsUtils","ShaderMaterial","PlaneGeometry","Mesh","Texture","LinearFilter","MeshBasicMaterial","DoubleSide","UnpackDepthRGBAShader","ShadowMapViewer","constructor","light","scope","doRenderLabel","name","userAutoClearSetting","frame","x","y","width","height","camera","window","innerWidth","innerHeight","position","set","scene","shader","uniforms","clone","material","vertexShader","fragmentShader","plane","mesh","add","labelCanvas","labelMesh","document","createElement","context","getContext","font","labelWidth","measureText","fillStyle","fillText","labelTexture","magFilter","minFilter","needsUpdate","labelMaterial","map","side","transparent","labelPlane","resetPosition","enabled","size","scale","render","renderer","tDiffuse","value","shadow","texture","autoClear","clearDepth","updateForWindowResize","left","right","top","bottom","updateProjectionMatrix","update"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,KAA7B,EAAoCC,aAApC,EAAmDC,cAAnD,EAAmEC,aAAnE,EAAkFC,IAAlF,EAAwFC,OAAxF,EAAiGC,YAAjG,EAA+GC,iBAA/G,EAAkIC,UAAlI,QAAoJ,OAApJ;AACA,SAASC,qBAAT,QAAsC,qCAAtC;;AACA,MAAMC,eAAN,CAAsB;AACpBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMC,KAAK,GAAG,IAAd;AACA,UAAMC,aAAa,GAAGF,KAAK,CAACG,IAAN,KAAe,KAAK,CAApB,IAAyBH,KAAK,CAACG,IAAN,KAAe,EAA9D;AACA,QAAIC,oBAAJ;AACA,UAAMC,KAAK,GAAG;AACZC,MAAAA,CAAC,EAAE,EADS;AAEZC,MAAAA,CAAC,EAAE,EAFS;AAGZC,MAAAA,KAAK,EAAE,GAHK;AAIZC,MAAAA,MAAM,EAAE;AAJI,KAAd;AAMA,UAAMC,MAAM,GAAG,IAAIvB,kBAAJ,CACbwB,MAAM,CAACC,UAAP,GAAoB,CAAC,CADR,EAEbD,MAAM,CAACC,UAAP,GAAoB,CAFP,EAGbD,MAAM,CAACE,WAAP,GAAqB,CAHR,EAIbF,MAAM,CAACE,WAAP,GAAqB,CAAC,CAJT,EAKb,CALa,EAMb,EANa,CAAf;AAQAH,IAAAA,MAAM,CAACI,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,UAAMC,KAAK,GAAG,IAAI5B,KAAJ,EAAd;AACA,UAAM6B,MAAM,GAAGpB,qBAAf;AACA,UAAMqB,QAAQ,GAAG7B,aAAa,CAAC8B,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAjB;AACA,UAAME,QAAQ,GAAG,IAAI9B,cAAJ,CAAmB;AAClC4B,MAAAA,QADkC;AAElCG,MAAAA,YAAY,EAAEJ,MAAM,CAACI,YAFa;AAGlCC,MAAAA,cAAc,EAAEL,MAAM,CAACK;AAHW,KAAnB,CAAjB;AAKA,UAAMC,KAAK,GAAG,IAAIhC,aAAJ,CAAkBc,KAAK,CAACG,KAAxB,EAA+BH,KAAK,CAACI,MAArC,CAAd;AACA,UAAMe,IAAI,GAAG,IAAIhC,IAAJ,CAAS+B,KAAT,EAAgBH,QAAhB,CAAb;AACAJ,IAAAA,KAAK,CAACS,GAAN,CAAUD,IAAV;AACA,QAAIE,WAAJ,EAAiBC,SAAjB;;AACA,QAAIzB,aAAJ,EAAmB;AACjBwB,MAAAA,WAAW,GAAGE,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACA,YAAMC,OAAO,GAAGJ,WAAW,CAACK,UAAZ,CAAuB,IAAvB,CAAhB;AACAD,MAAAA,OAAO,CAACE,IAAR,GAAe,iBAAf;AACA,YAAMC,UAAU,GAAGH,OAAO,CAACI,WAAR,CAAoBlC,KAAK,CAACG,IAA1B,EAAgCK,KAAnD;AACAkB,MAAAA,WAAW,CAAClB,KAAZ,GAAoByB,UAApB;AACAP,MAAAA,WAAW,CAACjB,MAAZ,GAAqB,EAArB;AACAqB,MAAAA,OAAO,CAACE,IAAR,GAAe,iBAAf;AACAF,MAAAA,OAAO,CAACK,SAAR,GAAoB,sBAApB;AACAL,MAAAA,OAAO,CAACM,QAAR,CAAiBpC,KAAK,CAACG,IAAvB,EAA6B,CAA7B,EAAgC,EAAhC;AACA,YAAMkC,YAAY,GAAG,IAAI5C,OAAJ,CAAYiC,WAAZ,CAArB;AACAW,MAAAA,YAAY,CAACC,SAAb,GAAyB5C,YAAzB;AACA2C,MAAAA,YAAY,CAACE,SAAb,GAAyB7C,YAAzB;AACA2C,MAAAA,YAAY,CAACG,WAAb,GAA2B,IAA3B;AACA,YAAMC,aAAa,GAAG,IAAI9C,iBAAJ,CAAsB;AAAE+C,QAAAA,GAAG,EAAEL,YAAP;AAAqBM,QAAAA,IAAI,EAAE/C;AAA3B,OAAtB,CAAtB;AACA6C,MAAAA,aAAa,CAACG,WAAd,GAA4B,IAA5B;AACA,YAAMC,UAAU,GAAG,IAAItD,aAAJ,CAAkBmC,WAAW,CAAClB,KAA9B,EAAqCkB,WAAW,CAACjB,MAAjD,CAAnB;AACAkB,MAAAA,SAAS,GAAG,IAAInC,IAAJ,CAASqD,UAAT,EAAqBJ,aAArB,CAAZ;AACAzB,MAAAA,KAAK,CAACS,GAAN,CAAUE,SAAV;AACD;;AACD,aAASmB,aAAT,GAAyB;AACvB7C,MAAAA,KAAK,CAACa,QAAN,CAAeC,GAAf,CAAmBd,KAAK,CAACa,QAAN,CAAeR,CAAlC,EAAqCL,KAAK,CAACa,QAAN,CAAeP,CAApD;AACD;;AACD,SAAKwC,OAAL,GAAe,IAAf;AACA,SAAKC,IAAL,GAAY;AACVxC,MAAAA,KAAK,EAAEH,KAAK,CAACG,KADH;AAEVC,MAAAA,MAAM,EAAEJ,KAAK,CAACI,MAFJ;AAGVM,MAAAA,GAAG,EAAE,UAASP,KAAT,EAAgBC,MAAhB,EAAwB;AAC3B,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKC,MAAL,GAAcA,MAAd;AACAe,QAAAA,IAAI,CAACyB,KAAL,CAAWlC,GAAX,CAAe,KAAKP,KAAL,GAAaH,KAAK,CAACG,KAAlC,EAAyC,KAAKC,MAAL,GAAcJ,KAAK,CAACI,MAA7D,EAAqE,CAArE;AACAqC,QAAAA,aAAa;AACd;AARS,KAAZ;AAUA,SAAKhC,QAAL,GAAgB;AACdR,MAAAA,CAAC,EAAED,KAAK,CAACC,CADK;AAEdC,MAAAA,CAAC,EAAEF,KAAK,CAACE,CAFK;AAGdQ,MAAAA,GAAG,EAAE,UAAST,CAAT,EAAYC,CAAZ,EAAe;AAClB,aAAKD,CAAL,GAASA,CAAT;AACA,aAAKC,CAAL,GAASA,CAAT;AACA,cAAMC,KAAK,GAAGP,KAAK,CAAC+C,IAAN,CAAWxC,KAAzB;AACA,cAAMC,MAAM,GAAGR,KAAK,CAAC+C,IAAN,CAAWvC,MAA1B;AACAe,QAAAA,IAAI,CAACV,QAAL,CAAcC,GAAd,CAAkB,CAACJ,MAAM,CAACC,UAAR,GAAqB,CAArB,GAAyBJ,KAAK,GAAG,CAAjC,GAAqC,KAAKF,CAA5D,EAA+DK,MAAM,CAACE,WAAP,GAAqB,CAArB,GAAyBJ,MAAM,GAAG,CAAlC,GAAsC,KAAKF,CAA1G,EAA6G,CAA7G;AACA,YAAIL,aAAJ,EACEyB,SAAS,CAACb,QAAV,CAAmBC,GAAnB,CAAuBS,IAAI,CAACV,QAAL,CAAcR,CAArC,EAAwCkB,IAAI,CAACV,QAAL,CAAcP,CAAd,GAAkBN,KAAK,CAAC+C,IAAN,CAAWvC,MAAX,GAAoB,CAAtC,GAA0CiB,WAAW,CAACjB,MAAZ,GAAqB,CAAvG,EAA0G,CAA1G;AACH;AAXa,KAAhB;;AAaA,SAAKyC,MAAL,GAAc,UAASC,QAAT,EAAmB;AAC/B,UAAI,KAAKJ,OAAT,EAAkB;AAChB7B,QAAAA,QAAQ,CAACkC,QAAT,CAAkBC,KAAlB,GAA0BrD,KAAK,CAACsD,MAAN,CAAaZ,GAAb,CAAiBa,OAA3C;AACAnD,QAAAA,oBAAoB,GAAG+C,QAAQ,CAACK,SAAhC;AACAL,QAAAA,QAAQ,CAACK,SAAT,GAAqB,KAArB;AACAL,QAAAA,QAAQ,CAACM,UAAT;AACAN,QAAAA,QAAQ,CAACD,MAAT,CAAgBlC,KAAhB,EAAuBN,MAAvB;AACAyC,QAAAA,QAAQ,CAACK,SAAT,GAAqBpD,oBAArB;AACD;AACF,KATD;;AAUA,SAAKsD,qBAAL,GAA6B,YAAW;AACtC,UAAI,KAAKX,OAAT,EAAkB;AAChBrC,QAAAA,MAAM,CAACiD,IAAP,GAAchD,MAAM,CAACC,UAAP,GAAoB,CAAC,CAAnC;AACAF,QAAAA,MAAM,CAACkD,KAAP,GAAejD,MAAM,CAACC,UAAP,GAAoB,CAAnC;AACAF,QAAAA,MAAM,CAACmD,GAAP,GAAalD,MAAM,CAACE,WAAP,GAAqB,CAAlC;AACAH,QAAAA,MAAM,CAACoD,MAAP,GAAgBnD,MAAM,CAACE,WAAP,GAAqB,CAAC,CAAtC;AACAH,QAAAA,MAAM,CAACqD,sBAAP;AACA,aAAKC,MAAL;AACD;AACF,KATD;;AAUA,SAAKA,MAAL,GAAc,YAAW;AACvB,WAAKlD,QAAL,CAAcC,GAAd,CAAkB,KAAKD,QAAL,CAAcR,CAAhC,EAAmC,KAAKQ,QAAL,CAAcP,CAAjD;AACA,WAAKyC,IAAL,CAAUjC,GAAV,CAAc,KAAKiC,IAAL,CAAUxC,KAAxB,EAA+B,KAAKwC,IAAL,CAAUvC,MAAzC;AACD,KAHD;;AAIA,SAAKuD,MAAL;AACD;;AAxGmB;;AA0GtB,SACElE,eADF","sourcesContent":["import { OrthographicCamera, Scene, UniformsUtils, ShaderMaterial, PlaneGeometry, Mesh, Texture, LinearFilter, MeshBasicMaterial, DoubleSide } from \"three\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass ShadowMapViewer {\n  constructor(light) {\n    const scope = this;\n    const doRenderLabel = light.name !== void 0 && light.name !== \"\";\n    let userAutoClearSetting;\n    const frame = {\n      x: 10,\n      y: 10,\n      width: 256,\n      height: 256\n    };\n    const camera = new OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      10\n    );\n    camera.position.set(0, 0, 2);\n    const scene = new Scene();\n    const shader = UnpackDepthRGBAShader;\n    const uniforms = UniformsUtils.clone(shader.uniforms);\n    const material = new ShaderMaterial({\n      uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    const plane = new PlaneGeometry(frame.width, frame.height);\n    const mesh = new Mesh(plane, material);\n    scene.add(mesh);\n    let labelCanvas, labelMesh;\n    if (doRenderLabel) {\n      labelCanvas = document.createElement(\"canvas\");\n      const context = labelCanvas.getContext(\"2d\");\n      context.font = \"Bold 20px Arial\";\n      const labelWidth = context.measureText(light.name).width;\n      labelCanvas.width = labelWidth;\n      labelCanvas.height = 25;\n      context.font = \"Bold 20px Arial\";\n      context.fillStyle = \"rgba( 255, 0, 0, 1 )\";\n      context.fillText(light.name, 0, 20);\n      const labelTexture = new Texture(labelCanvas);\n      labelTexture.magFilter = LinearFilter;\n      labelTexture.minFilter = LinearFilter;\n      labelTexture.needsUpdate = true;\n      const labelMaterial = new MeshBasicMaterial({ map: labelTexture, side: DoubleSide });\n      labelMaterial.transparent = true;\n      const labelPlane = new PlaneGeometry(labelCanvas.width, labelCanvas.height);\n      labelMesh = new Mesh(labelPlane, labelMaterial);\n      scene.add(labelMesh);\n    }\n    function resetPosition() {\n      scope.position.set(scope.position.x, scope.position.y);\n    }\n    this.enabled = true;\n    this.size = {\n      width: frame.width,\n      height: frame.height,\n      set: function(width, height) {\n        this.width = width;\n        this.height = height;\n        mesh.scale.set(this.width / frame.width, this.height / frame.height, 1);\n        resetPosition();\n      }\n    };\n    this.position = {\n      x: frame.x,\n      y: frame.y,\n      set: function(x, y) {\n        this.x = x;\n        this.y = y;\n        const width = scope.size.width;\n        const height = scope.size.height;\n        mesh.position.set(-window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0);\n        if (doRenderLabel)\n          labelMesh.position.set(mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0);\n      }\n    };\n    this.render = function(renderer) {\n      if (this.enabled) {\n        uniforms.tDiffuse.value = light.shadow.map.texture;\n        userAutoClearSetting = renderer.autoClear;\n        renderer.autoClear = false;\n        renderer.clearDepth();\n        renderer.render(scene, camera);\n        renderer.autoClear = userAutoClearSetting;\n      }\n    };\n    this.updateForWindowResize = function() {\n      if (this.enabled) {\n        camera.left = window.innerWidth / -2;\n        camera.right = window.innerWidth / 2;\n        camera.top = window.innerHeight / 2;\n        camera.bottom = window.innerHeight / -2;\n        camera.updateProjectionMatrix();\n        this.update();\n      }\n    };\n    this.update = function() {\n      this.position.set(this.position.x, this.position.y);\n      this.size.set(this.size.width, this.size.height);\n    };\n    this.update();\n  }\n}\nexport {\n  ShadowMapViewer\n};\n"]},"metadata":{},"sourceType":"module"}