{"ast":null,"code":"import _regeneratorRuntime from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { strToU8, zipSync } from \"fflate\";\nimport { Mesh, MeshPhysicalMaterial } from \"three\";\n\nvar USDZExporter = /*#__PURE__*/function () {\n  function USDZExporter() {\n    _classCallCheck(this, USDZExporter);\n\n    __publicField(this, \"PRECISION\", 7);\n\n    __publicField(this, \"materials\");\n\n    __publicField(this, \"textures\");\n\n    __publicField(this, \"files\");\n\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n\n  _createClass(USDZExporter, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(scene) {\n        var _this = this;\n\n        var modelFileName, output, _loop, id, offset, filename, file, headerSize, offsetMod64, padLength, padding;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                modelFileName = \"model.usda\";\n                this.files[modelFileName] = null;\n                output = this.buildHeader();\n                scene.traverseVisible(function (object) {\n                  if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n                    var geometry = object.geometry;\n                    var material = object.material;\n                    var geometryFileName = \"geometries/Geometry_\" + geometry.id + \".usd\";\n\n                    if (!(geometryFileName in _this.files)) {\n                      var meshObject = _this.buildMeshObject(geometry);\n\n                      _this.files[geometryFileName] = _this.buildUSDFileAsString(meshObject);\n                    }\n\n                    if (!(material.uuid in _this.materials)) {\n                      _this.materials[material.uuid] = material;\n                    }\n\n                    output += _this.buildXform(object, geometry, material);\n                  }\n                });\n                output += this.buildMaterials(this.materials);\n                this.files[modelFileName] = strToU8(output);\n                output = null;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(id) {\n                  var texture, color, isRGBA, canvas, blob;\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          texture = _this.textures[id];\n                          color = id.split(\"_\")[1];\n                          isRGBA = texture.format === 1023;\n                          canvas = _this.imageToCanvas(texture.image, color);\n                          _context.next = 6;\n                          return new Promise(function (resolve) {\n                            return canvas == null ? void 0 : canvas.toBlob(resolve, isRGBA ? \"image/png\" : \"image/jpeg\", 1);\n                          });\n\n                        case 6:\n                          blob = _context.sent;\n\n                          if (!blob) {\n                            _context.next = 13;\n                            break;\n                          }\n\n                          _context.t0 = Uint8Array;\n                          _context.next = 11;\n                          return blob.arrayBuffer();\n\n                        case 11:\n                          _context.t1 = _context.sent;\n                          _this.files[\"textures/Texture_\".concat(id, \".\").concat(isRGBA ? \"png\" : \"jpg\")] = new _context.t0(_context.t1);\n\n                        case 13:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _context2.t0 = _regeneratorRuntime.keys(this.textures);\n\n              case 9:\n                if ((_context2.t1 = _context2.t0()).done) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                id = _context2.t1.value;\n                return _context2.delegateYield(_loop(id), \"t2\", 12);\n\n              case 12:\n                _context2.next = 9;\n                break;\n\n              case 14:\n                offset = 0;\n\n                for (filename in this.files) {\n                  file = this.files[filename];\n                  headerSize = 34 + filename.length;\n                  offset += headerSize;\n                  offsetMod64 = offset & 63;\n\n                  if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n                    padLength = 64 - offsetMod64;\n                    padding = new Uint8Array(padLength);\n                    this.files[filename] = [file, {\n                      extra: {\n                        12345: padding\n                      }\n                    }];\n                  }\n\n                  if (file && typeof file.length === \"number\") {\n                    offset = file.length;\n                  }\n                }\n\n                return _context2.abrupt(\"return\", zipSync(this.files, {\n                  level: 0\n                }));\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"imageToCanvas\",\n    value: function imageToCanvas(image, color) {\n      if (typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== \"undefined\" && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && image instanceof OffscreenCanvas || typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap) {\n        var scale = 1024 / Math.max(image.width, image.height);\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = image.width * Math.min(1, scale);\n        canvas.height = image.height * Math.min(1, scale);\n        var context = canvas.getContext(\"2d\");\n        context == null ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n        if (color !== void 0) {\n          var hex = parseInt(color, 16);\n          var r = (hex >> 16 & 255) / 255;\n          var g = (hex >> 8 & 255) / 255;\n          var b = (hex & 255) / 255;\n          var imagedata = context == null ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n\n          if (imagedata) {\n            var data = imagedata == null ? void 0 : imagedata.data;\n\n            for (var i = 0; i < data.length; i += 4) {\n              data[i + 0] = data[i + 0] * r;\n              data[i + 1] = data[i + 1] * g;\n              data[i + 2] = data[i + 2] * b;\n            }\n\n            context == null ? void 0 : context.putImageData(imagedata, 0, 0);\n          }\n        }\n\n        return canvas;\n      }\n    }\n  }, {\n    key: \"buildHeader\",\n    value: function buildHeader() {\n      return \"#usda 1.0\\n(\\n    customLayerData = {\\n        string creator = \\\"Three.js USDZExporter\\\"\\n    }\\n    metersPerUnit = 1\\n    upAxis = \\\"Y\\\"\\n)\\n\";\n    }\n  }, {\n    key: \"buildUSDFileAsString\",\n    value: function buildUSDFileAsString(dataToInsert) {\n      var output = this.buildHeader();\n      output += dataToInsert;\n      return strToU8(output);\n    } // Xform\n\n  }, {\n    key: \"buildXform\",\n    value: function buildXform(object, geometry, material) {\n      var name = \"Object_\" + object.id;\n      var transform = this.buildMatrix(object.matrixWorld);\n\n      if (object.matrixWorld.determinant() < 0) {\n        console.warn(\"THREE.USDZExporter: USDZ does not support negative scales\", object);\n      }\n\n      return \"def Xform \\\"\".concat(name, \"\\\" (\\n    prepend references = @./geometries/Geometry_\").concat(geometry.id, \".usd@</Geometry>\\n)\\n{\\n    matrix4d xformOp:transform = \").concat(transform, \"\\n    uniform token[] xformOpOrder = [\\\"xformOp:transform\\\"]\\n    rel material:binding = </Materials/Material_\").concat(material.id, \">\\n}\\n\");\n    }\n  }, {\n    key: \"buildMatrix\",\n    value: function buildMatrix(matrix) {\n      var array = matrix.elements;\n      return \"( \".concat(this.buildMatrixRow(array, 0), \", \").concat(this.buildMatrixRow(array, 4), \", \").concat(this.buildMatrixRow(array, 8), \", \").concat(this.buildMatrixRow(array, 12), \" )\");\n    }\n  }, {\n    key: \"buildMatrixRow\",\n    value: function buildMatrixRow(array, offset) {\n      return \"(\".concat(array[offset + 0], \", \").concat(array[offset + 1], \", \").concat(array[offset + 2], \", \").concat(array[offset + 3], \")\");\n    } // Mesh\n\n  }, {\n    key: \"buildMeshObject\",\n    value: function buildMeshObject(geometry) {\n      var mesh = this.buildMesh(geometry);\n      return \"\\ndef \\\"Geometry\\\"\\n{\\n  \".concat(mesh, \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMesh\",\n    value: function buildMesh(geometry) {\n      var name = \"Geometry\";\n      var attributes = geometry.attributes;\n      var count = attributes.position.count;\n      return \"\\n    def Mesh \\\"\".concat(name, \"\\\"\\n    {\\n        int[] faceVertexCounts = [\").concat(this.buildMeshVertexCount(geometry), \"]\\n        int[] faceVertexIndices = [\").concat(this.buildMeshVertexIndices(geometry), \"]\\n        normal3f[] normals = [\").concat(this.buildVector3Array(attributes.normal, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        point3f[] points = [\").concat(this.buildVector3Array(attributes.position, count), \"]\\n        float2[] primvars:st = [\").concat(this.buildVector2Array(attributes.uv, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        uniform token subdivisionScheme = \\\"none\\\"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildMeshVertexCount\",\n    value: function buildMeshVertexCount(geometry) {\n      var count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n      return Array(count / 3).fill(3).join(\", \");\n    }\n  }, {\n    key: \"buildMeshVertexIndices\",\n    value: function buildMeshVertexIndices(geometry) {\n      if (geometry.index !== null) {\n        return geometry.index.array.join(\", \");\n      }\n\n      var array = [];\n      var length = geometry.attributes.position.count;\n\n      for (var i = 0; i < length; i++) {\n        array.push(i);\n      }\n\n      return array.join(\", \");\n    }\n  }, {\n    key: \"buildVector3Array\",\n    value: function buildVector3Array(attribute, count) {\n      if (attribute === void 0) {\n        console.warn(\"USDZExporter: Normals missing.\");\n        return Array(count).fill(\"(0, 0, 0)\").join(\", \");\n      }\n\n      var array = [];\n      var data = attribute.array;\n\n      for (var i = 0; i < data.length; i += 3) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(data[i + 1].toPrecision(this.PRECISION), \", \").concat(data[i + 2].toPrecision(this.PRECISION), \")\"));\n      }\n\n      return array.join(\", \");\n    }\n  }, {\n    key: \"buildVector2Array\",\n    value: function buildVector2Array(attribute, count) {\n      if (attribute === void 0) {\n        console.warn(\"USDZExporter: UVs missing.\");\n        return Array(count).fill(\"(0, 0)\").join(\", \");\n      }\n\n      var array = [];\n      var data = attribute.array;\n\n      for (var i = 0; i < data.length; i += 2) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(1 - data[i + 1].toPrecision(this.PRECISION), \")\"));\n      }\n\n      return array.join(\", \");\n    } // Materials\n\n  }, {\n    key: \"buildMaterials\",\n    value: function buildMaterials(materials) {\n      var array = [];\n\n      for (var uuid in materials) {\n        var material = materials[uuid];\n        array.push(this.buildMaterial(material));\n      }\n\n      return \"def \\\"Materials\\\"\\n{\\n\".concat(array.join(\"\"), \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMaterial\",\n    value: function buildMaterial(material) {\n      var pad = \"            \";\n      var inputs = [];\n      var samplers = [];\n\n      if (material.map !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.map.id, \"_diffuse.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.map, \"diffuse\", material.color));\n      } else {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor = \").concat(this.buildColor(material.color)));\n      }\n\n      if (material.emissiveMap !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.emissiveMap.id, \"_emissive.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.emissiveMap, \"emissive\"));\n      } else if (material.emissive.getHex() > 0) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor = \").concat(this.buildColor(material.emissive)));\n      }\n\n      if (material.normalMap !== null) {\n        inputs.push(\"\".concat(pad, \"normal3f inputs:normal.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.normalMap.id, \"_normal.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.normalMap, \"normal\"));\n      }\n\n      if (material.aoMap !== null) {\n        inputs.push(\"\".concat(pad, \"float inputs:occlusion.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.aoMap.id, \"_occlusion.outputs:r>\"));\n        samplers.push(this.buildTexture(material, material.aoMap, \"occlusion\"));\n      }\n\n      if (material.roughnessMap !== null && material.roughness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.roughnessMap.id, \"_roughness.outputs:g>\"));\n        samplers.push(this.buildTexture(material, material.roughnessMap, \"roughness\"));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness = \").concat(material.roughness));\n      }\n\n      if (material.metalnessMap !== null && material.metalness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.metalnessMap.id, \"_metallic.outputs:b>\"));\n        samplers.push(this.buildTexture(material, material.metalnessMap, \"metallic\"));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic = \").concat(material.metalness));\n      }\n\n      inputs.push(\"\".concat(pad, \"float inputs:opacity = \").concat(material.opacity));\n\n      if (material instanceof MeshPhysicalMaterial) {\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoat = \").concat(material.clearcoat));\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoatRoughness = \").concat(material.clearcoatRoughness));\n        inputs.push(\"\".concat(pad, \"float inputs:ior = \").concat(material.ior));\n      }\n\n      return \"\\n    def Material \\\"Material_\".concat(material.id, \"\\\"\\n    {\\n        def Shader \\\"PreviewSurface\\\"\\n        {\\n            uniform token info:id = \\\"UsdPreviewSurface\\\"\\n\").concat(inputs.join(\"\\n\"), \"\\n            int inputs:useSpecularWorkflow = 0\\n            token outputs:surface\\n        }\\n        token outputs:surface.connect = </Materials/Material_\").concat(material.id, \"/PreviewSurface.outputs:surface>\\n        token inputs:frame:stPrimvarName = \\\"st\\\"\\n        def Shader \\\"uvReader_st\\\"\\n        {\\n            uniform token info:id = \\\"UsdPrimvarReader_float2\\\"\\n            token inputs:varname.connect = </Materials/Material_\").concat(material.id, \".inputs:frame:stPrimvarName>\\n            float2 inputs:fallback = (0.0, 0.0)\\n            float2 outputs:result\\n        }\\n\").concat(samplers.join(\"\\n\"), \"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildTexture\",\n    value: function buildTexture(material, texture, mapType, color) {\n      var id = texture.id + (color ? \"_\" + color.getHexString() : \"\");\n      var isRGBA = texture.format === 1023;\n      this.textures[id] = texture;\n      return \"\\n      def Shader \\\"Transform2d_\".concat(mapType, \"\\\" (\\n          sdrMetadata = {\\n              string role = \\\"math\\\"\\n          }\\n      )\\n      {\\n          uniform token info:id = \\\"UsdTransform2d\\\"\\n          float2 inputs:in.connect = </Materials/Material_\").concat(material.id, \"/uvReader_st.outputs:result>\\n          float2 inputs:scale = \").concat(this.buildVector2(texture.repeat), \"\\n          float2 inputs:translation = \").concat(this.buildVector2(texture.offset), \"\\n          float2 outputs:result\\n      }\\n      def Shader \\\"Texture_\").concat(texture.id, \"_\").concat(mapType, \"\\\"\\n      {\\n          uniform token info:id = \\\"UsdUVTexture\\\"\\n          asset inputs:file = @textures/Texture_\").concat(id, \".\").concat(isRGBA ? \"png\" : \"jpg\", \"@\\n          float2 inputs:st.connect = </Materials/Material_\").concat(material.id, \"/Transform2d_\").concat(mapType, \".outputs:result>\\n          token inputs:wrapS = \\\"repeat\\\"\\n          token inputs:wrapT = \\\"repeat\\\"\\n          float outputs:r\\n          float outputs:g\\n          float outputs:b\\n          float3 outputs:rgb\\n      }\");\n    }\n  }, {\n    key: \"buildColor\",\n    value: function buildColor(color) {\n      return \"(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \")\");\n    }\n  }, {\n    key: \"buildVector2\",\n    value: function buildVector2(vector) {\n      return \"(\".concat(vector.x, \", \").concat(vector.y, \")\");\n    }\n  }]);\n\n  return USDZExporter;\n}();\n\nexport { USDZExporter };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/exporters/USDZExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","strToU8","zipSync","Mesh","MeshPhysicalMaterial","USDZExporter","materials","textures","files","scene","modelFileName","output","buildHeader","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","texture","color","split","isRGBA","format","canvas","imageToCanvas","image","Promise","resolve","toBlob","blob","Uint8Array","arrayBuffer","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","extra","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { strToU8, zipSync } from \"fflate\";\nimport { Mesh, MeshPhysicalMaterial } from \"three\";\nclass USDZExporter {\n  constructor() {\n    __publicField(this, \"PRECISION\", 7);\n    __publicField(this, \"materials\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"files\");\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  async parse(scene) {\n    const modelFileName = \"model.usda\";\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible((object) => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = \"geometries/Geometry_\" + geometry.id + \".usd\";\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split(\"_\")[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(\n        (resolve) => canvas == null ? void 0 : canvas.toBlob(resolve, isRGBA ? \"image/png\" : \"image/jpeg\", 1)\n      );\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    }\n    let offset = 0;\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, { extra: { 12345: padding } }];\n      }\n      if (file && typeof file.length === \"number\") {\n        offset = file.length;\n      }\n    }\n    return zipSync(this.files, { level: 0 });\n  }\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== \"undefined\" && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && image instanceof OffscreenCanvas || typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext(\"2d\");\n      context == null ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      if (color !== void 0) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context == null ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n        if (imagedata) {\n          const data = imagedata == null ? void 0 : imagedata.data;\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n          context == null ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n      return canvas;\n    }\n  }\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  }\n  // Xform\n  buildXform(object, geometry, material) {\n    const name = \"Object_\" + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn(\"THREE.USDZExporter: USDZ does not support negative scales\", object);\n    }\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(\n      array,\n      8\n    )}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  }\n  // Mesh\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n  buildMesh(geometry) {\n    const name = \"Geometry\";\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(\", \");\n  }\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      return geometry.index.array.join(\", \");\n    }\n    const array = [];\n    const length = geometry.attributes.position.count;\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n    return array.join(\", \");\n  }\n  buildVector3Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: Normals missing.\");\n      return Array(count).fill(\"(0, 0, 0)\").join(\", \");\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(\n        `(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`\n      );\n    }\n    return array.join(\", \");\n  }\n  buildVector2Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: UVs missing.\");\n      return Array(count).fill(\"(0, 0)\").join(\", \");\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 2) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n    return array.join(\", \");\n  }\n  // Materials\n  buildMaterials(materials) {\n    const array = [];\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n    return `def \"Materials\"\n{\n${array.join(\"\")}\n}\n`;\n  }\n  buildMaterial(material) {\n    const pad = \"            \";\n    const inputs = [];\n    const samplers = [];\n    if (material.map !== null) {\n      inputs.push(\n        `${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.map, \"diffuse\", material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n    if (material.emissiveMap !== null) {\n      inputs.push(\n        `${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.emissiveMap, \"emissive\"));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n    if (material.normalMap !== null) {\n      inputs.push(\n        `${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.normalMap, \"normal\"));\n    }\n    if (material.aoMap !== null) {\n      inputs.push(\n        `${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`\n      );\n      samplers.push(this.buildTexture(material, material.aoMap, \"occlusion\"));\n    }\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(\n        `${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`\n      );\n      samplers.push(this.buildTexture(material, material.roughnessMap, \"roughness\"));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(\n        `${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`\n      );\n      samplers.push(this.buildTexture(material, material.metalnessMap, \"metallic\"));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join(\"\\n\")}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join(\"\\n\")}\n    }\n`;\n  }\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? \"_\" + color.getHexString() : \"\");\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n}\nexport {\n  USDZExporter\n};\n"]},"metadata":{},"sourceType":"module"}