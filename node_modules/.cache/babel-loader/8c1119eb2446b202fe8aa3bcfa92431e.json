{"ast":null,"code":"import { Vector3, Quaternion, Loader, TextureLoader, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer } from \"three\";\n\nvar XLoader = /* @__PURE__ */function () {\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i2 = 0; i2 < props.length; i2++) {\n        var descriptor = props[i2];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var XboneInf = function XboneInf2() {\n    classCallCheck(this, XboneInf2);\n    this.boneName = \"\";\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n\n  var XAnimationInfo = function XAnimationInfo2() {\n    classCallCheck(this, XAnimationInfo2);\n    this.animeName = \"\";\n    this.boneName = \"\";\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n\n  var XAnimationObj = function () {\n    function XAnimationObj2(_flags) {\n      classCallCheck(this, XAnimationObj2);\n      this.fps = 30;\n      this.name = \"xanimation\";\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n\n      if (this.putFlags.putPos === void 0) {\n        this.putFlags.putPos = true;\n      }\n\n      if (this.putFlags.putRot === void 0) {\n        this.putFlags.putRot = true;\n      }\n\n      if (this.putFlags.putScl === void 0) {\n        this.putFlags.putScl = true;\n      }\n    }\n\n    createClass(XAnimationObj2, [{\n      key: \"make\",\n      value: function make(XAnimationInfoArray) {\n        for (var i2 = 0; i2 < XAnimationInfoArray.length; i2++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i2]));\n        }\n\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: \"makeBonekeys\",\n      value: function makeBonekeys(XAnimationInfo2) {\n        var refObj = {};\n        refObj.name = XAnimationInfo2.boneName;\n        refObj.parent = \"\";\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo2);\n\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n\n        return refObj;\n      }\n    }, {\n      key: \"keyFrameRefactor\",\n      value: function keyFrameRefactor(XAnimationInfo2) {\n        var keys = [];\n\n        for (var i2 = 0; i2 < XAnimationInfo2.keyFrames.length; i2++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo2.keyFrames[i2].time * this.fps;\n\n          if (XAnimationInfo2.keyFrames[i2].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo2.keyFrames[i2].pos;\n          }\n\n          if (XAnimationInfo2.keyFrames[i2].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo2.keyFrames[i2].rot;\n          }\n\n          if (XAnimationInfo2.keyFrames[i2].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo2.keyFrames[i2].scl;\n          }\n\n          if (XAnimationInfo2.keyFrames[i2].matrix) {\n            keyframe.matrix = XAnimationInfo2.keyFrames[i2].matrix;\n\n            if (this.putFlags.putPos) {\n              keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n\n            if (this.putFlags.putRot) {\n              keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n\n            if (this.putFlags.putScl) {\n              keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n\n          keys.push(keyframe);\n        }\n\n        return keys;\n      }\n    }]);\n    return XAnimationObj2;\n  }();\n\n  var XKeyFrameInfo = function XKeyFrameInfo2() {\n    classCallCheck(this, XKeyFrameInfo2);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0;\n    this.matrix = null;\n  };\n\n  var XLoader2 = function () {\n    function XLoader3(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader3);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = \"\";\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = \"\";\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n\n    createClass(XLoader3, [{\n      key: \"_setArgOption\",\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n\n        if (!_arg) {\n          return;\n        }\n\n        for (var i2 = _start; i2 < _arg.length; i2++) {\n          switch (i2) {\n            case 0:\n              this.url = _arg[i2];\n              break;\n\n            case 1:\n              this.options = _arg[i2];\n              break;\n          }\n        }\n\n        if (this.options === void 0) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: \"load\",\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n\n        this._setArgOption(_arg);\n\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType(\"arraybuffer\");\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: \"_readLine\",\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf(\"//\", readed);\n\n          if (find === -1) {\n            find = line.indexOf(\"#\", readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf(\"\\r\\n\", readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf(\"\\r\", readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf(\"\\n\", readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: \"_readLine\",\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf(\"//\", readed);\n\n          if (find === -1) {\n            find = line.indexOf(\"#\", readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf(\"\\r\\n\", readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf(\"\\r\", readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf(\"\\n\", readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: \"_isBinary\",\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n\n        if (expect === reader.byteLength) {\n          return true;\n        }\n\n        var fileLength = reader.byteLength;\n\n        for (var index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"_ensureBinary\",\n      value: function _ensureBinary(buf) {\n        if (typeof buf === \"string\") {\n          var array_buffer = new Uint8Array(buf.length);\n\n          for (var i2 = 0; i2 < buf.length; i2++) {\n            array_buffer[i2] = buf.charCodeAt(i2) & 255;\n          }\n\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: \"_ensureString\",\n      value: function _ensureString(buf) {\n        if (typeof buf !== \"string\") {\n          return LoaderUtils.decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: \"parse\",\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: \"_parseBinary\",\n      value: function _parseBinary(data) {\n        return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: \"_parseASCII\",\n      value: function _parseASCII() {\n        var path;\n\n        if (this.resourcePath !== \"\") {\n          path = this.resourcePath;\n        } else if (this.path !== \"\") {\n          path = this.path;\n        } else {\n          path = LoaderUtils.extractUrlBase(this.url);\n        }\n\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n\n        this._hierarchieParse(this.Hierarchies, endRead);\n\n        this._changeRoot();\n\n        this._currentObject = this.Hierarchies.children.shift();\n\n        this._mainloop();\n      }\n    }, {\n      key: \"_hierarchieParse\",\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n\n        while (true) {\n          var find1 = this._data.indexOf(\"{\", endRead) + 1;\n\n          var findEnd = this._data.indexOf(\"}\", endRead);\n\n          var findNext = this._data.indexOf(\"{\", find1) + 1;\n\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n\n            var word = nameData.split(/ /g);\n\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = \"\";\n            }\n\n            if (_currentObject.type === \"Animation\") {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(\";\", findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n\n            _currentObject.parent = _parent;\n\n            if (_currentObject.type != \"template\") {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: \"_mainloop\",\n      value: function _mainloop() {\n        var _this2 = this;\n\n        this._mainProc();\n\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: \"_mainProc\",\n      value: function _mainProc() {\n        var breakFlag = false;\n\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case \"template\":\n                break;\n\n              case \"AnimTicksPerSecond\":\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n\n              case \"Frame\":\n                this._setFrame();\n\n                break;\n\n              case \"FrameTransformMatrix\":\n                this._setFrameTransformMatrix();\n\n                break;\n\n              case \"Mesh\":\n                this._changeRoot();\n\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n\n                this._makeBoneFrom_CurrentFrame();\n\n                this._readVertexDatas();\n\n                breakFlag = true;\n                break;\n\n              case \"MeshNormals\":\n                this._readVertexDatas();\n\n                break;\n\n              case \"MeshTextureCoords\":\n                this._setMeshTextureCoords();\n\n                break;\n\n              case \"VertexDuplicationIndices\":\n                break;\n\n              case \"MeshMaterialList\":\n                this._setMeshMaterialList();\n\n                break;\n\n              case \"Material\":\n                this._setMaterial();\n\n                break;\n\n              case \"SkinWeights\":\n                this._setSkinWeights();\n\n                break;\n\n              case \"AnimationSet\":\n                this._changeRoot();\n\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n\n              case \"Animation\":\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n\n              case \"AnimationKey\":\n                this._readAnimationKey();\n\n                breakFlag = true;\n                break;\n            }\n\n            this._currentObject.worked = true;\n          }\n\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log(\"processing \" + this._currentObject.name);\n            }\n\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n\n            if (breakFlag) break;\n          }\n        }\n\n        return;\n      }\n    }, {\n      key: \"_changeRoot\",\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n\n        this._currentGeo = {};\n\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n\n            this._currentAnimeFrames = null;\n          }\n\n          this._makeOutputAnimation();\n        }\n\n        this._currentAnime = {};\n      }\n    }, {\n      key: \"_getParentName\",\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return \"\";\n        }\n      }\n    }, {\n      key: \"_setFrame\",\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: \"_setFrameTransformMatrix\",\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new Matrix4();\n\n        var data = this._currentObject.data.split(\",\");\n\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: \"_makeBoneFrom_CurrentFrame\",\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n\n        var b = new Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n\n        if (this._currentFrame.parentName) {\n          for (var frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"_readVertexDatas\",\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n\n        while (true) {\n          var changeMode = false;\n\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(\";;\", endRead) + 1;\n\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                break;\n\n              case 1:\n                find = this._currentObject.data.indexOf(\";,\", endRead) + 1;\n                break;\n            }\n\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n\n            switch (this._currentObject.type) {\n              case \"Mesh\":\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n\n              case \"MeshNormals\":\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n            }\n\n            endRead = find + 1;\n\n            if (changeMode) {\n              mode++;\n            }\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_readInt1\",\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(\";\", start);\n\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: \"_readVertex1\",\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: \"_readFace1\",\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(\",\");\n\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: \"_readNormalVector1\",\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: \"_buildGeometry\",\n      value: function _buildGeometry() {\n        var bufferGeometry = new BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = [];\n        var data = this._currentGeo.GeometryData;\n\n        for (var i2 = 0, l = data.indices.length; i2 < l; i2++) {\n          var stride2 = data.indices[i2] * 2;\n          var stride3 = data.indices[i2] * 3;\n          var stride4 = data.indices[i2] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        }\n\n        bufferGeometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute(\"skinIndex\", new Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute(\"skinWeight\", new Float32BufferAttribute(skinWeights, 4));\n\n        this._computeGroups(bufferGeometry, data.materialIndices);\n\n        return bufferGeometry;\n      }\n    }, {\n      key: \"_computeGroups\",\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = void 0;\n\n        for (var i2 = 0; i2 < materialIndices.length; i2++) {\n          var currentMaterialIndex = materialIndices[i2];\n\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n\n            if (group !== void 0) {\n              group.count = i2 * 3 - group.start;\n              groups.push(group);\n            }\n\n            group = {\n              start: i2 * 3,\n              materialIndex: materialIndex\n            };\n          }\n        }\n\n        if (group !== void 0) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: \"_setMeshTextureCoords\",\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n\n                var data = this._readLine(line.trim()).split(\";\");\n\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n\n                endRead = find + 1;\n              }\n\n              break;\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_setMeshMaterialList\",\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(\";\", endRead);\n\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n\n            var data = this._readLine(line.trim()).split(\",\");\n\n            for (var i2 = 0; i2 < data.length; i2++) {\n              this._currentGeo.GeometryData.materialIndices[i2] = parseInt(data[i2]);\n            }\n\n            endRead = this._currentObject.data.length;\n          }\n\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_setMaterial\",\n      value: function _setMaterial() {\n        var _nowMat = new MeshPhongMaterial({\n          color: Math.random() * 16777215\n        });\n\n        _nowMat.side = FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(\";;\", endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(\";\");\n\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";;\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(\";\");\n\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(\";;\", endRead);\n\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(\";\");\n\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log(\"processing \" + localObject.name);\n            }\n\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n\n            switch (localObject.type) {\n              case \"TextureFilename\":\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n\n              case \"BumpMapFilename\":\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n\n              case \"NormalMapFilename\":\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new Vector2(2, 2);\n                break;\n\n              case \"EmissiveMapFilename\":\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n\n              case \"LightMapFilename\":\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: \"_setSkinWeights\",\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(\";\", endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(\",\");\n\n        for (var i2 = 0; i2 < data.length; i2++) {\n          boneInf.Indeces.push(parseInt(data[i2]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(\",\");\n\n        for (var _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(\",\");\n\n        boneInf.OffsetMatrix = new Matrix4();\n\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: \"_makePutBoneList\",\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n\n        for (var frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (var i2 = 0; i2 < _bones.length; i2++) {\n                if (this.HieStack[frame].parentName === _bones[i2].name) {\n                  _bones[i2].add(b);\n\n                  b.parent = i2;\n                  break;\n                }\n              }\n            }\n\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: \"_makeOutputGeometry\",\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n\n          for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n\n            for (var bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n\n            for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log(\"warn! over 4 bone weight! :\" + nowVertexID);\n              }\n            }\n          }\n\n          for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n\n          var offsetList = [];\n\n          for (var _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new Matrix4());\n            }\n          }\n\n          var bufferGeometry = this._buildGeometry();\n\n          mesh = new SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n\n          mesh = new Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n\n          mesh.applyMatrix4(worldBaseMx);\n        }\n\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: \"_initSkeleton\",\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n            bone,\n            gbone;\n        var i2, il;\n\n        for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n          gbone = boneList[i2];\n          bone = new Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== void 0) bone.scale.fromArray(gbone.scl);\n        }\n\n        for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n          gbone = boneList[i2];\n\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== void 0) {\n            bones[gbone.parent].add(bones[i2]);\n          } else {\n            mesh.add(bones[i2]);\n          }\n        }\n\n        mesh.updateMatrixWorld(true);\n        var skeleton = new Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: \"_readAnimationKey\",\n      value: function _readAnimationKey() {\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(\";\", endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n\n        var data = this._readLine(line.trim()).split(\";;,\");\n\n        for (var i2 = 0; i2 < data.length; i2++) {\n          var data2 = data[i2].split(\";\");\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n\n          if (nowKeyType != 4) {\n            var frameFound = false;\n\n            for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n\n            var frameValue = data2[2].split(\",\");\n\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n\n              case 1:\n                keyInfo.scl = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n\n              case 2:\n                keyInfo.pos = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new Matrix4();\n\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(\",\"));\n\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: \"_makeOutputAnimation\",\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: \"assignAnimation\",\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n\n        if (!model) {\n          model = this.Meshes[0];\n        }\n\n        if (!animation) {\n          animation = this.animations[0];\n        }\n\n        if (!model || !animation) {\n          return null;\n        }\n\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n\n        for (var b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n\n          for (var i2 = 0; i2 < animation.hierarchy.length; i2++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[i2].name) {\n              findAnimation = true;\n              var c_key = animation.hierarchy[i2].copy();\n              c_key.parent = -1;\n\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === \"Bone\") {\n                for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n\n            for (var k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n\n            put.hierarchy.push(_c_key);\n          }\n        }\n\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n\n        model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n\n        if (!model.animationMixer) {\n          model.animationMixer = new AnimationMixer(model);\n        }\n\n        return put;\n      }\n    }, {\n      key: \"_ParseMatrixData\",\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader3;\n  }();\n\n  return XLoader2;\n}();\n\nexport { XLoader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/XLoader.js"],"names":["Vector3","Quaternion","Loader","TextureLoader","FileLoader","LoaderUtils","Matrix4","Bone","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","MeshPhongMaterial","FrontSide","Vector2","SkinnedMesh","Mesh","Skeleton","AnimationClip","AnimationMixer","XLoader","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i2","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","XboneInf","XboneInf2","boneName","BoneIndex","Indeces","Weights","initMatrix","OffsetMatrix","XAnimationInfo","XAnimationInfo2","animeName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","XAnimationObj","XAnimationObj2","_flags","fps","name","hierarchy","putFlags","putPos","putRot","putScl","value","make","XAnimationInfoArray","push","makeBonekeys","keys","time","clone","assign","refObj","parent","keyFrameRefactor","copy","keyframe","pos","rot","scl","matrix","setFromMatrixPosition","setFromRotationMatrix","setFromMatrixScale","XKeyFrameInfo","XKeyFrameInfo2","index","Frame","XLoader2","XLoader3","manager","call","debug","texloader","url","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","_data","onLoad","IsUvYReverse","Meshes","animations","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_setArgOption","_arg","_start","arguments","options","load","onProgress","onError","_this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","response","parse","e","console","error","itemError","_readLine","line","readed","find","indexOf","foundNewLine","substr","_isBinary","binData","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","fileLength","getUint8","_ensureBinary","buf","array_buffer","Uint8Array","charCodeAt","buffer","_ensureString","decodeText","_parse","data","_parseBinary","_parseASCII","resourcePath","extractUrlBase","setCrossOrigin","crossOrigin","endRead","children","_hierarchieParse","_changeRoot","shift","_mainloop","_parent","_end","find1","findEnd","findNext","nameData","trim","word","split","type","refs","end","DataEnder","lastIndexOf","Math","min","nextStart","max","_refs","_this2","_mainProc","worked","setTimeout","models","breakFlag","parseInt","_setFrame","_setFrameTransformMatrix","parentName","_getParentName","VertexSetedBoneCount","GeometryData","vertices","normals","uvs","skinIndices","skinWeights","indices","materialIndices","Materials","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","log","_makeOutputGeometry","_makeOutputAnimation","_obj","FrameTransformMatrix","_ParseMatrixData","b","applyMatrix4","matrixWorld","putBone","frame","add","mode","mode_local","maxLength","changeMode","refO","_readInt1","_readVertex1","_readFace1","_readNormalVector1","start","refI","parseFloat","_buildGeometry","bufferGeometry","position","l","stride2","stride3","stride4","setAttribute","_computeGroups","group","groups","materialIndex","currentMaterialIndex","count","i","color","random","side","r","g","shininess","data2","specular","data3","emissive","localObject","fileName","map","bumpMap","bumpScale","normalMap","normalScale","emissiveMap","lightMap","boneInf","_i","_makePutBoneList","_RootName","_bones","putting","toArray","rotq","mesh","putBones","bi","boneIndex","bb","vi","nowVertexID","nowVal","stride","sk","skinning","offsetList","_bi","_initSkeleton","_bufferGeometry","worldBaseMx","currentMxFrame","multiply","boneList","boneInverses","bones","bone","gbone","il","fromArray","quaternion","scale","updateMatrixWorld","skeleton","bind","nowKeyType","keyInfo","frameFound","mm","frameValue","animationObj","assignAnimation","_model","_animation","model","animation","put","findAnimation","c_key","_c_key","k","set","geometry","parseAnimation","animationMixer","targetMatrix"],"mappings":"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","sourcesContent":["import { Vector3, Quaternion, Loader, TextureLoader, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer } from \"three\";\nvar XLoader = /* @__PURE__ */ function() {\n  var classCallCheck = function(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n  var createClass = function() {\n    function defineProperties(target, props) {\n      for (let i2 = 0; i2 < props.length; i2++) {\n        var descriptor = props[i2];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n          descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function(Constructor, protoProps, staticProps) {\n      if (protoProps)\n        defineProperties(Constructor.prototype, protoProps);\n      if (staticProps)\n        defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var XboneInf = function XboneInf2() {\n    classCallCheck(this, XboneInf2);\n    this.boneName = \"\";\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n  var XAnimationInfo = function XAnimationInfo2() {\n    classCallCheck(this, XAnimationInfo2);\n    this.animeName = \"\";\n    this.boneName = \"\";\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n  var XAnimationObj = function() {\n    function XAnimationObj2(_flags) {\n      classCallCheck(this, XAnimationObj2);\n      this.fps = 30;\n      this.name = \"xanimation\";\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n      if (this.putFlags.putPos === void 0) {\n        this.putFlags.putPos = true;\n      }\n      if (this.putFlags.putRot === void 0) {\n        this.putFlags.putRot = true;\n      }\n      if (this.putFlags.putScl === void 0) {\n        this.putFlags.putScl = true;\n      }\n    }\n    createClass(XAnimationObj2, [\n      {\n        key: \"make\",\n        value: function make(XAnimationInfoArray) {\n          for (let i2 = 0; i2 < XAnimationInfoArray.length; i2++) {\n            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i2]));\n          }\n          this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n        }\n      },\n      {\n        key: \"clone\",\n        value: function clone() {\n          return Object.assign({}, this);\n        }\n      },\n      {\n        key: \"makeBonekeys\",\n        value: function makeBonekeys(XAnimationInfo2) {\n          var refObj = {};\n          refObj.name = XAnimationInfo2.boneName;\n          refObj.parent = \"\";\n          refObj.keys = this.keyFrameRefactor(XAnimationInfo2);\n          refObj.copy = function() {\n            return Object.assign({}, this);\n          };\n          return refObj;\n        }\n      },\n      {\n        key: \"keyFrameRefactor\",\n        value: function keyFrameRefactor(XAnimationInfo2) {\n          var keys = [];\n          for (let i2 = 0; i2 < XAnimationInfo2.keyFrames.length; i2++) {\n            var keyframe = {};\n            keyframe.time = XAnimationInfo2.keyFrames[i2].time * this.fps;\n            if (XAnimationInfo2.keyFrames[i2].pos && this.putFlags.putPos) {\n              keyframe.pos = XAnimationInfo2.keyFrames[i2].pos;\n            }\n            if (XAnimationInfo2.keyFrames[i2].rot && this.putFlags.putRot) {\n              keyframe.rot = XAnimationInfo2.keyFrames[i2].rot;\n            }\n            if (XAnimationInfo2.keyFrames[i2].scl && this.putFlags.putScl) {\n              keyframe.scl = XAnimationInfo2.keyFrames[i2].scl;\n            }\n            if (XAnimationInfo2.keyFrames[i2].matrix) {\n              keyframe.matrix = XAnimationInfo2.keyFrames[i2].matrix;\n              if (this.putFlags.putPos) {\n                keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n              }\n              if (this.putFlags.putRot) {\n                keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n              }\n              if (this.putFlags.putScl) {\n                keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n              }\n            }\n            keys.push(keyframe);\n          }\n          return keys;\n        }\n      }\n    ]);\n    return XAnimationObj2;\n  }();\n  var XKeyFrameInfo = function XKeyFrameInfo2() {\n    classCallCheck(this, XKeyFrameInfo2);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0;\n    this.matrix = null;\n  };\n  var XLoader2 = function() {\n    function XLoader3(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader3);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = \"\";\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = \"\";\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n    createClass(XLoader3, [\n      {\n        key: \"_setArgOption\",\n        value: function _setArgOption(_arg) {\n          var _start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n          if (!_arg) {\n            return;\n          }\n          for (let i2 = _start; i2 < _arg.length; i2++) {\n            switch (i2) {\n              case 0:\n                this.url = _arg[i2];\n                break;\n              case 1:\n                this.options = _arg[i2];\n                break;\n            }\n          }\n          if (this.options === void 0) {\n            this.options = {};\n          }\n        }\n      },\n      {\n        key: \"load\",\n        value: function load(_arg, onLoad, onProgress, onError) {\n          var _this = this;\n          this._setArgOption(_arg);\n          var loader = new FileLoader(this.manager);\n          loader.setPath(this.path);\n          loader.setResponseType(\"arraybuffer\");\n          loader.setRequestHeader(this.requestHeader);\n          loader.setWithCredentials(this.withCredentials);\n          loader.load(\n            this.url,\n            function(response) {\n              try {\n                _this.parse(response, onLoad);\n              } catch (e) {\n                if (onError) {\n                  onError(e);\n                } else {\n                  console.error(e);\n                }\n                _this.manager.itemError(_this.url);\n              }\n            },\n            onProgress,\n            onError\n          );\n        }\n      },\n      {\n        key: \"_readLine\",\n        value: function _readLine(line) {\n          var readed = 0;\n          while (true) {\n            var find = -1;\n            find = line.indexOf(\"//\", readed);\n            if (find === -1) {\n              find = line.indexOf(\"#\", readed);\n            }\n            if (find > -1 && find < 2) {\n              var foundNewLine = -1;\n              foundNewLine = line.indexOf(\"\\r\\n\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 2;\n              } else {\n                foundNewLine = line.indexOf(\"\\r\", readed);\n                if (foundNewLine > 0) {\n                  readed = foundNewLine + 1;\n                } else {\n                  readed = line.indexOf(\"\\n\", readed) + 1;\n                }\n              }\n            } else {\n              break;\n            }\n          }\n          return line.substr(readed);\n        }\n      },\n      {\n        key: \"_readLine\",\n        value: function _readLine(line) {\n          var readed = 0;\n          while (true) {\n            var find = -1;\n            find = line.indexOf(\"//\", readed);\n            if (find === -1) {\n              find = line.indexOf(\"#\", readed);\n            }\n            if (find > -1 && find < 2) {\n              var foundNewLine = -1;\n              foundNewLine = line.indexOf(\"\\r\\n\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 2;\n              } else {\n                foundNewLine = line.indexOf(\"\\r\", readed);\n                if (foundNewLine > 0) {\n                  readed = foundNewLine + 1;\n                } else {\n                  readed = line.indexOf(\"\\n\", readed) + 1;\n                }\n              }\n            } else {\n              break;\n            }\n          }\n          return line.substr(readed);\n        }\n      },\n      {\n        key: \"_isBinary\",\n        value: function _isBinary(binData) {\n          var reader = new DataView(binData);\n          var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n          var n_faces = reader.getUint32(80, true);\n          var expect = 80 + 32 / 8 + n_faces * face_size;\n          if (expect === reader.byteLength) {\n            return true;\n          }\n          var fileLength = reader.byteLength;\n          for (let index = 0; index < fileLength; index++) {\n            if (reader.getUint8(index, false) > 127) {\n              return true;\n            }\n          }\n          return false;\n        }\n      },\n      {\n        key: \"_ensureBinary\",\n        value: function _ensureBinary(buf) {\n          if (typeof buf === \"string\") {\n            var array_buffer = new Uint8Array(buf.length);\n            for (let i2 = 0; i2 < buf.length; i2++) {\n              array_buffer[i2] = buf.charCodeAt(i2) & 255;\n            }\n            return array_buffer.buffer || array_buffer;\n          } else {\n            return buf;\n          }\n        }\n      },\n      {\n        key: \"_ensureString\",\n        value: function _ensureString(buf) {\n          if (typeof buf !== \"string\") {\n            return LoaderUtils.decodeText(new Uint8Array(buf));\n          } else {\n            return buf;\n          }\n        }\n      },\n      {\n        key: \"parse\",\n        value: function _parse(data, onLoad) {\n          var binData = this._ensureBinary(data);\n          this._data = this._ensureString(data);\n          this.onLoad = onLoad;\n          return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n        }\n      },\n      {\n        key: \"_parseBinary\",\n        value: function _parseBinary(data) {\n          return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n        }\n      },\n      {\n        key: \"_parseASCII\",\n        value: function _parseASCII() {\n          var path;\n          if (this.resourcePath !== \"\") {\n            path = this.resourcePath;\n          } else if (this.path !== \"\") {\n            path = this.path;\n          } else {\n            path = LoaderUtils.extractUrlBase(this.url);\n          }\n          this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n          var endRead = 16;\n          this.Hierarchies.children = [];\n          this._hierarchieParse(this.Hierarchies, endRead);\n          this._changeRoot();\n          this._currentObject = this.Hierarchies.children.shift();\n          this._mainloop();\n        }\n      },\n      {\n        key: \"_hierarchieParse\",\n        value: function _hierarchieParse(_parent, _end) {\n          var endRead = _end;\n          while (true) {\n            var find1 = this._data.indexOf(\"{\", endRead) + 1;\n            var findEnd = this._data.indexOf(\"}\", endRead);\n            var findNext = this._data.indexOf(\"{\", find1) + 1;\n            if (find1 > 0 && findEnd > find1) {\n              var _currentObject = {};\n              _currentObject.children = [];\n              var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n              var word = nameData.split(/ /g);\n              if (word.length > 0) {\n                _currentObject.type = word[0];\n                if (word.length >= 2) {\n                  _currentObject.name = word[1];\n                } else {\n                  _currentObject.name = word[0] + this.Hierarchies.children.length;\n                }\n              } else {\n                _currentObject.name = nameData;\n                _currentObject.type = \"\";\n              }\n              if (_currentObject.type === \"Animation\") {\n                _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n                var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n                endRead = refs.end;\n                _currentObject.children = refs.parent.children;\n              } else {\n                var DataEnder = this._data.lastIndexOf(\";\", findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n                _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n                if (findNext <= 0 || findEnd < findNext) {\n                  endRead = findEnd + 1;\n                } else {\n                  var nextStart = Math.max(DataEnder + 1, find1);\n                  var _refs = this._hierarchieParse(_currentObject, nextStart);\n                  endRead = _refs.end;\n                  _currentObject.children = _refs.parent.children;\n                }\n              }\n              _currentObject.parent = _parent;\n              if (_currentObject.type != \"template\") {\n                _parent.children.push(_currentObject);\n              }\n            } else {\n              endRead = find1 === -1 ? this._data.length : findEnd + 1;\n              break;\n            }\n          }\n          return {\n            parent: _parent,\n            end: endRead\n          };\n        }\n      },\n      {\n        key: \"_mainloop\",\n        value: function _mainloop() {\n          var _this2 = this;\n          this._mainProc();\n          if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n            setTimeout(function() {\n              _this2._mainloop();\n            }, 1);\n          } else {\n            setTimeout(function() {\n              _this2.onLoad({\n                models: _this2.Meshes,\n                animations: _this2.animations\n              });\n            }, 1);\n          }\n        }\n      },\n      {\n        key: \"_mainProc\",\n        value: function _mainProc() {\n          var breakFlag = false;\n          while (true) {\n            if (!this._currentObject.worked) {\n              switch (this._currentObject.type) {\n                case \"template\":\n                  break;\n                case \"AnimTicksPerSecond\":\n                  this.animTicksPerSecond = parseInt(this._currentObject.data);\n                  break;\n                case \"Frame\":\n                  this._setFrame();\n                  break;\n                case \"FrameTransformMatrix\":\n                  this._setFrameTransformMatrix();\n                  break;\n                case \"Mesh\":\n                  this._changeRoot();\n                  this._currentGeo = {};\n                  this._currentGeo.name = this._currentObject.name.trim();\n                  this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                  this._currentGeo.VertexSetedBoneCount = [];\n                  this._currentGeo.GeometryData = {\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    skinIndices: [],\n                    skinWeights: [],\n                    indices: [],\n                    materialIndices: []\n                  };\n                  this._currentGeo.Materials = [];\n                  this._currentGeo.normalVectors = [];\n                  this._currentGeo.BoneInfs = [];\n                  this._currentGeo.baseFrame = this._currentFrame;\n                  this._makeBoneFrom_CurrentFrame();\n                  this._readVertexDatas();\n                  breakFlag = true;\n                  break;\n                case \"MeshNormals\":\n                  this._readVertexDatas();\n                  break;\n                case \"MeshTextureCoords\":\n                  this._setMeshTextureCoords();\n                  break;\n                case \"VertexDuplicationIndices\":\n                  break;\n                case \"MeshMaterialList\":\n                  this._setMeshMaterialList();\n                  break;\n                case \"Material\":\n                  this._setMaterial();\n                  break;\n                case \"SkinWeights\":\n                  this._setSkinWeights();\n                  break;\n                case \"AnimationSet\":\n                  this._changeRoot();\n                  this._currentAnime = {};\n                  this._currentAnime.name = this._currentObject.name.trim();\n                  this._currentAnime.AnimeFrames = [];\n                  break;\n                case \"Animation\":\n                  if (this._currentAnimeFrames) {\n                    this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                  }\n                  this._currentAnimeFrames = new XAnimationInfo();\n                  this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                  break;\n                case \"AnimationKey\":\n                  this._readAnimationKey();\n                  breakFlag = true;\n                  break;\n              }\n              this._currentObject.worked = true;\n            }\n            if (this._currentObject.children.length > 0) {\n              this._currentObject = this._currentObject.children.shift();\n              if (this.debug) {\n                console.log(\"processing \" + this._currentObject.name);\n              }\n              if (breakFlag)\n                break;\n            } else {\n              if (this._currentObject.worked) {\n                if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                  this._changeRoot();\n                }\n              }\n              if (this._currentObject.parent) {\n                this._currentObject = this._currentObject.parent;\n              } else {\n                breakFlag = true;\n              }\n              if (breakFlag)\n                break;\n            }\n          }\n          return;\n        }\n      },\n      {\n        key: \"_changeRoot\",\n        value: function _changeRoot() {\n          if (this._currentGeo != null && this._currentGeo.name) {\n            this._makeOutputGeometry();\n          }\n          this._currentGeo = {};\n          if (this._currentAnime != null && this._currentAnime.name) {\n            if (this._currentAnimeFrames) {\n              this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n              this._currentAnimeFrames = null;\n            }\n            this._makeOutputAnimation();\n          }\n          this._currentAnime = {};\n        }\n      },\n      {\n        key: \"_getParentName\",\n        value: function _getParentName(_obj) {\n          if (_obj.parent) {\n            if (_obj.parent.name) {\n              return _obj.parent.name;\n            } else {\n              return this._getParentName(_obj.parent);\n            }\n          } else {\n            return \"\";\n          }\n        }\n      },\n      {\n        key: \"_setFrame\",\n        value: function _setFrame() {\n          this._nowFrameName = this._currentObject.name.trim();\n          this._currentFrame = {};\n          this._currentFrame.name = this._nowFrameName;\n          this._currentFrame.children = [];\n          if (this._currentObject.parent && this._currentObject.parent.name) {\n            this._currentFrame.parentName = this._currentObject.parent.name;\n          }\n          this.frameHierarchie.push(this._nowFrameName);\n          this.HieStack[this._nowFrameName] = this._currentFrame;\n        }\n      },\n      {\n        key: \"_setFrameTransformMatrix\",\n        value: function _setFrameTransformMatrix() {\n          this._currentFrame.FrameTransformMatrix = new Matrix4();\n          var data = this._currentObject.data.split(\",\");\n          this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n          this._makeBoneFrom_CurrentFrame();\n        }\n      },\n      {\n        key: \"_makeBoneFrom_CurrentFrame\",\n        value: function _makeBoneFrom_CurrentFrame() {\n          if (!this._currentFrame.FrameTransformMatrix) {\n            return;\n          }\n          var b = new Bone();\n          b.name = this._currentFrame.name;\n          b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n          b.matrixWorld = b.matrix;\n          b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n          this._currentFrame.putBone = b;\n          if (this._currentFrame.parentName) {\n            for (let frame in this.HieStack) {\n              if (this.HieStack[frame].name === this._currentFrame.parentName) {\n                this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n              }\n            }\n          }\n        }\n      },\n      {\n        key: \"_readVertexDatas\",\n        value: function _readVertexDatas() {\n          var endRead = 0;\n          var mode = 0;\n          var mode_local = 0;\n          var maxLength = 0;\n          while (true) {\n            var changeMode = false;\n            if (mode_local === 0) {\n              var refO = this._readInt1(endRead);\n              endRead = refO.endRead;\n              mode_local = 1;\n              maxLength = this._currentObject.data.indexOf(\";;\", endRead) + 1;\n              if (maxLength <= 0) {\n                maxLength = this._currentObject.data.length;\n              }\n            } else {\n              var find = 0;\n              switch (mode) {\n                case 0:\n                  find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                  break;\n                case 1:\n                  find = this._currentObject.data.indexOf(\";,\", endRead) + 1;\n                  break;\n              }\n              if (find === 0 || find > maxLength) {\n                find = maxLength;\n                mode_local = 0;\n                changeMode = true;\n              }\n              switch (this._currentObject.type) {\n                case \"Mesh\":\n                  switch (mode) {\n                    case 0:\n                      this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                      break;\n                    case 1:\n                      this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                      break;\n                  }\n                  break;\n                case \"MeshNormals\":\n                  switch (mode) {\n                    case 0:\n                      this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                      break;\n                  }\n                  break;\n              }\n              endRead = find + 1;\n              if (changeMode) {\n                mode++;\n              }\n            }\n            if (endRead >= this._currentObject.data.length) {\n              break;\n            }\n          }\n        }\n      },\n      {\n        key: \"_readInt1\",\n        value: function _readInt1(start) {\n          var find = this._currentObject.data.indexOf(\";\", start);\n          return {\n            refI: parseInt(this._currentObject.data.substr(start, find - start)),\n            endRead: find + 1\n          };\n        }\n      },\n      {\n        key: \"_readVertex1\",\n        value: function _readVertex1(line) {\n          var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n          this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n          this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n          this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n          this._currentGeo.VertexSetedBoneCount.push(0);\n        }\n      },\n      {\n        key: \"_readFace1\",\n        value: function _readFace1(line) {\n          var data = this._readLine(line.trim()).substr(2, line.length - 4).split(\",\");\n          this._currentGeo.GeometryData.indices.push(\n            parseInt(data[0], 10),\n            parseInt(data[1], 10),\n            parseInt(data[2], 10)\n          );\n        }\n      },\n      {\n        key: \"_readNormalVector1\",\n        value: function _readNormalVector1(line) {\n          var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n          this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n        }\n      },\n      {\n        key: \"_buildGeometry\",\n        value: function _buildGeometry() {\n          var bufferGeometry = new BufferGeometry();\n          var position = [];\n          var normals = [];\n          var uvs = [];\n          var skinIndices = [];\n          var skinWeights = [];\n          var data = this._currentGeo.GeometryData;\n          for (let i2 = 0, l = data.indices.length; i2 < l; i2++) {\n            var stride2 = data.indices[i2] * 2;\n            var stride3 = data.indices[i2] * 3;\n            var stride4 = data.indices[i2] * 4;\n            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n            skinIndices.push(\n              data.skinIndices[stride4],\n              data.skinIndices[stride4 + 1],\n              data.skinIndices[stride4 + 2],\n              data.skinIndices[stride4 + 3]\n            );\n            skinWeights.push(\n              data.skinWeights[stride4],\n              data.skinWeights[stride4 + 1],\n              data.skinWeights[stride4 + 2],\n              data.skinWeights[stride4 + 3]\n            );\n            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n          }\n          bufferGeometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n          bufferGeometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n          bufferGeometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n          bufferGeometry.setAttribute(\"skinIndex\", new Uint16BufferAttribute(skinIndices, 4));\n          bufferGeometry.setAttribute(\"skinWeight\", new Float32BufferAttribute(skinWeights, 4));\n          this._computeGroups(bufferGeometry, data.materialIndices);\n          return bufferGeometry;\n        }\n      },\n      {\n        key: \"_computeGroups\",\n        value: function _computeGroups(bufferGeometry, materialIndices) {\n          var group;\n          var groups = [];\n          var materialIndex = void 0;\n          for (let i2 = 0; i2 < materialIndices.length; i2++) {\n            var currentMaterialIndex = materialIndices[i2];\n            if (currentMaterialIndex !== materialIndex) {\n              materialIndex = currentMaterialIndex;\n              if (group !== void 0) {\n                group.count = i2 * 3 - group.start;\n                groups.push(group);\n              }\n              group = {\n                start: i2 * 3,\n                materialIndex\n              };\n            }\n          }\n          if (group !== void 0) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n          }\n          bufferGeometry.groups = groups;\n        }\n      },\n      {\n        key: \"_setMeshTextureCoords\",\n        value: function _setMeshTextureCoords() {\n          var endRead = 0;\n          var mode = 0;\n          var mode_local = 0;\n          while (true) {\n            switch (mode) {\n              case 0:\n                if (mode_local === 0) {\n                  var refO = this._readInt1(0);\n                  endRead = refO.endRead;\n                  mode_local = 1;\n                } else {\n                  var find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                  if (find === 0) {\n                    find = this._currentObject.data.length;\n                    mode = 2;\n                    mode_local = 0;\n                  }\n                  var line = this._currentObject.data.substr(endRead, find - endRead);\n                  var data = this._readLine(line.trim()).split(\";\");\n                  if (this.IsUvYReverse) {\n                    this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                  } else {\n                    this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                  }\n                  endRead = find + 1;\n                }\n                break;\n            }\n            if (endRead >= this._currentObject.data.length) {\n              break;\n            }\n          }\n        }\n      },\n      {\n        key: \"_setMeshMaterialList\",\n        value: function _setMeshMaterialList() {\n          var endRead = 0;\n          var mode = 0;\n          var mode_local = 0;\n          while (true) {\n            if (mode_local < 2) {\n              var refO = this._readInt1(endRead);\n              endRead = refO.endRead;\n              mode_local++;\n            } else {\n              var find = this._currentObject.data.indexOf(\";\", endRead);\n              if (find === -1) {\n                find = this._currentObject.data.length;\n                mode = 3;\n                mode_local = 0;\n              }\n              var line = this._currentObject.data.substr(endRead, find - endRead);\n              var data = this._readLine(line.trim()).split(\",\");\n              for (let i2 = 0; i2 < data.length; i2++) {\n                this._currentGeo.GeometryData.materialIndices[i2] = parseInt(data[i2]);\n              }\n              endRead = this._currentObject.data.length;\n            }\n            if (endRead >= this._currentObject.data.length || mode >= 3) {\n              break;\n            }\n          }\n        }\n      },\n      {\n        key: \"_setMaterial\",\n        value: function _setMaterial() {\n          var _nowMat = new MeshPhongMaterial({\n            color: Math.random() * 16777215\n          });\n          _nowMat.side = FrontSide;\n          _nowMat.name = this._currentObject.name;\n          var endRead = 0;\n          var find = this._currentObject.data.indexOf(\";;\", endRead);\n          var line = this._currentObject.data.substr(endRead, find - endRead);\n          var data = this._readLine(line.trim()).split(\";\");\n          _nowMat.color.r = parseFloat(data[0]);\n          _nowMat.color.g = parseFloat(data[1]);\n          _nowMat.color.b = parseFloat(data[2]);\n          endRead = find + 2;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          _nowMat.shininess = parseFloat(this._readLine(line));\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";;\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data2 = this._readLine(line.trim()).split(\";\");\n          _nowMat.specular.r = parseFloat(data2[0]);\n          _nowMat.specular.g = parseFloat(data2[1]);\n          _nowMat.specular.b = parseFloat(data2[2]);\n          endRead = find + 2;\n          find = this._currentObject.data.indexOf(\";;\", endRead);\n          if (find === -1) {\n            find = this._currentObject.data.length;\n          }\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data3 = this._readLine(line.trim()).split(\";\");\n          _nowMat.emissive.r = parseFloat(data3[0]);\n          _nowMat.emissive.g = parseFloat(data3[1]);\n          _nowMat.emissive.b = parseFloat(data3[2]);\n          var localObject = null;\n          while (true) {\n            if (this._currentObject.children.length > 0) {\n              localObject = this._currentObject.children.shift();\n              if (this.debug) {\n                console.log(\"processing \" + localObject.name);\n              }\n              var fileName = localObject.data.substr(1, localObject.data.length - 2);\n              switch (localObject.type) {\n                case \"TextureFilename\":\n                  _nowMat.map = this.texloader.load(fileName);\n                  break;\n                case \"BumpMapFilename\":\n                  _nowMat.bumpMap = this.texloader.load(fileName);\n                  _nowMat.bumpScale = 0.05;\n                  break;\n                case \"NormalMapFilename\":\n                  _nowMat.normalMap = this.texloader.load(fileName);\n                  _nowMat.normalScale = new Vector2(2, 2);\n                  break;\n                case \"EmissiveMapFilename\":\n                  _nowMat.emissiveMap = this.texloader.load(fileName);\n                  break;\n                case \"LightMapFilename\":\n                  _nowMat.lightMap = this.texloader.load(fileName);\n                  break;\n              }\n            } else {\n              break;\n            }\n          }\n          this._currentGeo.Materials.push(_nowMat);\n        }\n      },\n      {\n        key: \"_setSkinWeights\",\n        value: function _setSkinWeights() {\n          var boneInf = new XboneInf();\n          var endRead = 0;\n          var find = this._currentObject.data.indexOf(\";\", endRead);\n          var line = this._currentObject.data.substr(endRead, find - endRead);\n          endRead = find + 1;\n          boneInf.boneName = line.substr(1, line.length - 2);\n          boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data = this._readLine(line.trim()).split(\",\");\n          for (let i2 = 0; i2 < data.length; i2++) {\n            boneInf.Indeces.push(parseInt(data[i2]));\n          }\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data2 = this._readLine(line.trim()).split(\",\");\n          for (let _i = 0; _i < data2.length; _i++) {\n            boneInf.Weights.push(parseFloat(data2[_i]));\n          }\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          if (find <= 0) {\n            find = this._currentObject.data.length;\n          }\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data3 = this._readLine(line.trim()).split(\",\");\n          boneInf.OffsetMatrix = new Matrix4();\n          this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n          this._currentGeo.BoneInfs.push(boneInf);\n        }\n      },\n      {\n        key: \"_makePutBoneList\",\n        value: function _makePutBoneList(_RootName, _bones) {\n          var putting = false;\n          for (let frame in this.HieStack) {\n            if (this.HieStack[frame].name === _RootName || putting) {\n              putting = true;\n              var b = new Bone();\n              b.name = this.HieStack[frame].name;\n              b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n              b.matrixWorld = b.matrix;\n              b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n              b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n              b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n              b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n              if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n                for (let i2 = 0; i2 < _bones.length; i2++) {\n                  if (this.HieStack[frame].parentName === _bones[i2].name) {\n                    _bones[i2].add(b);\n                    b.parent = i2;\n                    break;\n                  }\n                }\n              }\n              _bones.push(b);\n            }\n          }\n        }\n      },\n      {\n        key: \"_makeOutputGeometry\",\n        value: function _makeOutputGeometry() {\n          var mesh = null;\n          if (this._currentGeo.BoneInfs.length > 0) {\n            var putBones = [];\n            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n            for (let bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n              var boneIndex = 0;\n              for (let bb = 0; bb < putBones.length; bb++) {\n                if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                  boneIndex = bb;\n                  putBones[bb].OffsetMatrix = new Matrix4();\n                  putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                  break;\n                }\n              }\n              for (let vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n                var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n                var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n                var stride = nowVertexID * 4;\n                switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                  case 0:\n                    this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                    break;\n                  case 1:\n                    this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                    break;\n                  case 2:\n                    this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                    break;\n                  case 3:\n                    this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                    break;\n                }\n                this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n                if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                  console.log(\"warn! over 4 bone weight! :\" + nowVertexID);\n                }\n              }\n            }\n            for (let sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n              this._currentGeo.Materials[sk].skinning = true;\n            }\n            var offsetList = [];\n            for (let _bi = 0; _bi < putBones.length; _bi++) {\n              if (putBones[_bi].OffsetMatrix) {\n                offsetList.push(putBones[_bi].OffsetMatrix);\n              } else {\n                offsetList.push(new Matrix4());\n              }\n            }\n            var bufferGeometry = this._buildGeometry();\n            mesh = new SkinnedMesh(\n              bufferGeometry,\n              this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials\n            );\n            this._initSkeleton(mesh, putBones, offsetList);\n          } else {\n            var _bufferGeometry = this._buildGeometry();\n            mesh = new Mesh(\n              _bufferGeometry,\n              this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials\n            );\n          }\n          mesh.name = this._currentGeo.name;\n          var worldBaseMx = new Matrix4();\n          var currentMxFrame = this._currentGeo.baseFrame.putBone;\n          if (currentMxFrame && currentMxFrame.parent) {\n            while (true) {\n              currentMxFrame = currentMxFrame.parent;\n              if (currentMxFrame) {\n                worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n              } else {\n                break;\n              }\n            }\n            mesh.applyMatrix4(worldBaseMx);\n          }\n          this.Meshes.push(mesh);\n        }\n      },\n      {\n        key: \"_initSkeleton\",\n        value: function _initSkeleton(mesh, boneList, boneInverses) {\n          var bones = [], bone, gbone;\n          var i2, il;\n          for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n            gbone = boneList[i2];\n            bone = new Bone();\n            bones.push(bone);\n            bone.name = gbone.name;\n            bone.position.fromArray(gbone.pos);\n            bone.quaternion.fromArray(gbone.rotq);\n            if (gbone.scl !== void 0)\n              bone.scale.fromArray(gbone.scl);\n          }\n          for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n            gbone = boneList[i2];\n            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== void 0) {\n              bones[gbone.parent].add(bones[i2]);\n            } else {\n              mesh.add(bones[i2]);\n            }\n          }\n          mesh.updateMatrixWorld(true);\n          var skeleton = new Skeleton(bones, boneInverses);\n          mesh.bind(skeleton, mesh.matrixWorld);\n        }\n      },\n      {\n        key: \"_readAnimationKey\",\n        value: function _readAnimationKey() {\n          var endRead = 0;\n          var find = this._currentObject.data.indexOf(\";\", endRead);\n          var line = this._currentObject.data.substr(endRead, find - endRead);\n          endRead = find + 1;\n          var nowKeyType = parseInt(this._readLine(line));\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          endRead = find + 1;\n          line = this._currentObject.data.substr(endRead);\n          var data = this._readLine(line.trim()).split(\";;,\");\n          for (let i2 = 0; i2 < data.length; i2++) {\n            var data2 = data[i2].split(\";\");\n            var keyInfo = new XKeyFrameInfo();\n            keyInfo.type = nowKeyType;\n            keyInfo.Frame = parseInt(data2[0]);\n            keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n            keyInfo.time = keyInfo.Frame;\n            if (nowKeyType != 4) {\n              var frameFound = false;\n              for (let mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n                if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                  keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                  frameFound = true;\n                  break;\n                }\n              }\n              var frameValue = data2[2].split(\",\");\n              switch (nowKeyType) {\n                case 0:\n                  keyInfo.rot = new Quaternion(\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2]),\n                    parseFloat(frameValue[3]),\n                    parseFloat(frameValue[0]) * -1\n                  );\n                  break;\n                case 1:\n                  keyInfo.scl = new Vector3(\n                    parseFloat(frameValue[0]),\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2])\n                  );\n                  break;\n                case 2:\n                  keyInfo.pos = new Vector3(\n                    parseFloat(frameValue[0]),\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2])\n                  );\n                  break;\n              }\n              if (!frameFound) {\n                this._currentAnimeFrames.keyFrames.push(keyInfo);\n              }\n            } else {\n              keyInfo.matrix = new Matrix4();\n              this._ParseMatrixData(keyInfo.matrix, data2[2].split(\",\"));\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          }\n        }\n      },\n      {\n        key: \"_makeOutputAnimation\",\n        value: function _makeOutputAnimation() {\n          var animationObj = new XAnimationObj(this.options);\n          animationObj.fps = this.animTicksPerSecond;\n          animationObj.name = this._currentAnime.name;\n          animationObj.make(this._currentAnime.AnimeFrames);\n          this.animations.push(animationObj);\n        }\n      },\n      {\n        key: \"assignAnimation\",\n        value: function assignAnimation(_model, _animation) {\n          var model = _model;\n          var animation = _animation;\n          if (!model) {\n            model = this.Meshes[0];\n          }\n          if (!animation) {\n            animation = this.animations[0];\n          }\n          if (!model || !animation) {\n            return null;\n          }\n          var put = {};\n          put.fps = animation.fps;\n          put.name = animation.name;\n          put.length = animation.length;\n          put.hierarchy = [];\n          for (let b = 0; b < model.skeleton.bones.length; b++) {\n            var findAnimation = false;\n            for (let i2 = 0; i2 < animation.hierarchy.length; i2++) {\n              if (model.skeleton.bones[b].name === animation.hierarchy[i2].name) {\n                findAnimation = true;\n                var c_key = animation.hierarchy[i2].copy();\n                c_key.parent = -1;\n                if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === \"Bone\") {\n                  for (let bb = 0; bb < put.hierarchy.length; bb++) {\n                    if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                      c_key.parent = bb;\n                      c_key.parentName = model.skeleton.bones[b].parent.name;\n                    }\n                  }\n                }\n                put.hierarchy.push(c_key);\n                break;\n              }\n            }\n            if (!findAnimation) {\n              var _c_key = animation.hierarchy[0].copy();\n              _c_key.name = model.skeleton.bones[b].name;\n              _c_key.parent = -1;\n              for (let k = 0; k < _c_key.keys.length; k++) {\n                if (_c_key.keys[k].pos) {\n                  _c_key.keys[k].pos.set(0, 0, 0);\n                }\n                if (_c_key.keys[k].scl) {\n                  _c_key.keys[k].scl.set(1, 1, 1);\n                }\n                if (_c_key.keys[k].rot) {\n                  _c_key.keys[k].rot.set(0, 0, 0, 1);\n                }\n              }\n              put.hierarchy.push(_c_key);\n            }\n          }\n          if (!model.geometry.animations) {\n            model.geometry.animations = [];\n          }\n          model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n          if (!model.animationMixer) {\n            model.animationMixer = new AnimationMixer(model);\n          }\n          return put;\n        }\n      },\n      {\n        key: \"_ParseMatrixData\",\n        value: function _ParseMatrixData(targetMatrix, data) {\n          targetMatrix.set(\n            parseFloat(data[0]),\n            parseFloat(data[4]),\n            parseFloat(data[8]),\n            parseFloat(data[12]),\n            parseFloat(data[1]),\n            parseFloat(data[5]),\n            parseFloat(data[9]),\n            parseFloat(data[13]),\n            parseFloat(data[2]),\n            parseFloat(data[6]),\n            parseFloat(data[10]),\n            parseFloat(data[14]),\n            parseFloat(data[3]),\n            parseFloat(data[7]),\n            parseFloat(data[11]),\n            parseFloat(data[15])\n          );\n        }\n      }\n    ]);\n    return XLoader3;\n  }();\n  return XLoader2;\n}();\nexport {\n  XLoader\n};\n"]},"metadata":{},"sourceType":"module"}