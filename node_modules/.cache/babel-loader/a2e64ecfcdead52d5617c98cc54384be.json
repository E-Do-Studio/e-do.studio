{"ast":null,"code":"import { Vector3, Color, SphericalHarmonics3, LightProbe } from \"three\";\n\nclass LightProbeGenerator {\n  // https://www.ppsloan.org/publications/StupidSH36.pdf\n  static fromCubeTexture(cubeTexture) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const image = cubeTexture.image[faceIndex];\n      const width = image.width;\n      const height = image.height;\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0, width, height);\n      const imageData = context.getImageData(0, 0, width, height);\n      const data = imageData.data;\n      const imageWidth = imageData.width;\n      const pixelSize = 2 / imageWidth;\n\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n\n        if (\"colorSpace\" in cubeTexture) {\n          if (cubeTexture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeTexture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n\n        switch (faceIndex) {\n          case 0:\n            coord.set(-1, row, -col);\n            break;\n\n          case 1:\n            coord.set(1, row, col);\n            break;\n\n          case 2:\n            coord.set(-col, 1, -row);\n            break;\n\n          case 3:\n            coord.set(-col, -1, row);\n            break;\n\n          case 4:\n            coord.set(-col, row, 1);\n            break;\n\n          case 5:\n            coord.set(col, row, -1);\n            break;\n        }\n\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n\n    const norm = 4 * Math.PI / totalWeight;\n\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n\n    return new LightProbe(sh);\n  }\n\n  static fromCubeRenderTarget(renderer, cubeRenderTarget) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const imageWidth = cubeRenderTarget.width;\n      const data = new Uint8Array(imageWidth * imageWidth * 4);\n      renderer.readRenderTargetPixels(cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex);\n      const pixelSize = 2 / imageWidth;\n\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n\n        if (\"colorSpace\" in cubeRenderTarget.texture) {\n          if (cubeRenderTarget.texture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeRenderTarget.texture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n\n        switch (faceIndex) {\n          case 0:\n            coord.set(1, row, -col);\n            break;\n\n          case 1:\n            coord.set(-1, row, col);\n            break;\n\n          case 2:\n            coord.set(col, 1, -row);\n            break;\n\n          case 3:\n            coord.set(col, -1, row);\n            break;\n\n          case 4:\n            coord.set(col, row, 1);\n            break;\n\n          case 5:\n            coord.set(-col, row, -1);\n            break;\n        }\n\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n\n    const norm = 4 * Math.PI / totalWeight;\n\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n\n    return new LightProbe(sh);\n  }\n\n}\n\nexport { LightProbeGenerator };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/lights/LightProbeGenerator.js"],"names":["Vector3","Color","SphericalHarmonics3","LightProbe","LightProbeGenerator","fromCubeTexture","cubeTexture","totalWeight","coord","dir","color","shBasis","sh","shCoefficients","coefficients","faceIndex","image","width","height","canvas","document","createElement","context","getContext","drawImage","imageData","getImageData","data","imageWidth","pixelSize","i","il","length","setRGB","colorSpace","convertSRGBToLinear","encoding","pixelIndex","col","row","Math","floor","set","lengthSq","weight","sqrt","copy","normalize","getBasisAt","j","x","r","y","g","z","b","norm","PI","fromCubeRenderTarget","renderer","cubeRenderTarget","Uint8Array","readRenderTargetPixels","texture"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,mBAAzB,EAA8CC,UAA9C,QAAgE,OAAhE;;AACA,MAAMC,mBAAN,CAA0B;AACxB;AACsB,SAAfC,eAAe,CAACC,WAAD,EAAc;AAClC,QAAIC,WAAW,GAAG,CAAlB;AACA,UAAMC,KAAK,GAAG,IAAIR,OAAJ,EAAd;AACA,UAAMS,GAAG,GAAG,IAAIT,OAAJ,EAAZ;AACA,UAAMU,KAAK,GAAG,IAAIT,KAAJ,EAAd;AACA,UAAMU,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAhB;AACA,UAAMC,EAAE,GAAG,IAAIV,mBAAJ,EAAX;AACA,UAAMW,cAAc,GAAGD,EAAE,CAACE,YAA1B;;AACA,SAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAG,CAApC,EAAuCA,SAAS,EAAhD,EAAoD;AAClD,YAAMC,KAAK,GAAGV,WAAW,CAACU,KAAZ,CAAkBD,SAAlB,CAAd;AACA,YAAME,KAAK,GAAGD,KAAK,CAACC,KAApB;AACA,YAAMC,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,MAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACAE,MAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB;AACA,YAAMI,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,CAAkBR,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BC,KAA/B,EAAsCC,MAAtC;AACA,YAAMO,SAAS,GAAGH,OAAO,CAACI,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BT,KAA3B,EAAkCC,MAAlC,CAAlB;AACA,YAAMS,IAAI,GAAGF,SAAS,CAACE,IAAvB;AACA,YAAMC,UAAU,GAAGH,SAAS,CAACR,KAA7B;AACA,YAAMY,SAAS,GAAG,IAAID,UAAtB;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,IAAI,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;AAChDpB,QAAAA,KAAK,CAACuB,MAAN,CAAaN,IAAI,CAACG,CAAD,CAAJ,GAAU,GAAvB,EAA4BH,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,GAAc,GAA1C,EAA+CH,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,GAAc,GAA7D;;AACA,YAAI,gBAAgBxB,WAApB,EAAiC;AAC/B,cAAIA,WAAW,CAAC4B,UAAZ,KAA2B,MAA/B,EAAuC;AACrCxB,YAAAA,KAAK,CAACyB,mBAAN;AACD;AACF,SAJD,MAIO,IAAI7B,WAAW,CAAC8B,QAAZ,KAAyB,IAA7B,EAAmC;AACxC1B,UAAAA,KAAK,CAACyB,mBAAN;AACD;;AACD,cAAME,UAAU,GAAGP,CAAC,GAAG,CAAvB;AACA,cAAMQ,GAAG,GAAG,CAAC,CAAD,GAAK,CAACD,UAAU,GAAGT,UAAb,GAA0B,GAA3B,IAAkCC,SAAnD;AACA,cAAMU,GAAG,GAAG,IAAI,CAACC,IAAI,CAACC,KAAL,CAAWJ,UAAU,GAAGT,UAAxB,IAAsC,GAAvC,IAA8CC,SAA9D;;AACA,gBAAQd,SAAR;AACE,eAAK,CAAL;AACEP,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAAC,CAAX,EAAcH,GAAd,EAAmB,CAACD,GAApB;AACA;;AACF,eAAK,CAAL;AACE9B,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAAV,EAAaH,GAAb,EAAkBD,GAAlB;AACA;;AACF,eAAK,CAAL;AACE9B,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAACJ,GAAX,EAAgB,CAAhB,EAAmB,CAACC,GAApB;AACA;;AACF,eAAK,CAAL;AACE/B,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAACJ,GAAX,EAAgB,CAAC,CAAjB,EAAoBC,GAApB;AACA;;AACF,eAAK,CAAL;AACE/B,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAACJ,GAAX,EAAgBC,GAAhB,EAAqB,CAArB;AACA;;AACF,eAAK,CAAL;AACE/B,YAAAA,KAAK,CAACkC,GAAN,CAAUJ,GAAV,EAAeC,GAAf,EAAoB,CAAC,CAArB;AACA;AAlBJ;;AAoBA,cAAMI,QAAQ,GAAGnC,KAAK,CAACmC,QAAN,EAAjB;AACA,cAAMC,MAAM,GAAG,KAAKJ,IAAI,CAACK,IAAL,CAAUF,QAAV,IAAsBA,QAA3B,CAAf;AACApC,QAAAA,WAAW,IAAIqC,MAAf;AACAnC,QAAAA,GAAG,CAACqC,IAAJ,CAAStC,KAAT,EAAgBuC,SAAhB;AACA7C,QAAAA,mBAAmB,CAAC8C,UAApB,CAA+BvC,GAA/B,EAAoCE,OAApC;;AACA,aAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BpC,UAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBC,CAAlB,IAAuBvC,OAAO,CAACsC,CAAD,CAAP,GAAavC,KAAK,CAACyC,CAAnB,GAAuBP,MAA9C;AACA/B,UAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBG,CAAlB,IAAuBzC,OAAO,CAACsC,CAAD,CAAP,GAAavC,KAAK,CAAC2C,CAAnB,GAAuBT,MAA9C;AACA/B,UAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBK,CAAlB,IAAuB3C,OAAO,CAACsC,CAAD,CAAP,GAAavC,KAAK,CAAC6C,CAAnB,GAAuBX,MAA9C;AACD;AACF;AACF;;AACD,UAAMY,IAAI,GAAG,IAAIhB,IAAI,CAACiB,EAAT,GAAclD,WAA3B;;AACA,SAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BpC,MAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBC,CAAlB,IAAuBM,IAAvB;AACA3C,MAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBG,CAAlB,IAAuBI,IAAvB;AACA3C,MAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBK,CAAlB,IAAuBE,IAAvB;AACD;;AACD,WAAO,IAAIrD,UAAJ,CAAeS,EAAf,CAAP;AACD;;AAC0B,SAApB8C,oBAAoB,CAACC,QAAD,EAAWC,gBAAX,EAA6B;AACtD,QAAIrD,WAAW,GAAG,CAAlB;AACA,UAAMC,KAAK,GAAG,IAAIR,OAAJ,EAAd;AACA,UAAMS,GAAG,GAAG,IAAIT,OAAJ,EAAZ;AACA,UAAMU,KAAK,GAAG,IAAIT,KAAJ,EAAd;AACA,UAAMU,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAhB;AACA,UAAMC,EAAE,GAAG,IAAIV,mBAAJ,EAAX;AACA,UAAMW,cAAc,GAAGD,EAAE,CAACE,YAA1B;;AACA,SAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAG,CAApC,EAAuCA,SAAS,EAAhD,EAAoD;AAClD,YAAMa,UAAU,GAAGgC,gBAAgB,CAAC3C,KAApC;AACA,YAAMU,IAAI,GAAG,IAAIkC,UAAJ,CAAejC,UAAU,GAAGA,UAAb,GAA0B,CAAzC,CAAb;AACA+B,MAAAA,QAAQ,CAACG,sBAAT,CAAgCF,gBAAhC,EAAkD,CAAlD,EAAqD,CAArD,EAAwDhC,UAAxD,EAAoEA,UAApE,EAAgFD,IAAhF,EAAsFZ,SAAtF;AACA,YAAMc,SAAS,GAAG,IAAID,UAAtB;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,IAAI,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;AAChDpB,QAAAA,KAAK,CAACuB,MAAN,CAAaN,IAAI,CAACG,CAAD,CAAJ,GAAU,GAAvB,EAA4BH,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,GAAc,GAA1C,EAA+CH,IAAI,CAACG,CAAC,GAAG,CAAL,CAAJ,GAAc,GAA7D;;AACA,YAAI,gBAAgB8B,gBAAgB,CAACG,OAArC,EAA8C;AAC5C,cAAIH,gBAAgB,CAACG,OAAjB,CAAyB7B,UAAzB,KAAwC,MAA5C,EAAoD;AAClDxB,YAAAA,KAAK,CAACyB,mBAAN;AACD;AACF,SAJD,MAIO,IAAIyB,gBAAgB,CAACG,OAAjB,CAAyB3B,QAAzB,KAAsC,IAA1C,EAAgD;AACrD1B,UAAAA,KAAK,CAACyB,mBAAN;AACD;;AACD,cAAME,UAAU,GAAGP,CAAC,GAAG,CAAvB;AACA,cAAMQ,GAAG,GAAG,CAAC,CAAD,GAAK,CAACD,UAAU,GAAGT,UAAb,GAA0B,GAA3B,IAAkCC,SAAnD;AACA,cAAMU,GAAG,GAAG,IAAI,CAACC,IAAI,CAACC,KAAL,CAAWJ,UAAU,GAAGT,UAAxB,IAAsC,GAAvC,IAA8CC,SAA9D;;AACA,gBAAQd,SAAR;AACE,eAAK,CAAL;AACEP,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAAV,EAAaH,GAAb,EAAkB,CAACD,GAAnB;AACA;;AACF,eAAK,CAAL;AACE9B,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAAC,CAAX,EAAcH,GAAd,EAAmBD,GAAnB;AACA;;AACF,eAAK,CAAL;AACE9B,YAAAA,KAAK,CAACkC,GAAN,CAAUJ,GAAV,EAAe,CAAf,EAAkB,CAACC,GAAnB;AACA;;AACF,eAAK,CAAL;AACE/B,YAAAA,KAAK,CAACkC,GAAN,CAAUJ,GAAV,EAAe,CAAC,CAAhB,EAAmBC,GAAnB;AACA;;AACF,eAAK,CAAL;AACE/B,YAAAA,KAAK,CAACkC,GAAN,CAAUJ,GAAV,EAAeC,GAAf,EAAoB,CAApB;AACA;;AACF,eAAK,CAAL;AACE/B,YAAAA,KAAK,CAACkC,GAAN,CAAU,CAACJ,GAAX,EAAgBC,GAAhB,EAAqB,CAAC,CAAtB;AACA;AAlBJ;;AAoBA,cAAMI,QAAQ,GAAGnC,KAAK,CAACmC,QAAN,EAAjB;AACA,cAAMC,MAAM,GAAG,KAAKJ,IAAI,CAACK,IAAL,CAAUF,QAAV,IAAsBA,QAA3B,CAAf;AACApC,QAAAA,WAAW,IAAIqC,MAAf;AACAnC,QAAAA,GAAG,CAACqC,IAAJ,CAAStC,KAAT,EAAgBuC,SAAhB;AACA7C,QAAAA,mBAAmB,CAAC8C,UAApB,CAA+BvC,GAA/B,EAAoCE,OAApC;;AACA,aAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BpC,UAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBC,CAAlB,IAAuBvC,OAAO,CAACsC,CAAD,CAAP,GAAavC,KAAK,CAACyC,CAAnB,GAAuBP,MAA9C;AACA/B,UAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBG,CAAlB,IAAuBzC,OAAO,CAACsC,CAAD,CAAP,GAAavC,KAAK,CAAC2C,CAAnB,GAAuBT,MAA9C;AACA/B,UAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBK,CAAlB,IAAuB3C,OAAO,CAACsC,CAAD,CAAP,GAAavC,KAAK,CAAC6C,CAAnB,GAAuBX,MAA9C;AACD;AACF;AACF;;AACD,UAAMY,IAAI,GAAG,IAAIhB,IAAI,CAACiB,EAAT,GAAclD,WAA3B;;AACA,SAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BpC,MAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBC,CAAlB,IAAuBM,IAAvB;AACA3C,MAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBG,CAAlB,IAAuBI,IAAvB;AACA3C,MAAAA,cAAc,CAACoC,CAAD,CAAd,CAAkBK,CAAlB,IAAuBE,IAAvB;AACD;;AACD,WAAO,IAAIrD,UAAJ,CAAeS,EAAf,CAAP;AACD;;AA3IuB;;AA6I1B,SACER,mBADF","sourcesContent":["import { Vector3, Color, SphericalHarmonics3, LightProbe } from \"three\";\nclass LightProbeGenerator {\n  // https://www.ppsloan.org/publications/StupidSH36.pdf\n  static fromCubeTexture(cubeTexture) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const image = cubeTexture.image[faceIndex];\n      const width = image.width;\n      const height = image.height;\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0, width, height);\n      const imageData = context.getImageData(0, 0, width, height);\n      const data = imageData.data;\n      const imageWidth = imageData.width;\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeTexture) {\n          if (cubeTexture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeTexture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(-1, row, -col);\n            break;\n          case 1:\n            coord.set(1, row, col);\n            break;\n          case 2:\n            coord.set(-col, 1, -row);\n            break;\n          case 3:\n            coord.set(-col, -1, row);\n            break;\n          case 4:\n            coord.set(-col, row, 1);\n            break;\n          case 5:\n            coord.set(col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n  static fromCubeRenderTarget(renderer, cubeRenderTarget) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const imageWidth = cubeRenderTarget.width;\n      const data = new Uint8Array(imageWidth * imageWidth * 4);\n      renderer.readRenderTargetPixels(cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex);\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeRenderTarget.texture) {\n          if (cubeRenderTarget.texture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeRenderTarget.texture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(1, row, -col);\n            break;\n          case 1:\n            coord.set(-1, row, col);\n            break;\n          case 2:\n            coord.set(col, 1, -row);\n            break;\n          case 3:\n            coord.set(col, -1, row);\n            break;\n          case 4:\n            coord.set(col, row, 1);\n            break;\n          case 5:\n            coord.set(-col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n}\nexport {\n  LightProbeGenerator\n};\n"]},"metadata":{},"sourceType":"module"}