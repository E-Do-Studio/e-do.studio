{"ast":null,"code":"import { Matrix4, Vector3 } from \"three\";\nconst inverseProjectionMatrix = /* @__PURE__ */new Matrix4();\n\nclass CSMFrustum {\n  constructor(data) {\n    data = data || {};\n    this.vertices = {\n      near: [new Vector3(), new Vector3(), new Vector3(), new Vector3()],\n      far: [new Vector3(), new Vector3(), new Vector3(), new Vector3()]\n    };\n\n    if (data.projectionMatrix !== void 0) {\n      this.setFromProjectionMatrix(data.projectionMatrix, data.maxFar || 1e4);\n    }\n  }\n\n  setFromProjectionMatrix(projectionMatrix, maxFar) {\n    const isOrthographic = projectionMatrix.elements[2 * 4 + 3] === 0;\n    inverseProjectionMatrix.copy(projectionMatrix).invert();\n    this.vertices.near[0].set(1, 1, -1);\n    this.vertices.near[1].set(1, -1, -1);\n    this.vertices.near[2].set(-1, -1, -1);\n    this.vertices.near[3].set(-1, 1, -1);\n    this.vertices.near.forEach(function (v) {\n      v.applyMatrix4(inverseProjectionMatrix);\n    });\n    this.vertices.far[0].set(1, 1, 1);\n    this.vertices.far[1].set(1, -1, 1);\n    this.vertices.far[2].set(-1, -1, 1);\n    this.vertices.far[3].set(-1, 1, 1);\n    this.vertices.far.forEach(function (v) {\n      v.applyMatrix4(inverseProjectionMatrix);\n      const absZ = Math.abs(v.z);\n\n      if (isOrthographic) {\n        v.z *= Math.min(maxFar / absZ, 1);\n      } else {\n        v.multiplyScalar(Math.min(maxFar / absZ, 1));\n      }\n    });\n    return this.vertices;\n  }\n\n  split(breaks, target) {\n    while (breaks.length > target.length) {\n      target.push(new CSMFrustum());\n    }\n\n    target.length = breaks.length;\n\n    for (let i = 0; i < breaks.length; i++) {\n      const cascade = target[i];\n\n      if (i === 0) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].copy(this.vertices.near[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i - 1]);\n        }\n      }\n\n      if (i === breaks.length - 1) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].copy(this.vertices.far[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i]);\n        }\n      }\n    }\n  }\n\n  toSpace(cameraMatrix, target) {\n    for (let i = 0; i < 4; i++) {\n      target.vertices.near[i].copy(this.vertices.near[i]).applyMatrix4(cameraMatrix);\n      target.vertices.far[i].copy(this.vertices.far[i]).applyMatrix4(cameraMatrix);\n    }\n  }\n\n}\n\nexport { CSMFrustum };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/csm/CSMFrustum.js"],"names":["Matrix4","Vector3","inverseProjectionMatrix","CSMFrustum","constructor","data","vertices","near","far","projectionMatrix","setFromProjectionMatrix","maxFar","isOrthographic","elements","copy","invert","set","forEach","v","applyMatrix4","absZ","Math","abs","z","min","multiplyScalar","split","breaks","target","length","push","i","cascade","j","lerpVectors","toSpace","cameraMatrix"],"mappings":"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","sourcesContent":["import { Matrix4, Vector3 } from \"three\";\nconst inverseProjectionMatrix = /* @__PURE__ */ new Matrix4();\nclass CSMFrustum {\n  constructor(data) {\n    data = data || {};\n    this.vertices = {\n      near: [new Vector3(), new Vector3(), new Vector3(), new Vector3()],\n      far: [new Vector3(), new Vector3(), new Vector3(), new Vector3()]\n    };\n    if (data.projectionMatrix !== void 0) {\n      this.setFromProjectionMatrix(data.projectionMatrix, data.maxFar || 1e4);\n    }\n  }\n  setFromProjectionMatrix(projectionMatrix, maxFar) {\n    const isOrthographic = projectionMatrix.elements[2 * 4 + 3] === 0;\n    inverseProjectionMatrix.copy(projectionMatrix).invert();\n    this.vertices.near[0].set(1, 1, -1);\n    this.vertices.near[1].set(1, -1, -1);\n    this.vertices.near[2].set(-1, -1, -1);\n    this.vertices.near[3].set(-1, 1, -1);\n    this.vertices.near.forEach(function(v) {\n      v.applyMatrix4(inverseProjectionMatrix);\n    });\n    this.vertices.far[0].set(1, 1, 1);\n    this.vertices.far[1].set(1, -1, 1);\n    this.vertices.far[2].set(-1, -1, 1);\n    this.vertices.far[3].set(-1, 1, 1);\n    this.vertices.far.forEach(function(v) {\n      v.applyMatrix4(inverseProjectionMatrix);\n      const absZ = Math.abs(v.z);\n      if (isOrthographic) {\n        v.z *= Math.min(maxFar / absZ, 1);\n      } else {\n        v.multiplyScalar(Math.min(maxFar / absZ, 1));\n      }\n    });\n    return this.vertices;\n  }\n  split(breaks, target) {\n    while (breaks.length > target.length) {\n      target.push(new CSMFrustum());\n    }\n    target.length = breaks.length;\n    for (let i = 0; i < breaks.length; i++) {\n      const cascade = target[i];\n      if (i === 0) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].copy(this.vertices.near[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i - 1]);\n        }\n      }\n      if (i === breaks.length - 1) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].copy(this.vertices.far[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i]);\n        }\n      }\n    }\n  }\n  toSpace(cameraMatrix, target) {\n    for (let i = 0; i < 4; i++) {\n      target.vertices.near[i].copy(this.vertices.near[i]).applyMatrix4(cameraMatrix);\n      target.vertices.far[i].copy(this.vertices.far[i]).applyMatrix4(cameraMatrix);\n    }\n  }\n}\nexport {\n  CSMFrustum\n};\n"]},"metadata":{},"sourceType":"module"}