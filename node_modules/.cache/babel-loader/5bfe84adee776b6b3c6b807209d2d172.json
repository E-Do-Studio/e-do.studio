{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const images = [image, image1, image2, image3, image4, image5, image6, image7, image8, image9, image10];\nexport const Photo = /*#__PURE__*/memo(_c = _s(({\n  x,\n  y,\n  images\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const {\n    viewport\n  } = useThree();\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const currentImage = images[currentImageIndex];\n  const texture = useTexture(currentImage); // Calculer les dimensions du plan en fonction de la taille de l'image\n\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n\n  const planeHeight = planeWidth / aspectRatio; // Utiliser PlaneGeometry avec les dimensions calculées\n\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n  const [t, setT] = useState(0);\n  const direction = useRef();\n  useFrame(({\n    mouse\n  }) => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (!direction.current) {\n      direction.current = x > viewport.width * mouse.x / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n    setT(t + 1);\n  }); // Fonction pour passer à l'image suivante\n\n  const nextImage = () => {\n    setCurrentImageIndex(prevIndex => (prevIndex + 1) % images.length);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    position: [x, y, 0],\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}, \"9g2BcnnggEV1zZUFYnFwQm3R8mU=\", false, function () {\n  return [useThree, useTexture, useFrame];\n}));\n_c2 = Photo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["useTexture","memo","useRef","useState","PlaneGeometry","Mesh","MeshBasicMaterial","useThree","useFrame","appliedForces","images","image","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","Photo","x","y","ref","viewport","currentImageIndex","setCurrentImageIndex","currentImage","texture","imageWidth","width","imageHeight","height","aspectRatio","planeWidth","planeHeight","geometry","t","setT","direction","mouse","current","position","add","nextImage","prevIndex","length"],"mappings":"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","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\n\nexport const images = [\n  image,\n  image1,\n  image2,\n  image3,\n  image4,\n  image5,\n  image6,\n  image7,\n  image8,\n  image9,\n  image10,\n];\n\nexport const Photo = memo(({ x, y, images }) => {\n  const ref = useRef(null);\n  const { viewport } = useThree();\n\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const currentImage = images[currentImageIndex];\n\n  const texture = useTexture(currentImage);\n\n  // Calculer les dimensions du plan en fonction de la taille de l'image\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n  const planeHeight = planeWidth / aspectRatio;\n\n  // Utiliser PlaneGeometry avec les dimensions calculées\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n\n  const [t, setT] = useState(0);\n  const direction = useRef();\n\n  useFrame(({ mouse }) => {\n    if (!ref.current) {\n      return;\n    }\n    if (!direction.current) {\n      direction.current = x > (viewport.width * mouse.x) / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n\n    setT(t + 1);\n  });\n\n  // Fonction pour passer à l'image suivante\n  const nextImage = () => {\n    setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);\n  };\n\n  return (\n    <mesh ref={ref} position={[x, y, 0]} geometry={geometry}>\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}