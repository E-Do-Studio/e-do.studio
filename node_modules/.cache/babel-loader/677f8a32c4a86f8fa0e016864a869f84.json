{"ast":null,"code":"import { Loader, FileLoader } from \"three\";\nimport { parse } from \"opentype.js\";\n\nclass TTFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.reversed = false;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(arraybuffer) {\n    function convert(font, reversed) {\n      const round = Math.round;\n      const glyphs = {};\n      const scale = 1e5 / ((font.unitsPerEm || 2048) * 72);\n      const glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n      const unicodes = Object.keys(glyphIndexMap);\n\n      for (let i = 0; i < unicodes.length; i++) {\n        const unicode = unicodes[i];\n        const glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];\n\n        if (unicode !== void 0) {\n          const token = {\n            ha: round(glyph.advanceWidth * scale),\n            x_min: round(glyph.xMin * scale),\n            x_max: round(glyph.xMax * scale),\n            o: \"\"\n          };\n\n          if (reversed) {\n            glyph.path.commands = reverseCommands(glyph.path.commands);\n          }\n\n          glyph.path.commands.forEach(function (command) {\n            if (command.type.toLowerCase() === \"c\") {\n              command.type = \"b\";\n            }\n\n            token.o += command.type.toLowerCase() + \" \";\n\n            if (command.x !== void 0 && command.y !== void 0) {\n              token.o += round(command.x * scale) + \" \" + round(command.y * scale) + \" \";\n            }\n\n            if (command.x1 !== void 0 && command.y1 !== void 0) {\n              token.o += round(command.x1 * scale) + \" \" + round(command.y1 * scale) + \" \";\n            }\n\n            if (command.x2 !== void 0 && command.y2 !== void 0) {\n              token.o += round(command.x2 * scale) + \" \" + round(command.y2 * scale) + \" \";\n            }\n          });\n          glyphs[String.fromCodePoint(glyph.unicode)] = token;\n        }\n      }\n\n      return {\n        glyphs,\n        familyName: font.getEnglishName(\"fullName\"),\n        ascender: round(font.ascender * scale),\n        descender: round(font.descender * scale),\n        underlinePosition: font.tables.post.underlinePosition,\n        underlineThickness: font.tables.post.underlineThickness,\n        boundingBox: {\n          xMin: font.tables.head.xMin,\n          xMax: font.tables.head.xMax,\n          yMin: font.tables.head.yMin,\n          yMax: font.tables.head.yMax\n        },\n        resolution: 1e3,\n        original_font_information: font.tables.name\n      };\n    }\n\n    function reverseCommands(commands) {\n      const paths = [];\n      let path;\n      commands.forEach(function (c) {\n        if (c.type.toLowerCase() === \"m\") {\n          path = [c];\n          paths.push(path);\n        } else if (c.type.toLowerCase() !== \"z\") {\n          path.push(c);\n        }\n      });\n      const reversed = [];\n      paths.forEach(function (p) {\n        const result = {\n          type: \"m\",\n          x: p[p.length - 1].x,\n          y: p[p.length - 1].y\n        };\n        reversed.push(result);\n\n        for (let i = p.length - 1; i > 0; i--) {\n          const command = p[i];\n          const result2 = {\n            type: command.type\n          };\n\n          if (command.x2 !== void 0 && command.y2 !== void 0) {\n            result2.x1 = command.x2;\n            result2.y1 = command.y2;\n            result2.x2 = command.x1;\n            result2.y2 = command.y1;\n          } else if (command.x1 !== void 0 && command.y1 !== void 0) {\n            result2.x1 = command.x1;\n            result2.y1 = command.y1;\n          }\n\n          result2.x = p[i - 1].x;\n          result2.y = p[i - 1].y;\n          reversed.push(result2);\n        }\n      });\n      return reversed;\n    }\n\n    return convert(parse(arraybuffer), this.reversed);\n  }\n\n}\n\nexport { TTFLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/TTFLoader.js"],"names":["Loader","FileLoader","parse","TTFLoader","constructor","manager","reversed","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","e","console","error","itemError","arraybuffer","convert","font","round","Math","glyphs","scale","unitsPerEm","glyphIndexMap","encoding","cmap","unicodes","Object","keys","i","length","unicode","glyph","token","ha","advanceWidth","x_min","xMin","x_max","xMax","o","commands","reverseCommands","forEach","command","type","toLowerCase","x","y","x1","y1","x2","y2","String","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","boundingBox","head","yMin","yMax","resolution","original_font_information","name","paths","c","push","p","result","result2"],"mappings":"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","sourcesContent":["import { Loader, FileLoader } from \"three\";\nimport { parse } from \"opentype.js\";\nclass TTFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.reversed = false;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(arraybuffer) {\n    function convert(font, reversed) {\n      const round = Math.round;\n      const glyphs = {};\n      const scale = 1e5 / ((font.unitsPerEm || 2048) * 72);\n      const glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n      const unicodes = Object.keys(glyphIndexMap);\n      for (let i = 0; i < unicodes.length; i++) {\n        const unicode = unicodes[i];\n        const glyph = font.glyphs.glyphs[glyphIndexMap[unicode]];\n        if (unicode !== void 0) {\n          const token = {\n            ha: round(glyph.advanceWidth * scale),\n            x_min: round(glyph.xMin * scale),\n            x_max: round(glyph.xMax * scale),\n            o: \"\"\n          };\n          if (reversed) {\n            glyph.path.commands = reverseCommands(glyph.path.commands);\n          }\n          glyph.path.commands.forEach(function(command) {\n            if (command.type.toLowerCase() === \"c\") {\n              command.type = \"b\";\n            }\n            token.o += command.type.toLowerCase() + \" \";\n            if (command.x !== void 0 && command.y !== void 0) {\n              token.o += round(command.x * scale) + \" \" + round(command.y * scale) + \" \";\n            }\n            if (command.x1 !== void 0 && command.y1 !== void 0) {\n              token.o += round(command.x1 * scale) + \" \" + round(command.y1 * scale) + \" \";\n            }\n            if (command.x2 !== void 0 && command.y2 !== void 0) {\n              token.o += round(command.x2 * scale) + \" \" + round(command.y2 * scale) + \" \";\n            }\n          });\n          glyphs[String.fromCodePoint(glyph.unicode)] = token;\n        }\n      }\n      return {\n        glyphs,\n        familyName: font.getEnglishName(\"fullName\"),\n        ascender: round(font.ascender * scale),\n        descender: round(font.descender * scale),\n        underlinePosition: font.tables.post.underlinePosition,\n        underlineThickness: font.tables.post.underlineThickness,\n        boundingBox: {\n          xMin: font.tables.head.xMin,\n          xMax: font.tables.head.xMax,\n          yMin: font.tables.head.yMin,\n          yMax: font.tables.head.yMax\n        },\n        resolution: 1e3,\n        original_font_information: font.tables.name\n      };\n    }\n    function reverseCommands(commands) {\n      const paths = [];\n      let path;\n      commands.forEach(function(c) {\n        if (c.type.toLowerCase() === \"m\") {\n          path = [c];\n          paths.push(path);\n        } else if (c.type.toLowerCase() !== \"z\") {\n          path.push(c);\n        }\n      });\n      const reversed = [];\n      paths.forEach(function(p) {\n        const result = {\n          type: \"m\",\n          x: p[p.length - 1].x,\n          y: p[p.length - 1].y\n        };\n        reversed.push(result);\n        for (let i = p.length - 1; i > 0; i--) {\n          const command = p[i];\n          const result2 = { type: command.type };\n          if (command.x2 !== void 0 && command.y2 !== void 0) {\n            result2.x1 = command.x2;\n            result2.y1 = command.y2;\n            result2.x2 = command.x1;\n            result2.y2 = command.y1;\n          } else if (command.x1 !== void 0 && command.y1 !== void 0) {\n            result2.x1 = command.x1;\n            result2.y1 = command.y1;\n          }\n          result2.x = p[i - 1].x;\n          result2.y = p[i - 1].y;\n          reversed.push(result2);\n        }\n      });\n      return reversed;\n    }\n    return convert(parse(arraybuffer), this.reversed);\n  }\n}\nexport {\n  TTFLoader\n};\n"]},"metadata":{},"sourceType":"module"}