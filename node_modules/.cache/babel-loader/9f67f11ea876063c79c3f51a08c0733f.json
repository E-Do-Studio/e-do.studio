{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nconst _SSRPass = class extends Pass {\n  constructor({\n    renderer,\n    scene,\n    camera,\n    width,\n    height,\n    selects,\n    bouncing = false,\n    groundReflector\n  }) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n\n      set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n\n      set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n\n      set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n\n      set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n\n      set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation // premultipliedAlpha:true,\n\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n\n        break;\n\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n\n        break;\n\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n\n    this.scene.traverseVisible(child => {\n      child._SSRPassBackupMaterial = child.material;\n\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(child => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n\n};\n\nlet SSRPass = _SSRPass;\n\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\n\nexport { SSRPass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/SSRPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","DepthTexture","UnsignedShortType","NearestFilter","WebGLRenderTarget","HalfFloatType","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","MeshBasicMaterial","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","NormalBlending","Pass","FullScreenQuad","SSRShader","SSRBlurShader","SSRDepthShader","CopyShader","_SSRPass","constructor","renderer","scene","camera","width","height","selects","bouncing","groundReflector","clear","opacity","uniforms","output","maxDistance","thickness","tempColor","_selects","selective","Array","isArray","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","type","minFilter","magFilter","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","assign","MAX_STEP","Math","sqrt","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","writeBuffer","setRenderTarget","visible","doRender","renderOverride","renderMetalness","renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","traverseVisible","child","_SSRPassBackupMaterial","includes","setSize","SSRPass"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSRPass = class extends Pass {\n  constructor({ renderer, scene, camera, width, height, selects, bouncing = false, groundReflector }) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val)\n          return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val)\n          return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val)\n          return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val)\n          return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val)\n          return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector)\n      this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur)\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n        else\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible((child) => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible((child) => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n};\nlet SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport {\n  SSRPass\n};\n"]},"metadata":{},"sourceType":"module"}