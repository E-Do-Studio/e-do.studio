{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Vector3, BufferAttribute, BufferGeometry } from \"three\";\nimport * as BufferGeometryUtils from \"../utils/BufferGeometryUtils.js\";\nimport { mergeVertices } from \"../utils/BufferGeometryUtils.js\";\n\nclass EdgeSplitModifier {\n  constructor() {\n    __publicField(this, \"A\", new Vector3());\n\n    __publicField(this, \"B\", new Vector3());\n\n    __publicField(this, \"C\", new Vector3());\n\n    __publicField(this, \"positions\", []);\n\n    __publicField(this, \"normals\", new Float32Array());\n\n    __publicField(this, \"indexes\", []);\n\n    __publicField(this, \"pointToIndexMap\", []);\n\n    __publicField(this, \"splitIndexes\", []);\n\n    __publicField(this, \"oldNormals\", []);\n\n    __publicField(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n\n    __publicField(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n\n    __publicField(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(this.normals[3 * firstIndex], this.normals[3 * firstIndex + 1], this.normals[3 * firstIndex + 2]).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n\n      return result;\n    });\n\n    __publicField(this, \"edgeSplit\", (indexes, cutOff, original = null) => {\n      if (indexes.length === 0) return;\n      const groupResults = [];\n\n      for (let index of indexes) {\n        groupResults.push(this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n\n      let result = groupResults[0];\n\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n\n      if (original != null) {\n        this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n\n      if (result.splitGroup.length) {\n        this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n\n    __publicField(this, \"modify\", (geometry, cutOffAngle, tryKeepNormals = true) => {\n      let hadNormals = false;\n\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n\n        if (tryKeepNormals === true && geometry.index !== null) {\n          this.oldNormals = geometry.attributes.normal.array;\n        }\n\n        geometry.deleteAttribute(\"normal\");\n      }\n\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === void 0) {\n          throw \"THREE.EdgeSplitModifier relies on BufferGeometryUtils\";\n        }\n\n        geometry = mergeVertices(geometry);\n      }\n\n      this.indexes = geometry.index.array;\n      this.positions = geometry.getAttribute(\"position\").array;\n      this.computeNormals();\n      this.mapPositionsToIndexes();\n      this.splitIndexes = [];\n\n      for (let vertexIndexes of this.pointToIndexMap) {\n        this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 1e-3);\n      }\n\n      const newAttributes = {};\n\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name];\n        const newArray = new oldAttribute.array.constructor((this.indexes.length + this.splitIndexes.length) * oldAttribute.itemSize);\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n\n      const newIndexes = new Uint32Array(this.indexes.length);\n      newIndexes.set(this.indexes);\n\n      for (let i = 0; i < this.splitIndexes.length; i++) {\n        const split = this.splitIndexes[i];\n        const index = this.indexes[split.original];\n\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            attribute.array[(this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n\n        for (let j of split.indexes) {\n          newIndexes[j] = this.indexes.length + i;\n        }\n      }\n\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n\n        if (this.oldNormals !== null) {\n          const changedNormals = new Array(this.oldNormals.length / 3).fill(false);\n\n          for (let splitData of this.splitIndexes) changedNormals[splitData.original] = true;\n\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                geometry.attributes.normal.array[3 * i + j] = this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n\n      return geometry;\n    });\n  }\n\n}\n\nexport { EdgeSplitModifier };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/modifiers/EdgeSplitModifier.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","BufferAttribute","BufferGeometry","BufferGeometryUtils","mergeVertices","EdgeSplitModifier","constructor","Float32Array","normals","indexes","length","i","index","A","set","positions","B","C","sub","normal","cross","normalize","j","x","y","z","pointToIndexMap","Array","push","cutOff","firstIndex","result","splitGroup","currentGroup","dot","original","groupResults","edgeSplitToGroups","groupResult","splitIndexes","edgeSplit","geometry","cutOffAngle","tryKeepNormals","hadNormals","attributes","clone","oldNormals","array","deleteAttribute","getAttribute","computeNormals","mapPositionsToIndexes","vertexIndexes","Math","cos","newAttributes","name","keys","oldAttribute","newArray","itemSize","normalized","newIndexes","Uint32Array","split","attribute","values","setIndex","setAttribute","computeVertexNormals","changedNormals","fill","splitData"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, BufferAttribute, BufferGeometry } from \"three\";\nimport * as BufferGeometryUtils from \"../utils/BufferGeometryUtils.js\";\nimport { mergeVertices } from \"../utils/BufferGeometryUtils.js\";\nclass EdgeSplitModifier {\n  constructor() {\n    __publicField(this, \"A\", new Vector3());\n    __publicField(this, \"B\", new Vector3());\n    __publicField(this, \"C\", new Vector3());\n    __publicField(this, \"positions\", []);\n    __publicField(this, \"normals\", new Float32Array());\n    __publicField(this, \"indexes\", []);\n    __publicField(this, \"pointToIndexMap\", []);\n    __publicField(this, \"splitIndexes\", []);\n    __publicField(this, \"oldNormals\", []);\n    __publicField(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n    __publicField(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n    __publicField(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(\n        this.normals[3 * firstIndex],\n        this.normals[3 * firstIndex + 1],\n        this.normals[3 * firstIndex + 2]\n      ).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n      return result;\n    });\n    __publicField(this, \"edgeSplit\", (indexes, cutOff, original = null) => {\n      if (indexes.length === 0)\n        return;\n      const groupResults = [];\n      for (let index of indexes) {\n        groupResults.push(this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n      let result = groupResults[0];\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n      if (original != null) {\n        this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n      if (result.splitGroup.length) {\n        this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n    __publicField(this, \"modify\", (geometry, cutOffAngle, tryKeepNormals = true) => {\n      let hadNormals = false;\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n        if (tryKeepNormals === true && geometry.index !== null) {\n          this.oldNormals = geometry.attributes.normal.array;\n        }\n        geometry.deleteAttribute(\"normal\");\n      }\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === void 0) {\n          throw \"THREE.EdgeSplitModifier relies on BufferGeometryUtils\";\n        }\n        geometry = mergeVertices(geometry);\n      }\n      this.indexes = geometry.index.array;\n      this.positions = geometry.getAttribute(\"position\").array;\n      this.computeNormals();\n      this.mapPositionsToIndexes();\n      this.splitIndexes = [];\n      for (let vertexIndexes of this.pointToIndexMap) {\n        this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 1e-3);\n      }\n      const newAttributes = {};\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name];\n        const newArray = new oldAttribute.array.constructor(\n          (this.indexes.length + this.splitIndexes.length) * oldAttribute.itemSize\n        );\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n      const newIndexes = new Uint32Array(this.indexes.length);\n      newIndexes.set(this.indexes);\n      for (let i = 0; i < this.splitIndexes.length; i++) {\n        const split = this.splitIndexes[i];\n        const index = this.indexes[split.original];\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            attribute.array[(this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n        for (let j of split.indexes) {\n          newIndexes[j] = this.indexes.length + i;\n        }\n      }\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n        if (this.oldNormals !== null) {\n          const changedNormals = new Array(this.oldNormals.length / 3).fill(false);\n          for (let splitData of this.splitIndexes)\n            changedNormals[splitData.original] = true;\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                geometry.attributes.normal.array[3 * i + j] = this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n      return geometry;\n    });\n  }\n}\nexport {\n  EdgeSplitModifier\n};\n"]},"metadata":{},"sourceType":"module"}