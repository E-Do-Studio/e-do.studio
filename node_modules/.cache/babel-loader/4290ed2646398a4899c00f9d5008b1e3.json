{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nvar LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\n\\t\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\n\\t\\tuniform float lutSize;\\n\\t\\t#if USE_3DTEXTURE\\n\\t\\tprecision highp sampler3D;\\n\\t\\tuniform sampler3D lut3d;\\n\\t\\t#else\\n\\t\\tuniform sampler2D lut;\\n\\n\\t\\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\\n\\n\\t\\t\\tfloat sliceHeight = 1.0 / size;\\n\\t\\t\\tfloat yPixelHeight = 1.0 / ( size * size );\\n\\n\\t\\t\\t// Get the slices on either side of the sample\\n\\t\\t\\tfloat slice = rgb.b * size;\\n\\t\\t\\tfloat interp = fract( slice );\\n\\t\\t\\tfloat slice0 = slice - interp;\\n\\t\\t\\tfloat centeredInterp = interp - 0.5;\\n\\n\\t\\t\\tfloat slice1 = slice0 + sign( centeredInterp );\\n\\n\\t\\t\\t// Pull y sample in by half a pixel in each direction to avoid color\\n\\t\\t\\t// bleeding from adjacent slices.\\n\\t\\t\\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\\n\\n\\t\\t\\tvec2 uv0 = vec2(\\n\\t\\t\\t\\trgb.r,\\n\\t\\t\\t\\tslice0 * sliceHeight + greenOffset\\n\\t\\t\\t);\\n\\t\\t\\tvec2 uv1 = vec2(\\n\\t\\t\\t\\trgb.r,\\n\\t\\t\\t\\tslice1 * sliceHeight + greenOffset\\n\\t\\t\\t);\\n\\n\\t\\t\\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\\n\\t\\t\\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\\n\\n\\t\\t\\treturn mix( sample0, sample1, abs( centeredInterp ) );\\n\\n\\t\\t}\\n\\t\\t#endif\\n\\n\\t\\tvarying vec2 vUv;\\n\\t\\tuniform float intensity;\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 val = texture2D( tDiffuse, vUv );\\n\\t\\t\\tvec4 lutVal;\\n\\n\\t\\t\\t// pull the sample in by half a pixel so the sample begins\\n\\t\\t\\t// at the center of the edge pixels.\\n\\t\\t\\tfloat pixelWidth = 1.0 / lutSize;\\n\\t\\t\\tfloat halfPixelWidth = 0.5 / lutSize;\\n\\t\\t\\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\\n\\n\\t\\t\\t#if USE_3DTEXTURE\\n\\n\\t\\t\\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\\n\\n\\t\\t}\\n\\n\\t\"\n};\n\nvar LUTPass = /*#__PURE__*/function (_ShaderPass) {\n  _inherits(LUTPass, _ShaderPass);\n\n  var _super = _createSuper(LUTPass);\n\n  function LUTPass() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LUTPass);\n\n    _this = _super.call(this, LUTShader);\n    _this.lut = options.lut || null;\n    _this.intensity = \"intensity\" in options ? options.intensity : 1;\n    return _this;\n  }\n\n  _createClass(LUTPass, [{\n    key: \"lut\",\n    get: function get() {\n      return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n    },\n    set: function set(v) {\n      var material = this.material;\n\n      if (v !== this.lut) {\n        material.uniforms.lut3d.value = null;\n        material.uniforms.lut.value = null;\n\n        if (v) {\n          var is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n\n          if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n            material.defines.USE_3DTEXTURE = is3dTextureDefine;\n            material.needsUpdate = true;\n          }\n\n          material.uniforms.lutSize.value = v.image.width;\n\n          if (v.isData3DTexture) {\n            material.uniforms.lut3d.value = v;\n          } else {\n            material.uniforms.lut.value = v;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"intensity\",\n    get: function get() {\n      return this.material.uniforms.intensity.value;\n    },\n    set: function set(v) {\n      this.material.uniforms.intensity.value = v;\n    }\n  }]);\n\n  return LUTPass;\n}(ShaderPass);\n\nexport { LUTPass };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/LUTPass.js"],"names":["ShaderPass","LUTShader","defines","USE_3DTEXTURE","uniforms","lut3d","value","lut","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","options","material","v","is3dTextureDefine","isData3DTexture","needsUpdate","image","width"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAE;AADR,GADO;AAIhBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADC;AAERC,IAAAA,GAAG,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFG;AAGRE,IAAAA,OAAO,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAHD;AAIRG,IAAAA,QAAQ,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAJF;AAKRI,IAAAA,SAAS,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT;AALH,GAJM;AAWhBK,EAAAA,YAAY;AACV;AADU,qKAXI;AA0BhBC,EAAAA,cAAc;AACZ;AADY;AA1BE,CAAlB;;IAsGMC,O;;;;;AA8BJ,qBAA0B;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACxB,8BAAMb,SAAN;AACA,UAAKM,GAAL,GAAWO,OAAO,CAACP,GAAR,IAAe,IAA1B;AACA,UAAKG,SAAL,GAAiB,eAAeI,OAAf,GAAyBA,OAAO,CAACJ,SAAjC,GAA6C,CAA9D;AAHwB;AAIzB;;;;SAbD,eAAU;AACR,aAAO,KAAKK,QAAL,CAAcX,QAAd,CAAuBG,GAAvB,CAA2BD,KAA3B,IAAoC,KAAKS,QAAL,CAAcX,QAAd,CAAuBC,KAAvB,CAA6BC,KAAxE;AACD,K;SAtBD,aAAQU,CAAR,EAAW;AACT,UAAMD,QAAQ,GAAG,KAAKA,QAAtB;;AACA,UAAIC,CAAC,KAAK,KAAKT,GAAf,EAAoB;AAClBQ,QAAAA,QAAQ,CAACX,QAAT,CAAkBC,KAAlB,CAAwBC,KAAxB,GAAgC,IAAhC;AACAS,QAAAA,QAAQ,CAACX,QAAT,CAAkBG,GAAlB,CAAsBD,KAAtB,GAA8B,IAA9B;;AACA,YAAIU,CAAJ,EAAO;AACL,cAAMC,iBAAiB,GAAGD,CAAC,CAACE,eAAF,GAAoB,CAApB,GAAwB,CAAlD;;AACA,cAAID,iBAAiB,KAAKF,QAAQ,CAACb,OAAT,CAAiBC,aAA3C,EAA0D;AACxDY,YAAAA,QAAQ,CAACb,OAAT,CAAiBC,aAAjB,GAAiCc,iBAAjC;AACAF,YAAAA,QAAQ,CAACI,WAAT,GAAuB,IAAvB;AACD;;AACDJ,UAAAA,QAAQ,CAACX,QAAT,CAAkBI,OAAlB,CAA0BF,KAA1B,GAAkCU,CAAC,CAACI,KAAF,CAAQC,KAA1C;;AACA,cAAIL,CAAC,CAACE,eAAN,EAAuB;AACrBH,YAAAA,QAAQ,CAACX,QAAT,CAAkBC,KAAlB,CAAwBC,KAAxB,GAAgCU,CAAhC;AACD,WAFD,MAEO;AACLD,YAAAA,QAAQ,CAACX,QAAT,CAAkBG,GAAlB,CAAsBD,KAAtB,GAA8BU,CAA9B;AACD;AACF;AACF;AACF;;;SAOD,eAAgB;AACd,aAAO,KAAKD,QAAL,CAAcX,QAAd,CAAuBM,SAAvB,CAAiCJ,KAAxC;AACD,K;SALD,aAAcU,CAAd,EAAiB;AACf,WAAKD,QAAL,CAAcX,QAAd,CAAuBM,SAAvB,CAAiCJ,KAAjC,GAAyCU,CAAzC;AACD;;;;EA1BmBhB,U;;AAoCtB,SACEa,OADF","sourcesContent":["import { ShaderPass } from \"./ShaderPass.js\";\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: { value: null },\n    lut: { value: null },\n    lutSize: { value: 0 },\n    tDiffuse: { value: null },\n    intensity: { value: 1 }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n  )\n};\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n      if (v) {\n        const is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n        material.uniforms.lutSize.value = v.image.width;\n        if (v.isData3DTexture) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n  constructor(options = {}) {\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = \"intensity\" in options ? options.intensity : 1;\n  }\n}\nexport {\n  LUTPass\n};\n"]},"metadata":{},"sourceType":"module"}