{"ast":null,"code":"import _slicedToArray from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter } from \"three\";\n\nvar _taskCache = /* @__PURE__ */new WeakMap();\n\nvar _BasisTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(_BasisTextureLoader, _Loader);\n\n  var _super = _createSuper(_BasisTextureLoader);\n\n  function _BasisTextureLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, _BasisTextureLoader);\n\n    _this = _super.call(this, manager);\n    _this.transcoderPath = \"\";\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = null;\n    return _this;\n  }\n\n  _createClass(_BasisTextureLoader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n        etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n        etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n        dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n        bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n        pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n      };\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setWithCredentials(this.withCredentials);\n      var texture = new CompressedTexture();\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n\n        _this2._createTexture([buffer]).then(function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }).catch(onError);\n      }, onProgress, onError);\n      return texture;\n    }\n    /** Low-level transcoding API, exposed for use by KTX2Loader. */\n\n  }, {\n    key: \"parseInternalAsync\",\n    value: function parseInternalAsync(options) {\n      var levels = options.levels;\n      var buffers = /* @__PURE__ */new Set();\n\n      for (var i = 0; i < levels.length; i++) {\n        buffers.add(levels[i].data.buffer);\n      }\n\n      return this._createTexture(Array.from(buffers), _objectSpread(_objectSpread({}, options), {}, {\n        lowLevel: true\n      }));\n    }\n    /**\n     * @param {ArrayBuffer[]} buffers\n     * @param {object?} config\n     * @return {Promise<CompressedTexture>}\n     */\n\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffers) {\n      var _this3 = this;\n\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var worker;\n      var taskID;\n      var taskConfig = config;\n      var taskCost = 0;\n\n      for (var i = 0; i < buffers.length; i++) {\n        taskCost += buffers[i].byteLength;\n      }\n\n      var texturePending = this._allocateWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: \"transcode\",\n            id: taskID,\n            buffers: buffers,\n            taskConfig: taskConfig\n          }, buffers);\n        });\n      }).then(function (message) {\n        var mipmaps = message.mipmaps,\n            width = message.width,\n            height = message.height,\n            format = message.format;\n        var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n        texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        texture.needsUpdate = true;\n        return texture;\n      });\n\n      texturePending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          worker._taskLoad -= taskCost;\n          delete worker._callbacks[taskID];\n        }\n      });\n\n      _taskCache.set(buffers[0], {\n        promise: texturePending\n      });\n\n      return texturePending;\n    }\n  }, {\n    key: \"_initTranscoder\",\n    value: function _initTranscoder() {\n      var _this4 = this;\n\n      if (!this.transcoderPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load(\"basis_transcoder.js\", resolve, void 0, reject);\n        });\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load(\"basis_transcoder.wasm\", resolve, void 0, reject);\n        });\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              jsContent2 = _ref2[0],\n              binaryContent2 = _ref2[1];\n\n          var fn = _BasisTextureLoader.BasisWorker.toString();\n\n          var body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_BasisTextureLoader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_BasisTextureLoader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_BasisTextureLoader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this4.transcoderBinary = binaryContent2;\n        });\n      }\n\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"_allocateWorker\",\n    value: function _allocateWorker(taskCost) {\n      var _this5 = this;\n\n      return this._initTranscoder().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var worker2 = new Worker(_this5.workerSourceURL);\n          worker2._callbacks = {};\n          worker2._taskLoad = 0;\n          worker2.postMessage({\n            type: \"init\",\n            config: _this5.workerConfig,\n            transcoderBinary: _this5.transcoderBinary\n          });\n\n          worker2.onmessage = function (e) {\n            var message = e.data;\n\n            switch (message.type) {\n              case \"transcode\":\n                worker2._callbacks[message.id].resolve(message);\n\n                break;\n\n              case \"error\":\n                worker2._callbacks[message.id].reject(message);\n\n                break;\n\n              default:\n                console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n\n          _this5.workerPool.push(worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; i++) {\n        this.workerPool[i].terminate();\n      }\n\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n\n  return _BasisTextureLoader;\n}(Loader);\n\nvar BasisTextureLoader = _BasisTextureLoader;\n/* CONSTANTS */\n\n__publicField(BasisTextureLoader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n\n__publicField(BasisTextureLoader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n\n__publicField(BasisTextureLoader, \"EngineFormat\", {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n\n\n__publicField(BasisTextureLoader, \"BasisWorker\", function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat;\n  var TranscoderFormat = _TranscoderFormat;\n  var BasisFormat = _BasisFormat;\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case \"transcode\":\n        transcoderPending.then(function () {\n          try {\n            var _ref3 = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]),\n                width = _ref3.width,\n                height = _ref3.height,\n                hasAlpha = _ref3.hasAlpha,\n                mipmaps = _ref3.mipmaps,\n                format = _ref3.format;\n\n            var buffers = [];\n\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(function () {\n      BasisModule.initializeBasis();\n    });\n  }\n\n  function transcodeLowLevel(taskConfig) {\n    var basisFormat = taskConfig.basisFormat,\n        width = taskConfig.width,\n        height = taskConfig.height,\n        hasAlpha = taskConfig.hasAlpha;\n\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat.transcoderFormat,\n        engineFormat = _getTranscoderFormat.engineFormat;\n\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), \"THREE.BasisTextureLoader: Unsupported format.\");\n    var mipmaps = [];\n\n    if (basisFormat === BasisFormat.ETC1S) {\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      var _taskConfig$globalDat = taskConfig.globalData,\n          endpointCount = _taskConfig$globalDat.endpointCount,\n          endpointsData = _taskConfig$globalDat.endpointsData,\n          selectorCount = _taskConfig$globalDat.selectorCount,\n          selectorsData = _taskConfig$globalDat.selectorsData,\n          tablesData = _taskConfig$globalDat.tablesData;\n\n      try {\n        var ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, \"THREE.BasisTextureLoader: decodePalettes() failed.\");\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, \"THREE.BasisTextureLoader: decodeTables() failed.\");\n\n        for (var i = 0; i < taskConfig.levels.length; i++) {\n          var level = taskConfig.levels[i];\n          var imageDesc = taskConfig.globalData.imageDescs[i];\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          var dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, \"THREE.BasisTextureLoader: transcodeImage() failed for level \" + level.index + \".\");\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (var _i = 0; _i < taskConfig.levels.length; _i++) {\n        var _level = taskConfig.levels[_i];\n\n        var _dstByteLength = getTranscodedImageByteLength(transcoderFormat, _level.width, _level.height);\n\n        var _dst = new Uint8Array(_dstByteLength);\n\n        var _ok = BasisModule.transcodeUASTCImage(transcoderFormat, _dst, _dstByteLength / blockByteLength, _level.data, getWidthInBlocks(transcoderFormat, _level.width), getHeightInBlocks(transcoderFormat, _level.height), _level.width, _level.height, _level.index, 0, _level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n\n        assert(_ok, \"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level \" + _level.index + \".\");\n        mipmaps.push({\n          data: _dst,\n          width: _level.width,\n          height: _level.height\n        });\n      }\n    }\n\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  }\n\n  function transcode(buffer) {\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = basisFile.getImageWidth(0, 0);\n    var height = basisFile.getImageHeight(0, 0);\n    var levels = basisFile.getNumLevels(0);\n    var hasAlpha = basisFile.getHasAlpha();\n\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n\n    var _getTranscoderFormat2 = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat2.transcoderFormat,\n        engineFormat = _getTranscoderFormat2.engineFormat;\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader:\tInvalid texture\");\n    }\n\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader: .startTranscoding failed\");\n    }\n\n    var mipmaps = [];\n\n    for (var mip = 0; mip < levels; mip++) {\n      var mipWidth = basisFile.getImageWidth(0, mip);\n      var mipHeight = basisFile.getImageHeight(0, mip);\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n\n      if (!status) {\n        cleanup();\n        throw new Error(\"THREE.BasisTextureLoader: .transcodeImage failed.\");\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  }\n\n  var FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n\n    console.warn(\"THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      var paddedWidth = width + 3 & ~3;\n      var paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n});\n\nexport { BasisTextureLoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","_taskCache","WeakMap","_BasisTextureLoader","manager","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","path","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","url","onLoad","onProgress","onError","loader","setResponseType","setWithCredentials","withCredentials","texture","load","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","options","levels","buffers","Set","i","length","add","data","Array","from","lowLevel","config","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","jsLoader","setPath","jsContent","binaryLoader","binaryContent","all","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_initTranscoder","worker2","Worker","onmessage","e","console","error","push","sort","a","b","terminate","BasisTextureLoader","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","transcodeLowLevel","transcode","hasAlpha","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","getTranscoderFormat","transcoderFormat","engineFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","globalData","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nconst _BasisTextureLoader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture([buffer]).then(function(_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad)\n            onLoad(texture);\n        }).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  parseInternalAsync(options) {\n    const { levels } = options;\n    const buffers = /* @__PURE__ */ new Set();\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n    return this._createTexture(Array.from(buffers), { ...options, lowLevel: true });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n    const texturePending = this._allocateWorker(taskCost).then((_worker) => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"transcode\", id: taskID, buffers, taskConfig }, buffers);\n      });\n    }).then((message) => {\n      const { mipmaps, width, height, format } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    });\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    });\n    _taskCache.set(buffers[0], { promise: texturePending });\n    return texturePending;\n  }\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"basis_transcoder.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"basis_transcoder.wasm\", resolve, void 0, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _BasisTextureLoader.BasisWorker.toString();\n        const body = [\n          \"/* constants */\",\n          \"let _EngineFormat = \" + JSON.stringify(_BasisTextureLoader.EngineFormat),\n          \"let _TranscoderFormat = \" + JSON.stringify(_BasisTextureLoader.TranscoderFormat),\n          \"let _BasisFormat = \" + JSON.stringify(_BasisTextureLoader.BasisFormat),\n          \"/* basis_transcoder.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n      });\n    }\n    return this.transcoderPending;\n  }\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"transcode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n};\nlet BasisTextureLoader = _BasisTextureLoader;\n/* CONSTANTS */\n__publicField(BasisTextureLoader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(BasisTextureLoader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(BasisTextureLoader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(BasisTextureLoader, \"BasisWorker\", function() {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const { width, height, hasAlpha, mipmaps, format } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({ type: \"transcode\", id: message.id, width, height, hasAlpha, mipmaps, format }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise((resolve) => {\n      BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    const { basisFormat, width, height, hasAlpha } = taskConfig;\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), \"THREE.BasisTextureLoader: Unsupported format.\");\n    const mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const { endpointCount, endpointsData, selectorCount, selectorsData, tablesData } = taskConfig.globalData;\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, \"THREE.BasisTextureLoader: decodePalettes() failed.\");\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, \"THREE.BasisTextureLoader: decodeTables() failed.\");\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(\n            transcoderFormat,\n            dst,\n            dstByteLength / blockByteLength,\n            level.data,\n            getWidthInBlocks(transcoderFormat, level.width),\n            getHeightInBlocks(transcoderFormat, level.height),\n            level.width,\n            level.height,\n            level.index,\n            imageDesc.rgbSliceByteOffset,\n            imageDesc.rgbSliceByteLength,\n            imageDesc.alphaSliceByteOffset,\n            imageDesc.alphaSliceByteLength,\n            imageDesc.imageFlags,\n            hasAlpha,\n            false,\n            0,\n            0\n          );\n          assert(ok, \"THREE.BasisTextureLoader: transcodeImage() failed for level \" + level.index + \".\");\n          mipmaps.push({ data: dst, width: level.width, height: level.height });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(\n          transcoderFormat,\n          dst,\n          dstByteLength / blockByteLength,\n          level.data,\n          getWidthInBlocks(transcoderFormat, level.width),\n          getHeightInBlocks(transcoderFormat, level.height),\n          level.width,\n          level.height,\n          level.index,\n          0,\n          level.data.byteLength,\n          0,\n          hasAlpha,\n          false,\n          0,\n          0,\n          -1,\n          -1\n        );\n        assert(ok, \"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level \" + level.index + \".\");\n        mipmaps.push({ data: dst, width: level.width, height: level.height });\n      }\n    }\n    return { width, height, hasAlpha, mipmaps, format: engineFormat };\n  }\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader:\tInvalid texture\");\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error(\"THREE.BasisTextureLoader: .transcodeImage failed.\");\n      }\n      mipmaps.push({ data: dst, width: mipWidth, height: mipHeight });\n    }\n    cleanup();\n    return { width, height, hasAlpha, mipmaps, format: engineFormat };\n  }\n  const FORMAT_OPTIONS = [\n    {\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }\n  ];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if])\n        continue;\n      if (!opt.basisFormat.includes(basisFormat))\n        continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n        continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return { transcoderFormat, engineFormat };\n    }\n    console.warn(\"THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return { transcoderFormat, engineFormat };\n  }\n  function assert(ok, message) {\n    if (!ok)\n      throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2)\n      return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n});\nexport {\n  BasisTextureLoader\n};\n"]},"metadata":{},"sourceType":"module"}