{"ast":null,"code":"'use strict';\n\nvar SMTPConnection = require('smtp-connection');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nmodule.exports = PoolResource;\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\n\nfunction PoolResource(pool) {\n  EventEmitter.call(this);\n  this.pool = pool;\n  this.options = pool.options;\n  this.logger = this.options.logger;\n  this._connection = false;\n  this._connected = false;\n  this.messages = 0;\n  this.available = true;\n}\n\nutil.inherits(PoolResource, EventEmitter);\n/**\n * Initiates a connection to the SMTP server\n *\n * @param {Function} callback Callback function to run once the connection is established or failed\n */\n\nPoolResource.prototype.connect = function (callback) {\n  var returned = false;\n\n  if (!this.connection) {\n    this.connection = new SMTPConnection(this.options);\n  }\n\n  this.connection.once('error', function (err) {\n    this.emit('error', err);\n\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    return callback(err);\n  }.bind(this));\n  this.connection.once('end', function () {\n    this.close();\n\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    return callback();\n  }.bind(this));\n  this.connection.connect(function () {\n    if (returned) {\n      return;\n    }\n\n    if (this.options.auth) {\n      this.connection.login(this.options.auth, function (err) {\n        if (returned) {\n          return;\n        }\n\n        returned = true;\n\n        if (err) {\n          this.connection.close();\n          this.emit('error', err);\n          return callback(err);\n        }\n\n        this._connected = true;\n        callback(null, true);\n      }.bind(this));\n    } else {\n      returned = true;\n      this._connected = true;\n      return callback(null, true);\n    }\n  }.bind(this));\n};\n/**\n * Sends an e-mail to be sent using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\n\n\nPoolResource.prototype.send = function (mail, callback) {\n  if (!this._connected) {\n    this.connect(function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      this.send(mail, callback);\n    }.bind(this));\n    return;\n  }\n\n  var envelope = mail.data.envelope || mail.message.getEnvelope();\n  var messageId = (mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n  var recipients = [].concat(envelope.to || []);\n\n  if (recipients.length > 3) {\n    recipients.push('...and ' + recipients.splice(2).length + ' more');\n  }\n\n  this.logger.info('Sending message <%s> using #%s to <%s>', messageId, this.id, recipients.join(', '));\n  this.connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n    this.messages++;\n\n    if (err) {\n      this.connection.close();\n      this.emit('error', err);\n      return callback(err);\n    }\n\n    info.envelope = {\n      from: envelope.from,\n      to: envelope.to\n    };\n    info.messageId = messageId;\n    setImmediate(function () {\n      var err;\n\n      if (this.messages >= this.options.maxMessages) {\n        err = new Error('Resource exhausted');\n        err.code = 'EMAXLIMIT';\n        this.connection.close();\n        this.emit('error', err);\n      } else {\n        this.pool._checkRateLimit(function () {\n          this.available = true;\n          this.emit('available');\n        }.bind(this));\n      }\n    }.bind(this));\n    callback(null, info);\n  }.bind(this));\n};\n/**\n * Closes the connection\n */\n\n\nPoolResource.prototype.close = function () {\n  this._connected = false;\n\n  if (this.connection) {\n    this.connection.close();\n  }\n\n  this.emit('close');\n};","map":{"version":3,"sources":["/Users/theodaguier/e-do/node_modules/nodemailer-smtp-pool/lib/pool-resource.js"],"names":["SMTPConnection","require","EventEmitter","util","module","exports","PoolResource","pool","call","options","logger","_connection","_connected","messages","available","inherits","prototype","connect","callback","returned","connection","once","err","emit","bind","close","auth","login","send","mail","envelope","data","message","getEnvelope","messageId","getHeader","replace","recipients","concat","to","length","push","splice","info","id","join","createReadStream","from","setImmediate","maxMessages","Error","code","_checkRateLimit"],"mappings":"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","sourcesContent":["'use strict';\n\nvar SMTPConnection = require('smtp-connection');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nmodule.exports = PoolResource;\n\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */\nfunction PoolResource(pool) {\n    EventEmitter.call(this);\n    this.pool = pool;\n    this.options = pool.options;\n\n    this.logger = this.options.logger;\n\n    this._connection = false;\n    this._connected = false;\n\n    this.messages = 0;\n    this.available = true;\n}\nutil.inherits(PoolResource, EventEmitter);\n\n/**\n * Initiates a connection to the SMTP server\n *\n * @param {Function} callback Callback function to run once the connection is established or failed\n */\nPoolResource.prototype.connect = function (callback) {\n    var returned = false;\n\n    if (!this.connection) {\n        this.connection = new SMTPConnection(this.options);\n    }\n\n    this.connection.once('error', function (err) {\n        this.emit('error', err);\n        if (returned) {\n            return;\n        }\n        returned = true;\n        return callback(err);\n    }.bind(this));\n\n    this.connection.once('end', function () {\n        this.close();\n        if (returned) {\n            return;\n        }\n        returned = true;\n        return callback();\n    }.bind(this));\n\n    this.connection.connect(function () {\n        if (returned) {\n            return;\n        }\n\n        if (this.options.auth) {\n            this.connection.login(this.options.auth, function (err) {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                if (err) {\n                    this.connection.close();\n                    this.emit('error', err);\n                    return callback(err);\n                }\n\n                this._connected = true;\n                callback(null, true);\n            }.bind(this));\n        } else {\n            returned = true;\n            this._connected = true;\n            return callback(null, true);\n        }\n    }.bind(this));\n};\n\n/**\n * Sends an e-mail to be sent using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\nPoolResource.prototype.send = function (mail, callback) {\n    if (!this._connected) {\n        this.connect(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            this.send(mail, callback);\n        }.bind(this));\n        return;\n    }\n\n    var envelope = mail.data.envelope || mail.message.getEnvelope();\n    var messageId = (mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n    var recipients = [].concat(envelope.to || []);\n    if (recipients.length > 3) {\n        recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info('Sending message <%s> using #%s to <%s>', messageId, this.id, recipients.join(', '));\n\n    this.connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n        this.messages++;\n\n        if (err) {\n            this.connection.close();\n            this.emit('error', err);\n            return callback(err);\n        }\n\n        info.envelope = {\n            from: envelope.from,\n            to: envelope.to\n        };\n        info.messageId = messageId;\n\n        setImmediate(function () {\n            var err;\n            if (this.messages >= this.options.maxMessages) {\n                err = new Error('Resource exhausted');\n                err.code = 'EMAXLIMIT';\n                this.connection.close();\n                this.emit('error', err);\n            } else {\n                this.pool._checkRateLimit(function () {\n                    this.available = true;\n                    this.emit('available');\n                }.bind(this));\n            }\n        }.bind(this));\n\n        callback(null, info);\n    }.bind(this));\n};\n\n/**\n * Closes the connection\n */\nPoolResource.prototype.close = function () {\n    this._connected = false;\n    if (this.connection) {\n        this.connection.close();\n    }\n    this.emit('close');\n};\n"]},"metadata":{},"sourceType":"script"}