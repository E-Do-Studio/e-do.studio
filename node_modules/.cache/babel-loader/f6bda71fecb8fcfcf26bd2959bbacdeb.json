{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Vector3, Mesh, SkinnedMesh } from \"three\";\n\nclass STLExporter {\n  constructor() {\n    __publicField(this, \"binary\");\n\n    __publicField(this, \"output\");\n\n    __publicField(this, \"offset\");\n\n    __publicField(this, \"objects\");\n\n    __publicField(this, \"triangles\");\n\n    __publicField(this, \"vA\");\n\n    __publicField(this, \"vB\");\n\n    __publicField(this, \"vC\");\n\n    __publicField(this, \"cb\");\n\n    __publicField(this, \"ab\");\n\n    __publicField(this, \"normal\");\n\n    this.binary = false;\n    this.output = \"\";\n    this.offset = 80;\n    this.objects = [];\n    this.triangles = 0;\n    this.vA = new Vector3();\n    this.vB = new Vector3();\n    this.vC = new Vector3();\n    this.cb = new Vector3();\n    this.ab = new Vector3();\n    this.normal = new Vector3();\n  }\n\n  parse(scene, options) {\n    this.binary = options.binary !== void 0 ? options.binary : false;\n    scene.traverse(object => {\n      if (object instanceof Mesh && object.isMesh) {\n        const geometry = object.geometry;\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute(\"position\");\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry\n        });\n      }\n    });\n\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = \"\";\n      this.output += \"solid exported\\n\";\n    }\n\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute(\"position\");\n\n      if (object instanceof SkinnedMesh) {\n        if (index !== null) {\n          for (let j = 0; j < index.count; j += 3) {\n            const a = index.getX(j + 0);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        } else {\n          for (let j = 0; j < positionAttribute.count; j += 3) {\n            const a = j + 0;\n            const b = j + 1;\n            const c = j + 2;\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        }\n      }\n    }\n\n    if (!this.binary) {\n      this.output += \"endsolid exported\\n\";\n    }\n\n    return this.output;\n  }\n\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, this.vA);\n      object.boneTransform(b, this.vB);\n      object.boneTransform(c, this.vC);\n    }\n\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += \"\t\tendloop\\n\";\n      this.output += \"\tendfacet\\n\";\n    }\n  }\n\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      this.output += \"\t\touter loop\\n\";\n    }\n  }\n\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\t\t\tvertex vertex.x vertex.y vertex.z\n`;\n    }\n  }\n\n}\n\nexport { STLExporter };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/exporters/STLExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Mesh","SkinnedMesh","STLExporter","constructor","binary","output","offset","objects","triangles","vA","vB","vC","cb","ab","normal","parse","scene","options","traverse","object","isMesh","geometry","isBufferGeometry","Error","index","positionAttribute","getAttribute","count","push","object3d","bufferLength","arrayBuffer","ArrayBuffer","DataView","setUint32","i","il","length","j","a","getX","b","c","writeFace","fromBufferAttribute","isSkinnedMesh","boneTransform","applyMatrix4","matrixWorld","writeNormal","writeVertex","setUint16","subVectors","cross","normalize","copy","setFloat32","x","y","z","vertex"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;;AACA,IAAIC,eAAe,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqBD,GAAG,IAAID,GAAP,GAAaJ,SAAS,CAACI,GAAD,EAAMC,GAAN,EAAW;AAAEE,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,YAAY,EAAE,IAAlC;AAAwCC,EAAAA,QAAQ,EAAE,IAAlD;AAAwDH,EAAAA;AAAxD,CAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAA1J;;AACA,IAAII,aAAa,GAAG,CAACN,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqB;AACvCH,EAAAA,eAAe,CAACC,GAAD,EAAM,OAAOC,GAAP,KAAe,QAAf,GAA0BA,GAAG,GAAG,EAAhC,GAAqCA,GAA3C,EAAgDC,KAAhD,CAAf;;AACA,SAAOA,KAAP;AACD,CAHD;;AAIA,SAASK,OAAT,EAAkBC,IAAlB,EAAwBC,WAAxB,QAA2C,OAA3C;;AACA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AACZL,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,SAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,WAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,IAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,IAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,IAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,IAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,IAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,CAAb;;AACA,SAAKM,MAAL,GAAc,KAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,EAAL,GAAU,IAAIV,OAAJ,EAAV;AACA,SAAKW,EAAL,GAAU,IAAIX,OAAJ,EAAV;AACA,SAAKY,EAAL,GAAU,IAAIZ,OAAJ,EAAV;AACA,SAAKa,EAAL,GAAU,IAAIb,OAAJ,EAAV;AACA,SAAKc,EAAL,GAAU,IAAId,OAAJ,EAAV;AACA,SAAKe,MAAL,GAAc,IAAIf,OAAJ,EAAd;AACD;;AACDgB,EAAAA,KAAK,CAACC,KAAD,EAAQC,OAAR,EAAiB;AACpB,SAAKb,MAAL,GAAca,OAAO,CAACb,MAAR,KAAmB,KAAK,CAAxB,GAA4Ba,OAAO,CAACb,MAApC,GAA6C,KAA3D;AACAY,IAAAA,KAAK,CAACE,QAAN,CAAgBC,MAAD,IAAY;AACzB,UAAIA,MAAM,YAAYnB,IAAlB,IAA0BmB,MAAM,CAACC,MAArC,EAA6C;AAC3C,cAAMC,QAAQ,GAAGF,MAAM,CAACE,QAAxB;;AACA,YAAI,CAACA,QAAQ,CAACC,gBAAd,EAAgC;AAC9B,gBAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;AACD;;AACD,cAAMC,KAAK,GAAGH,QAAQ,CAACG,KAAvB;AACA,cAAMC,iBAAiB,GAAGJ,QAAQ,CAACK,YAAT,CAAsB,UAAtB,CAA1B;AACA,aAAKlB,SAAL,IAAkBgB,KAAK,KAAK,IAAV,GAAiBA,KAAK,CAACG,KAAN,GAAc,CAA/B,GAAmCF,iBAAiB,CAACE,KAAlB,GAA0B,CAA/E;AACA,aAAKpB,OAAL,CAAaqB,IAAb,CAAkB;AAChBC,UAAAA,QAAQ,EAAEV,MADM;AAEhBE,UAAAA;AAFgB,SAAlB;AAID;AACF,KAdD;;AAeA,QAAI,KAAKjB,MAAT,EAAiB;AACf,YAAM0B,YAAY,GAAG,KAAKtB,SAAL,GAAiB,CAAjB,GAAqB,KAAKA,SAAL,GAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAA9C,GAAkD,EAAlD,GAAuD,CAA5E;AACA,YAAMuB,WAAW,GAAG,IAAIC,WAAJ,CAAgBF,YAAhB,CAApB;AACA,WAAKzB,MAAL,GAAc,IAAI4B,QAAJ,CAAaF,WAAb,CAAd;AACA,WAAK1B,MAAL,CAAY6B,SAAZ,CAAsB,KAAK5B,MAA3B,EAAmC,KAAKE,SAAxC,EAAmD,IAAnD;AACA,WAAKF,MAAL,IAAe,CAAf;AACD,KAND,MAMO;AACL,WAAKD,MAAL,GAAc,EAAd;AACA,WAAKA,MAAL,IAAe,kBAAf;AACD;;AACD,SAAK,IAAI8B,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG,KAAK7B,OAAL,CAAa8B,MAAlC,EAA0CF,CAAC,GAAGC,EAA9C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,YAAMhB,MAAM,GAAG,KAAKZ,OAAL,CAAa4B,CAAb,EAAgBN,QAA/B;AACA,YAAMR,QAAQ,GAAG,KAAKd,OAAL,CAAa4B,CAAb,EAAgBd,QAAjC;AACA,YAAMG,KAAK,GAAGH,QAAQ,CAACG,KAAvB;AACA,YAAMC,iBAAiB,GAAGJ,QAAQ,CAACK,YAAT,CAAsB,UAAtB,CAA1B;;AACA,UAAIP,MAAM,YAAYlB,WAAtB,EAAmC;AACjC,YAAIuB,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,KAAK,CAACG,KAA1B,EAAiCW,CAAC,IAAI,CAAtC,EAAyC;AACvC,kBAAMC,CAAC,GAAGf,KAAK,CAACgB,IAAN,CAAWF,CAAC,GAAG,CAAf,CAAV;AACA,kBAAMG,CAAC,GAAGjB,KAAK,CAACgB,IAAN,CAAWF,CAAC,GAAG,CAAf,CAAV;AACA,kBAAMI,CAAC,GAAGlB,KAAK,CAACgB,IAAN,CAAWF,CAAC,GAAG,CAAf,CAAV;AACA,iBAAKK,SAAL,CAAeJ,CAAf,EAAkBE,CAAlB,EAAqBC,CAArB,EAAwBjB,iBAAxB,EAA2CN,MAA3C;AACD;AACF,SAPD,MAOO;AACL,eAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,iBAAiB,CAACE,KAAtC,EAA6CW,CAAC,IAAI,CAAlD,EAAqD;AACnD,kBAAMC,CAAC,GAAGD,CAAC,GAAG,CAAd;AACA,kBAAMG,CAAC,GAAGH,CAAC,GAAG,CAAd;AACA,kBAAMI,CAAC,GAAGJ,CAAC,GAAG,CAAd;AACA,iBAAKK,SAAL,CAAeJ,CAAf,EAAkBE,CAAlB,EAAqBC,CAArB,EAAwBjB,iBAAxB,EAA2CN,MAA3C;AACD;AACF;AACF;AACF;;AACD,QAAI,CAAC,KAAKf,MAAV,EAAkB;AAChB,WAAKC,MAAL,IAAe,qBAAf;AACD;;AACD,WAAO,KAAKA,MAAZ;AACD;;AACDsC,EAAAA,SAAS,CAACJ,CAAD,EAAIE,CAAJ,EAAOC,CAAP,EAAUjB,iBAAV,EAA6BN,MAA7B,EAAqC;AAC5C,SAAKV,EAAL,CAAQmC,mBAAR,CAA4BnB,iBAA5B,EAA+Cc,CAA/C;AACA,SAAK7B,EAAL,CAAQkC,mBAAR,CAA4BnB,iBAA5B,EAA+CgB,CAA/C;AACA,SAAK9B,EAAL,CAAQiC,mBAAR,CAA4BnB,iBAA5B,EAA+CiB,CAA/C;;AACA,QAAIvB,MAAM,CAAC0B,aAAX,EAA0B;AACxB1B,MAAAA,MAAM,CAAC2B,aAAP,CAAqBP,CAArB,EAAwB,KAAK9B,EAA7B;AACAU,MAAAA,MAAM,CAAC2B,aAAP,CAAqBL,CAArB,EAAwB,KAAK/B,EAA7B;AACAS,MAAAA,MAAM,CAAC2B,aAAP,CAAqBJ,CAArB,EAAwB,KAAK/B,EAA7B;AACD;;AACD,SAAKF,EAAL,CAAQsC,YAAR,CAAqB5B,MAAM,CAAC6B,WAA5B;AACA,SAAKtC,EAAL,CAAQqC,YAAR,CAAqB5B,MAAM,CAAC6B,WAA5B;AACA,SAAKrC,EAAL,CAAQoC,YAAR,CAAqB5B,MAAM,CAAC6B,WAA5B;AACA,SAAKC,WAAL,CAAiB,KAAKxC,EAAtB,EAA0B,KAAKC,EAA/B,EAAmC,KAAKC,EAAxC;AACA,SAAKuC,WAAL,CAAiB,KAAKzC,EAAtB;AACA,SAAKyC,WAAL,CAAiB,KAAKxC,EAAtB;AACA,SAAKwC,WAAL,CAAiB,KAAKvC,EAAtB;;AACA,QAAI,KAAKP,MAAL,IAAe,KAAKC,MAAL,YAAuB4B,QAA1C,EAAoD;AAClD,WAAK5B,MAAL,CAAY8C,SAAZ,CAAsB,KAAK7C,MAA3B,EAAmC,CAAnC,EAAsC,IAAtC;AACA,WAAKA,MAAL,IAAe,CAAf;AACD,KAHD,MAGO;AACL,WAAKD,MAAL,IAAe,aAAf;AACA,WAAKA,MAAL,IAAe,aAAf;AACD;AACF;;AACD4C,EAAAA,WAAW,CAACxC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAa;AACtB,SAAKC,EAAL,CAAQwC,UAAR,CAAmBzC,EAAnB,EAAuBD,EAAvB;AACA,SAAKG,EAAL,CAAQuC,UAAR,CAAmB3C,EAAnB,EAAuBC,EAAvB;AACA,SAAKE,EAAL,CAAQyC,KAAR,CAAc,KAAKxC,EAAnB,EAAuByC,SAAvB;AACA,SAAKxC,MAAL,CAAYyC,IAAZ,CAAiB,KAAK3C,EAAtB,EAA0B0C,SAA1B;;AACA,QAAI,KAAKlD,MAAL,IAAe,KAAKC,MAAL,YAAuB4B,QAA1C,EAAoD;AAClD,WAAK5B,MAAL,CAAYmD,UAAZ,CAAuB,KAAKlD,MAA5B,EAAoC,KAAKQ,MAAL,CAAY2C,CAAhD,EAAmD,IAAnD;AACA,WAAKnD,MAAL,IAAe,CAAf;AACA,WAAKD,MAAL,CAAYmD,UAAZ,CAAuB,KAAKlD,MAA5B,EAAoC,KAAKQ,MAAL,CAAY4C,CAAhD,EAAmD,IAAnD;AACA,WAAKpD,MAAL,IAAe,CAAf;AACA,WAAKD,MAAL,CAAYmD,UAAZ,CAAuB,KAAKlD,MAA5B,EAAoC,KAAKQ,MAAL,CAAY6C,CAAhD,EAAmD,IAAnD;AACA,WAAKrD,MAAL,IAAe,CAAf;AACD,KAPD,MAOO;AACL,WAAKD,MAAL,IAAgB,iBAAgB,KAAKS,MAAL,CAAY2C,CAAE,IAAG,KAAK3C,MAAL,CAAY4C,CAAE,IAAG,KAAK5C,MAAL,CAAY6C,CAAE;AACtF,CADM;AAEA,WAAKtD,MAAL,IAAe,gBAAf;AACD;AACF;;AACD6C,EAAAA,WAAW,CAACU,MAAD,EAAS;AAClB,QAAI,KAAKxD,MAAL,IAAe,KAAKC,MAAL,YAAuB4B,QAA1C,EAAoD;AAClD,WAAK5B,MAAL,CAAYmD,UAAZ,CAAuB,KAAKlD,MAA5B,EAAoCsD,MAAM,CAACH,CAA3C,EAA8C,IAA9C;AACA,WAAKnD,MAAL,IAAe,CAAf;AACA,WAAKD,MAAL,CAAYmD,UAAZ,CAAuB,KAAKlD,MAA5B,EAAoCsD,MAAM,CAACF,CAA3C,EAA8C,IAA9C;AACA,WAAKpD,MAAL,IAAe,CAAf;AACA,WAAKD,MAAL,CAAYmD,UAAZ,CAAuB,KAAKlD,MAA5B,EAAoCsD,MAAM,CAACD,CAA3C,EAA8C,IAA9C;AACA,WAAKrD,MAAL,IAAe,CAAf;AACD,KAPD,MAOO;AACL,WAAKD,MAAL,IAAgB;AACtB,CADM;AAED;AACF;;AAtIe;;AAwIlB,SACEH,WADF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Mesh, SkinnedMesh } from \"three\";\nclass STLExporter {\n  constructor() {\n    __publicField(this, \"binary\");\n    __publicField(this, \"output\");\n    __publicField(this, \"offset\");\n    __publicField(this, \"objects\");\n    __publicField(this, \"triangles\");\n    __publicField(this, \"vA\");\n    __publicField(this, \"vB\");\n    __publicField(this, \"vC\");\n    __publicField(this, \"cb\");\n    __publicField(this, \"ab\");\n    __publicField(this, \"normal\");\n    this.binary = false;\n    this.output = \"\";\n    this.offset = 80;\n    this.objects = [];\n    this.triangles = 0;\n    this.vA = new Vector3();\n    this.vB = new Vector3();\n    this.vC = new Vector3();\n    this.cb = new Vector3();\n    this.ab = new Vector3();\n    this.normal = new Vector3();\n  }\n  parse(scene, options) {\n    this.binary = options.binary !== void 0 ? options.binary : false;\n    scene.traverse((object) => {\n      if (object instanceof Mesh && object.isMesh) {\n        const geometry = object.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute(\"position\");\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry\n        });\n      }\n    });\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = \"\";\n      this.output += \"solid exported\\n\";\n    }\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute(\"position\");\n      if (object instanceof SkinnedMesh) {\n        if (index !== null) {\n          for (let j = 0; j < index.count; j += 3) {\n            const a = index.getX(j + 0);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        } else {\n          for (let j = 0; j < positionAttribute.count; j += 3) {\n            const a = j + 0;\n            const b = j + 1;\n            const c = j + 2;\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        }\n      }\n    }\n    if (!this.binary) {\n      this.output += \"endsolid exported\\n\";\n    }\n    return this.output;\n  }\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, this.vA);\n      object.boneTransform(b, this.vB);\n      object.boneTransform(c, this.vC);\n    }\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += \"\t\tendloop\\n\";\n      this.output += \"\tendfacet\\n\";\n    }\n  }\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      this.output += \"\t\touter loop\\n\";\n    }\n  }\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\t\t\tvertex vertex.x vertex.y vertex.z\n`;\n    }\n  }\n}\nexport {\n  STLExporter\n};\n"]},"metadata":{},"sourceType":"module"}