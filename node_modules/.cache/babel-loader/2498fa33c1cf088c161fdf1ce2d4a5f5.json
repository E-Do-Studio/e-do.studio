{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, BufferAttribute, LoaderUtils } from \"three\";\nimport { unzlibSync } from \"fflate\";\n\nvar VTKLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(VTKLoader, _Loader);\n\n  var _super = _createSuper(VTKLoader);\n\n  function VTKLoader(manager) {\n    _classCallCheck(this, VTKLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(VTKLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function parseASCII(data2) {\n        var indices = [];\n        var positions = [];\n        var colors = [];\n        var normals = [];\n        var result;\n        var patWord = /^[^\\d.\\s-]+/;\n        var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n        var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n        var patPOINTS = /^POINTS /;\n        var patPOLYGONS = /^POLYGONS /;\n        var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n        var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n        var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n        var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n        var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n        var inPointsSection = false;\n        var inPolygonsSection = false;\n        var inTriangleStripSection = false;\n        var inPointDataSection = false;\n        var inCellDataSection = false;\n        var inColorSection = false;\n        var inNormalsSection = false;\n        var lines = data2.split(\"\\n\");\n\n        for (var i in lines) {\n          var line = lines[i].trim();\n\n          if (line.indexOf(\"DATASET\") === 0) {\n            var dataset = line.split(\" \")[1];\n            if (dataset !== \"POLYDATA\") throw new Error(\"Unsupported DATASET type: \" + dataset);\n          } else if (inPointsSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var x = parseFloat(result[1]);\n              var y = parseFloat(result[2]);\n              var z = parseFloat(result[3]);\n              positions.push(x, y, z);\n            }\n          } else if (inPolygonsSection) {\n            if ((result = patConnectivity.exec(line)) !== null) {\n              var numVertices = parseInt(result[1]);\n              var inds = result[2].split(/\\s+/);\n\n              if (numVertices >= 3) {\n                var i0 = parseInt(inds[0]);\n                var i1, i2;\n                var k = 1;\n\n                for (var j = 0; j < numVertices - 2; ++j) {\n                  i1 = parseInt(inds[k]);\n                  i2 = parseInt(inds[k + 1]);\n                  indices.push(i0, i1, i2);\n                  k++;\n                }\n              }\n            }\n          } else if (inTriangleStripSection) {\n            if ((result = patConnectivity.exec(line)) !== null) {\n              var numVertices = parseInt(result[1]);\n              var inds = result[2].split(/\\s+/);\n\n              if (numVertices >= 3) {\n                var i0, i1, i2;\n\n                for (var j = 0; j < numVertices - 2; j++) {\n                  if (j % 2 === 1) {\n                    i0 = parseInt(inds[j]);\n                    i1 = parseInt(inds[j + 2]);\n                    i2 = parseInt(inds[j + 1]);\n                    indices.push(i0, i1, i2);\n                  } else {\n                    i0 = parseInt(inds[j]);\n                    i1 = parseInt(inds[j + 1]);\n                    i2 = parseInt(inds[j + 2]);\n                    indices.push(i0, i1, i2);\n                  }\n                }\n              }\n            }\n          } else if (inPointDataSection || inCellDataSection) {\n            if (inColorSection) {\n              while ((result = pat3Floats.exec(line)) !== null) {\n                if (patWord.exec(line) !== null) break;\n                var r = parseFloat(result[1]);\n                var g = parseFloat(result[2]);\n                var b = parseFloat(result[3]);\n                colors.push(r, g, b);\n              }\n            } else if (inNormalsSection) {\n              while ((result = pat3Floats.exec(line)) !== null) {\n                if (patWord.exec(line) !== null) break;\n                var nx = parseFloat(result[1]);\n                var ny = parseFloat(result[2]);\n                var nz = parseFloat(result[3]);\n                normals.push(nx, ny, nz);\n              }\n            }\n          }\n\n          if (patPOLYGONS.exec(line) !== null) {\n            inPolygonsSection = true;\n            inPointsSection = false;\n            inTriangleStripSection = false;\n          } else if (patPOINTS.exec(line) !== null) {\n            inPolygonsSection = false;\n            inPointsSection = true;\n            inTriangleStripSection = false;\n          } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n            inPolygonsSection = false;\n            inPointsSection = false;\n            inTriangleStripSection = true;\n          } else if (patPOINT_DATA.exec(line) !== null) {\n            inPointDataSection = true;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          } else if (patCELL_DATA.exec(line) !== null) {\n            inCellDataSection = true;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          } else if (patCOLOR_SCALARS.exec(line) !== null) {\n            inColorSection = true;\n            inNormalsSection = false;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          } else if (patNORMALS.exec(line) !== null) {\n            inNormalsSection = true;\n            inColorSection = false;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        geometry.setIndex(indices);\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n\n        if (normals.length === positions.length) {\n          geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        }\n\n        if (colors.length !== indices.length) {\n          if (colors.length === positions.length) {\n            geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n          }\n        } else {\n          geometry = geometry.toNonIndexed();\n          var numTriangles = geometry.attributes.position.count / 3;\n\n          if (colors.length === numTriangles * 3) {\n            var newColors = [];\n\n            for (var i = 0; i < numTriangles; i++) {\n              var r = colors[3 * i + 0];\n              var g = colors[3 * i + 1];\n              var b = colors[3 * i + 2];\n              newColors.push(r, g, b);\n              newColors.push(r, g, b);\n              newColors.push(r, g, b);\n            }\n\n            geometry.setAttribute(\"color\", new Float32BufferAttribute(newColors, 3));\n          }\n        }\n\n        return geometry;\n      }\n\n      function parseBinary(data2) {\n        var count, pointIndex, i, numberOfPoints, s;\n        var buffer = new Uint8Array(data2);\n        var dataView = new DataView(data2);\n        var points = [];\n        var normals = [];\n        var indices = [];\n        var vtk = [];\n        var index = 0;\n\n        function findString(buffer2, start) {\n          var index2 = start;\n          var c = buffer2[index2];\n          var s2 = [];\n\n          while (c !== 10) {\n            s2.push(String.fromCharCode(c));\n            index2++;\n            c = buffer2[index2];\n          }\n\n          return {\n            start: start,\n            end: index2,\n            next: index2 + 1,\n            parsedString: s2.join(\"\")\n          };\n        }\n\n        var state, line;\n\n        while (true) {\n          state = findString(buffer, index);\n          line = state.parsedString;\n\n          if (line.indexOf(\"DATASET\") === 0) {\n            var dataset = line.split(\" \")[1];\n            if (dataset !== \"POLYDATA\") throw new Error(\"Unsupported DATASET type: \" + dataset);\n          } else if (line.indexOf(\"POINTS\") === 0) {\n            vtk.push(line);\n            numberOfPoints = parseInt(line.split(\" \")[1], 10);\n            count = numberOfPoints * 4 * 3;\n            points = new Float32Array(numberOfPoints * 3);\n            pointIndex = state.next;\n\n            for (i = 0; i < numberOfPoints; i++) {\n              points[3 * i] = dataView.getFloat32(pointIndex, false);\n              points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n              points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n              pointIndex = pointIndex + 12;\n            }\n\n            state.next = state.next + count + 1;\n          } else if (line.indexOf(\"TRIANGLE_STRIPS\") === 0) {\n            var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n            var size = parseInt(line.split(\" \")[2], 10);\n            count = size * 4;\n            indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n            var indicesIndex = 0;\n            pointIndex = state.next;\n\n            for (i = 0; i < numberOfStrips; i++) {\n              var indexCount = dataView.getInt32(pointIndex, false);\n              var strip = [];\n              pointIndex += 4;\n\n              for (s = 0; s < indexCount; s++) {\n                strip.push(dataView.getInt32(pointIndex, false));\n                pointIndex += 4;\n              }\n\n              for (var j = 0; j < indexCount - 2; j++) {\n                if (j % 2) {\n                  indices[indicesIndex++] = strip[j];\n                  indices[indicesIndex++] = strip[j + 2];\n                  indices[indicesIndex++] = strip[j + 1];\n                } else {\n                  indices[indicesIndex++] = strip[j];\n                  indices[indicesIndex++] = strip[j + 1];\n                  indices[indicesIndex++] = strip[j + 2];\n                }\n              }\n            }\n\n            state.next = state.next + count + 1;\n          } else if (line.indexOf(\"POLYGONS\") === 0) {\n            var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n            var size = parseInt(line.split(\" \")[2], 10);\n            count = size * 4;\n            indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n            var indicesIndex = 0;\n            pointIndex = state.next;\n\n            for (i = 0; i < numberOfStrips; i++) {\n              var indexCount = dataView.getInt32(pointIndex, false);\n              var strip = [];\n              pointIndex += 4;\n\n              for (s = 0; s < indexCount; s++) {\n                strip.push(dataView.getInt32(pointIndex, false));\n                pointIndex += 4;\n              }\n\n              for (var j = 1; j < indexCount - 1; j++) {\n                indices[indicesIndex++] = strip[0];\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n              }\n            }\n\n            state.next = state.next + count + 1;\n          } else if (line.indexOf(\"POINT_DATA\") === 0) {\n            numberOfPoints = parseInt(line.split(\" \")[1], 10);\n            state = findString(buffer, state.next);\n            count = numberOfPoints * 4 * 3;\n            normals = new Float32Array(numberOfPoints * 3);\n            pointIndex = state.next;\n\n            for (i = 0; i < numberOfPoints; i++) {\n              normals[3 * i] = dataView.getFloat32(pointIndex, false);\n              normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n              normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n              pointIndex += 12;\n            }\n\n            state.next = state.next + count;\n          }\n\n          index = state.next;\n\n          if (index >= buffer.byteLength) {\n            break;\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(indices, 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n\n        if (normals.length === points.length) {\n          geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n        }\n\n        return geometry;\n      }\n\n      function Float32Concat(first, second) {\n        var firstLength = first.length,\n            result = new Float32Array(firstLength + second.length);\n        result.set(first);\n        result.set(second, firstLength);\n        return result;\n      }\n\n      function Int32Concat(first, second) {\n        var firstLength = first.length,\n            result = new Int32Array(firstLength + second.length);\n        result.set(first);\n        result.set(second, firstLength);\n        return result;\n      }\n\n      function parseXML(stringFile) {\n        function xmlToJson(xml) {\n          var obj = {};\n\n          if (xml.nodeType === 1) {\n            if (xml.attributes) {\n              if (xml.attributes.length > 0) {\n                obj[\"attributes\"] = {};\n\n                for (var j2 = 0; j2 < xml.attributes.length; j2++) {\n                  var attribute = xml.attributes.item(j2);\n                  obj[\"attributes\"][attribute.nodeName] = attribute.nodeValue.trim();\n                }\n              }\n            }\n          } else if (xml.nodeType === 3) {\n            obj = xml.nodeValue.trim();\n          }\n\n          if (xml.hasChildNodes()) {\n            for (var i2 = 0; i2 < xml.childNodes.length; i2++) {\n              var item = xml.childNodes.item(i2);\n              var nodeName = item.nodeName;\n\n              if (typeof obj[nodeName] === \"undefined\") {\n                var tmp = xmlToJson(item);\n                if (tmp !== \"\") obj[nodeName] = tmp;\n              } else {\n                if (typeof obj[nodeName].push === \"undefined\") {\n                  var old = obj[nodeName];\n                  obj[nodeName] = [old];\n                }\n\n                var tmp = xmlToJson(item);\n                if (tmp !== \"\") obj[nodeName].push(tmp);\n              }\n            }\n          }\n\n          return obj;\n        }\n\n        function Base64toByteArray(b64) {\n          var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n          var i2;\n          var lookup = [];\n          var revLookup = [];\n          var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n          var len2 = code.length;\n\n          for (i2 = 0; i2 < len2; i2++) {\n            lookup[i2] = code[i2];\n          }\n\n          for (i2 = 0; i2 < len2; ++i2) {\n            revLookup[code.charCodeAt(i2)] = i2;\n          }\n\n          revLookup[\"-\".charCodeAt(0)] = 62;\n          revLookup[\"_\".charCodeAt(0)] = 63;\n          var j2, l, tmp, placeHolders, arr2;\n          var len2 = b64.length;\n\n          if (len2 % 4 > 0) {\n            throw new Error(\"Invalid string. Length must be a multiple of 4\");\n          }\n\n          placeHolders = b64[len2 - 2] === \"=\" ? 2 : b64[len2 - 1] === \"=\" ? 1 : 0;\n          arr2 = new Arr(len2 * 3 / 4 - placeHolders);\n          l = placeHolders > 0 ? len2 - 4 : len2;\n          var L = 0;\n\n          for (i2 = 0, j2 = 0; i2 < l; i2 += 4, j2 += 3) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n            arr2[L++] = (tmp & 16711680) >> 16;\n            arr2[L++] = (tmp & 65280) >> 8;\n            arr2[L++] = tmp & 255;\n          }\n\n          if (placeHolders === 2) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n            arr2[L++] = tmp & 255;\n          } else if (placeHolders === 1) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n            arr2[L++] = tmp >> 8 & 255;\n            arr2[L++] = tmp & 255;\n          }\n\n          return arr2;\n        }\n\n        function parseDataArray(ele, compressed2) {\n          var numBytes = 0;\n\n          if (json.attributes.header_type === \"UInt64\") {\n            numBytes = 8;\n          } else if (json.attributes.header_type === \"UInt32\") {\n            numBytes = 4;\n          }\n\n          if (ele.attributes.format === \"binary\" && compressed2) {\n            var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n\n            if (ele.attributes.type === \"Float32\") {\n              var txt = new Float32Array();\n            } else if (ele.attributes.type === \"Int64\") {\n              var txt = new Int32Array();\n            }\n\n            rawData = ele[\"#text\"];\n            byteData = Base64toByteArray(rawData);\n            blocks = byteData[0];\n\n            for (var i2 = 1; i2 < numBytes - 1; i2++) {\n              blocks = blocks | byteData[i2] << i2 * numBytes;\n            }\n\n            headerSize = (blocks + 3) * numBytes;\n            padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n            headerSize = headerSize + padding;\n            dataOffsets = [];\n            currentOffset = headerSize;\n            dataOffsets.push(currentOffset);\n            cSizeStart = 3 * numBytes;\n\n            for (var i2 = 0; i2 < blocks; i2++) {\n              var currentBlockSize = byteData[i2 * numBytes + cSizeStart];\n\n              for (var j2 = 1; j2 < numBytes - 1; j2++) {\n                currentBlockSize = currentBlockSize | byteData[i2 * numBytes + cSizeStart + j2] << j2 * 8;\n              }\n\n              currentOffset = currentOffset + currentBlockSize;\n              dataOffsets.push(currentOffset);\n            }\n\n            for (var i2 = 0; i2 < dataOffsets.length - 1; i2++) {\n              var data2 = unzlibSync(byteData.slice(dataOffsets[i2], dataOffsets[i2 + 1]));\n              content = data2.buffer;\n\n              if (ele.attributes.type === \"Float32\") {\n                content = new Float32Array(content);\n                txt = Float32Concat(txt, content);\n              } else if (ele.attributes.type === \"Int64\") {\n                content = new Int32Array(content);\n                txt = Int32Concat(txt, content);\n              }\n            }\n\n            delete ele[\"#text\"];\n\n            if (ele.attributes.type === \"Int64\") {\n              if (ele.attributes.format === \"binary\") {\n                txt = txt.filter(function (el, idx) {\n                  if (idx % 2 !== 1) return true;\n                });\n              }\n            }\n          } else {\n            if (ele.attributes.format === \"binary\" && !compressed2) {\n              var content = Base64toByteArray(ele[\"#text\"]);\n              content = content.slice(numBytes).buffer;\n            } else {\n              if (ele[\"#text\"]) {\n                var content = ele[\"#text\"].split(/\\s+/).filter(function (el) {\n                  if (el !== \"\") return el;\n                });\n              } else {\n                var content = new Int32Array(0).buffer;\n              }\n            }\n\n            delete ele[\"#text\"];\n\n            if (ele.attributes.type === \"Float32\") {\n              var txt = new Float32Array(content);\n            } else if (ele.attributes.type === \"Int32\") {\n              var txt = new Int32Array(content);\n            } else if (ele.attributes.type === \"Int64\") {\n              var txt = new Int32Array(content);\n\n              if (ele.attributes.format === \"binary\") {\n                txt = txt.filter(function (el, idx) {\n                  if (idx % 2 !== 1) return true;\n                });\n              }\n            }\n          }\n\n          return txt;\n        }\n\n        var dom = null;\n\n        if (window.DOMParser) {\n          try {\n            dom = new DOMParser().parseFromString(stringFile, \"text/xml\");\n          } catch (e) {\n            dom = null;\n          }\n        } else if (window.ActiveXObject) {\n          try {\n            dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n            dom.async = false;\n\n            if (!dom.loadXML()) {\n              throw new Error(dom.parseError.reason + dom.parseError.srcText);\n            }\n          } catch (e) {\n            dom = null;\n          }\n        } else {\n          throw new Error(\"Cannot parse xml string!\");\n        }\n\n        var doc = dom.documentElement;\n        var json = xmlToJson(doc);\n        var points = [];\n        var normals = [];\n        var indices = [];\n\n        if (json.PolyData) {\n          var piece = json.PolyData.Piece;\n          var compressed = json.attributes.hasOwnProperty(\"compressor\");\n          var sections = [\"PointData\", \"Points\", \"Strips\", \"Polys\"];\n          var sectionIndex = 0,\n              numberOfSections = sections.length;\n\n          while (sectionIndex < numberOfSections) {\n            var section = piece[sections[sectionIndex]];\n\n            if (section && section.DataArray) {\n              if (Object.prototype.toString.call(section.DataArray) === \"[object Array]\") {\n                var arr = section.DataArray;\n              } else {\n                var arr = [section.DataArray];\n              }\n\n              var dataArrayIndex = 0,\n                  numberOfDataArrays = arr.length;\n\n              while (dataArrayIndex < numberOfDataArrays) {\n                if (\"#text\" in arr[dataArrayIndex] && arr[dataArrayIndex][\"#text\"].length > 0) {\n                  arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n                }\n\n                dataArrayIndex++;\n              }\n\n              switch (sections[sectionIndex]) {\n                case \"PointData\":\n                  var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                  var normalsName = section.attributes.Normals;\n\n                  if (numberOfPoints > 0) {\n                    for (var i = 0, len = arr.length; i < len; i++) {\n                      if (normalsName === arr[i].attributes.Name) {\n                        var components = arr[i].attributes.NumberOfComponents;\n                        normals = new Float32Array(numberOfPoints * components);\n                        normals.set(arr[i].text, 0);\n                      }\n                    }\n                  }\n\n                  break;\n\n                case \"Points\":\n                  var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n\n                  if (numberOfPoints > 0) {\n                    var components = section.DataArray.attributes.NumberOfComponents;\n                    points = new Float32Array(numberOfPoints * components);\n                    points.set(section.DataArray.text, 0);\n                  }\n\n                  break;\n\n                case \"Strips\":\n                  var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n\n                  if (numberOfStrips > 0) {\n                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                    var offset = new Int32Array(section.DataArray[1].text.length);\n                    connectivity.set(section.DataArray[0].text, 0);\n                    offset.set(section.DataArray[1].text, 0);\n                    var size = numberOfStrips + connectivity.length;\n                    indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                    var indicesIndex = 0;\n\n                    for (var i = 0, len = numberOfStrips; i < len; i++) {\n                      var strip = [];\n\n                      for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                        strip.push(connectivity[s]);\n                        if (i > 0) len0 = offset[i - 1];\n                      }\n\n                      for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                        if (j % 2) {\n                          indices[indicesIndex++] = strip[j];\n                          indices[indicesIndex++] = strip[j + 2];\n                          indices[indicesIndex++] = strip[j + 1];\n                        } else {\n                          indices[indicesIndex++] = strip[j];\n                          indices[indicesIndex++] = strip[j + 1];\n                          indices[indicesIndex++] = strip[j + 2];\n                        }\n\n                        if (i > 0) len0 = offset[i - 1];\n                      }\n                    }\n                  }\n\n                  break;\n\n                case \"Polys\":\n                  var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n\n                  if (numberOfPolys > 0) {\n                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                    var offset = new Int32Array(section.DataArray[1].text.length);\n                    connectivity.set(section.DataArray[0].text, 0);\n                    offset.set(section.DataArray[1].text, 0);\n                    var size = numberOfPolys + connectivity.length;\n                    indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                    var indicesIndex = 0,\n                        connectivityIndex = 0;\n                    var i = 0,\n                        len = numberOfPolys,\n                        len0 = 0;\n\n                    while (i < len) {\n                      var poly = [];\n                      var s = 0,\n                          len1 = offset[i];\n\n                      while (s < len1 - len0) {\n                        poly.push(connectivity[connectivityIndex++]);\n                        s++;\n                      }\n\n                      var j = 1;\n\n                      while (j < len1 - len0 - 1) {\n                        indices[indicesIndex++] = poly[0];\n                        indices[indicesIndex++] = poly[j];\n                        indices[indicesIndex++] = poly[j + 1];\n                        j++;\n                      }\n\n                      i++;\n                      len0 = offset[i - 1];\n                    }\n                  }\n\n                  break;\n\n                default:\n                  break;\n              }\n            }\n\n            sectionIndex++;\n          }\n\n          var geometry = new BufferGeometry();\n          geometry.setIndex(new BufferAttribute(indices, 1));\n          geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n\n          if (normals.length === points.length) {\n            geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n          }\n\n          return geometry;\n        } else {\n          throw new Error(\"Unsupported DATASET type\");\n        }\n      }\n\n      var meta = LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split(\"\\n\");\n\n      if (meta[0].indexOf(\"xml\") !== -1) {\n        return parseXML(LoaderUtils.decodeText(data));\n      } else if (meta[2].includes(\"ASCII\")) {\n        return parseASCII(LoaderUtils.decodeText(data));\n      } else {\n        return parseBinary(data);\n      }\n    }\n  }]);\n\n  return VTKLoader;\n}(Loader);\n\nexport { VTKLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/VTKLoader.js"],"names":["Loader","FileLoader","BufferGeometry","Float32BufferAttribute","BufferAttribute","LoaderUtils","unzlibSync","VTKLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","parseASCII","data2","indices","positions","colors","normals","result","patWord","pat3Floats","patConnectivity","patPOINTS","patPOLYGONS","patTRIANGLE_STRIPS","patPOINT_DATA","patCELL_DATA","patCOLOR_SCALARS","patNORMALS","inPointsSection","inPolygonsSection","inTriangleStripSection","inPointDataSection","inCellDataSection","inColorSection","inNormalsSection","lines","split","i","line","trim","indexOf","dataset","Error","exec","x","parseFloat","y","z","push","numVertices","parseInt","inds","i0","i1","i2","k","j","r","g","b","nx","ny","nz","geometry","setIndex","setAttribute","length","toNonIndexed","numTriangles","attributes","position","count","newColors","parseBinary","pointIndex","numberOfPoints","s","buffer","Uint8Array","dataView","DataView","points","vtk","index","findString","buffer2","start","index2","c","s2","String","fromCharCode","end","next","parsedString","join","state","Float32Array","getFloat32","numberOfStrips","size","Uint32Array","indicesIndex","indexCount","getInt32","strip","byteLength","Float32Concat","first","second","firstLength","set","Int32Concat","Int32Array","parseXML","stringFile","xmlToJson","xml","obj","nodeType","j2","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","tmp","old","Base64toByteArray","b64","Arr","Array","lookup","revLookup","code","len2","charCodeAt","l","placeHolders","arr2","L","parseDataArray","ele","compressed2","numBytes","json","header_type","format","rawData","content","byteData","blocks","cSizeStart","headerSize","padding","dataOffsets","currentOffset","type","txt","currentBlockSize","slice","filter","el","idx","dom","window","DOMParser","parseFromString","ActiveXObject","async","loadXML","parseError","reason","srcText","doc","documentElement","PolyData","piece","Piece","compressed","hasOwnProperty","sections","sectionIndex","numberOfSections","section","DataArray","Object","prototype","toString","call","arr","dataArrayIndex","numberOfDataArrays","NumberOfPoints","normalsName","Normals","len","Name","components","NumberOfComponents","NumberOfStrips","connectivity","offset","len1","len0","numberOfPolys","NumberOfPolys","connectivityIndex","poly","meta","decodeText","includes"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, BufferAttribute, LoaderUtils } from \"three\";\nimport { unzlibSync } from \"fflate\";\nclass VTKLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    function parseASCII(data2) {\n      var indices = [];\n      var positions = [];\n      var colors = [];\n      var normals = [];\n      var result;\n      var patWord = /^[^\\d.\\s-]+/;\n      var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n      var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n      var patPOINTS = /^POINTS /;\n      var patPOLYGONS = /^POLYGONS /;\n      var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n      var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n      var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n      var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n      var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n      var inPointsSection = false;\n      var inPolygonsSection = false;\n      var inTriangleStripSection = false;\n      var inPointDataSection = false;\n      var inCellDataSection = false;\n      var inColorSection = false;\n      var inNormalsSection = false;\n      var lines = data2.split(\"\\n\");\n      for (var i in lines) {\n        var line = lines[i].trim();\n        if (line.indexOf(\"DATASET\") === 0) {\n          var dataset = line.split(\" \")[1];\n          if (dataset !== \"POLYDATA\")\n            throw new Error(\"Unsupported DATASET type: \" + dataset);\n        } else if (inPointsSection) {\n          while ((result = pat3Floats.exec(line)) !== null) {\n            if (patWord.exec(line) !== null)\n              break;\n            var x = parseFloat(result[1]);\n            var y = parseFloat(result[2]);\n            var z = parseFloat(result[3]);\n            positions.push(x, y, z);\n          }\n        } else if (inPolygonsSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n            if (numVertices >= 3) {\n              var i0 = parseInt(inds[0]);\n              var i1, i2;\n              var k = 1;\n              for (var j = 0; j < numVertices - 2; ++j) {\n                i1 = parseInt(inds[k]);\n                i2 = parseInt(inds[k + 1]);\n                indices.push(i0, i1, i2);\n                k++;\n              }\n            }\n          }\n        } else if (inTriangleStripSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n            if (numVertices >= 3) {\n              var i0, i1, i2;\n              for (var j = 0; j < numVertices - 2; j++) {\n                if (j % 2 === 1) {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 2]);\n                  i2 = parseInt(inds[j + 1]);\n                  indices.push(i0, i1, i2);\n                } else {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 1]);\n                  i2 = parseInt(inds[j + 2]);\n                  indices.push(i0, i1, i2);\n                }\n              }\n            }\n          }\n        } else if (inPointDataSection || inCellDataSection) {\n          if (inColorSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null)\n                break;\n              var r = parseFloat(result[1]);\n              var g = parseFloat(result[2]);\n              var b = parseFloat(result[3]);\n              colors.push(r, g, b);\n            }\n          } else if (inNormalsSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null)\n                break;\n              var nx = parseFloat(result[1]);\n              var ny = parseFloat(result[2]);\n              var nz = parseFloat(result[3]);\n              normals.push(nx, ny, nz);\n            }\n          }\n        }\n        if (patPOLYGONS.exec(line) !== null) {\n          inPolygonsSection = true;\n          inPointsSection = false;\n          inTriangleStripSection = false;\n        } else if (patPOINTS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = true;\n          inTriangleStripSection = false;\n        } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = false;\n          inTriangleStripSection = true;\n        } else if (patPOINT_DATA.exec(line) !== null) {\n          inPointDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCELL_DATA.exec(line) !== null) {\n          inCellDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCOLOR_SCALARS.exec(line) !== null) {\n          inColorSection = true;\n          inNormalsSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patNORMALS.exec(line) !== null) {\n          inNormalsSection = true;\n          inColorSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        }\n      }\n      var geometry = new BufferGeometry();\n      geometry.setIndex(indices);\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n      if (normals.length === positions.length) {\n        geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n      }\n      if (colors.length !== indices.length) {\n        if (colors.length === positions.length) {\n          geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n        }\n      } else {\n        geometry = geometry.toNonIndexed();\n        var numTriangles = geometry.attributes.position.count / 3;\n        if (colors.length === numTriangles * 3) {\n          var newColors = [];\n          for (var i = 0; i < numTriangles; i++) {\n            var r = colors[3 * i + 0];\n            var g = colors[3 * i + 1];\n            var b = colors[3 * i + 2];\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n          }\n          geometry.setAttribute(\"color\", new Float32BufferAttribute(newColors, 3));\n        }\n      }\n      return geometry;\n    }\n    function parseBinary(data2) {\n      var count, pointIndex, i, numberOfPoints, s;\n      var buffer = new Uint8Array(data2);\n      var dataView = new DataView(data2);\n      var points = [];\n      var normals = [];\n      var indices = [];\n      var vtk = [];\n      var index = 0;\n      function findString(buffer2, start) {\n        var index2 = start;\n        var c = buffer2[index2];\n        var s2 = [];\n        while (c !== 10) {\n          s2.push(String.fromCharCode(c));\n          index2++;\n          c = buffer2[index2];\n        }\n        return { start, end: index2, next: index2 + 1, parsedString: s2.join(\"\") };\n      }\n      var state, line;\n      while (true) {\n        state = findString(buffer, index);\n        line = state.parsedString;\n        if (line.indexOf(\"DATASET\") === 0) {\n          var dataset = line.split(\" \")[1];\n          if (dataset !== \"POLYDATA\")\n            throw new Error(\"Unsupported DATASET type: \" + dataset);\n        } else if (line.indexOf(\"POINTS\") === 0) {\n          vtk.push(line);\n          numberOfPoints = parseInt(line.split(\" \")[1], 10);\n          count = numberOfPoints * 4 * 3;\n          points = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            points[3 * i] = dataView.getFloat32(pointIndex, false);\n            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex = pointIndex + 12;\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"TRIANGLE_STRIPS\") === 0) {\n          var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n          var size = parseInt(line.split(\" \")[2], 10);\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n            for (var j = 0; j < indexCount - 2; j++) {\n              if (j % 2) {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 2];\n                indices[indicesIndex++] = strip[j + 1];\n              } else {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n                indices[indicesIndex++] = strip[j + 2];\n              }\n            }\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"POLYGONS\") === 0) {\n          var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n          var size = parseInt(line.split(\" \")[2], 10);\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n            for (var j = 1; j < indexCount - 1; j++) {\n              indices[indicesIndex++] = strip[0];\n              indices[indicesIndex++] = strip[j];\n              indices[indicesIndex++] = strip[j + 1];\n            }\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"POINT_DATA\") === 0) {\n          numberOfPoints = parseInt(line.split(\" \")[1], 10);\n          state = findString(buffer, state.next);\n          count = numberOfPoints * 4 * 3;\n          normals = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex += 12;\n          }\n          state.next = state.next + count;\n        }\n        index = state.next;\n        if (index >= buffer.byteLength) {\n          break;\n        }\n      }\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n      if (normals.length === points.length) {\n        geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n      }\n      return geometry;\n    }\n    function Float32Concat(first, second) {\n      const firstLength = first.length, result = new Float32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n    function Int32Concat(first, second) {\n      var firstLength = first.length, result = new Int32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n    function parseXML(stringFile) {\n      function xmlToJson(xml) {\n        var obj = {};\n        if (xml.nodeType === 1) {\n          if (xml.attributes) {\n            if (xml.attributes.length > 0) {\n              obj[\"attributes\"] = {};\n              for (var j2 = 0; j2 < xml.attributes.length; j2++) {\n                var attribute = xml.attributes.item(j2);\n                obj[\"attributes\"][attribute.nodeName] = attribute.nodeValue.trim();\n              }\n            }\n          }\n        } else if (xml.nodeType === 3) {\n          obj = xml.nodeValue.trim();\n        }\n        if (xml.hasChildNodes()) {\n          for (var i2 = 0; i2 < xml.childNodes.length; i2++) {\n            var item = xml.childNodes.item(i2);\n            var nodeName = item.nodeName;\n            if (typeof obj[nodeName] === \"undefined\") {\n              var tmp = xmlToJson(item);\n              if (tmp !== \"\")\n                obj[nodeName] = tmp;\n            } else {\n              if (typeof obj[nodeName].push === \"undefined\") {\n                var old = obj[nodeName];\n                obj[nodeName] = [old];\n              }\n              var tmp = xmlToJson(item);\n              if (tmp !== \"\")\n                obj[nodeName].push(tmp);\n            }\n          }\n        }\n        return obj;\n      }\n      function Base64toByteArray(b64) {\n        var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n        var i2;\n        var lookup = [];\n        var revLookup = [];\n        var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        var len2 = code.length;\n        for (i2 = 0; i2 < len2; i2++) {\n          lookup[i2] = code[i2];\n        }\n        for (i2 = 0; i2 < len2; ++i2) {\n          revLookup[code.charCodeAt(i2)] = i2;\n        }\n        revLookup[\"-\".charCodeAt(0)] = 62;\n        revLookup[\"_\".charCodeAt(0)] = 63;\n        var j2, l, tmp, placeHolders, arr2;\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        placeHolders = b64[len2 - 2] === \"=\" ? 2 : b64[len2 - 1] === \"=\" ? 1 : 0;\n        arr2 = new Arr(len2 * 3 / 4 - placeHolders);\n        l = placeHolders > 0 ? len2 - 4 : len2;\n        var L = 0;\n        for (i2 = 0, j2 = 0; i2 < l; i2 += 4, j2 += 3) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr2[L++] = (tmp & 16711680) >> 16;\n          arr2[L++] = (tmp & 65280) >> 8;\n          arr2[L++] = tmp & 255;\n        }\n        if (placeHolders === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr2[L++] = tmp & 255;\n        } else if (placeHolders === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr2[L++] = tmp >> 8 & 255;\n          arr2[L++] = tmp & 255;\n        }\n        return arr2;\n      }\n      function parseDataArray(ele, compressed2) {\n        var numBytes = 0;\n        if (json.attributes.header_type === \"UInt64\") {\n          numBytes = 8;\n        } else if (json.attributes.header_type === \"UInt32\") {\n          numBytes = 4;\n        }\n        if (ele.attributes.format === \"binary\" && compressed2) {\n          var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n          if (ele.attributes.type === \"Float32\") {\n            var txt = new Float32Array();\n          } else if (ele.attributes.type === \"Int64\") {\n            var txt = new Int32Array();\n          }\n          rawData = ele[\"#text\"];\n          byteData = Base64toByteArray(rawData);\n          blocks = byteData[0];\n          for (var i2 = 1; i2 < numBytes - 1; i2++) {\n            blocks = blocks | byteData[i2] << i2 * numBytes;\n          }\n          headerSize = (blocks + 3) * numBytes;\n          padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n          headerSize = headerSize + padding;\n          dataOffsets = [];\n          currentOffset = headerSize;\n          dataOffsets.push(currentOffset);\n          cSizeStart = 3 * numBytes;\n          for (var i2 = 0; i2 < blocks; i2++) {\n            var currentBlockSize = byteData[i2 * numBytes + cSizeStart];\n            for (var j2 = 1; j2 < numBytes - 1; j2++) {\n              currentBlockSize = currentBlockSize | byteData[i2 * numBytes + cSizeStart + j2] << j2 * 8;\n            }\n            currentOffset = currentOffset + currentBlockSize;\n            dataOffsets.push(currentOffset);\n          }\n          for (var i2 = 0; i2 < dataOffsets.length - 1; i2++) {\n            var data2 = unzlibSync(byteData.slice(dataOffsets[i2], dataOffsets[i2 + 1]));\n            content = data2.buffer;\n            if (ele.attributes.type === \"Float32\") {\n              content = new Float32Array(content);\n              txt = Float32Concat(txt, content);\n            } else if (ele.attributes.type === \"Int64\") {\n              content = new Int32Array(content);\n              txt = Int32Concat(txt, content);\n            }\n          }\n          delete ele[\"#text\"];\n          if (ele.attributes.type === \"Int64\") {\n            if (ele.attributes.format === \"binary\") {\n              txt = txt.filter(function(el, idx) {\n                if (idx % 2 !== 1)\n                  return true;\n              });\n            }\n          }\n        } else {\n          if (ele.attributes.format === \"binary\" && !compressed2) {\n            var content = Base64toByteArray(ele[\"#text\"]);\n            content = content.slice(numBytes).buffer;\n          } else {\n            if (ele[\"#text\"]) {\n              var content = ele[\"#text\"].split(/\\s+/).filter(function(el) {\n                if (el !== \"\")\n                  return el;\n              });\n            } else {\n              var content = new Int32Array(0).buffer;\n            }\n          }\n          delete ele[\"#text\"];\n          if (ele.attributes.type === \"Float32\") {\n            var txt = new Float32Array(content);\n          } else if (ele.attributes.type === \"Int32\") {\n            var txt = new Int32Array(content);\n          } else if (ele.attributes.type === \"Int64\") {\n            var txt = new Int32Array(content);\n            if (ele.attributes.format === \"binary\") {\n              txt = txt.filter(function(el, idx) {\n                if (idx % 2 !== 1)\n                  return true;\n              });\n            }\n          }\n        }\n        return txt;\n      }\n      var dom = null;\n      if (window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(stringFile, \"text/xml\");\n        } catch (e) {\n          dom = null;\n        }\n      } else if (window.ActiveXObject) {\n        try {\n          dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n          dom.async = false;\n          if (!dom.loadXML(\n            /* xml */\n          )) {\n            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n          }\n        } catch (e) {\n          dom = null;\n        }\n      } else {\n        throw new Error(\"Cannot parse xml string!\");\n      }\n      var doc = dom.documentElement;\n      var json = xmlToJson(doc);\n      var points = [];\n      var normals = [];\n      var indices = [];\n      if (json.PolyData) {\n        var piece = json.PolyData.Piece;\n        var compressed = json.attributes.hasOwnProperty(\"compressor\");\n        var sections = [\"PointData\", \"Points\", \"Strips\", \"Polys\"];\n        var sectionIndex = 0, numberOfSections = sections.length;\n        while (sectionIndex < numberOfSections) {\n          var section = piece[sections[sectionIndex]];\n          if (section && section.DataArray) {\n            if (Object.prototype.toString.call(section.DataArray) === \"[object Array]\") {\n              var arr = section.DataArray;\n            } else {\n              var arr = [section.DataArray];\n            }\n            var dataArrayIndex = 0, numberOfDataArrays = arr.length;\n            while (dataArrayIndex < numberOfDataArrays) {\n              if (\"#text\" in arr[dataArrayIndex] && arr[dataArrayIndex][\"#text\"].length > 0) {\n                arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n              }\n              dataArrayIndex++;\n            }\n            switch (sections[sectionIndex]) {\n              case \"PointData\":\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                var normalsName = section.attributes.Normals;\n                if (numberOfPoints > 0) {\n                  for (var i = 0, len = arr.length; i < len; i++) {\n                    if (normalsName === arr[i].attributes.Name) {\n                      var components = arr[i].attributes.NumberOfComponents;\n                      normals = new Float32Array(numberOfPoints * components);\n                      normals.set(arr[i].text, 0);\n                    }\n                  }\n                }\n                break;\n              case \"Points\":\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                if (numberOfPoints > 0) {\n                  var components = section.DataArray.attributes.NumberOfComponents;\n                  points = new Float32Array(numberOfPoints * components);\n                  points.set(section.DataArray.text, 0);\n                }\n                break;\n              case \"Strips\":\n                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n                if (numberOfStrips > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfStrips + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                  var indicesIndex = 0;\n                  for (var i = 0, len = numberOfStrips; i < len; i++) {\n                    var strip = [];\n                    for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                      strip.push(connectivity[s]);\n                      if (i > 0)\n                        len0 = offset[i - 1];\n                    }\n                    for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                      if (j % 2) {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 2];\n                        indices[indicesIndex++] = strip[j + 1];\n                      } else {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 1];\n                        indices[indicesIndex++] = strip[j + 2];\n                      }\n                      if (i > 0)\n                        len0 = offset[i - 1];\n                    }\n                  }\n                }\n                break;\n              case \"Polys\":\n                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n                if (numberOfPolys > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfPolys + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                  var indicesIndex = 0, connectivityIndex = 0;\n                  var i = 0, len = numberOfPolys, len0 = 0;\n                  while (i < len) {\n                    var poly = [];\n                    var s = 0, len1 = offset[i];\n                    while (s < len1 - len0) {\n                      poly.push(connectivity[connectivityIndex++]);\n                      s++;\n                    }\n                    var j = 1;\n                    while (j < len1 - len0 - 1) {\n                      indices[indicesIndex++] = poly[0];\n                      indices[indicesIndex++] = poly[j];\n                      indices[indicesIndex++] = poly[j + 1];\n                      j++;\n                    }\n                    i++;\n                    len0 = offset[i - 1];\n                  }\n                }\n                break;\n              default:\n                break;\n            }\n          }\n          sectionIndex++;\n        }\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(indices, 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n        if (normals.length === points.length) {\n          geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n        }\n        return geometry;\n      } else {\n        throw new Error(\"Unsupported DATASET type\");\n      }\n    }\n    var meta = LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split(\"\\n\");\n    if (meta[0].indexOf(\"xml\") !== -1) {\n      return parseXML(LoaderUtils.decodeText(data));\n    } else if (meta[2].includes(\"ASCII\")) {\n      return parseASCII(LoaderUtils.decodeText(data));\n    } else {\n      return parseBinary(data);\n    }\n  }\n}\nexport {\n  VTKLoader\n};\n"]},"metadata":{},"sourceType":"module"}