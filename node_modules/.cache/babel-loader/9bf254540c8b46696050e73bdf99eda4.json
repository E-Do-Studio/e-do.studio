{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport image from \"./test.jpg\";\nimport { useThree } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Photo = /*#__PURE__*/memo(_c = _s(({\n  x,\n  y\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const {\n    viewport\n  } = useThree();\n  const texture = useTexture(image); // Calculer les dimensions du plan en fonction de la taille de l'image\n\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n\n  const planeHeight = planeWidth / aspectRatio; // Utiliser PlaneGeometry avec les dimensions calculées\n\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n  const [t, setT] = useState(0);\n  const direction = useRef();\n  useFrame(({\n    mouse\n  }) => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (!direction.current) {\n      direction.current = x > viewport.width * mouse.x / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n    setT(t + 1);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    position: [x, y, 0],\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}, \"6evXA8AQinEbMoqpnTb6MnnCKA0=\", true, function () {\n  return [useThree, useTexture];\n}));\n_c2 = Photo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["useTexture","memo","useRef","useState","PlaneGeometry","Mesh","MeshBasicMaterial","image","useThree","Photo","x","y","ref","viewport","texture","imageWidth","width","imageHeight","height","aspectRatio","planeWidth","planeHeight","geometry","t","setT","direction","useFrame","mouse","current","position","add","appliedForces"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,QAAuC,OAAvC;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,iBAA9B,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,OAAO,MAAMC,KAAK,gBAAGR,IAAI,SAAC,CAAC;AAAES,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAD,KAAc;AAAA;;AACtC,QAAMC,GAAG,GAAGV,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAeL,QAAQ,EAA7B;AAEA,QAAMM,OAAO,GAAGd,UAAU,CAACO,KAAD,CAA1B,CAJsC,CAMtC;;AACA,QAAMQ,UAAU,GAAGD,OAAO,CAACP,KAAR,CAAcS,KAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACP,KAAR,CAAcW,MAAlC;AACA,QAAMC,WAAW,GAAGJ,UAAU,GAAGE,WAAjC;AACA,QAAMG,UAAU,GAAG,CAAnB,CAVsC,CAUhB;;AACtB,QAAMC,WAAW,GAAGD,UAAU,GAAGD,WAAjC,CAXsC,CAatC;;AACA,QAAMG,QAAQ,GAAG,IAAIlB,aAAJ,CAAkBgB,UAAlB,EAA8BC,WAA9B,CAAjB;AAEA,QAAM,CAACE,CAAD,EAAIC,IAAJ,IAAYrB,QAAQ,CAAC,CAAD,CAA1B;AACA,QAAMsB,SAAS,GAAGvB,MAAM,EAAxB;AAEAwB,EAAAA,QAAQ,CAAC,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAe;AACtB,QAAI,CAACf,GAAG,CAACgB,OAAT,EAAkB;AAChB;AACD;;AACD,QAAI,CAACH,SAAS,CAACG,OAAf,EAAwB;AACtBH,MAAAA,SAAS,CAACG,OAAV,GAAoBlB,CAAC,GAAIG,QAAQ,CAACG,KAAT,GAAiBW,KAAK,CAACjB,CAAxB,GAA6B,CAAjC,GAAqC,CAAC,CAAtC,GAA0C,CAA9D;AACD;;AAEDE,IAAAA,GAAG,CAACgB,OAAJ,CAAYC,QAAZ,CAAqBC,GAArB,CAAyBC,aAAa,CAACR,CAAD,EAAIE,SAAS,CAACG,OAAd,CAAtC;AAEAJ,IAAAA,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ;AACD,GAXO,CAAR;AAaA,sBACE;AAAM,IAAA,GAAG,EAAEX,GAAX;AAAgB,IAAA,QAAQ,EAAE,CAACF,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAA1B;AAAqC,IAAA,QAAQ,EAAEW,QAA/C;AAAA,2BACE;AAAmB,MAAA,GAAG,EAAER;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArCwB;AAAA,UAEFN,QAFE,EAIPR,UAJO;AAAA,GAAlB;MAAMS,K","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport image from \"./test.jpg\";\nimport { useThree } from \"@react-three/fiber\";\n\nexport const Photo = memo(({ x, y }) => {\n  const ref = useRef(null);\n  const { viewport } = useThree();\n\n  const texture = useTexture(image);\n\n  // Calculer les dimensions du plan en fonction de la taille de l'image\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n  const planeHeight = planeWidth / aspectRatio;\n\n  // Utiliser PlaneGeometry avec les dimensions calculées\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n\n  const [t, setT] = useState(0);\n  const direction = useRef();\n\n  useFrame(({ mouse }) => {\n    if (!ref.current) {\n      return;\n    }\n    if (!direction.current) {\n      direction.current = x > (viewport.width * mouse.x) / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n\n    setT(t + 1);\n  });\n\n  return (\n    <mesh ref={ref} position={[x, y, 0]} geometry={geometry}>\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}