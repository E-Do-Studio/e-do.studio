{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nvar TOUCH_RADIUS = 0.01;\nvar POINTING_JOINT = \"index-finger-tip\";\n\nvar OculusHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(OculusHandModel, _Object3D);\n\n  var _super = _createSuper(OculusHandModel);\n\n  function OculusHandModel(controller, leftModelPath, rightModelPath) {\n    var _this;\n\n    _classCallCheck(this, OculusHandModel);\n\n    _this = _super.call(this);\n\n    __publicField(_assertThisInitialized(_this), \"controller\");\n\n    __publicField(_assertThisInitialized(_this), \"motionController\");\n\n    __publicField(_assertThisInitialized(_this), \"envMap\");\n\n    __publicField(_assertThisInitialized(_this), \"mesh\");\n\n    __publicField(_assertThisInitialized(_this), \"xrInputSource\");\n\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    _this.xrInputSource = null;\n    controller.addEventListener(\"connected\", function (event) {\n      var xrInputSource = event.data;\n\n      if (xrInputSource.hand && !_this.motionController) {\n        _this.xrInputSource = xrInputSource;\n        _this.motionController = new XRHandMeshModel(_assertThisInitialized(_this), controller, void 0, xrInputSource.handedness, xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener(\"disconnected\", function () {\n      _this.dispose();\n    });\n    return _this;\n  }\n\n  _createClass(OculusHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(OculusHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition() {\n      var indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n      if (indexFingerTip) {\n        return indexFingerTip.position;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"intersectBoxObject\",\n    value: function intersectBoxObject(boxObject) {\n      var pointerPosition = this.getPointerPosition();\n\n      if (pointerPosition) {\n        var indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n        var box = new Box3().setFromObject(boxObject);\n        return indexSphere.intersectsBox(box);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(button) {\n      if (this.intersectBoxObject(button)) {\n        button.onPress();\n      } else {\n        button.onClear();\n      }\n\n      if (button.isPressed()) {\n        button.whilePressed();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clear();\n      this.motionController = null;\n    }\n  }]);\n\n  return OculusHandModel;\n}(Object3D);\n\nexport { OculusHandModel };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/webxr/OculusHandModel.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","controller","leftModelPath","rightModelPath","motionController","envMap","mesh","xrInputSource","addEventListener","event","data","hand","handedness","dispose","force","updateMesh","indexFingerTip","joints","position","boxObject","pointerPosition","getPointerPosition","indexSphere","box","setFromObject","intersectsBox","button","intersectBoxObject","onPress","onClear","isPressed","whilePressed","clear"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = \"index-finger-tip\";\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n    __publicField(this, \"controller\");\n    __publicField(this, \"motionController\");\n    __publicField(this, \"envMap\");\n    __publicField(this, \"mesh\");\n    __publicField(this, \"xrInputSource\");\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener(\"connected\", (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(\n          this,\n          controller,\n          void 0,\n          xrInputSource.handedness,\n          xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath\n        );\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n      this.dispose();\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n}\nexport {\n  OculusHandModel\n};\n"]},"metadata":{},"sourceType":"module"}