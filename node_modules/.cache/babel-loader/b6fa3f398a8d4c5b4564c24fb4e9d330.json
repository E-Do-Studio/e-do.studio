{"ast":null,"code":"import { Object3D, TextureLoader, UVMapping, Box3, MathUtils, MeshLambertMaterial } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\n\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n\n    this.onLoadComplete = function () {};\n\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  }\n\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  }\n\n  shareParts(original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon;\n\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh);\n\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  }\n\n  loadParts(config) {\n    const scope = this;\n\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n      }\n\n      return textures;\n    }\n\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0) scope.onLoadComplete();\n    }\n\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n\n      const mesh = scope._createPart(geo, scope.skinsBody[0]);\n\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    });\n\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n\n  setPlaybackRate(rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  }\n\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  }\n\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n\n    const activeWeapon = this.weapons[index];\n\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  }\n\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName) return;\n\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  }\n\n  update(delta) {\n    if (this.controls) this.updateMovementModel(delta);\n\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  }\n\n  updateAnimations(delta) {\n    let mix = 1;\n\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  }\n\n  updateBehaviors() {\n    const controls = this.controls;\n    const animations = this.animations;\n    let moveAnimation, idleAnimation;\n\n    if (controls.crouch) {\n      moveAnimation = animations[\"crouchMove\"];\n      idleAnimation = animations[\"crouchIdle\"];\n    } else {\n      moveAnimation = animations[\"move\"];\n      idleAnimation = animations[\"idle\"];\n    }\n\n    if (controls.jump) {\n      moveAnimation = animations[\"jump\"];\n      idleAnimation = animations[\"jump\"];\n    }\n\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchAttack\"];\n        idleAnimation = animations[\"crouchAttack\"];\n      } else {\n        moveAnimation = animations[\"attack\"];\n        idleAnimation = animations[\"attack\"];\n      }\n    }\n\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    }\n\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  }\n\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n    }\n\n    const controls = this.controls;\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward) this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    if (controls.moveBackward) this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    const dir = 1;\n\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    }\n\n    const forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n    this.root.rotation.y = this.bodyOrientation;\n  } // internal\n\n\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 16755200,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const materialTexture = new MeshLambertMaterial({\n      color: 16777215,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2;\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe;\n    mesh.autoCreateAnimations(this.animationFPS);\n    return mesh;\n  }\n\n}\n\nexport { MD2CharacterComplex };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/misc/MD2CharacterComplex.js"],"names":["Object3D","TextureLoader","UVMapping","Box3","MathUtils","MeshLambertMaterial","MD2Loader","MorphBlendMesh","MD2CharacterComplex","constructor","scale","animationFPS","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDecceleration","angularSpeed","root","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","onLoadComplete","meshes","animations","loadCounter","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","shareParts","original","mesh","_createPart","geometry","set","position","y","add","push","name","loadParts","config","scope","loadTextures","baseUrl","textureUrls","textureLoader","textures","load","checkLoadingComplete","mapping","colorSpace","encoding","skins","weaponsTextures","loader","body","geo","boundingBox","setFromBufferAttribute","attributes","min","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","materialWireframe","materialTexture","setSkin","wireframe","map","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","Math","abs","setAnimationDirectionForward","setAnimationDirectionBackward","exponentialEaseOut","k","pow","clamp","dir","forwardDelta","x","sin","z","cos","rotation","skinMap","color","morphTargets","morphNormals","PI","autoCreateAnimations"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,aAAnB,EAAkCC,SAAlC,EAA6CC,IAA7C,EAAmDC,SAAnD,EAA8DC,mBAA9D,QAAyF,OAAzF;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,cAAT,QAA+B,qBAA/B;;AACA,MAAMC,mBAAN,CAA0B;AACxBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,QAAL,GAAgB,GAAhB;AACA,SAAKC,eAAL,GAAuB,CAAC,GAAxB;AACA,SAAKC,iBAAL,GAAyB,GAAzB;AACA,SAAKC,gBAAL,GAAwB,GAAxB;AACA,SAAKC,kBAAL,GAA0B,GAA1B;AACA,SAAKC,YAAL,GAAoB,GAApB;AACA,SAAKC,IAAL,GAAY,IAAInB,QAAJ,EAAZ;AACA,SAAKoB,QAAL,GAAgB,IAAhB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,WAAL,GAAmB,KAAK,CAAxB;;AACA,SAAKC,cAAL,GAAsB,YAAW,CAChC,CADD;;AAEA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,SAAL,GAAiB,KAAKpB,QAAtB;AACA,SAAKqB,WAAL,GAAmB,KAAKrB,QAAL,GAAgB,GAAnC;AACA,SAAKsB,eAAL,GAAuB,IAAvB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;AACDC,EAAAA,aAAa,CAACC,MAAD,EAAS;AACpB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,MAAL,CAAYY,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,WAAKX,MAAL,CAAYW,CAAZ,EAAeE,UAAf,GAA4BH,MAA5B;AACA,WAAKV,MAAL,CAAYW,CAAZ,EAAeG,aAAf,GAA+BJ,MAA/B;AACD;AACF;;AACDK,EAAAA,UAAU,CAACL,MAAD,EAAS;AACjB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,MAAL,CAAYY,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,WAAKX,MAAL,CAAYW,CAAZ,EAAeK,OAAf,GAAyBN,MAAzB;AACA,WAAKV,MAAL,CAAYW,CAAZ,EAAeK,OAAf,GAAyBN,MAAzB;AACD;AACF;;AACDO,EAAAA,UAAU,CAACC,QAAD,EAAW;AACnB,SAAKjB,UAAL,GAAkBiB,QAAQ,CAACjB,UAA3B;AACA,SAAKI,SAAL,GAAiBa,QAAQ,CAACb,SAA1B;AACA,SAAKC,WAAL,GAAmBY,QAAQ,CAACZ,WAA5B;AACA,SAAKX,SAAL,GAAiBuB,QAAQ,CAACvB,SAA1B;AACA,SAAKC,WAAL,GAAmBsB,QAAQ,CAACtB,WAA5B;;AACA,UAAMuB,IAAI,GAAG,KAAKC,WAAL,CAAiBF,QAAQ,CAAC1B,QAAT,CAAkB6B,QAAnC,EAA6C,KAAK1B,SAAL,CAAe,CAAf,CAA7C,CAAb;;AACAwB,IAAAA,IAAI,CAACrC,KAAL,CAAWwC,GAAX,CAAe,KAAKxC,KAApB,EAA2B,KAAKA,KAAhC,EAAuC,KAAKA,KAA5C;AACA,SAAKS,IAAL,CAAUgC,QAAV,CAAmBC,CAAnB,GAAuBN,QAAQ,CAAC3B,IAAT,CAAcgC,QAAd,CAAuBC,CAA9C;AACA,SAAKjC,IAAL,CAAUkC,GAAV,CAAcN,IAAd;AACA,SAAK3B,QAAL,GAAgB2B,IAAhB;AACA,SAAKnB,MAAL,CAAY0B,IAAZ,CAAiBP,IAAjB;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,QAAQ,CAACrB,OAAT,CAAiBe,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,YAAMlB,UAAU,GAAG,KAAK2B,WAAL,CAAiBF,QAAQ,CAACrB,OAAT,CAAiBc,CAAjB,EAAoBU,QAArC,EAA+C,KAAKzB,WAAL,CAAiBe,CAAjB,CAA/C,CAAnB;;AACAlB,MAAAA,UAAU,CAACX,KAAX,CAAiBwC,GAAjB,CAAqB,KAAKxC,KAA1B,EAAiC,KAAKA,KAAtC,EAA6C,KAAKA,KAAlD;AACAW,MAAAA,UAAU,CAACuB,OAAX,GAAqB,KAArB;AACAvB,MAAAA,UAAU,CAACkC,IAAX,GAAkBT,QAAQ,CAACrB,OAAT,CAAiBc,CAAjB,EAAoBgB,IAAtC;AACA,WAAKpC,IAAL,CAAUkC,GAAV,CAAchC,UAAd;AACA,WAAKI,OAAL,CAAac,CAAb,IAAkBlB,UAAlB;AACA,WAAKA,UAAL,GAAkBA,UAAlB;AACA,WAAKO,MAAL,CAAY0B,IAAZ,CAAiBjC,UAAjB;AACD;AACF;;AACDmC,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,UAAMC,KAAK,GAAG,IAAd;;AACA,aAASC,YAAT,CAAsBC,OAAtB,EAA+BC,WAA/B,EAA4C;AAC1C,YAAMC,aAAa,GAAG,IAAI7D,aAAJ,EAAtB;AACA,YAAM8D,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,WAAW,CAACrB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CwB,QAAAA,QAAQ,CAACxB,CAAD,CAAR,GAAcuB,aAAa,CAACE,IAAd,CAAmBJ,OAAO,GAAGC,WAAW,CAACtB,CAAD,CAAxC,EAA6C0B,oBAA7C,CAAd;AACAF,QAAAA,QAAQ,CAACxB,CAAD,CAAR,CAAY2B,OAAZ,GAAsBhE,SAAtB;AACA6D,QAAAA,QAAQ,CAACxB,CAAD,CAAR,CAAYgB,IAAZ,GAAmBM,WAAW,CAACtB,CAAD,CAA9B;AACA,YAAI,gBAAgBwB,QAAQ,CAACxB,CAAD,CAA5B,EACEwB,QAAQ,CAACxB,CAAD,CAAR,CAAY4B,UAAZ,GAAyB,MAAzB,CADF,KAGEJ,QAAQ,CAACxB,CAAD,CAAR,CAAY6B,QAAZ,GAAuB,IAAvB;AACH;;AACD,aAAOL,QAAP;AACD;;AACD,aAASE,oBAAT,GAAgC;AAC9BP,MAAAA,KAAK,CAAC5B,WAAN,IAAqB,CAArB;AACA,UAAI4B,KAAK,CAAC5B,WAAN,KAAsB,CAA1B,EACE4B,KAAK,CAAC/B,cAAN;AACH;;AACD,SAAKE,UAAL,GAAkB4B,MAAM,CAAC5B,UAAzB;AACA,SAAKI,SAAL,GAAiBwB,MAAM,CAACxB,SAAxB;AACA,SAAKC,WAAL,GAAmBuB,MAAM,CAACvB,WAA1B;AACA,SAAKJ,WAAL,GAAmB2B,MAAM,CAAChC,OAAP,CAAee,MAAf,GAAwB,CAAxB,GAA4BiB,MAAM,CAACY,KAAP,CAAa7B,MAAzC,GAAkD,CAArE;AACA,UAAM8B,eAAe,GAAG,EAAxB;;AACA,SAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,MAAM,CAAChC,OAAP,CAAee,MAAnC,EAA2CD,CAAC,EAA5C,EACE+B,eAAe,CAAC/B,CAAD,CAAf,GAAqBkB,MAAM,CAAChC,OAAP,CAAec,CAAf,EAAkB,CAAlB,CAArB;;AACF,SAAKhB,SAAL,GAAiBoC,YAAY,CAACF,MAAM,CAACG,OAAP,GAAiB,QAAlB,EAA4BH,MAAM,CAACY,KAAnC,CAA7B;AACA,SAAK7C,WAAL,GAAmBmC,YAAY,CAACF,MAAM,CAACG,OAAP,GAAiB,QAAlB,EAA4BU,eAA5B,CAA/B;AACA,UAAMC,MAAM,GAAG,IAAIjE,SAAJ,EAAf;AACAiE,IAAAA,MAAM,CAACP,IAAP,CAAYP,MAAM,CAACG,OAAP,GAAiBH,MAAM,CAACe,IAApC,EAA0C,UAASC,GAAT,EAAc;AACtD,YAAMC,WAAW,GAAG,IAAIvE,IAAJ,EAApB;AACAuE,MAAAA,WAAW,CAACC,sBAAZ,CAAmCF,GAAG,CAACG,UAAJ,CAAezB,QAAlD;AACAO,MAAAA,KAAK,CAACvC,IAAN,CAAWgC,QAAX,CAAoBC,CAApB,GAAwB,CAACM,KAAK,CAAChD,KAAP,GAAegE,WAAW,CAACG,GAAZ,CAAgBzB,CAAvD;;AACA,YAAML,IAAI,GAAGW,KAAK,CAACV,WAAN,CAAkByB,GAAlB,EAAuBf,KAAK,CAACnC,SAAN,CAAgB,CAAhB,CAAvB,CAAb;;AACAwB,MAAAA,IAAI,CAACrC,KAAL,CAAWwC,GAAX,CAAeQ,KAAK,CAAChD,KAArB,EAA4BgD,KAAK,CAAChD,KAAlC,EAAyCgD,KAAK,CAAChD,KAA/C;AACAgD,MAAAA,KAAK,CAACvC,IAAN,CAAWkC,GAAX,CAAeN,IAAf;AACAW,MAAAA,KAAK,CAACtC,QAAN,GAAiB2B,IAAjB;AACAW,MAAAA,KAAK,CAAC9B,MAAN,CAAa0B,IAAb,CAAkBP,IAAlB;AACAkB,MAAAA,oBAAoB;AACrB,KAVD;;AAWA,UAAMa,gBAAgB,GAAG,UAASC,KAAT,EAAgBxB,IAAhB,EAAsB;AAC7C,aAAO,UAASkB,GAAT,EAAc;AACnB,cAAM1B,IAAI,GAAGW,KAAK,CAACV,WAAN,CAAkByB,GAAlB,EAAuBf,KAAK,CAAClC,WAAN,CAAkBuD,KAAlB,CAAvB,CAAb;;AACAhC,QAAAA,IAAI,CAACrC,KAAL,CAAWwC,GAAX,CAAeQ,KAAK,CAAChD,KAArB,EAA4BgD,KAAK,CAAChD,KAAlC,EAAyCgD,KAAK,CAAChD,KAA/C;AACAqC,QAAAA,IAAI,CAACH,OAAL,GAAe,KAAf;AACAG,QAAAA,IAAI,CAACQ,IAAL,GAAYA,IAAZ;AACAG,QAAAA,KAAK,CAACvC,IAAN,CAAWkC,GAAX,CAAeN,IAAf;AACAW,QAAAA,KAAK,CAACjC,OAAN,CAAcsD,KAAd,IAAuBhC,IAAvB;AACAW,QAAAA,KAAK,CAACrC,UAAN,GAAmB0B,IAAnB;AACAW,QAAAA,KAAK,CAAC9B,MAAN,CAAa0B,IAAb,CAAkBP,IAAlB;AACAkB,QAAAA,oBAAoB;AACrB,OAVD;AAWD,KAZD;;AAaA,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,MAAM,CAAChC,OAAP,CAAee,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9CgC,MAAAA,MAAM,CAACP,IAAP,CAAYP,MAAM,CAACG,OAAP,GAAiBH,MAAM,CAAChC,OAAP,CAAec,CAAf,EAAkB,CAAlB,CAA7B,EAAmDuC,gBAAgB,CAACvC,CAAD,EAAIkB,MAAM,CAAChC,OAAP,CAAec,CAAf,EAAkB,CAAlB,CAAJ,CAAnE;AACD;AACF;;AACDyC,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB,QAAI,KAAK7D,QAAT,EACE,KAAKA,QAAL,CAAc8D,QAAd,GAAyB,KAAK9D,QAAL,CAAc+D,YAAd,GAA6BF,IAAtD;AACF,QAAI,KAAK5D,UAAT,EACE,KAAKA,UAAL,CAAgB6D,QAAhB,GAA2B,KAAK7D,UAAL,CAAgB8D,YAAhB,GAA+BF,IAA1D;AACH;;AACDG,EAAAA,YAAY,CAACC,gBAAD,EAAmB;AAC7B,QAAIA,gBAAJ,EAAsB;AACpB,UAAI,KAAKjE,QAAT,EACE,KAAKA,QAAL,CAAckE,QAAd,GAAyB,KAAKlE,QAAL,CAAcmE,iBAAvC;AACF,UAAI,KAAKlE,UAAT,EACE,KAAKA,UAAL,CAAgBiE,QAAhB,GAA2B,KAAKjE,UAAL,CAAgBkE,iBAA3C;AACH,KALD,MAKO;AACL,UAAI,KAAKnE,QAAT,EACE,KAAKA,QAAL,CAAckE,QAAd,GAAyB,KAAKlE,QAAL,CAAcoE,eAAvC;AACF,UAAI,KAAKnE,UAAT,EACE,KAAKA,UAAL,CAAgBiE,QAAhB,GAA2B,KAAKjE,UAAL,CAAgBmE,eAA3C;AACH;AACF;;AACDC,EAAAA,OAAO,CAACV,KAAD,EAAQ;AACb,QAAI,KAAK3D,QAAL,IAAiB,KAAKA,QAAL,CAAckE,QAAd,CAAuBI,SAAvB,KAAqC,KAA1D,EAAiE;AAC/D,WAAKtE,QAAL,CAAckE,QAAd,CAAuBK,GAAvB,GAA6B,KAAKpE,SAAL,CAAewD,KAAf,CAA7B;AACA,WAAKrD,WAAL,GAAmBqD,KAAnB;AACD;AACF;;AACDa,EAAAA,SAAS,CAACb,KAAD,EAAQ;AACf,SAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,OAAL,CAAae,MAAjC,EAAyCD,CAAC,EAA1C,EACE,KAAKd,OAAL,CAAac,CAAb,EAAgBK,OAAhB,GAA0B,KAA1B;;AACF,UAAMiD,YAAY,GAAG,KAAKpE,OAAL,CAAasD,KAAb,CAArB;;AACA,QAAIc,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACjD,OAAb,GAAuB,IAAvB;AACA,WAAKvB,UAAL,GAAkBwE,YAAlB;;AACA,UAAI,KAAK1D,eAAT,EAA0B;AACxB0D,QAAAA,YAAY,CAACC,aAAb,CAA2B,KAAK3D,eAAhC;AACA,aAAKd,UAAL,CAAgB0E,gBAAhB,CAAiC,KAAK5D,eAAtC,EAAuD,KAAKf,QAAL,CAAc4E,gBAAd,CAA+B,KAAK7D,eAApC,CAAvD;AACD;AACF;AACF;;AACD8D,EAAAA,YAAY,CAACC,aAAD,EAAgB;AAC1B,QAAIA,aAAa,KAAK,KAAK/D,eAAvB,IAA0C,CAAC+D,aAA/C,EACE;;AACF,QAAI,KAAK9E,QAAT,EAAmB;AACjB,WAAKA,QAAL,CAAc+E,kBAAd,CAAiCD,aAAjC,EAAgD,CAAhD;AACA,WAAK9E,QAAL,CAAc0E,aAAd,CAA4BI,aAA5B;AACA,WAAK9D,YAAL,GAAoB,KAAKD,eAAzB;AACA,WAAKA,eAAL,GAAuB+D,aAAvB;AACA,WAAKE,YAAL,GAAoB,KAAKxF,gBAAzB;AACD;;AACD,QAAI,KAAKS,UAAT,EAAqB;AACnB,WAAKA,UAAL,CAAgB8E,kBAAhB,CAAmCD,aAAnC,EAAkD,CAAlD;AACA,WAAK7E,UAAL,CAAgByE,aAAhB,CAA8BI,aAA9B;AACD;AACF;;AACDG,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACZ,QAAI,KAAKhF,QAAT,EACE,KAAKiF,mBAAL,CAAyBD,KAAzB;;AACF,QAAI,KAAKzE,UAAT,EAAqB;AACnB,WAAK2E,eAAL;AACA,WAAKC,gBAAL,CAAsBH,KAAtB;AACD;AACF;;AACDG,EAAAA,gBAAgB,CAACH,KAAD,EAAQ;AACtB,QAAII,GAAG,GAAG,CAAV;;AACA,QAAI,KAAKN,YAAL,GAAoB,CAAxB,EAA2B;AACzBM,MAAAA,GAAG,GAAG,CAAC,KAAK9F,gBAAL,GAAwB,KAAKwF,YAA9B,IAA8C,KAAKxF,gBAAzD;AACA,WAAKwF,YAAL,IAAqB,CAArB;AACD;;AACD,QAAI,KAAKhF,QAAT,EAAmB;AACjB,WAAKA,QAAL,CAAciF,MAAd,CAAqBC,KAArB;AACA,WAAKlF,QAAL,CAAc+E,kBAAd,CAAiC,KAAKhE,eAAtC,EAAuDuE,GAAvD;AACA,WAAKtF,QAAL,CAAc+E,kBAAd,CAAiC,KAAK/D,YAAtC,EAAoD,IAAIsE,GAAxD;AACD;;AACD,QAAI,KAAKrF,UAAT,EAAqB;AACnB,WAAKA,UAAL,CAAgBgF,MAAhB,CAAuBC,KAAvB;AACA,WAAKjF,UAAL,CAAgB8E,kBAAhB,CAAmC,KAAKhE,eAAxC,EAAyDuE,GAAzD;AACA,WAAKrF,UAAL,CAAgB8E,kBAAhB,CAAmC,KAAK/D,YAAxC,EAAsD,IAAIsE,GAA1D;AACD;AACF;;AACDF,EAAAA,eAAe,GAAG;AAChB,UAAMlF,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMO,UAAU,GAAG,KAAKA,UAAxB;AACA,QAAI8E,aAAJ,EAAmBC,aAAnB;;AACA,QAAItF,QAAQ,CAACuF,MAAb,EAAqB;AACnBF,MAAAA,aAAa,GAAG9E,UAAU,CAAC,YAAD,CAA1B;AACA+E,MAAAA,aAAa,GAAG/E,UAAU,CAAC,YAAD,CAA1B;AACD,KAHD,MAGO;AACL8E,MAAAA,aAAa,GAAG9E,UAAU,CAAC,MAAD,CAA1B;AACA+E,MAAAA,aAAa,GAAG/E,UAAU,CAAC,MAAD,CAA1B;AACD;;AACD,QAAIP,QAAQ,CAACwF,IAAb,EAAmB;AACjBH,MAAAA,aAAa,GAAG9E,UAAU,CAAC,MAAD,CAA1B;AACA+E,MAAAA,aAAa,GAAG/E,UAAU,CAAC,MAAD,CAA1B;AACD;;AACD,QAAIP,QAAQ,CAACyF,MAAb,EAAqB;AACnB,UAAIzF,QAAQ,CAACuF,MAAb,EAAqB;AACnBF,QAAAA,aAAa,GAAG9E,UAAU,CAAC,cAAD,CAA1B;AACA+E,QAAAA,aAAa,GAAG/E,UAAU,CAAC,cAAD,CAA1B;AACD,OAHD,MAGO;AACL8E,QAAAA,aAAa,GAAG9E,UAAU,CAAC,QAAD,CAA1B;AACA+E,QAAAA,aAAa,GAAG/E,UAAU,CAAC,QAAD,CAA1B;AACD;AACF;;AACD,QAAIP,QAAQ,CAAC0F,WAAT,IAAwB1F,QAAQ,CAAC2F,YAAjC,IAAiD3F,QAAQ,CAAC4F,QAA1D,IAAsE5F,QAAQ,CAAC6F,SAAnF,EAA8F;AAC5F,UAAI,KAAKhF,eAAL,KAAyBwE,aAA7B,EAA4C;AAC1C,aAAKV,YAAL,CAAkBU,aAAlB;AACD;AACF;;AACD,QAAIS,IAAI,CAACC,GAAL,CAAS,KAAKtF,KAAd,IAAuB,MAAM,KAAKlB,QAAlC,IAA8C,EAAES,QAAQ,CAAC4F,QAAT,IAAqB5F,QAAQ,CAAC6F,SAA9B,IAA2C7F,QAAQ,CAAC0F,WAApD,IAAmE1F,QAAQ,CAAC2F,YAA9E,CAAlD,EAA+I;AAC7I,UAAI,KAAK9E,eAAL,KAAyByE,aAA7B,EAA4C;AAC1C,aAAKX,YAAL,CAAkBW,aAAlB;AACD;AACF;;AACD,QAAItF,QAAQ,CAAC0F,WAAb,EAA0B;AACxB,UAAI,KAAK5F,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAckG,4BAAd,CAA2C,KAAKnF,eAAhD;AACA,aAAKf,QAAL,CAAckG,4BAAd,CAA2C,KAAKlF,YAAhD;AACD;;AACD,UAAI,KAAKf,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgBiG,4BAAhB,CAA6C,KAAKnF,eAAlD;AACA,aAAKd,UAAL,CAAgBiG,4BAAhB,CAA6C,KAAKlF,YAAlD;AACD;AACF;;AACD,QAAId,QAAQ,CAAC2F,YAAb,EAA2B;AACzB,UAAI,KAAK7F,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcmG,6BAAd,CAA4C,KAAKpF,eAAjD;AACA,aAAKf,QAAL,CAAcmG,6BAAd,CAA4C,KAAKnF,YAAjD;AACD;;AACD,UAAI,KAAKf,UAAT,EAAqB;AACnB,aAAKA,UAAL,CAAgBkG,6BAAhB,CAA8C,KAAKpF,eAAnD;AACA,aAAKd,UAAL,CAAgBkG,6BAAhB,CAA8C,KAAKnF,YAAnD;AACD;AACF;AACF;;AACDmE,EAAAA,mBAAmB,CAACD,KAAD,EAAQ;AACzB,aAASkB,kBAAT,CAA4BC,CAA5B,EAA+B;AAC7B,aAAOA,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAACL,IAAI,CAACM,GAAL,CAAS,CAAT,EAAY,CAAC,EAAD,GAAMD,CAAlB,CAAD,GAAwB,CAA7C;AACD;;AACD,UAAMnG,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAIA,QAAQ,CAACuF,MAAb,EACE,KAAKhG,QAAL,GAAgB,KAAKqB,WAArB,CADF,KAGE,KAAKrB,QAAL,GAAgB,KAAKoB,SAArB;AACF,SAAKnB,eAAL,GAAuB,CAAC,KAAKD,QAA7B;AACA,QAAIS,QAAQ,CAAC0F,WAAb,EACE,KAAKjF,KAAL,GAAa3B,SAAS,CAACuH,KAAV,CAAgB,KAAK5F,KAAL,GAAauE,KAAK,GAAG,KAAKvF,iBAA1C,EAA6D,KAAKD,eAAlE,EAAmF,KAAKD,QAAxF,CAAb;AACF,QAAIS,QAAQ,CAAC2F,YAAb,EACE,KAAKlF,KAAL,GAAa3B,SAAS,CAACuH,KAAV,CAAgB,KAAK5F,KAAL,GAAauE,KAAK,GAAG,KAAKtF,gBAA1C,EAA4D,KAAKF,eAAjE,EAAkF,KAAKD,QAAvF,CAAb;AACF,UAAM+G,GAAG,GAAG,CAAZ;;AACA,QAAItG,QAAQ,CAAC4F,QAAb,EAAuB;AACrB,WAAKlF,eAAL,IAAwBsE,KAAK,GAAG,KAAKpF,YAArC;AACA,WAAKa,KAAL,GAAa3B,SAAS,CAACuH,KAAV,CACX,KAAK5F,KAAL,GAAa6F,GAAG,GAAGtB,KAAN,GAAc,KAAKvF,iBADrB,EAEX,KAAKD,eAFM,EAGX,KAAKD,QAHM,CAAb;AAKD;;AACD,QAAIS,QAAQ,CAAC6F,SAAb,EAAwB;AACtB,WAAKnF,eAAL,IAAwBsE,KAAK,GAAG,KAAKpF,YAArC;AACA,WAAKa,KAAL,GAAa3B,SAAS,CAACuH,KAAV,CACX,KAAK5F,KAAL,GAAa6F,GAAG,GAAGtB,KAAN,GAAc,KAAKvF,iBADrB,EAEX,KAAKD,eAFM,EAGX,KAAKD,QAHM,CAAb;AAKD;;AACD,QAAI,EAAES,QAAQ,CAAC0F,WAAT,IAAwB1F,QAAQ,CAAC2F,YAAnC,CAAJ,EAAsD;AACpD,UAAI,KAAKlF,KAAL,GAAa,CAAjB,EAAoB;AAClB,cAAM0F,CAAC,GAAGD,kBAAkB,CAAC,KAAKzF,KAAL,GAAa,KAAKlB,QAAnB,CAA5B;AACA,aAAKkB,KAAL,GAAa3B,SAAS,CAACuH,KAAV,CAAgB,KAAK5F,KAAL,GAAa0F,CAAC,GAAGnB,KAAJ,GAAY,KAAKrF,kBAA9C,EAAkE,CAAlE,EAAqE,KAAKJ,QAA1E,CAAb;AACD,OAHD,MAGO;AACL,cAAM4G,CAAC,GAAGD,kBAAkB,CAAC,KAAKzF,KAAL,GAAa,KAAKjB,eAAnB,CAA5B;AACA,aAAKiB,KAAL,GAAa3B,SAAS,CAACuH,KAAV,CAAgB,KAAK5F,KAAL,GAAa0F,CAAC,GAAGnB,KAAJ,GAAY,KAAKtF,gBAA9C,EAAgE,KAAKF,eAArE,EAAsF,CAAtF,CAAb;AACD;AACF;;AACD,UAAM+G,YAAY,GAAG,KAAK9F,KAAL,GAAauE,KAAlC;AACA,SAAKnF,IAAL,CAAUgC,QAAV,CAAmB2E,CAAnB,IAAwBV,IAAI,CAACW,GAAL,CAAS,KAAK/F,eAAd,IAAiC6F,YAAzD;AACA,SAAK1G,IAAL,CAAUgC,QAAV,CAAmB6E,CAAnB,IAAwBZ,IAAI,CAACa,GAAL,CAAS,KAAKjG,eAAd,IAAiC6F,YAAzD;AACA,SAAK1G,IAAL,CAAU+G,QAAV,CAAmB9E,CAAnB,GAAuB,KAAKpB,eAA5B;AACD,GA9SuB,CA+SxB;;;AACAgB,EAAAA,WAAW,CAACC,QAAD,EAAWkF,OAAX,EAAoB;AAC7B,UAAM5C,iBAAiB,GAAG,IAAIlF,mBAAJ,CAAwB;AAChD+H,MAAAA,KAAK,EAAE,QADyC;AAEhD1C,MAAAA,SAAS,EAAE,IAFqC;AAGhD2C,MAAAA,YAAY,EAAE,IAHkC;AAIhDC,MAAAA,YAAY,EAAE;AAJkC,KAAxB,CAA1B;AAMA,UAAM9C,eAAe,GAAG,IAAInF,mBAAJ,CAAwB;AAC9C+H,MAAAA,KAAK,EAAE,QADuC;AAE9C1C,MAAAA,SAAS,EAAE,KAFmC;AAG9CC,MAAAA,GAAG,EAAEwC,OAHyC;AAI9CE,MAAAA,YAAY,EAAE,IAJgC;AAK9CC,MAAAA,YAAY,EAAE;AALgC,KAAxB,CAAxB;AAOA,UAAMvF,IAAI,GAAG,IAAIxC,cAAJ,CAAmB0C,QAAnB,EAA6BuC,eAA7B,CAAb;AACAzC,IAAAA,IAAI,CAACmF,QAAL,CAAc9E,CAAd,GAAkB,CAACgE,IAAI,CAACmB,EAAN,GAAW,CAA7B;AACAxF,IAAAA,IAAI,CAACyC,eAAL,GAAuBA,eAAvB;AACAzC,IAAAA,IAAI,CAACwC,iBAAL,GAAyBA,iBAAzB;AACAxC,IAAAA,IAAI,CAACyF,oBAAL,CAA0B,KAAK7H,YAA/B;AACA,WAAOoC,IAAP;AACD;;AApUuB;;AAsU1B,SACEvC,mBADF","sourcesContent":["import { Object3D, TextureLoader, UVMapping, Box3, MathUtils, MeshLambertMaterial } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n    this.onLoadComplete = function() {\n    };\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  }\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  }\n  shareParts(original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon;\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh);\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  }\n  loadParts(config) {\n    const scope = this;\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i])\n          textures[i].colorSpace = \"srgb\";\n        else\n          textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0)\n        scope.onLoadComplete();\n    }\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++)\n      weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function(geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = scope._createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function(index, name) {\n      return function(geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (this.meshBody)\n      this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon)\n      this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++)\n      this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  }\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName)\n      return;\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  }\n  update(delta) {\n    if (this.controls)\n      this.updateMovementModel(delta);\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  }\n  updateAnimations(delta) {\n    let mix = 1;\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  }\n  updateBehaviors() {\n    const controls = this.controls;\n    const animations = this.animations;\n    let moveAnimation, idleAnimation;\n    if (controls.crouch) {\n      moveAnimation = animations[\"crouchMove\"];\n      idleAnimation = animations[\"crouchIdle\"];\n    } else {\n      moveAnimation = animations[\"move\"];\n      idleAnimation = animations[\"idle\"];\n    }\n    if (controls.jump) {\n      moveAnimation = animations[\"jump\"];\n      idleAnimation = animations[\"jump\"];\n    }\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchAttack\"];\n        idleAnimation = animations[\"crouchAttack\"];\n      } else {\n        moveAnimation = animations[\"attack\"];\n        idleAnimation = animations[\"attack\"];\n      }\n    }\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    }\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  }\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n    }\n    const controls = this.controls;\n    if (controls.crouch)\n      this.maxSpeed = this.crouchSpeed;\n    else\n      this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward)\n      this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    if (controls.moveBackward)\n      this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    const dir = 1;\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed\n      );\n    }\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed\n      );\n    }\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    }\n    const forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n    this.root.rotation.y = this.bodyOrientation;\n  }\n  // internal\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 16755200,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const materialTexture = new MeshLambertMaterial({\n      color: 16777215,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2;\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe;\n    mesh.autoCreateAnimations(this.animationFPS);\n    return mesh;\n  }\n}\nexport {\n  MD2CharacterComplex\n};\n"]},"metadata":{},"sourceType":"module"}