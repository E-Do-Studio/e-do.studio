{"ast":null,"code":"import { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\n\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super();\n    this.type = \"ParametricGeometry\";\n    this.parameters = {\n      func,\n      slices,\n      stacks\n    };\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 1e-5;\n    const normal = new Vector3();\n    const p0 = new Vector3(),\n          p1 = new Vector3();\n    const pu = new Vector3(),\n          pv = new Vector3();\n    const sliceCount = slices + 1;\n\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices;\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u, v);\n      }\n    }\n\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    this.setIndex(indices);\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n\n}\n\nexport { ParametricGeometry };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/geometries/ParametricGeometry.js"],"names":["BufferGeometry","Vector3","Float32BufferAttribute","ParametricGeometry","constructor","func","u","v","target","set","Math","cos","sin","slices","stacks","type","parameters","indices","vertices","normals","uvs","EPS","normal","p0","p1","pu","pv","sliceCount","i","j","push","x","y","z","subVectors","crossVectors","normalize","a","b","c","d","setIndex","setAttribute"],"mappings":"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","sourcesContent":["import { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super();\n    this.type = \"ParametricGeometry\";\n    this.parameters = {\n      func,\n      slices,\n      stacks\n    };\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 1e-5;\n    const normal = new Vector3();\n    const p0 = new Vector3(), p1 = new Vector3();\n    const pu = new Vector3(), pv = new Vector3();\n    const sliceCount = slices + 1;\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices;\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u, v);\n      }\n    }\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    this.setIndex(indices);\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n}\nexport {\n  ParametricGeometry\n};\n"]},"metadata":{},"sourceType":"module"}