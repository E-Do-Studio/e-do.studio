{"ast":null,"code":"import _defineProperty from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _FORMAT_MAP, _TYPE_MAP, _ENCODING_MAP;\n\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\n\nvar _taskCache = /* @__PURE__ */new WeakMap();\n\nvar _activeLoaders = 0;\n\nvar _zstd;\n\nvar _KTX2Loader = /*#__PURE__*/function (_Loader) {\n  _inherits(_KTX2Loader, _Loader);\n\n  var _super = _createSuper(_KTX2Loader);\n\n  function _KTX2Loader(manager) {\n    var _this;\n\n    _classCallCheck(this, _KTX2Loader);\n\n    _this = _super.call(this, manager);\n    _this.transcoderPath = \"\";\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerPool = new WorkerPool();\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n\n    return _this;\n  }\n\n  _createClass(_KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n        etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n        etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n        dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n        bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n        pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n      };\n\n      if (renderer.capabilities.isWebGL2) {\n        this.workerConfig.etc1Supported = false;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      if (!this.transcoderPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              jsContent2 = _ref2[0],\n              binaryContent2 = _ref2[1];\n\n          var fn = _KTX2Loader.BasisWorker.toString();\n\n          var body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this2.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this2.transcoderBinary = binaryContent2;\n\n          _this2.workerPool.setWorkerCreator(function () {\n            var worker = new Worker(_this2.workerSourceURL);\n\n            var transcoderBinary = _this2.transcoderBinary.slice(0);\n\n            worker.postMessage({\n              type: \"init\",\n              config: _this2.workerConfig,\n              transcoderBinary: transcoderBinary\n            }, [transcoderBinary]);\n            return worker;\n          });\n        });\n\n        if (_activeLoaders > 0) {\n          console.warn(\"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\");\n        }\n\n        _activeLoaders++;\n      }\n\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this3 = this;\n\n      if (this.workerConfig === null) {\n        throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n      }\n\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n\n        _this3._createTexture(buffer).then(function (texture) {\n          return onLoad ? onLoad(texture) : null;\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"_createTextureFrom\",\n    value: function _createTextureFrom(transcodeResult, container) {\n      var mipmaps = transcodeResult.mipmaps,\n          width = transcodeResult.width,\n          height = transcodeResult.height,\n          format = transcodeResult.format,\n          type = transcodeResult.type,\n          error = transcodeResult.error,\n          dfdTransferFn = transcodeResult.dfdTransferFn,\n          dfdFlags = transcodeResult.dfdFlags;\n      if (type === \"error\") return Promise.reject(error);\n      var texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      if (\"colorSpace\" in texture) texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";else texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n     */\n\n  }, {\n    key: \"_createTexture\",\n    value: function () {\n      var _createTexture2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(buffer) {\n        var _this4 = this;\n\n        var config,\n            container,\n            taskConfig,\n            texturePending,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                container = read(new Uint8Array(buffer));\n\n                if (!(container.vkFormat !== VK_FORMAT_UNDEFINED)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", createDataTexture(container));\n\n              case 4:\n                taskConfig = config;\n                texturePending = this.init().then(function () {\n                  return _this4.workerPool.postMessage({\n                    type: \"transcode\",\n                    buffer: buffer,\n                    taskConfig: taskConfig\n                  }, [buffer]);\n                }).then(function (e) {\n                  return _this4._createTextureFrom(e.data, container);\n                });\n\n                _taskCache.set(buffer, {\n                  promise: texturePending\n                });\n\n                return _context.abrupt(\"return\", texturePending);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _createTexture(_x) {\n        return _createTexture2.apply(this, arguments);\n      }\n\n      return _createTexture;\n    }()\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  }]);\n\n  return _KTX2Loader;\n}(Loader);\n\nvar KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n\n\n__publicField(KTX2Loader, \"BasisWorker\", function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat;\n  var TranscoderFormat = _TranscoderFormat;\n  var BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function (e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case \"transcode\":\n        transcoderPending.then(function () {\n          try {\n            var _transcode = transcode(message.buffer),\n                width = _transcode.width,\n                height = _transcode.height,\n                hasAlpha = _transcode.hasAlpha,\n                mipmaps = _transcode.mipmaps,\n                format = _transcode.format,\n                dfdTransferFn = _transcode.dfdTransferFn,\n                dfdFlags = _transcode.dfdFlags;\n\n            var buffers = [];\n\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format,\n              dfdTransferFn: dfdTransferFn,\n              dfdFlags: dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(function () {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    var ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n\n    var basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = ktx2File.getWidth();\n    var height = ktx2File.getHeight();\n    var layers = ktx2File.getLayers() || 1;\n    var levels = ktx2File.getLevels();\n    var hasAlpha = ktx2File.getHasAlpha();\n    var dfdTransferFn = ktx2File.getDFDTransferFunc();\n    var dfdFlags = ktx2File.getDFDFlags();\n\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat.transcoderFormat,\n        engineFormat = _getTranscoderFormat.engineFormat;\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n\n    var mipmaps = [];\n\n    for (var mip = 0; mip < levels; mip++) {\n      var layerMips = [];\n      var mipWidth = void 0,\n          mipHeight = void 0;\n\n      for (var layer = 0; layer < layers; layer++) {\n        var levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        var dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        var status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n\n        layerMips.push(dst);\n      }\n\n      mipmaps.push({\n        data: concat(layerMips),\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat,\n      dfdTransferFn: dfdTransferFn,\n      dfdFlags: dfdFlags\n    };\n  }\n\n  var FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n\n  function concat(arrays) {\n    var totalByteLength = 0;\n\n    for (var i = 0; i < arrays.length; i++) {\n      var array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n\n    var result = new Uint8Array(totalByteLength);\n    var byteOffset = 0;\n\n    for (var _i = 0; _i < arrays.length; _i++) {\n      var _array = arrays[_i];\n      result.set(_array, byteOffset);\n      byteOffset += _array.byteLength;\n    }\n\n    return result;\n  }\n});\n\nvar FORMAT_MAP = (_FORMAT_MAP = {}, _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_UNORM, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_SRGB, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_UNORM, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_SRGB, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_SRGB, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_UNORM, RedFormat), _FORMAT_MAP);\nvar TYPE_MAP = (_TYPE_MAP = {}, _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_UNORM, UnsignedByteType), _TYPE_MAP);\nvar ENCODING_MAP = (_ENCODING_MAP = {}, _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8B8A8_SRGB, 3001), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8_SRGB, 3001), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8_SRGB, 3001), _ENCODING_MAP);\n\nfunction createDataTexture(_x2) {\n  return _createDataTexture.apply(this, arguments);\n}\n\nfunction _createDataTexture() {\n  _createDataTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(container) {\n    var vkFormat, pixelWidth, pixelHeight, pixelDepth, level, levelData, view, texture;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            vkFormat = container.vkFormat, pixelWidth = container.pixelWidth, pixelHeight = container.pixelHeight, pixelDepth = container.pixelDepth;\n\n            if (!(FORMAT_MAP[vkFormat] === void 0)) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n\n          case 3:\n            level = container.levels[0];\n\n            if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE)) {\n              _context3.next = 8;\n              break;\n            }\n\n            levelData = level.levelData;\n            _context3.next = 16;\n            break;\n\n          case 8:\n            if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD)) {\n              _context3.next = 15;\n              break;\n            }\n\n            if (!_zstd) {\n              _zstd = new Promise( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n                  var zstd;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          zstd = new ZSTDDecoder();\n                          _context2.next = 3;\n                          return zstd.init();\n\n                        case 3:\n                          resolve(zstd);\n\n                        case 4:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x3) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n            }\n\n            _context3.next = 12;\n            return _zstd;\n\n          case 12:\n            levelData = _context3.sent.decode(level.levelData, level.uncompressedByteLength);\n            _context3.next = 16;\n            break;\n\n          case 15:\n            throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n\n          case 16:\n            if (TYPE_MAP[vkFormat] === FloatType) {\n              view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n            } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n              view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n            } else {\n              view = levelData;\n            }\n\n            texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n            texture.type = TYPE_MAP[vkFormat];\n            texture.format = FORMAT_MAP[vkFormat];\n            texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n            texture.needsUpdate = true;\n            return _context3.abrupt(\"return\", Promise.resolve(texture));\n\n          case 23:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createDataTexture.apply(this, arguments);\n}\n\nexport { KTX2Loader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/KTX2Loader.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","UnsignedByteType","CompressedTexture","LinearFilter","LinearMipmapLinearFilter","RGFormat","RedFormat","FloatType","HalfFloatType","DataTexture","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","ZSTDDecoder","CompressedArrayTexture","Data3DTexture","_taskCache","WeakMap","_activeLoaders","_zstd","_KTX2Loader","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","path","num","setWorkerLimit","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","url","onLoad","onProgress","onError","Error","loader","load","buffer","cachedTask","get","promise","catch","_createTexture","texture","transcodeResult","container","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","encoding","premultiplyAlpha","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","init","e","_createTextureFrom","data","set","dispose","revokeObjectURL","KTX2Loader","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","transcode","hasAlpha","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","layers","getLayers","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","getTranscoderFormat","transcoderFormat","engineFormat","startTranscoding","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","arrays","totalByteLength","array","byteLength","result","byteOffset","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","supercompressionScheme","levelData","zstd","decode","uncompressedByteLength","view","Float32Array","BYTES_PER_ELEMENT","Uint16Array"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst _KTX2Loader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn(\n        'THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n      );\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    if (renderer.capabilities.isWebGL2) {\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _KTX2Loader.BasisWorker.toString();\n        const body = [\n          \"/* constants */\",\n          \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat),\n          \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat),\n          \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat),\n          \"/* basis_transcoder.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({ type: \"init\", config: this.workerConfig, transcoderBinary }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        console.warn(\n          \"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\"\n        );\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture(buffer).then((texture) => onLoad ? onLoad(texture) : null).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const { mipmaps, width, height, format, type, error, dfdTransferFn, dfdFlags } = transcodeResult;\n    if (type === \"error\")\n      return Promise.reject(error);\n    const texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    if (\"colorSpace\" in texture)\n      texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";\n    else\n      texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    }\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({ type: \"transcode\", buffer, taskConfig }, [buffer]);\n    }).then((e) => this._createTextureFrom(e.data, container));\n    _taskCache.set(buffer, { promise: texturePending });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL)\n      URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n};\nlet KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function() {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const { width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags } = transcode(message.buffer);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage(\n              {\n                type: \"transcode\",\n                id: message.id,\n                width,\n                height,\n                hasAlpha,\n                mipmaps,\n                format,\n                dfdTransferFn,\n                dfdFlags\n              },\n              buffers\n            );\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise((resolve) => {\n      BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layers = ktx2File.getLayers() || 1;\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const layerMips = [];\n      let mipWidth, mipHeight;\n      for (let layer = 0; layer < layers; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        const status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n        layerMips.push(dst);\n      }\n      mipmaps.push({ data: concat(layerMips), width: mipWidth, height: mipHeight });\n    }\n    cleanup();\n    return { width, height, hasAlpha, mipmaps, format: engineFormat, dfdTransferFn, dfdFlags };\n  }\n  const FORMAT_OPTIONS = [\n    {\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }\n  ];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if])\n        continue;\n      if (!opt.basisFormat.includes(basisFormat))\n        continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2)\n        continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n        continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return { transcoderFormat, engineFormat };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return { transcoderFormat, engineFormat };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2)\n      return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n});\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8G8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8_SRGB]: 3001\n  // sRGBEncoding\n};\nasync function createDataTexture(container) {\n  const { vkFormat, pixelWidth, pixelHeight, pixelDepth } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  const level = container.levels[0];\n  let levelData;\n  let view;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async (resolve) => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n  }\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(\n      levelData.buffer,\n      levelData.byteOffset,\n      levelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n    );\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  }\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n  texture.needsUpdate = true;\n  return Promise.resolve(texture);\n}\nexport {\n  KTX2Loader\n};\n"]},"metadata":{},"sourceType":"module"}