{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\n\nconst _taskCache = /* @__PURE__ */new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nconst _KTX2Loader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n\n    if (renderer.capabilities.isWebGL2) {\n      this.workerConfig.etc1Supported = false;\n    }\n\n    return this;\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _KTX2Loader.BasisWorker.toString();\n\n        const body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: \"init\",\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n\n      if (_activeLoaders > 0) {\n        console.warn(\"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\");\n      }\n\n      _activeLoaders++;\n    }\n\n    return this.transcoderPending;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n    }\n\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n\n  _createTextureFrom(transcodeResult, container) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === \"error\") return Promise.reject(error);\n    const texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    if (\"colorSpace\" in texture) texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";else texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n\n\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    }\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: \"transcode\",\n        buffer,\n        taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data, container));\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n\n};\n\nlet KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n\n\n__publicField(KTX2Loader, \"BasisWorker\", function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layers = ktx2File.getLayers() || 1;\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const layerMips = [];\n      let mipWidth, mipHeight;\n\n      for (let layer = 0; layer < layers; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        const status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n\n        layerMips.push(dst);\n      }\n\n      mipmaps.push({\n        data: concat(layerMips),\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  }\n\n  const FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n\n  function concat(arrays) {\n    let totalByteLength = 0;\n\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n\n    return result;\n  }\n});\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8G8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8_SRGB]: 3001 // sRGBEncoding\n\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n  }\n\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  }\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n  texture.needsUpdate = true;\n  return Promise.resolve(texture);\n}\n\nexport { KTX2Loader };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/KTX2Loader.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","UnsignedByteType","CompressedTexture","LinearFilter","LinearMipmapLinearFilter","RGFormat","RedFormat","FloatType","HalfFloatType","DataTexture","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","ZSTDDecoder","CompressedArrayTexture","Data3DTexture","_taskCache","WeakMap","_activeLoaders","_zstd","_KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","encoding","premultiplyAlpha","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","KTX2Loader","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","hasAlpha","transcode","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","layers","getLayers","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","arrays","totalByteLength","array","byteLength","result","byteOffset","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","levelData","view","supercompressionScheme","zstd","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst _KTX2Loader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn(\n        'THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n      );\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    if (renderer.capabilities.isWebGL2) {\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _KTX2Loader.BasisWorker.toString();\n        const body = [\n          \"/* constants */\",\n          \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat),\n          \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat),\n          \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat),\n          \"/* basis_transcoder.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({ type: \"init\", config: this.workerConfig, transcoderBinary }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        console.warn(\n          \"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\"\n        );\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture(buffer).then((texture) => onLoad ? onLoad(texture) : null).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const { mipmaps, width, height, format, type, error, dfdTransferFn, dfdFlags } = transcodeResult;\n    if (type === \"error\")\n      return Promise.reject(error);\n    const texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    if (\"colorSpace\" in texture)\n      texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";\n    else\n      texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    }\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({ type: \"transcode\", buffer, taskConfig }, [buffer]);\n    }).then((e) => this._createTextureFrom(e.data, container));\n    _taskCache.set(buffer, { promise: texturePending });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL)\n      URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n};\nlet KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function() {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const { width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags } = transcode(message.buffer);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage(\n              {\n                type: \"transcode\",\n                id: message.id,\n                width,\n                height,\n                hasAlpha,\n                mipmaps,\n                format,\n                dfdTransferFn,\n                dfdFlags\n              },\n              buffers\n            );\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise((resolve) => {\n      BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layers = ktx2File.getLayers() || 1;\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const layerMips = [];\n      let mipWidth, mipHeight;\n      for (let layer = 0; layer < layers; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        const status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n        layerMips.push(dst);\n      }\n      mipmaps.push({ data: concat(layerMips), width: mipWidth, height: mipHeight });\n    }\n    cleanup();\n    return { width, height, hasAlpha, mipmaps, format: engineFormat, dfdTransferFn, dfdFlags };\n  }\n  const FORMAT_OPTIONS = [\n    {\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }\n  ];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if])\n        continue;\n      if (!opt.basisFormat.includes(basisFormat))\n        continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2)\n        continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n        continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return { transcoderFormat, engineFormat };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return { transcoderFormat, engineFormat };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2)\n      return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n});\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8G8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8_SRGB]: 3001\n  // sRGBEncoding\n};\nasync function createDataTexture(container) {\n  const { vkFormat, pixelWidth, pixelHeight, pixelDepth } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  const level = container.levels[0];\n  let levelData;\n  let view;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async (resolve) => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n  }\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(\n      levelData.buffer,\n      levelData.byteOffset,\n      levelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n    );\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  }\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n  texture.needsUpdate = true;\n  return Promise.resolve(texture);\n}\nexport {\n  KTX2Loader\n};\n"]},"metadata":{},"sourceType":"module"}