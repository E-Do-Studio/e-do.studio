{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\n\nvar ParametricGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(ParametricGeometry, _BufferGeometry);\n\n  var _super = _createSuper(ParametricGeometry);\n\n  function ParametricGeometry() {\n    var _this;\n\n    var func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (u, v, target) {\n      return target.set(u, v, Math.cos(u) * Math.sin(v));\n    };\n    var slices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    var stacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n\n    _classCallCheck(this, ParametricGeometry);\n\n    _this = _super.call(this);\n    _this.type = \"ParametricGeometry\";\n    _this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    };\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    var EPS = 1e-5;\n    var normal = new Vector3();\n    var p0 = new Vector3(),\n        p1 = new Vector3();\n    var pu = new Vector3(),\n        pv = new Vector3();\n    var sliceCount = slices + 1;\n\n    for (var i = 0; i <= stacks; i++) {\n      var v = i / stacks;\n\n      for (var j = 0; j <= slices; j++) {\n        var u = j / slices;\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u, v);\n      }\n    }\n\n    for (var _i = 0; _i < stacks; _i++) {\n      for (var _j = 0; _j < slices; _j++) {\n        var a = _i * sliceCount + _j;\n        var b = _i * sliceCount + _j + 1;\n        var c = (_i + 1) * sliceCount + _j + 1;\n        var d = (_i + 1) * sliceCount + _j;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    _this.setIndex(indices);\n\n    _this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n\n    _this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n\n    _this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    return _this;\n  }\n\n  return ParametricGeometry;\n}(BufferGeometry);\n\nexport { ParametricGeometry };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/geometries/ParametricGeometry.js"],"names":["BufferGeometry","Vector3","Float32BufferAttribute","ParametricGeometry","func","u","v","target","set","Math","cos","sin","slices","stacks","type","parameters","indices","vertices","normals","uvs","EPS","normal","p0","p1","pu","pv","sliceCount","i","j","push","x","y","z","subVectors","crossVectors","normalize","a","b","c","d","setIndex","setAttribute"],"mappings":"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","sourcesContent":["import { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super();\n    this.type = \"ParametricGeometry\";\n    this.parameters = {\n      func,\n      slices,\n      stacks\n    };\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 1e-5;\n    const normal = new Vector3();\n    const p0 = new Vector3(), p1 = new Vector3();\n    const pu = new Vector3(), pv = new Vector3();\n    const sliceCount = slices + 1;\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices;\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u, v);\n      }\n    }\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    this.setIndex(indices);\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n}\nexport {\n  ParametricGeometry\n};\n"]},"metadata":{},"sourceType":"module"}