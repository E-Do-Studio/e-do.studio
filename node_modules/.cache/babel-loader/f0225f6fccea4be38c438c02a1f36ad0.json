{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from \"three\";\n\nclass OBJExporter {\n  constructor() {\n    __publicField(this, \"output\");\n\n    __publicField(this, \"indexVertex\");\n\n    __publicField(this, \"indexVertexUvs\");\n\n    __publicField(this, \"indexNormals\");\n\n    __publicField(this, \"vertex\");\n\n    __publicField(this, \"color\");\n\n    __publicField(this, \"normal\");\n\n    __publicField(this, \"uv\");\n\n    __publicField(this, \"face\");\n\n    this.output = \"\";\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n\n    const vertices = geometry.getAttribute(\"position\");\n    const normals = geometry.getAttribute(\"normal\");\n    const uvs = geometry.getAttribute(\"uv\");\n    const indices = geometry.getIndex();\n    this.output += `o ${mesh.name}\n`;\n\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\n`;\n    }\n\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(mesh.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n\n    if (uvs !== void 0) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i);\n        this.output += `vt ${this.uv.x} ${this.uv.y}\n`;\n      }\n    }\n\n    if (normals !== void 0) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i);\n        this.normal.applyMatrix3(normalMatrixWorld).normalize();\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      }\n    }\n\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    }\n\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n\n    if (geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n\n    const vertices = geometry.getAttribute(\"position\");\n    this.output += `o ${line.name}\n`;\n\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(line.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n\n    if (type === \"Line\") {\n      this.output += \"l \";\n\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n\n      this.output += \"\\n\";\n    }\n\n    if (type === \"LineSegments\") {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\n`;\n      }\n    }\n\n    this.indexVertex += nbVertex;\n  }\n\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n\n    const vertices = geometry.getAttribute(\"position\");\n    const colors = geometry.getAttribute(\"color\");\n    this.output += `o ${points.name}\n`;\n\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n\n        if (colors !== void 0 && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n\n        this.output += \"\\n\";\n      }\n    }\n\n    this.output += \"p \";\n\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n\n    this.output += \"\\n\";\n    this.indexVertex += nbVertex;\n  }\n\n}\n\nexport { OBJExporter };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/exporters/OBJExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Color","Vector2","Mesh","Line","Points","Matrix3","BufferAttribute","OBJExporter","constructor","output","indexVertex","indexVertexUvs","indexNormals","vertex","color","normal","uv","face","parse","object","traverse","child","isMesh","parseMesh","isLine","parseLine","isPoints","parsePoints","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","indices","getIndex","name","material","Array","isArray","i","l","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","m","j","join","line","type","k","points","colors","fromBufferAttribute","r","g","b"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from \"three\";\nclass OBJExporter {\n  constructor() {\n    __publicField(this, \"output\");\n    __publicField(this, \"indexVertex\");\n    __publicField(this, \"indexVertexUvs\");\n    __publicField(this, \"indexNormals\");\n    __publicField(this, \"vertex\");\n    __publicField(this, \"color\");\n    __publicField(this, \"normal\");\n    __publicField(this, \"uv\");\n    __publicField(this, \"face\");\n    this.output = \"\";\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n  parse(object) {\n    object.traverse((child) => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const normals = geometry.getAttribute(\"normal\");\n    const uvs = geometry.getAttribute(\"uv\");\n    const indices = geometry.getIndex();\n    this.output += `o ${mesh.name}\n`;\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\n`;\n    }\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(mesh.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (uvs !== void 0) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i);\n        this.output += `vt ${this.uv.x} ${this.uv.y}\n`;\n      }\n    }\n    if (normals !== void 0) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i);\n        this.normal.applyMatrix3(normalMatrixWorld).normalize();\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      }\n    }\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n    if (geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    this.output += `o ${line.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(line.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (type === \"Line\") {\n      this.output += \"l \";\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n      this.output += \"\\n\";\n    }\n    if (type === \"LineSegments\") {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n  }\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const colors = geometry.getAttribute(\"color\");\n    this.output += `o ${points.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n        if (colors !== void 0 && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n        this.output += \"\\n\";\n      }\n    }\n    this.output += \"p \";\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n    this.output += \"\\n\";\n    this.indexVertex += nbVertex;\n  }\n}\nexport {\n  OBJExporter\n};\n"]},"metadata":{},"sourceType":"module"}