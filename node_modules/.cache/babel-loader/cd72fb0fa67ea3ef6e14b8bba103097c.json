{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Matrix4, EventDispatcher, Vector2, Vector3, Quaternion, Group, EllipseCurve, BufferGeometry, PerspectiveCamera, MathUtils, OrthographicCamera, Box3, Sphere, GridHelper, LineBasicMaterial, Line, Raycaster } from \"three\";\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n};\nconst _center = {\n  x: 0,\n  y: 0\n};\nconst _transformation = {\n  camera: /* @__PURE__ */new Matrix4(),\n  gizmos: /* @__PURE__ */new Matrix4()\n};\nconst _changeEvent = {\n  type: \"change\"\n};\nconst _startEvent = {\n  type: \"start\"\n};\nconst _endEvent = {\n  type: \"end\"\n};\n\nclass ArcballControls extends EventDispatcher {\n  constructor(camera, domElement = null, scene = null) {\n    super();\n\n    __publicField(this, \"camera\");\n\n    __publicField(this, \"domElement\");\n\n    __publicField(this, \"scene\");\n\n    __publicField(this, \"mouseActions\");\n\n    __publicField(this, \"_mouseOp\");\n\n    __publicField(this, \"_v2_1\");\n\n    __publicField(this, \"_v3_1\");\n\n    __publicField(this, \"_v3_2\");\n\n    __publicField(this, \"_m4_1\");\n\n    __publicField(this, \"_m4_2\");\n\n    __publicField(this, \"_quat\");\n\n    __publicField(this, \"_translationMatrix\");\n\n    __publicField(this, \"_rotationMatrix\");\n\n    __publicField(this, \"_scaleMatrix\");\n\n    __publicField(this, \"_rotationAxis\");\n\n    __publicField(this, \"_cameraMatrixState\");\n\n    __publicField(this, \"_cameraProjectionState\");\n\n    __publicField(this, \"_fovState\");\n\n    __publicField(this, \"_upState\");\n\n    __publicField(this, \"_zoomState\");\n\n    __publicField(this, \"_nearPos\");\n\n    __publicField(this, \"_farPos\");\n\n    __publicField(this, \"_gizmoMatrixState\");\n\n    __publicField(this, \"_up0\");\n\n    __publicField(this, \"_zoom0\");\n\n    __publicField(this, \"_fov0\");\n\n    __publicField(this, \"_initialNear\");\n\n    __publicField(this, \"_nearPos0\");\n\n    __publicField(this, \"_initialFar\");\n\n    __publicField(this, \"_farPos0\");\n\n    __publicField(this, \"_cameraMatrixState0\");\n\n    __publicField(this, \"_gizmoMatrixState0\");\n\n    __publicField(this, \"_button\");\n\n    __publicField(this, \"_touchStart\");\n\n    __publicField(this, \"_touchCurrent\");\n\n    __publicField(this, \"_input\");\n\n    __publicField(this, \"_switchSensibility\");\n\n    __publicField(this, \"_startFingerDistance\");\n\n    __publicField(this, \"_currentFingerDistance\");\n\n    __publicField(this, \"_startFingerRotation\");\n\n    __publicField(this, \"_currentFingerRotation\");\n\n    __publicField(this, \"_devPxRatio\");\n\n    __publicField(this, \"_downValid\");\n\n    __publicField(this, \"_nclicks\");\n\n    __publicField(this, \"_downEvents\");\n\n    __publicField(this, \"_clickStart\");\n\n    __publicField(this, \"_maxDownTime\");\n\n    __publicField(this, \"_maxInterval\");\n\n    __publicField(this, \"_posThreshold\");\n\n    __publicField(this, \"_movementThreshold\");\n\n    __publicField(this, \"_currentCursorPosition\");\n\n    __publicField(this, \"_startCursorPosition\");\n\n    __publicField(this, \"_grid\");\n\n    __publicField(this, \"_gridPosition\");\n\n    __publicField(this, \"_gizmos\");\n\n    __publicField(this, \"_curvePts\");\n\n    __publicField(this, \"_timeStart\");\n\n    __publicField(this, \"_animationId\");\n\n    __publicField(this, \"focusAnimationTime\");\n\n    __publicField(this, \"_timePrev\");\n\n    __publicField(this, \"_timeCurrent\");\n\n    __publicField(this, \"_anglePrev\");\n\n    __publicField(this, \"_angleCurrent\");\n\n    __publicField(this, \"_cursorPosPrev\");\n\n    __publicField(this, \"_cursorPosCurr\");\n\n    __publicField(this, \"_wPrev\");\n\n    __publicField(this, \"_wCurr\");\n\n    __publicField(this, \"adjustNearFar\");\n\n    __publicField(this, \"scaleFactor\");\n\n    __publicField(this, \"dampingFactor\");\n\n    __publicField(this, \"wMax\");\n\n    __publicField(this, \"enableAnimations\");\n\n    __publicField(this, \"enableGrid\");\n\n    __publicField(this, \"cursorZoom\");\n\n    __publicField(this, \"minFov\");\n\n    __publicField(this, \"maxFov\");\n\n    __publicField(this, \"enabled\");\n\n    __publicField(this, \"enablePan\");\n\n    __publicField(this, \"enableRotate\");\n\n    __publicField(this, \"enableZoom\");\n\n    __publicField(this, \"minDistance\");\n\n    __publicField(this, \"maxDistance\");\n\n    __publicField(this, \"minZoom\");\n\n    __publicField(this, \"maxZoom\");\n\n    __publicField(this, \"target\");\n\n    __publicField(this, \"_currentTarget\");\n\n    __publicField(this, \"_tbRadius\");\n\n    __publicField(this, \"_state\"); //listeners\n\n\n    __publicField(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n      }\n\n      const newRadius = this._tbRadius / scale;\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n\n      this.dispatchEvent(_changeEvent);\n    });\n\n    __publicField(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    __publicField(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n\n      this._input = INPUT.NONE;\n    });\n\n    __publicField(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n\n        this._touchCurrent.push(event);\n\n        switch (this._input) {\n          case INPUT.NONE:\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, \"ROTATE\");\n            window.addEventListener(\"pointermove\", this.onPointerMove);\n            window.addEventListener(\"pointerup\", this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n\n          case INPUT.TWO_FINGER:\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.NONE) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n\n        if (this._mouseOp) {\n          window.addEventListener(\"pointermove\", this.onPointerMove);\n          window.addEventListener(\"pointerup\", this.onPointerUp);\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n\n    __publicField(this, \"onPointerMove\", event => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n\n            if (movement >= this._switchSensibility) {\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, \"ROTATE\");\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n\n          case INPUT.MULT_FINGER:\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      }\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n\n    __publicField(this, \"onPointerUp\", event => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n\n            this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            window.removeEventListener(\"pointermove\", this.onPointerMove);\n            window.removeEventListener(\"pointerup\", this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n\n          case INPUT.TWO_FINGER:\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd();\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener(\"pointermove\", this.onPointerMove);\n              window.removeEventListener(\"pointerup\", this.onPointerUp);\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        window.removeEventListener(\"pointermove\", this.onPointerMove);\n        window.removeEventListener(\"pointerup\", this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                this._nclicks = 0;\n\n                this._downEvents.splice(0, this._downEvents.length);\n\n                this.onDoubleTap(event);\n              } else {\n                this._nclicks = 1;\n\n                this._downEvents.shift();\n\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n\n    __publicField(this, \"onWheel\", event => {\n      var _a, _b;\n\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n\n        const mouseOp = this.getOpFromAction(\"WHEEL\", modifier);\n\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125;\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case \"ZOOM\":\n              this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n\n              if (this.cursorZoom && this.enablePan) {\n                let scalePoint;\n\n                if (this.camera instanceof OrthographicCamera) {\n                  scalePoint = (_a = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n\n                if (this.camera instanceof PerspectiveCamera) {\n                  scalePoint = (_b = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n\n                if (scalePoint !== void 0) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n\n            case \"FOV\":\n              if (this.camera instanceof PerspectiveCamera) {\n                this.updateTbState(STATE.FOV, true);\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n\n    __publicField(this, \"onSinglePanStart\", (event, operation) => {\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case \"PAN\":\n            if (!this.enablePan) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case \"ROTATE\":\n            if (!this.enableRotate) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              this.activateGizmos(true);\n\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n\n                this._cursorPosPrev.copy(this._startCursorPosition);\n\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n\n            this.dispatchEvent(_changeEvent);\n            break;\n\n          case \"FOV\":\n            if (!this.enableZoom) return;\n\n            if (this.camera instanceof PerspectiveCamera) {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n\n              this.updateTbState(STATE.FOV, true);\n\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n\n            break;\n\n          case \"ZOOM\":\n            if (!this.enableZoom) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.SCALE, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    __publicField(this, \"onSinglePanMove\", (event, opState) => {\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(true);\n              } else {\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n\n                const amount = Math.max(distance / this._tbRadius, angle);\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (this.enableZoom && this.camera instanceof PerspectiveCamera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    __publicField(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n\n        if (this.enableAnimations) {\n          const deltaTime = performance.now() - this._timeCurrent;\n\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    __publicField(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n\n        if (hitP && this.enableAnimations) {\n          const self = this;\n\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    __publicField(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n\n        if (rayDir !== void 0) {\n          this._startCursorPosition.copy(rayDir);\n        }\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n\n        this.activateGizmos(false);\n      }\n    });\n\n    __publicField(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    __publicField(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    __publicField(this, \"onRotateStart\", () => {\n      var _a;\n\n      if (this.enabled && this.enableRotate) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true);\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_a = this.camera) == null ? void 0 : _a.getWorldDirection(this._rotationAxis);\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n\n    __publicField(this, \"onRotateMove\", () => {\n      var _a;\n\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        }\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n          rotationPoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n\n        if (rotationPoint !== void 0) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    __publicField(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    __publicField(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n\n    __publicField(this, \"onPinchMove\", () => {\n      var _a, _b;\n\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12;\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          if (this.camera instanceof OrthographicCamera) {\n            scalePoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (this.camera instanceof PerspectiveCamera) {\n            scalePoint = (_b = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== void 0) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    __publicField(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    __publicField(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n\n    __publicField(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8;\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n\n        let xNew = x / size;\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    __publicField(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    /**\n     * Set _center's x/y coordinates\n     * @param {Number} clientX\n     * @param {Number} clientY\n     */\n\n\n    __publicField(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    /**\n     * Set default mouse actions\n     */\n\n\n    __publicField(this, \"initializeMouseActions\", () => {\n      this.setMouseAction(\"PAN\", 0, \"CTRL\");\n      this.setMouseAction(\"PAN\", 2);\n      this.setMouseAction(\"ROTATE\", 0);\n      this.setMouseAction(\"ZOOM\", \"WHEEL\");\n      this.setMouseAction(\"ZOOM\", 1);\n      this.setMouseAction(\"FOV\", \"WHEEL\", \"SHIFT\");\n      this.setMouseAction(\"FOV\", 1, \"SHIFT\");\n    });\n    /**\n     * Set a new mouse action by specifying the operation to be performed and a mouse/key combination. In case of conflict, replaces the existing one\n     * @param {String} operation The operation to be performed ('PAN', 'ROTATE', 'ZOOM', 'FOV)\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns {Boolean} True if the mouse action has been successfully added, false otherwise\n     */\n\n\n    __publicField(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = [\"PAN\", \"ROTATE\", \"ZOOM\", \"FOV\"];\n      const mouseInput = [0, 1, 2, \"WHEEL\"];\n      const keyInput = [\"CTRL\", \"SHIFT\", null];\n      let state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        return false;\n      }\n\n      if (mouse == \"WHEEL\") {\n        if (operation != \"ZOOM\" && operation != \"FOV\") {\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case \"PAN\":\n          state = STATE.PAN;\n          break;\n\n        case \"ROTATE\":\n          state = STATE.ROTATE;\n          break;\n\n        case \"ZOOM\":\n          state = STATE.SCALE;\n          break;\n\n        case \"FOV\":\n          state = STATE.FOV;\n          break;\n      }\n\n      const action = {\n        operation,\n        mouse,\n        key,\n        state\n      };\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n\n      this.mouseActions.push(action);\n      return true;\n    });\n    /**\n     * Return the operation associated to a mouse/keyboard combination\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns The operation if it has been found, null otherwise\n     */\n\n\n    __publicField(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n    /**\n     * Get the operation associated to mouse and key combination and returns the corresponding FSA state\n     * @param {Number} mouse Mouse button\n     * @param {String} key Keyboard modifier\n     * @returns The FSA state obtained from the operation associated to mouse/keyboard combination\n     */\n\n\n    __publicField(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n    /**\n     * Calculate the angle between two pointers\n     * @param {PointerEvent} p1\n     * @param {PointerEvent} p2\n     * @returns {Number} The angle between two pointers in degrees\n     */\n\n\n    __publicField(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    /**\n     * Update a PointerEvent inside current pointerevents array\n     * @param {PointerEvent} event\n     */\n\n\n    __publicField(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n    /**\n     * Calculate the angular speed\n     * @param {Number} p0 Position at t0\n     * @param {Number} p1 Position at t1\n     * @param {Number} t0 Initial time in milliseconds\n     * @param {Number} t1 Ending time in milliseconds\n     */\n\n\n    __publicField(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1e3;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n    /**\n     * Calculate the distance between two pointers\n     * @param {PointerEvent} p0 The first pointer\n     * @param {PointerEvent} p1 The second pointer\n     * @returns {number} The distance between the two pointers\n     */\n\n\n    __publicField(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    /**\n     * Calculate the rotation axis as the vector perpendicular between two vectors\n     * @param {Vector3} vec1 The first vector\n     * @param {Vector3} vec2 The second vector\n     * @returns {Vector3} The normalized rotation axis\n     */\n\n\n    __publicField(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n\n      return this._rotationAxis.normalize().clone();\n    });\n    /**\n     * Calculate the trackball radius so that gizmo's diamater will be 2/3 of the minimum side of the camera frustum\n     * @param {Camera} camera\n     * @returns {Number} The trackball radius\n     */\n\n\n    __publicField(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n\n      if (camera instanceof PerspectiveCamera) {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5;\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV));\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    /**\n     * Focus operation consist of positioning the point of interest in front of the camera and a slightly zoom in\n     * @param {Vector3} point The point of interest\n     * @param {Number} size Scale factor\n     * @param {Number} amount Amount of operation to be completed (used for focus animations, default is complete full operation)\n     */\n\n\n    __publicField(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone();\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        const cameraStateTemp = this._cameraMatrixState.clone();\n\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    /**\n     * Draw a grid and add it to the scene\n     */\n\n\n    __publicField(this, \"drawGrid\", () => {\n      if (this.scene) {\n        const color = 8947848;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n\n        if (this.camera instanceof OrthographicCamera) {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera) {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n\n          this._grid.position.copy(this._gizmos.position);\n\n          this._gridPosition.copy(this._grid.position);\n\n          this._grid.quaternion.copy(this.camera.quaternion);\n\n          this._grid.rotateX(Math.PI * 0.5);\n\n          this.scene.add(this._grid);\n        }\n      }\n    });\n\n    __publicField(this, \"connect\", domElement => {\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n\n      this.domElement = domElement;\n      this.domElement.style.touchAction = \"none\";\n      this.domElement.addEventListener(\"contextmenu\", this.onContextMenu);\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.addEventListener(\"pointercancel\", this.onPointerCancel);\n      this.domElement.addEventListener(\"wheel\", this.onWheel);\n    });\n    /**\n     * Remove all listeners, stop animations and clean scene\n     */\n\n\n    __publicField(this, \"dispose\", () => {\n      var _a, _b, _c, _d, _e;\n\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n\n      (_a = this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", this.onPointerDown);\n      (_b = this.domElement) == null ? void 0 : _b.removeEventListener(\"pointercancel\", this.onPointerCancel);\n      (_c = this.domElement) == null ? void 0 : _c.removeEventListener(\"wheel\", this.onWheel);\n      (_d = this.domElement) == null ? void 0 : _d.removeEventListener(\"contextmenu\", this.onContextMenu);\n      window.removeEventListener(\"pointermove\", this.onPointerMove);\n      window.removeEventListener(\"pointerup\", this.onPointerUp);\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      (_e = this.scene) == null ? void 0 : _e.remove(this._gizmos);\n      this.disposeGrid();\n    });\n    /**\n     * remove the grid from the scene\n     */\n\n\n    __publicField(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n    /**\n     * Compute the easing out cubic function for ease out effect in animation\n     * @param {Number} t The absolute progress of the animation in the bound of 0 (beginning of the) and 1 (ending of animation)\n     * @returns {Number} Result of easing out cubic at time t\n     */\n\n\n    __publicField(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    /**\n     * Make rotation gizmos more or less visible\n     * @param {Boolean} isActive If true, make gizmos more visible\n     */\n\n\n    __publicField(this, \"activateGizmos\", isActive => {\n      for (const gizmo of this._gizmos.children) {\n        ;\n        gizmo.material.setValues({\n          opacity: isActive ? 1 : 0.6\n        });\n      }\n    });\n    /**\n     * Calculate the cursor position in NDC\n     * @param {number} x Cursor horizontal coordinate within the canvas\n     * @param {number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor normalized position inside the canvas\n     */\n\n\n    __publicField(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return this._v2_1.clone();\n    });\n    /**\n     * Calculate the cursor position inside the canvas x/y coordinates with the origin being in the center of the canvas\n     * @param {Number} x Cursor horizontal coordinate within the canvas\n     * @param {Number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor position inside the canvas\n     */\n\n\n    __publicField(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (this.camera instanceof OrthographicCamera) {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n\n      return this._v2_1.clone();\n    });\n    /**\n     * Set the camera to be controlled\n     * @param {Camera} camera The virtual camera to be controlled\n     */\n\n\n    __publicField(this, \"setCamera\", camera => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix();\n\n        if (camera instanceof PerspectiveCamera) {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n\n        this._cameraMatrixState0.copy(camera.matrix);\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n\n        this._up0.copy(camera.up);\n\n        this._upState.copy(camera.up);\n\n        this.camera = camera;\n        this.camera.updateProjectionMatrix();\n        const tbRadius = this.calculateTbRadius(camera);\n\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n    /**\n     * Creates the rotation gizmos matching trackball center and radius\n     * @param {Vector3} tbCenter The trackball center\n     * @param {number} tbRadius The trackball radius\n     */\n\n\n    __publicField(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      const curveMaterialX = new LineBasicMaterial({\n        color: 16744576,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 8454016,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 8421631,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation;\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n      if (this.camera && this.camera.zoom != 1) {\n        const size = 1 / this.camera.zoom;\n\n        this._scaleMatrix.makeScale(size, size, size);\n\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.clear();\n\n      this._gizmos.add(gizmoX);\n\n      this._gizmos.add(gizmoY);\n\n      this._gizmos.add(gizmoZ);\n    });\n    /**\n     * Perform animation for focus operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} point Point of interest for focus operation\n     * @param {Matrix4} cameraMatrix Camera matrix\n     * @param {Matrix4} gizmoMatrix Gizmos matrix\n     */\n\n\n    __publicField(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n\n        this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n    /**\n     * Perform animation for rotation operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} rotationAxis Rotation axis\n     * @param {number} w0 Initial angular velocity\n     */\n\n\n    __publicField(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        const deltaTime = (time - this._timeStart) / 1e3;\n        const w = w0 + -this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    /**\n     * Perform pan operation moving camera between two points\n     * @param {Vector3} p0 Initial point\n     * @param {Vector3} p1 Ending point\n     * @param {Boolean} adjust If movement should be adjusted considering camera distance (Perspective only)\n     */\n\n\n    __publicField(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n\n        if (this.camera instanceof OrthographicCamera) {\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n\n        if (this.camera instanceof PerspectiveCamera && adjust) {\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0);\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0);\n\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n\n      return _transformation;\n    });\n    /**\n     * Reset trackball\n     */\n\n\n    __publicField(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = this._fov0;\n        }\n\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    /**\n     * Rotate the camera around an axis passing by trackball's center\n     * @param {Vector3} axis Rotation axis\n     * @param {number} angle Angle in radians\n     * @returns {Object} Object with 'camera' field containing transformation matrix resulting from the operation to be applied to the camera\n     */\n\n\n    __publicField(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position;\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._rotationMatrix.makeRotationAxis(axis, -angle);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n\n    __publicField(this, \"copyState\", () => {\n      if (this.camera) {\n        const state = JSON.stringify(this.camera instanceof OrthographicCamera ? {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    __publicField(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    /**\n     * Save the current state of the control. This can later be recovered with .reset\n     */\n\n\n    __publicField(this, \"saveState\", () => {\n      if (!this.camera) return;\n\n      this._cameraMatrixState0.copy(this.camera.matrix);\n\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n\n      this._up0.copy(this.camera.up);\n\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fov0 = this.camera.fov;\n      }\n    });\n    /**\n     * Perform uniform scale operation around a given point\n     * @param {Number} size Scale factor\n     * @param {Vector3} point Point around which scale\n     * @param {Boolean} scaleGizmos If gizmos should be scaled (Perspective only)\n     * @returns {Object} Object with 'camera' and 'gizmo' fields containing transformation matrices resulting from the operation to be applied to the camera and gizmos\n     */\n\n\n    __publicField(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera) return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n\n      if (this.camera instanceof OrthographicCamera) {\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size;\n\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n\n        this.camera.updateProjectionMatrix();\n\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n\n        this._m4_2.multiply(this._translationMatrix);\n\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        this._m4_2.premultiply(this._m4_1);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n\n      if (this.camera instanceof PerspectiveCamera) {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        let distance = this._v3_1.distanceTo(scalePoint);\n\n        let amount = distance - distance * sizeInverse;\n        const newDistance = distance - amount;\n\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n\n          this._m4_2.multiply(this._scaleMatrix);\n\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          this._m4_2.multiply(this._translationMatrix);\n\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n    /**\n     * Set camera fov\n     * @param {Number} value fov to be setted\n     */\n\n\n    __publicField(this, \"setFov\", value => {\n      if (this.camera instanceof PerspectiveCamera) {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n    /**\n     * Set the trackball's center point\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Number} z Z coordinate\n     */\n\n\n    __publicField(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n\n        this._gizmos.position.set(x, y, z);\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n    /**\n     * Rotate camera around its direction axis passing by a given point by a given angle\n     * @param {Vector3} point The point where the rotation axis is passing trough\n     * @param {Number} angle Angle in radians\n     * @returns The computed transormation matix\n     */\n\n\n    __publicField(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point);\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle);\n\n      this._v3_2.sub(this._v3_1);\n\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n    /**\n     * Unproject the cursor on the 3D object surface\n     * @param {Vector2} cursor Cursor coordinates in NDC\n     * @param {Camera} camera Virtual camera\n     * @returns {Vector3} The point of intersection with the model, if exist, null otherwise\n     */\n\n\n    __publicField(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene) return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n\n      return null;\n    });\n    /**\n     * Unproject the cursor on the trackball surface\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {number} tbRadius The trackball radius\n     * @returns {Vector3} The unprojected point on the trackball surface\n     */\n\n\n    __publicField(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return this._v3_1;\n      }\n\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize();\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2);\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n\n        if (l == 0) {\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          this._v2_1.setY(m * this._v2_1.x + q);\n\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n          if (angle >= 45) {\n            const rayLength2 = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength2);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        }\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        this._v2_1.setY(m * this._v2_1.x + q);\n\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    /**\n     * Unproject the cursor on the plane passing through the center of the trackball orthogonal to the camera\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {Boolean} initialDistance If initial distance between camera and gizmos should be used for calculations instead of current (Perspective only)\n     * @returns {Vector3} The unprojected point on the trackball plane\n     */\n\n\n    __publicField(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        return this._v3_1.clone();\n      }\n\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize();\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n\n        if (l == 0) {\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    /**\n     * Update camera and gizmos state\n     */\n\n\n    __publicField(this, \"updateMatrixState\", () => {\n      if (!this.camera) return;\n\n      this._cameraMatrixState.copy(this.camera.matrix);\n\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n\n      if (this.camera instanceof OrthographicCamera) {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fovState = this.camera.fov;\n      }\n    });\n    /**\n     * Update the trackball FSA\n     * @param {STATE} newState New state of the FSA\n     * @param {Boolean} updateMatrices If matriices state should be updated\n     */\n\n\n    __publicField(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n\n    __publicField(this, \"update\", () => {\n      const EPS = 1e-6;\n\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z);\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n\n        this._currentTarget.copy(this.target);\n      }\n\n      if (!this.camera) return;\n\n      if (this.camera instanceof OrthographicCamera) {\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n\n      if (this.camera instanceof PerspectiveCamera) {\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        }\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale;\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n\n      this.camera.lookAt(this._gizmos.position);\n    });\n\n    __publicField(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n\n        this._gizmoMatrixState0.copy(gizmoTmp);\n\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    this.camera = null;\n    this.domElement = domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null;\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion();\n    this._translationMatrix = new Matrix4();\n    this._rotationMatrix = new Matrix4();\n    this._scaleMatrix = new Matrix4();\n    this._rotationAxis = new Vector3();\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4();\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4();\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE;\n    this._switchSensibility = 32;\n    this._startFingerDistance = 0;\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0;\n    this._currentFingerRotation = 0;\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0;\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24;\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3();\n    this._grid = null;\n    this._gridPosition = new Vector3();\n    this._gizmos = new Group();\n    this._curvePts = 128;\n    this._timeStart = -1;\n    this._animationId = -1;\n    this.focusAnimationTime = 500;\n    this._timePrev = 0;\n    this._timeCurrent = 0;\n    this._anglePrev = 0;\n    this._angleCurrent = 0;\n    this._cursorPosPrev = new Vector3();\n    this._cursorPosCurr = new Vector3();\n    this._wPrev = 0;\n    this._wCurr = 0;\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1;\n    this.dampingFactor = 25;\n    this.wMax = 20;\n    this.enableAnimations = true;\n    this.enableGrid = false;\n    this.cursorZoom = false;\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1;\n    this._state = STATE.IDLE;\n    this.setCamera(camera);\n\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement) this.connect(this.domElement);\n    window.addEventListener(\"resize\", this.onWindowResize);\n  }\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n\n\n  applyTransformMatrix(transformation) {\n    if ((transformation == null ? void 0 : transformation.camera) && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n      this.camera.updateMatrix();\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n\n    if (transformation == null ? void 0 : transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.updateMatrix();\n    }\n\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n\n      if (tbRadius !== void 0) {\n        this._tbRadius = tbRadius;\n      }\n\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n\n\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n\n\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n\n}\n\nexport { ArcballControls };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/controls/ArcballControls.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Matrix4","EventDispatcher","Vector2","Vector3","Quaternion","Group","EllipseCurve","BufferGeometry","PerspectiveCamera","MathUtils","OrthographicCamera","Box3","Sphere","GridHelper","LineBasicMaterial","Line","Raycaster","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","constructor","domElement","scene","scale","_gizmos","z","tbRadius","calculateTbRadius","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","length","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","performance","now","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","_a","_b","enableZoom","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","scalePoint","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","operation","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","zRotate","_startFingerDistance","_currentFingerDistance","nFingers","setMouseAction","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","document","console","error","style","touchAction","onContextMenu","onPointerDown","onPointerCancel","onWheel","_c","_d","_e","onWindowResize","remove","isActive","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","gizmoX","gizmoY","gizmoZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength2","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","Infinity","setCamera","devicePixelRatio","initializeMouseActions","connect","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","setGizmosVisible","visible"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Matrix4, EventDispatcher, Vector2, Vector3, Quaternion, Group, EllipseCurve, BufferGeometry, PerspectiveCamera, MathUtils, OrthographicCamera, Box3, Sphere, GridHelper, LineBasicMaterial, Line, Raycaster } from \"three\";\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n};\nconst _center = {\n  x: 0,\n  y: 0\n};\nconst _transformation = {\n  camera: /* @__PURE__ */ new Matrix4(),\n  gizmos: /* @__PURE__ */ new Matrix4()\n};\nconst _changeEvent = { type: \"change\" };\nconst _startEvent = { type: \"start\" };\nconst _endEvent = { type: \"end\" };\nclass ArcballControls extends EventDispatcher {\n  constructor(camera, domElement = null, scene = null) {\n    super();\n    __publicField(this, \"camera\");\n    __publicField(this, \"domElement\");\n    __publicField(this, \"scene\");\n    __publicField(this, \"mouseActions\");\n    __publicField(this, \"_mouseOp\");\n    __publicField(this, \"_v2_1\");\n    __publicField(this, \"_v3_1\");\n    __publicField(this, \"_v3_2\");\n    __publicField(this, \"_m4_1\");\n    __publicField(this, \"_m4_2\");\n    __publicField(this, \"_quat\");\n    __publicField(this, \"_translationMatrix\");\n    __publicField(this, \"_rotationMatrix\");\n    __publicField(this, \"_scaleMatrix\");\n    __publicField(this, \"_rotationAxis\");\n    __publicField(this, \"_cameraMatrixState\");\n    __publicField(this, \"_cameraProjectionState\");\n    __publicField(this, \"_fovState\");\n    __publicField(this, \"_upState\");\n    __publicField(this, \"_zoomState\");\n    __publicField(this, \"_nearPos\");\n    __publicField(this, \"_farPos\");\n    __publicField(this, \"_gizmoMatrixState\");\n    __publicField(this, \"_up0\");\n    __publicField(this, \"_zoom0\");\n    __publicField(this, \"_fov0\");\n    __publicField(this, \"_initialNear\");\n    __publicField(this, \"_nearPos0\");\n    __publicField(this, \"_initialFar\");\n    __publicField(this, \"_farPos0\");\n    __publicField(this, \"_cameraMatrixState0\");\n    __publicField(this, \"_gizmoMatrixState0\");\n    __publicField(this, \"_button\");\n    __publicField(this, \"_touchStart\");\n    __publicField(this, \"_touchCurrent\");\n    __publicField(this, \"_input\");\n    __publicField(this, \"_switchSensibility\");\n    __publicField(this, \"_startFingerDistance\");\n    __publicField(this, \"_currentFingerDistance\");\n    __publicField(this, \"_startFingerRotation\");\n    __publicField(this, \"_currentFingerRotation\");\n    __publicField(this, \"_devPxRatio\");\n    __publicField(this, \"_downValid\");\n    __publicField(this, \"_nclicks\");\n    __publicField(this, \"_downEvents\");\n    __publicField(this, \"_clickStart\");\n    __publicField(this, \"_maxDownTime\");\n    __publicField(this, \"_maxInterval\");\n    __publicField(this, \"_posThreshold\");\n    __publicField(this, \"_movementThreshold\");\n    __publicField(this, \"_currentCursorPosition\");\n    __publicField(this, \"_startCursorPosition\");\n    __publicField(this, \"_grid\");\n    __publicField(this, \"_gridPosition\");\n    __publicField(this, \"_gizmos\");\n    __publicField(this, \"_curvePts\");\n    __publicField(this, \"_timeStart\");\n    __publicField(this, \"_animationId\");\n    __publicField(this, \"focusAnimationTime\");\n    __publicField(this, \"_timePrev\");\n    __publicField(this, \"_timeCurrent\");\n    __publicField(this, \"_anglePrev\");\n    __publicField(this, \"_angleCurrent\");\n    __publicField(this, \"_cursorPosPrev\");\n    __publicField(this, \"_cursorPosCurr\");\n    __publicField(this, \"_wPrev\");\n    __publicField(this, \"_wCurr\");\n    __publicField(this, \"adjustNearFar\");\n    __publicField(this, \"scaleFactor\");\n    __publicField(this, \"dampingFactor\");\n    __publicField(this, \"wMax\");\n    __publicField(this, \"enableAnimations\");\n    __publicField(this, \"enableGrid\");\n    __publicField(this, \"cursorZoom\");\n    __publicField(this, \"minFov\");\n    __publicField(this, \"maxFov\");\n    __publicField(this, \"enabled\");\n    __publicField(this, \"enablePan\");\n    __publicField(this, \"enableRotate\");\n    __publicField(this, \"enableZoom\");\n    __publicField(this, \"minDistance\");\n    __publicField(this, \"maxDistance\");\n    __publicField(this, \"minZoom\");\n    __publicField(this, \"maxZoom\");\n    __publicField(this, \"target\");\n    __publicField(this, \"_currentTarget\");\n    __publicField(this, \"_tbRadius\");\n    __publicField(this, \"_state\");\n    //listeners\n    __publicField(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n      }\n      const newRadius = this._tbRadius / scale;\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n      this.dispatchEvent(_changeEvent);\n    });\n    __publicField(this, \"onContextMenu\", (event) => {\n      if (!this.enabled) {\n        return;\n      }\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n    __publicField(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n      this._input = INPUT.NONE;\n    });\n    __publicField(this, \"onPointerDown\", (event) => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n        this._touchCurrent.push(event);\n        switch (this._input) {\n          case INPUT.NONE:\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, \"ROTATE\");\n            window.addEventListener(\"pointermove\", this.onPointerMove);\n            window.addEventListener(\"pointerup\", this.onPointerUp);\n            break;\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n          case INPUT.TWO_FINGER:\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.NONE) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n        if (this._mouseOp) {\n          window.addEventListener(\"pointermove\", this.onPointerMove);\n          window.addEventListener(\"pointerup\", this.onPointerUp);\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n    __publicField(this, \"onPointerMove\", (event) => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n            if (movement >= this._switchSensibility) {\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, \"ROTATE\");\n              break;\n            }\n            break;\n          case INPUT.TWO_FINGER:\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n          case INPUT.MULT_FINGER:\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      }\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n    __publicField(this, \"onPointerUp\", (event) => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n            this._touchStart.splice(i, 1);\n            break;\n          }\n        }\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            window.removeEventListener(\"pointermove\", this.onPointerMove);\n            window.removeEventListener(\"pointerup\", this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n          case INPUT.TWO_FINGER:\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd();\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener(\"pointermove\", this.onPointerMove);\n              window.removeEventListener(\"pointerup\", this.onPointerUp);\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        window.removeEventListener(\"pointermove\", this.onPointerMove);\n        window.removeEventListener(\"pointerup\", this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                this._nclicks = 0;\n                this._downEvents.splice(0, this._downEvents.length);\n                this.onDoubleTap(event);\n              } else {\n                this._nclicks = 1;\n                this._downEvents.shift();\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n    __publicField(this, \"onWheel\", (event) => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOp = this.getOpFromAction(\"WHEEL\", modifier);\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125;\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n          switch (mouseOp) {\n            case \"ZOOM\":\n              this.updateTbState(STATE.SCALE, true);\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n              if (this.cursorZoom && this.enablePan) {\n                let scalePoint;\n                if (this.camera instanceof OrthographicCamera) {\n                  scalePoint = (_a = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n                if (this.camera instanceof PerspectiveCamera) {\n                  scalePoint = (_b = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n                if (scalePoint !== void 0)\n                  this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n            case \"FOV\":\n              if (this.camera instanceof PerspectiveCamera) {\n                this.updateTbState(STATE.FOV, true);\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanStart\", (event, operation) => {\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        switch (operation) {\n          case \"PAN\":\n            if (!this.enablePan)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n            break;\n          case \"ROTATE\":\n            if (!this.enableRotate)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              this.activateGizmos(true);\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n                this._cursorPosPrev.copy(this._startCursorPosition);\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n            this.dispatchEvent(_changeEvent);\n            break;\n          case \"FOV\":\n            if (!this.enableZoom)\n              return;\n            if (this.camera instanceof PerspectiveCamera) {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n              this.updateTbState(STATE.FOV, true);\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n            break;\n          case \"ZOOM\":\n            if (!this.enableZoom)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            this.updateTbState(STATE.SCALE, true);\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n            this._currentCursorPosition.copy(this._startCursorPosition);\n            break;\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanMove\", (event, opState) => {\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n            break;\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(\n                  this.camera,\n                  _center.x,\n                  _center.y,\n                  this.domElement,\n                  this._tbRadius\n                );\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(true);\n              } else {\n                const rayDir = this.unprojectOnTbSurface(\n                  this.camera,\n                  _center.x,\n                  _center.y,\n                  this.domElement,\n                  this._tbRadius\n                );\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n                const amount = Math.max(distance / this._tbRadius, angle);\n                this.applyTransformMatrix(\n                  this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount)\n                );\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(\n                    this._anglePrev,\n                    this._angleCurrent,\n                    this._timePrev,\n                    this._timeCurrent\n                  );\n                }\n              }\n            }\n            break;\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n            break;\n          case STATE.FOV:\n            if (this.enableZoom && this.camera instanceof PerspectiveCamera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n            break;\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n        if (this.enableAnimations) {\n          const deltaTime = performance.now() - this._timeCurrent;\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function(t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoubleTap\", (event) => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n        if (hitP && this.enableAnimations) {\n          const self = this;\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0) {\n          this._startCursorPosition.copy(rayDir);\n        }\n        this._currentCursorPosition.copy(this._startCursorPosition);\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0)\n          this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onRotateStart\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true);\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_a = this.camera) == null ? void 0 : _a.getWorldDirection(this._rotationAxis);\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n    __publicField(this, \"onRotateMove\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        let rotationPoint;\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        }\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n          rotationPoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n        if (rotationPoint !== void 0) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onPinchMove\", () => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        const minDistance = 12;\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n        this._currentFingerDistance = Math.max(\n          this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]),\n          minDistance * this._devPxRatio\n        );\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          if (this.camera instanceof OrthographicCamera) {\n            scalePoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (this.camera instanceof PerspectiveCamera) {\n            scalePoint = (_b = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n        if (scalePoint !== void 0) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n    __publicField(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8;\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n        let xNew = x / size;\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    /**\n     * Set _center's x/y coordinates\n     * @param {Number} clientX\n     * @param {Number} clientY\n     */\n    __publicField(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    /**\n     * Set default mouse actions\n     */\n    __publicField(this, \"initializeMouseActions\", () => {\n      this.setMouseAction(\"PAN\", 0, \"CTRL\");\n      this.setMouseAction(\"PAN\", 2);\n      this.setMouseAction(\"ROTATE\", 0);\n      this.setMouseAction(\"ZOOM\", \"WHEEL\");\n      this.setMouseAction(\"ZOOM\", 1);\n      this.setMouseAction(\"FOV\", \"WHEEL\", \"SHIFT\");\n      this.setMouseAction(\"FOV\", 1, \"SHIFT\");\n    });\n    /**\n     * Set a new mouse action by specifying the operation to be performed and a mouse/key combination. In case of conflict, replaces the existing one\n     * @param {String} operation The operation to be performed ('PAN', 'ROTATE', 'ZOOM', 'FOV)\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns {Boolean} True if the mouse action has been successfully added, false otherwise\n     */\n    __publicField(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = [\"PAN\", \"ROTATE\", \"ZOOM\", \"FOV\"];\n      const mouseInput = [0, 1, 2, \"WHEEL\"];\n      const keyInput = [\"CTRL\", \"SHIFT\", null];\n      let state;\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        return false;\n      }\n      if (mouse == \"WHEEL\") {\n        if (operation != \"ZOOM\" && operation != \"FOV\") {\n          return false;\n        }\n      }\n      switch (operation) {\n        case \"PAN\":\n          state = STATE.PAN;\n          break;\n        case \"ROTATE\":\n          state = STATE.ROTATE;\n          break;\n        case \"ZOOM\":\n          state = STATE.SCALE;\n          break;\n        case \"FOV\":\n          state = STATE.FOV;\n          break;\n      }\n      const action = {\n        operation,\n        mouse,\n        key,\n        state\n      };\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n      this.mouseActions.push(action);\n      return true;\n    });\n    /**\n     * Return the operation associated to a mouse/keyboard combination\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns The operation if it has been found, null otherwise\n     */\n    __publicField(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Get the operation associated to mouse and key combination and returns the corresponding FSA state\n     * @param {Number} mouse Mouse button\n     * @param {String} key Keyboard modifier\n     * @returns The FSA state obtained from the operation associated to mouse/keyboard combination\n     */\n    __publicField(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Calculate the angle between two pointers\n     * @param {PointerEvent} p1\n     * @param {PointerEvent} p2\n     * @returns {Number} The angle between two pointers in degrees\n     */\n    __publicField(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    /**\n     * Update a PointerEvent inside current pointerevents array\n     * @param {PointerEvent} event\n     */\n    __publicField(this, \"updateTouchEvent\", (event) => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n          break;\n        }\n      }\n    });\n    /**\n     * Calculate the angular speed\n     * @param {Number} p0 Position at t0\n     * @param {Number} p1 Position at t1\n     * @param {Number} t0 Initial time in milliseconds\n     * @param {Number} t1 Ending time in milliseconds\n     */\n    __publicField(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1e3;\n      if (t == 0) {\n        return 0;\n      }\n      return s / t;\n    });\n    /**\n     * Calculate the distance between two pointers\n     * @param {PointerEvent} p0 The first pointer\n     * @param {PointerEvent} p1 The second pointer\n     * @returns {number} The distance between the two pointers\n     */\n    __publicField(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    /**\n     * Calculate the rotation axis as the vector perpendicular between two vectors\n     * @param {Vector3} vec1 The first vector\n     * @param {Vector3} vec2 The second vector\n     * @returns {Vector3} The normalized rotation axis\n     */\n    __publicField(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n      return this._rotationAxis.normalize().clone();\n    });\n    /**\n     * Calculate the trackball radius so that gizmo's diamater will be 2/3 of the minimum side of the camera frustum\n     * @param {Camera} camera\n     * @returns {Number} The trackball radius\n     */\n    __publicField(this, \"calculateTbRadius\", (camera) => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n      if (camera instanceof PerspectiveCamera) {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5;\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV));\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    /**\n     * Focus operation consist of positioning the point of interest in front of the camera and a slightly zoom in\n     * @param {Vector3} point The point of interest\n     * @param {Number} size Scale factor\n     * @param {Number} amount Amount of operation to be completed (used for focus animations, default is complete full operation)\n     */\n    __publicField(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone();\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        const cameraStateTemp = this._cameraMatrixState.clone();\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    /**\n     * Draw a grid and add it to the scene\n     */\n    __publicField(this, \"drawGrid\", () => {\n      if (this.scene) {\n        const color = 8947848;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n        if (this.camera instanceof OrthographicCamera) {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera) {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n          this._grid.position.copy(this._gizmos.position);\n          this._gridPosition.copy(this._grid.position);\n          this._grid.quaternion.copy(this.camera.quaternion);\n          this._grid.rotateX(Math.PI * 0.5);\n          this.scene.add(this._grid);\n        }\n      }\n    });\n    __publicField(this, \"connect\", (domElement) => {\n      if (domElement === document) {\n        console.error(\n          'THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.'\n        );\n      }\n      this.domElement = domElement;\n      this.domElement.style.touchAction = \"none\";\n      this.domElement.addEventListener(\"contextmenu\", this.onContextMenu);\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.addEventListener(\"pointercancel\", this.onPointerCancel);\n      this.domElement.addEventListener(\"wheel\", this.onWheel);\n    });\n    /**\n     * Remove all listeners, stop animations and clean scene\n     */\n    __publicField(this, \"dispose\", () => {\n      var _a, _b, _c, _d, _e;\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n      (_a = this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", this.onPointerDown);\n      (_b = this.domElement) == null ? void 0 : _b.removeEventListener(\"pointercancel\", this.onPointerCancel);\n      (_c = this.domElement) == null ? void 0 : _c.removeEventListener(\"wheel\", this.onWheel);\n      (_d = this.domElement) == null ? void 0 : _d.removeEventListener(\"contextmenu\", this.onContextMenu);\n      window.removeEventListener(\"pointermove\", this.onPointerMove);\n      window.removeEventListener(\"pointerup\", this.onPointerUp);\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      (_e = this.scene) == null ? void 0 : _e.remove(this._gizmos);\n      this.disposeGrid();\n    });\n    /**\n     * remove the grid from the scene\n     */\n    __publicField(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n    /**\n     * Compute the easing out cubic function for ease out effect in animation\n     * @param {Number} t The absolute progress of the animation in the bound of 0 (beginning of the) and 1 (ending of animation)\n     * @returns {Number} Result of easing out cubic at time t\n     */\n    __publicField(this, \"easeOutCubic\", (t) => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    /**\n     * Make rotation gizmos more or less visible\n     * @param {Boolean} isActive If true, make gizmos more visible\n     */\n    __publicField(this, \"activateGizmos\", (isActive) => {\n      for (const gizmo of this._gizmos.children) {\n        ;\n        gizmo.material.setValues({ opacity: isActive ? 1 : 0.6 });\n      }\n    });\n    /**\n     * Calculate the cursor position in NDC\n     * @param {number} x Cursor horizontal coordinate within the canvas\n     * @param {number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor normalized position inside the canvas\n     */\n    __publicField(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n      return this._v2_1.clone();\n    });\n    /**\n     * Calculate the cursor position inside the canvas x/y coordinates with the origin being in the center of the canvas\n     * @param {Number} x Cursor horizontal coordinate within the canvas\n     * @param {Number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor position inside the canvas\n     */\n    __publicField(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n      if (this.camera instanceof OrthographicCamera) {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n      return this._v2_1.clone();\n    });\n    /**\n     * Set the camera to be controlled\n     * @param {Camera} camera The virtual camera to be controlled\n     */\n    __publicField(this, \"setCamera\", (camera) => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix();\n        if (camera instanceof PerspectiveCamera) {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n        this._cameraMatrixState0.copy(camera.matrix);\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n        this._up0.copy(camera.up);\n        this._upState.copy(camera.up);\n        this.camera = camera;\n        this.camera.updateProjectionMatrix();\n        const tbRadius = this.calculateTbRadius(camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n    /**\n     * Creates the rotation gizmos matching trackball center and radius\n     * @param {Vector3} tbCenter The trackball center\n     * @param {number} tbRadius The trackball radius\n     */\n    __publicField(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      const curveMaterialX = new LineBasicMaterial({ color: 16744576, fog: false, transparent: true, opacity: 0.6 });\n      const curveMaterialY = new LineBasicMaterial({ color: 8454016, fog: false, transparent: true, opacity: 0.6 });\n      const curveMaterialZ = new LineBasicMaterial({ color: 8421631, fog: false, transparent: true, opacity: 0.6 });\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation;\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n      if (this.camera && this.camera.zoom != 1) {\n        const size = 1 / this.camera.zoom;\n        this._scaleMatrix.makeScale(size, size, size);\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.clear();\n      this._gizmos.add(gizmoX);\n      this._gizmos.add(gizmoY);\n      this._gizmos.add(gizmoZ);\n    });\n    /**\n     * Perform animation for focus operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} point Point of interest for focus operation\n     * @param {Matrix4} cameraMatrix Camera matrix\n     * @param {Matrix4} gizmoMatrix Gizmos matrix\n     */\n    __publicField(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n        this._gizmoMatrixState.copy(gizmoMatrix);\n        if (animTime >= 1) {\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n    /**\n     * Perform animation for rotation operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} rotationAxis Rotation axis\n     * @param {number} w0 Initial angular velocity\n     */\n    __publicField(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        const deltaTime = (time - this._timeStart) / 1e3;\n        const w = w0 + -this.dampingFactor * deltaTime;\n        if (w > 0) {\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    /**\n     * Perform pan operation moving camera between two points\n     * @param {Vector3} p0 Initial point\n     * @param {Vector3} p1 Ending point\n     * @param {Boolean} adjust If movement should be adjusted considering camera distance (Perspective only)\n     */\n    __publicField(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n        if (this.camera instanceof OrthographicCamera) {\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n        if (this.camera instanceof PerspectiveCamera && adjust) {\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0);\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0);\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n      return _transformation;\n    });\n    /**\n     * Reset trackball\n     */\n    __publicField(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = this._fov0;\n        }\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    /**\n     * Rotate the camera around an axis passing by trackball's center\n     * @param {Vector3} axis Rotation axis\n     * @param {number} angle Angle in radians\n     * @returns {Object} Object with 'camera' field containing transformation matrix resulting from the operation to be applied to the camera\n     */\n    __publicField(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position;\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._rotationMatrix.makeRotationAxis(axis, -angle);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n    __publicField(this, \"copyState\", () => {\n      if (this.camera) {\n        const state = JSON.stringify(\n          this.camera instanceof OrthographicCamera ? {\n            arcballState: {\n              cameraFar: this.camera.far,\n              cameraMatrix: this.camera.matrix,\n              cameraNear: this.camera.near,\n              cameraUp: this.camera.up,\n              cameraZoom: this.camera.zoom,\n              gizmoMatrix: this._gizmos.matrix\n            }\n          } : {\n            arcballState: {\n              cameraFar: this.camera.far,\n              cameraFov: this.camera.fov,\n              cameraMatrix: this.camera.matrix,\n              cameraNear: this.camera.near,\n              cameraUp: this.camera.up,\n              cameraZoom: this.camera.zoom,\n              gizmoMatrix: this._gizmos.matrix\n            }\n          }\n        );\n        navigator.clipboard.writeText(state);\n      }\n    });\n    __publicField(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    /**\n     * Save the current state of the control. This can later be recovered with .reset\n     */\n    __publicField(this, \"saveState\", () => {\n      if (!this.camera)\n        return;\n      this._cameraMatrixState0.copy(this.camera.matrix);\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n      this._up0.copy(this.camera.up);\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fov0 = this.camera.fov;\n      }\n    });\n    /**\n     * Perform uniform scale operation around a given point\n     * @param {Number} size Scale factor\n     * @param {Vector3} point Point around which scale\n     * @param {Boolean} scaleGizmos If gizmos should be scaled (Perspective only)\n     * @returns {Object} Object with 'camera' and 'gizmo' fields containing transformation matrices resulting from the operation to be applied to the camera and gizmos\n     */\n    __publicField(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera)\n        return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n      if (this.camera instanceof OrthographicCamera) {\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size;\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n        this.camera.updateProjectionMatrix();\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState);\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n        this._m4_2.multiply(this._translationMatrix);\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n        this._m4_2.premultiply(this._m4_1);\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        let distance = this._v3_1.distanceTo(scalePoint);\n        let amount = distance - distance * sizeInverse;\n        const newDistance = distance - amount;\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        if (scaleGizmos) {\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n          this._m4_2.multiply(this._scaleMatrix);\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n          this._m4_2.multiply(this._translationMatrix);\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n        return _transformation;\n      }\n    });\n    /**\n     * Set camera fov\n     * @param {Number} value fov to be setted\n     */\n    __publicField(this, \"setFov\", (value) => {\n      if (this.camera instanceof PerspectiveCamera) {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n    /**\n     * Set the trackball's center point\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Number} z Z coordinate\n     */\n    __publicField(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n        this._gizmos.position.set(x, y, z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n    /**\n     * Rotate camera around its direction axis passing by a given point by a given angle\n     * @param {Vector3} point The point where the rotation axis is passing trough\n     * @param {Number} angle Angle in radians\n     * @returns The computed transormation matix\n     */\n    __publicField(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point);\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle);\n      this._v3_2.sub(this._v3_1);\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n    /**\n     * Unproject the cursor on the 3D object surface\n     * @param {Vector2} cursor Cursor coordinates in NDC\n     * @param {Camera} camera Virtual camera\n     * @returns {Vector3} The point of intersection with the model, if exist, null otherwise\n     */\n    __publicField(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene)\n        return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n      return null;\n    });\n    /**\n     * Unproject the cursor on the trackball surface\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {number} tbRadius The trackball radius\n     * @returns {Vector3} The unprojected point on the trackball surface\n     */\n    __publicField(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n        if (x2 + y2 <= r2 * 0.5) {\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n        return this._v3_1;\n      }\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize();\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2);\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        if (l == 0) {\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n        if (delta >= 0) {\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n          this._v2_1.setY(m * this._v2_1.x + q);\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n          if (angle >= 45) {\n            const rayLength2 = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength2);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        }\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n        this._v2_1.setY(m * this._v2_1.x + q);\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    /**\n     * Unproject the cursor on the plane passing through the center of the trackball orthogonal to the camera\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {Boolean} initialDistance If initial distance between camera and gizmos should be used for calculations instead of current (Perspective only)\n     * @returns {Vector3} The unprojected point on the trackball plane\n     */\n    __publicField(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        return this._v3_1.clone();\n      }\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize();\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        if (l == 0) {\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    /**\n     * Update camera and gizmos state\n     */\n    __publicField(this, \"updateMatrixState\", () => {\n      if (!this.camera)\n        return;\n      this._cameraMatrixState.copy(this.camera.matrix);\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n      if (this.camera instanceof OrthographicCamera) {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fovState = this.camera.fov;\n      }\n    });\n    /**\n     * Update the trackball FSA\n     * @param {STATE} newState New state of the FSA\n     * @param {Boolean} updateMatrices If matriices state should be updated\n     */\n    __publicField(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n    __publicField(this, \"update\", () => {\n      const EPS = 1e-6;\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this._currentTarget.copy(this.target);\n      }\n      if (!this.camera)\n        return;\n      if (this.camera instanceof OrthographicCamera) {\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        }\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale;\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n      this.camera.lookAt(this._gizmos.position);\n    });\n    __publicField(this, \"setStateFromJSON\", (json) => {\n      const state = JSON.parse(json);\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this._gizmoMatrixState0.copy(gizmoTmp);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    this.camera = null;\n    this.domElement = domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null;\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion();\n    this._translationMatrix = new Matrix4();\n    this._rotationMatrix = new Matrix4();\n    this._scaleMatrix = new Matrix4();\n    this._rotationAxis = new Vector3();\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4();\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4();\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE;\n    this._switchSensibility = 32;\n    this._startFingerDistance = 0;\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0;\n    this._currentFingerRotation = 0;\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0;\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24;\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3();\n    this._grid = null;\n    this._gridPosition = new Vector3();\n    this._gizmos = new Group();\n    this._curvePts = 128;\n    this._timeStart = -1;\n    this._animationId = -1;\n    this.focusAnimationTime = 500;\n    this._timePrev = 0;\n    this._timeCurrent = 0;\n    this._anglePrev = 0;\n    this._angleCurrent = 0;\n    this._cursorPosPrev = new Vector3();\n    this._cursorPosCurr = new Vector3();\n    this._wPrev = 0;\n    this._wCurr = 0;\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1;\n    this.dampingFactor = 25;\n    this.wMax = 20;\n    this.enableAnimations = true;\n    this.enableGrid = false;\n    this.cursorZoom = false;\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1;\n    this._state = STATE.IDLE;\n    this.setCamera(camera);\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement)\n      this.connect(this.domElement);\n    window.addEventListener(\"resize\", this.onWindowResize);\n  }\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if ((transformation == null ? void 0 : transformation.camera) && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n      this.camera.updateMatrix();\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n    if (transformation == null ? void 0 : transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.updateMatrix();\n    }\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n      if (tbRadius !== void 0) {\n        this._tbRadius = tbRadius;\n      }\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n}\nexport {\n  ArcballControls\n};\n"]},"metadata":{},"sourceType":"module"}