{"ast":null,"code":"import { Line, BufferGeometry, BufferAttribute, LineBasicMaterial, MathUtils } from \"three\";\n\nclass PositionalAudioHelper extends Line {\n  constructor(audio, range = 1, divisionsInnerAngle = 16, divisionsOuterAngle = 2) {\n    const geometry = new BufferGeometry();\n    const divisions = divisionsInnerAngle + divisionsOuterAngle * 2;\n    const positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n    const materialInnerAngle = new LineBasicMaterial({\n      color: 65280\n    });\n    const materialOuterAngle = new LineBasicMaterial({\n      color: 16776960\n    });\n    super(geometry, [materialOuterAngle, materialInnerAngle]);\n    this.type = \"PositionalAudioHelper\";\n    this.audio = audio;\n    this.range = range;\n    this.divisionsInnerAngle = divisionsInnerAngle;\n    this.divisionsOuterAngle = divisionsOuterAngle;\n    this.update();\n  }\n\n  update() {\n    const audio = this.audio;\n    const range = this.range;\n    const divisionsInnerAngle = this.divisionsInnerAngle;\n    const divisionsOuterAngle = this.divisionsOuterAngle;\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n    const halfConeInnerAngle = coneInnerAngle / 2;\n    const halfConeOuterAngle = coneOuterAngle / 2;\n    let start = 0;\n    let count = 0;\n    let i, stride;\n    const geometry = this.geometry;\n    const positionAttribute = geometry.attributes.position;\n    geometry.clearGroups();\n\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions;\n      positionAttribute.setXYZ(start, 0, 0, 0);\n      count++;\n\n      for (i = from; i < to; i += step) {\n        stride = start + count;\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n        positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n        count += 3;\n      }\n\n      geometry.addGroup(start, count, materialIndex);\n      start += count;\n      count = 0;\n    }\n\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0);\n    positionAttribute.needsUpdate = true;\n    if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material[0].dispose();\n    this.material[1].dispose();\n  }\n\n}\n\nexport { PositionalAudioHelper };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/helpers/PositionalAudioHelper.js"],"names":["Line","BufferGeometry","BufferAttribute","LineBasicMaterial","MathUtils","PositionalAudioHelper","constructor","audio","range","divisionsInnerAngle","divisionsOuterAngle","geometry","divisions","positions","Float32Array","setAttribute","materialInnerAngle","color","materialOuterAngle","type","update","coneInnerAngle","degToRad","panner","coneOuterAngle","halfConeInnerAngle","halfConeOuterAngle","start","count","i","stride","positionAttribute","attributes","position","clearGroups","generateSegment","from","to","materialIndex","step","setXYZ","Math","sin","cos","min","addGroup","needsUpdate","material","visible","dispose"],"mappings":"AAAA,SAASA,IAAT,EAAeC,cAAf,EAA+BC,eAA/B,EAAgDC,iBAAhD,EAAmEC,SAAnE,QAAoF,OAApF;;AACA,MAAMC,qBAAN,SAAoCL,IAApC,CAAyC;AACvCM,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAK,GAAG,CAAhB,EAAmBC,mBAAmB,GAAG,EAAzC,EAA6CC,mBAAmB,GAAG,CAAnE,EAAsE;AAC/E,UAAMC,QAAQ,GAAG,IAAIV,cAAJ,EAAjB;AACA,UAAMW,SAAS,GAAGH,mBAAmB,GAAGC,mBAAmB,GAAG,CAA9D;AACA,UAAMG,SAAS,GAAG,IAAIC,YAAJ,CAAiB,CAACF,SAAS,GAAG,CAAZ,GAAgB,CAAjB,IAAsB,CAAvC,CAAlB;AACAD,IAAAA,QAAQ,CAACI,YAAT,CAAsB,UAAtB,EAAkC,IAAIb,eAAJ,CAAoBW,SAApB,EAA+B,CAA/B,CAAlC;AACA,UAAMG,kBAAkB,GAAG,IAAIb,iBAAJ,CAAsB;AAAEc,MAAAA,KAAK,EAAE;AAAT,KAAtB,CAA3B;AACA,UAAMC,kBAAkB,GAAG,IAAIf,iBAAJ,CAAsB;AAAEc,MAAAA,KAAK,EAAE;AAAT,KAAtB,CAA3B;AACA,UAAMN,QAAN,EAAgB,CAACO,kBAAD,EAAqBF,kBAArB,CAAhB;AACA,SAAKG,IAAL,GAAY,uBAAZ;AACA,SAAKZ,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKU,MAAL;AACD;;AACDA,EAAAA,MAAM,GAAG;AACP,UAAMb,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMC,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMC,mBAAmB,GAAG,KAAKA,mBAAjC;AACA,UAAMC,mBAAmB,GAAG,KAAKA,mBAAjC;AACA,UAAMW,cAAc,GAAGjB,SAAS,CAACkB,QAAV,CAAmBf,KAAK,CAACgB,MAAN,CAAaF,cAAhC,CAAvB;AACA,UAAMG,cAAc,GAAGpB,SAAS,CAACkB,QAAV,CAAmBf,KAAK,CAACgB,MAAN,CAAaC,cAAhC,CAAvB;AACA,UAAMC,kBAAkB,GAAGJ,cAAc,GAAG,CAA5C;AACA,UAAMK,kBAAkB,GAAGF,cAAc,GAAG,CAA5C;AACA,QAAIG,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,CAAJ,EAAOC,MAAP;AACA,UAAMnB,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMoB,iBAAiB,GAAGpB,QAAQ,CAACqB,UAAT,CAAoBC,QAA9C;AACAtB,IAAAA,QAAQ,CAACuB,WAAT;;AACA,aAASC,eAAT,CAAyBC,IAAzB,EAA+BC,EAA/B,EAAmCzB,SAAnC,EAA8C0B,aAA9C,EAA6D;AAC3D,YAAMC,IAAI,GAAG,CAACF,EAAE,GAAGD,IAAN,IAAcxB,SAA3B;AACAmB,MAAAA,iBAAiB,CAACS,MAAlB,CAAyBb,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC;AACAC,MAAAA,KAAK;;AACL,WAAKC,CAAC,GAAGO,IAAT,EAAeP,CAAC,GAAGQ,EAAnB,EAAuBR,CAAC,IAAIU,IAA5B,EAAkC;AAChCT,QAAAA,MAAM,GAAGH,KAAK,GAAGC,KAAjB;AACAG,QAAAA,iBAAiB,CAACS,MAAlB,CAAyBV,MAAzB,EAAiCW,IAAI,CAACC,GAAL,CAASb,CAAT,IAAcrB,KAA/C,EAAsD,CAAtD,EAAyDiC,IAAI,CAACE,GAAL,CAASd,CAAT,IAAcrB,KAAvE;AACAuB,QAAAA,iBAAiB,CAACS,MAAlB,CACEV,MAAM,GAAG,CADX,EAEEW,IAAI,CAACC,GAAL,CAASD,IAAI,CAACG,GAAL,CAASf,CAAC,GAAGU,IAAb,EAAmBF,EAAnB,CAAT,IAAmC7B,KAFrC,EAGE,CAHF,EAIEiC,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAASf,CAAC,GAAGU,IAAb,EAAmBF,EAAnB,CAAT,IAAmC7B,KAJrC;AAMAuB,QAAAA,iBAAiB,CAACS,MAAlB,CAAyBV,MAAM,GAAG,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C;AACAF,QAAAA,KAAK,IAAI,CAAT;AACD;;AACDjB,MAAAA,QAAQ,CAACkC,QAAT,CAAkBlB,KAAlB,EAAyBC,KAAzB,EAAgCU,aAAhC;AACAX,MAAAA,KAAK,IAAIC,KAAT;AACAA,MAAAA,KAAK,GAAG,CAAR;AACD;;AACDO,IAAAA,eAAe,CAAC,CAACT,kBAAF,EAAsB,CAACD,kBAAvB,EAA2Cf,mBAA3C,EAAgE,CAAhE,CAAf;AACAyB,IAAAA,eAAe,CAAC,CAACV,kBAAF,EAAsBA,kBAAtB,EAA0ChB,mBAA1C,EAA+D,CAA/D,CAAf;AACA0B,IAAAA,eAAe,CAACV,kBAAD,EAAqBC,kBAArB,EAAyChB,mBAAzC,EAA8D,CAA9D,CAAf;AACAqB,IAAAA,iBAAiB,CAACe,WAAlB,GAAgC,IAAhC;AACA,QAAIzB,cAAc,KAAKG,cAAvB,EACE,KAAKuB,QAAL,CAAc,CAAd,EAAiBC,OAAjB,GAA2B,KAA3B;AACH;;AACDC,EAAAA,OAAO,GAAG;AACR,SAAKtC,QAAL,CAAcsC,OAAd;AACA,SAAKF,QAAL,CAAc,CAAd,EAAiBE,OAAjB;AACA,SAAKF,QAAL,CAAc,CAAd,EAAiBE,OAAjB;AACD;;AA9DsC;;AAgEzC,SACE5C,qBADF","sourcesContent":["import { Line, BufferGeometry, BufferAttribute, LineBasicMaterial, MathUtils } from \"three\";\nclass PositionalAudioHelper extends Line {\n  constructor(audio, range = 1, divisionsInnerAngle = 16, divisionsOuterAngle = 2) {\n    const geometry = new BufferGeometry();\n    const divisions = divisionsInnerAngle + divisionsOuterAngle * 2;\n    const positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n    const materialInnerAngle = new LineBasicMaterial({ color: 65280 });\n    const materialOuterAngle = new LineBasicMaterial({ color: 16776960 });\n    super(geometry, [materialOuterAngle, materialInnerAngle]);\n    this.type = \"PositionalAudioHelper\";\n    this.audio = audio;\n    this.range = range;\n    this.divisionsInnerAngle = divisionsInnerAngle;\n    this.divisionsOuterAngle = divisionsOuterAngle;\n    this.update();\n  }\n  update() {\n    const audio = this.audio;\n    const range = this.range;\n    const divisionsInnerAngle = this.divisionsInnerAngle;\n    const divisionsOuterAngle = this.divisionsOuterAngle;\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n    const halfConeInnerAngle = coneInnerAngle / 2;\n    const halfConeOuterAngle = coneOuterAngle / 2;\n    let start = 0;\n    let count = 0;\n    let i, stride;\n    const geometry = this.geometry;\n    const positionAttribute = geometry.attributes.position;\n    geometry.clearGroups();\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions;\n      positionAttribute.setXYZ(start, 0, 0, 0);\n      count++;\n      for (i = from; i < to; i += step) {\n        stride = start + count;\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n        positionAttribute.setXYZ(\n          stride + 1,\n          Math.sin(Math.min(i + step, to)) * range,\n          0,\n          Math.cos(Math.min(i + step, to)) * range\n        );\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n        count += 3;\n      }\n      geometry.addGroup(start, count, materialIndex);\n      start += count;\n      count = 0;\n    }\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0);\n    positionAttribute.needsUpdate = true;\n    if (coneInnerAngle === coneOuterAngle)\n      this.material[0].visible = false;\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material[0].dispose();\n    this.material[1].dispose();\n  }\n}\nexport {\n  PositionalAudioHelper\n};\n"]},"metadata":{},"sourceType":"module"}