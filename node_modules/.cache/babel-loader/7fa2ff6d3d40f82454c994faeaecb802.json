{"ast":null,"code":"import _objectSpread from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, BufferAttribute, Box3, FrontSide, Matrix4 } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG } from './Constants.js';\nimport { buildPackedTree } from './buildFunctions.js';\nimport { raycast as _raycast, raycastFirst as _raycastFirst, shapecast as _shapecast, intersectsGeometry as _intersectsGeometry, setBuffer, clearBuffer } from './castFunctions.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { iterateOverTriangles, setTriangle } from '../utils/TriangleUtilities.js';\nvar SKIP_GENERATION = Symbol('skip tree generation');\nvar aabb = /* @__PURE__ */new Box3();\nvar aabb2 = /* @__PURE__ */new Box3();\nvar tempMatrix = /* @__PURE__ */new Matrix4();\nvar obb = /* @__PURE__ */new OrientedBox();\nvar obb2 = /* @__PURE__ */new OrientedBox();\nvar temp = /* @__PURE__ */new Vector3();\nvar temp1 = /* @__PURE__ */new Vector3();\nvar temp2 = /* @__PURE__ */new Vector3();\nvar temp3 = /* @__PURE__ */new Vector3();\nvar temp4 = /* @__PURE__ */new Vector3();\nvar tempBox = /* @__PURE__ */new Box3();\nvar trianglePool = /* @__PURE__ */new PrimitivePool(function () {\n  return new ExtendedTriangle();\n});\nexport var MeshBVH = /*#__PURE__*/function () {\n  function MeshBVH(geometry) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MeshBVH);\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('MeshBVH: Only BufferGeometries are supported.');\n    } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {\n      throw new Error('MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.');\n    } // default options\n\n\n    options = Object.assign(_defineProperty({\n      strategy: CENTER,\n      maxDepth: 40,\n      maxLeafTris: 10,\n      verbose: true,\n      useSharedArrayBuffer: false,\n      setBoundingBox: true,\n      onProgress: null\n    }, SKIP_GENERATION, false), options);\n\n    if (options.useSharedArrayBuffer && typeof SharedArrayBuffer === 'undefined') {\n      throw new Error('MeshBVH: SharedArrayBuffer is not available.');\n    }\n\n    this._roots = null;\n\n    if (!options[SKIP_GENERATION]) {\n      this._roots = buildPackedTree(geometry, options);\n\n      if (!geometry.boundingBox && options.setBoundingBox) {\n        geometry.boundingBox = this.getBoundingBox(new Box3());\n      }\n    } // retain references to the geometry so we can use them it without having to\n    // take a geometry reference in every function.\n\n\n    this.geometry = geometry;\n  }\n\n  _createClass(MeshBVH, [{\n    key: \"refit\",\n    value: function refit() {\n      var nodeIndices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (nodeIndices && Array.isArray(nodeIndices)) {\n        nodeIndices = new Set(nodeIndices);\n      }\n\n      var geometry = this.geometry;\n      var indexArr = geometry.index.array;\n      var posAttr = geometry.attributes.position;\n      var buffer, uint32Array, uint16Array, float32Array;\n      var byteOffset = 0;\n      var roots = this._roots;\n\n      for (var i = 0, l = roots.length; i < l; i++) {\n        buffer = roots[i];\n        uint32Array = new Uint32Array(buffer);\n        uint16Array = new Uint16Array(buffer);\n        float32Array = new Float32Array(buffer);\n\n        _traverse(0, byteOffset);\n\n        byteOffset += buffer.byteLength;\n      }\n\n      function _traverse(node32Index, byteOffset) {\n        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var node16Index = node32Index * 2;\n        var isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n\n        if (isLeaf) {\n          var offset = uint32Array[node32Index + 6];\n          var count = uint16Array[node16Index + 14];\n          var minx = Infinity;\n          var miny = Infinity;\n          var minz = Infinity;\n          var maxx = -Infinity;\n          var maxy = -Infinity;\n          var maxz = -Infinity;\n\n          for (var _i = 3 * offset, _l = 3 * (offset + count); _i < _l; _i++) {\n            var index = indexArr[_i];\n            var x = posAttr.getX(index);\n            var y = posAttr.getY(index);\n            var z = posAttr.getZ(index);\n            if (x < minx) minx = x;\n            if (x > maxx) maxx = x;\n            if (y < miny) miny = y;\n            if (y > maxy) maxy = y;\n            if (z < minz) minz = z;\n            if (z > maxz) maxz = z;\n          }\n\n          if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {\n            float32Array[node32Index + 0] = minx;\n            float32Array[node32Index + 1] = miny;\n            float32Array[node32Index + 2] = minz;\n            float32Array[node32Index + 3] = maxx;\n            float32Array[node32Index + 4] = maxy;\n            float32Array[node32Index + 5] = maxz;\n            return true;\n          } else {\n            return false;\n          }\n        } else {\n          var left = node32Index + 8;\n          var right = uint32Array[node32Index + 6]; // the identifying node indices provided by the shapecast function include offsets of all\n          // root buffers to guarantee they're unique between roots so offset left and right indices here.\n\n          var offsetLeft = left + byteOffset;\n          var offsetRight = right + byteOffset;\n          var forceChildren = force;\n          var includesLeft = false;\n          var includesRight = false;\n\n          if (nodeIndices) {\n            // if we see that neither the left or right child are included in the set that need to be updated\n            // then we assume that all children need to be updated.\n            if (!forceChildren) {\n              includesLeft = nodeIndices.has(offsetLeft);\n              includesRight = nodeIndices.has(offsetRight);\n              forceChildren = !includesLeft && !includesRight;\n            }\n          } else {\n            includesLeft = true;\n            includesRight = true;\n          }\n\n          var traverseLeft = forceChildren || includesLeft;\n          var traverseRight = forceChildren || includesRight;\n          var leftChange = false;\n\n          if (traverseLeft) {\n            leftChange = _traverse(left, byteOffset, forceChildren);\n          }\n\n          var rightChange = false;\n\n          if (traverseRight) {\n            rightChange = _traverse(right, byteOffset, forceChildren);\n          }\n\n          var didChange = leftChange || rightChange;\n\n          if (didChange) {\n            for (var _i2 = 0; _i2 < 3; _i2++) {\n              var lefti = left + _i2;\n              var righti = right + _i2;\n              var minLeftValue = float32Array[lefti];\n              var maxLeftValue = float32Array[lefti + 3];\n              var minRightValue = float32Array[righti];\n              var maxRightValue = float32Array[righti + 3];\n              float32Array[node32Index + _i2] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n              float32Array[node32Index + _i2 + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n            }\n          }\n\n          return didChange;\n        }\n      }\n    }\n  }, {\n    key: \"traverse\",\n    value: function traverse(callback) {\n      var rootIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var buffer = this._roots[rootIndex];\n      var uint32Array = new Uint32Array(buffer);\n      var uint16Array = new Uint16Array(buffer);\n\n      _traverse(0);\n\n      function _traverse(node32Index) {\n        var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var node16Index = node32Index * 2;\n        var isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;\n\n        if (isLeaf) {\n          var offset = uint32Array[node32Index + 6];\n          var count = uint16Array[node16Index + 14];\n          callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);\n        } else {\n          // TODO: use node functions here\n          var left = node32Index + BYTES_PER_NODE / 4;\n          var right = uint32Array[node32Index + 6];\n          var splitAxis = uint32Array[node32Index + 7];\n          var stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);\n\n          if (!stopTraversal) {\n            _traverse(left, depth + 1);\n\n            _traverse(right, depth + 1);\n          }\n        }\n      }\n    }\n    /* Core Cast Functions */\n\n  }, {\n    key: \"raycast\",\n    value: function raycast(ray) {\n      var materialOrSide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FrontSide;\n      var roots = this._roots;\n      var geometry = this.geometry;\n      var intersects = [];\n      var isMaterial = materialOrSide.isMaterial;\n      var isArrayMaterial = Array.isArray(materialOrSide);\n      var groups = geometry.groups;\n      var side = isMaterial ? materialOrSide.side : materialOrSide;\n\n      for (var i = 0, l = roots.length; i < l; i++) {\n        var materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n        var startCount = intersects.length;\n        setBuffer(roots[i]);\n\n        _raycast(0, geometry, materialSide, ray, intersects);\n\n        clearBuffer();\n\n        if (isArrayMaterial) {\n          var materialIndex = groups[i].materialIndex;\n\n          for (var j = startCount, jl = intersects.length; j < jl; j++) {\n            intersects[j].face.materialIndex = materialIndex;\n          }\n        }\n      }\n\n      return intersects;\n    }\n  }, {\n    key: \"raycastFirst\",\n    value: function raycastFirst(ray) {\n      var materialOrSide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FrontSide;\n      var roots = this._roots;\n      var geometry = this.geometry;\n      var isMaterial = materialOrSide.isMaterial;\n      var isArrayMaterial = Array.isArray(materialOrSide);\n      var closestResult = null;\n      var groups = geometry.groups;\n      var side = isMaterial ? materialOrSide.side : materialOrSide;\n\n      for (var i = 0, l = roots.length; i < l; i++) {\n        var materialSide = isArrayMaterial ? materialOrSide[groups[i].materialIndex].side : side;\n        setBuffer(roots[i]);\n\n        var result = _raycastFirst(0, geometry, materialSide, ray);\n\n        clearBuffer();\n\n        if (result != null && (closestResult == null || result.distance < closestResult.distance)) {\n          closestResult = result;\n\n          if (isArrayMaterial) {\n            result.face.materialIndex = groups[i].materialIndex;\n          }\n        }\n      }\n\n      return closestResult;\n    }\n  }, {\n    key: \"intersectsGeometry\",\n    value: function intersectsGeometry(otherGeometry, geomToMesh) {\n      var geometry = this.geometry;\n      var result = false;\n\n      var _iterator = _createForOfIteratorHelper(this._roots),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var root = _step.value;\n          setBuffer(root);\n          result = _intersectsGeometry(0, geometry, otherGeometry, geomToMesh);\n          clearBuffer();\n\n          if (result) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"shapecast\",\n    value: function shapecast(callbacks, _intersectsTriangleFunc, _orderNodesFunc) {\n      var geometry = this.geometry;\n\n      if (callbacks instanceof Function) {\n        if (_intersectsTriangleFunc) {\n          // Support the previous function signature that provided three sequential index buffer\n          // indices here.\n          var originalTriangleFunc = _intersectsTriangleFunc;\n\n          _intersectsTriangleFunc = function _intersectsTriangleFunc(tri, index, contained, depth) {\n            var i3 = index * 3;\n            return originalTriangleFunc(tri, i3, i3 + 1, i3 + 2, contained, depth);\n          };\n        }\n\n        callbacks = {\n          boundsTraverseOrder: _orderNodesFunc,\n          intersectsBounds: callbacks,\n          intersectsTriangle: _intersectsTriangleFunc,\n          intersectsRange: null\n        };\n        console.warn('MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.');\n      }\n\n      var triangle = trianglePool.getPrimitive();\n      var _callbacks = callbacks,\n          boundsTraverseOrder = _callbacks.boundsTraverseOrder,\n          intersectsBounds = _callbacks.intersectsBounds,\n          intersectsRange = _callbacks.intersectsRange,\n          intersectsTriangle = _callbacks.intersectsTriangle;\n\n      if (intersectsRange && intersectsTriangle) {\n        var originalIntersectsRange = intersectsRange;\n\n        intersectsRange = function intersectsRange(offset, count, contained, depth, nodeIndex) {\n          if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {\n            return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n          }\n\n          return true;\n        };\n      } else if (!intersectsRange) {\n        if (intersectsTriangle) {\n          intersectsRange = function intersectsRange(offset, count, contained, depth) {\n            return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);\n          };\n        } else {\n          intersectsRange = function intersectsRange(offset, count, contained) {\n            return contained;\n          };\n        }\n      }\n\n      var result = false;\n      var byteOffset = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(this._roots),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var root = _step2.value;\n          setBuffer(root);\n          result = _shapecast(0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);\n          clearBuffer();\n\n          if (result) {\n            break;\n          }\n\n          byteOffset += root.byteLength;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      trianglePool.releasePrimitive(triangle);\n      return result;\n    }\n  }, {\n    key: \"bvhcast\",\n    value: function bvhcast(otherBvh, matrixToLocal, callbacks) {\n      // BVHCast function for intersecting two BVHs against each other. Ultimately just uses two recursive shapecast calls rather\n      // than an approach that walks down the tree (see bvhcast.js file for more info).\n      var intersectsRanges = callbacks.intersectsRanges,\n          intersectsTriangles = callbacks.intersectsTriangles;\n      var indexAttr = this.geometry.index;\n      var positionAttr = this.geometry.attributes.position;\n      var otherIndexAttr = otherBvh.geometry.index;\n      var otherPositionAttr = otherBvh.geometry.attributes.position;\n      tempMatrix.copy(matrixToLocal).invert();\n      var triangle = trianglePool.getPrimitive();\n      var triangle2 = trianglePool.getPrimitive();\n\n      if (intersectsTriangles) {\n        var iterateOverDoubleTriangles = function iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n          for (var i2 = offset2, l2 = offset2 + count2; i2 < l2; i2++) {\n            setTriangle(triangle2, i2 * 3, otherIndexAttr, otherPositionAttr);\n            triangle2.a.applyMatrix4(matrixToLocal);\n            triangle2.b.applyMatrix4(matrixToLocal);\n            triangle2.c.applyMatrix4(matrixToLocal);\n            triangle2.needsUpdate = true;\n\n            for (var i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++) {\n              setTriangle(triangle, i1 * 3, indexAttr, positionAttr);\n              triangle.needsUpdate = true;\n\n              if (intersectsTriangles(triangle, triangle2, i1, i2, depth1, index1, depth2, index2)) {\n                return true;\n              }\n            }\n          }\n\n          return false;\n        };\n\n        if (intersectsRanges) {\n          var originalIntersectsRanges = intersectsRanges;\n\n          intersectsRanges = function intersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {\n            if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {\n              return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);\n            }\n\n            return true;\n          };\n        } else {\n          intersectsRanges = iterateOverDoubleTriangles;\n        }\n      }\n\n      otherBvh.getBoundingBox(aabb2);\n      aabb2.applyMatrix4(matrixToLocal);\n      var result = this.shapecast({\n        intersectsBounds: function intersectsBounds(box) {\n          return aabb2.intersectsBox(box);\n        },\n        intersectsRange: function intersectsRange(offset1, count1, contained, depth1, nodeIndex1, box) {\n          aabb.copy(box);\n          aabb.applyMatrix4(tempMatrix);\n          return otherBvh.shapecast({\n            intersectsBounds: function intersectsBounds(box) {\n              return aabb.intersectsBox(box);\n            },\n            intersectsRange: function intersectsRange(offset2, count2, contained, depth2, nodeIndex2) {\n              return intersectsRanges(offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2);\n            }\n          });\n        }\n      });\n      trianglePool.releasePrimitive(triangle);\n      trianglePool.releasePrimitive(triangle2);\n      return result;\n    }\n    /* Derived Cast Functions */\n\n  }, {\n    key: \"intersectsBox\",\n    value: function intersectsBox(box, boxToMesh) {\n      obb.set(box.min, box.max, boxToMesh);\n      obb.needsUpdate = true;\n      return this.shapecast({\n        intersectsBounds: function intersectsBounds(box) {\n          return obb.intersectsBox(box);\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          return obb.intersectsTriangle(tri);\n        }\n      });\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      return this.shapecast({\n        intersectsBounds: function intersectsBounds(box) {\n          return sphere.intersectsBox(box);\n        },\n        intersectsTriangle: function intersectsTriangle(tri) {\n          return tri.intersectsSphere(sphere);\n        }\n      });\n    }\n  }, {\n    key: \"closestPointToGeometry\",\n    value: function closestPointToGeometry(otherGeometry, geometryToBvh) {\n      var target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var minThreshold = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var maxThreshold = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Infinity;\n\n      if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n      }\n\n      obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n      obb.needsUpdate = true;\n      var geometry = this.geometry;\n      var pos = geometry.attributes.position;\n      var index = geometry.index;\n      var otherPos = otherGeometry.attributes.position;\n      var otherIndex = otherGeometry.index;\n      var triangle = trianglePool.getPrimitive();\n      var triangle2 = trianglePool.getPrimitive();\n      var tempTarget1 = temp1;\n      var tempTargetDest1 = temp2;\n      var tempTarget2 = null;\n      var tempTargetDest2 = null;\n\n      if (target2) {\n        tempTarget2 = temp3;\n        tempTargetDest2 = temp4;\n      }\n\n      var closestDistance = Infinity;\n      var closestDistanceTriIndex = null;\n      var closestDistanceOtherTriIndex = null;\n      tempMatrix.copy(geometryToBvh).invert();\n      obb2.matrix.copy(tempMatrix);\n      this.shapecast({\n        boundsTraverseOrder: function boundsTraverseOrder(box) {\n          return obb.distanceToBox(box);\n        },\n        intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n          if (score < closestDistance && score < maxThreshold) {\n            // if we know the triangles of this bounds will be intersected next then\n            // save the bounds to use during triangle checks.\n            if (isLeaf) {\n              obb2.min.copy(box.min);\n              obb2.max.copy(box.max);\n              obb2.needsUpdate = true;\n            }\n\n            return true;\n          }\n\n          return false;\n        },\n        intersectsRange: function intersectsRange(offset, count) {\n          if (otherGeometry.boundsTree) {\n            // if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n            // the closest bounds in the other geometry to check.\n            return otherGeometry.boundsTree.shapecast({\n              boundsTraverseOrder: function boundsTraverseOrder(box) {\n                return obb2.distanceToBox(box);\n              },\n              intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n                return score < closestDistance && score < maxThreshold;\n              },\n              intersectsRange: function intersectsRange(otherOffset, otherCount) {\n                for (var i2 = otherOffset * 3, l2 = (otherOffset + otherCount) * 3; i2 < l2; i2 += 3) {\n                  setTriangle(triangle2, i2, otherIndex, otherPos);\n                  triangle2.a.applyMatrix4(geometryToBvh);\n                  triangle2.b.applyMatrix4(geometryToBvh);\n                  triangle2.c.applyMatrix4(geometryToBvh);\n                  triangle2.needsUpdate = true;\n\n                  for (var i = offset * 3, l = (offset + count) * 3; i < l; i += 3) {\n                    setTriangle(triangle, i, index, pos);\n                    triangle.needsUpdate = true;\n                    var dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n\n                    if (dist < closestDistance) {\n                      tempTargetDest1.copy(tempTarget1);\n\n                      if (tempTargetDest2) {\n                        tempTargetDest2.copy(tempTarget2);\n                      }\n\n                      closestDistance = dist;\n                      closestDistanceTriIndex = i / 3;\n                      closestDistanceOtherTriIndex = i2 / 3;\n                    } // stop traversal if we find a point that's under the given threshold\n\n\n                    if (dist < minThreshold) {\n                      return true;\n                    }\n                  }\n                }\n              }\n            });\n          } else {\n            // If no bounds tree then we'll just check every triangle.\n            var triCount = otherIndex ? otherIndex.count : otherPos.count;\n\n            for (var i2 = 0, l2 = triCount; i2 < l2; i2 += 3) {\n              setTriangle(triangle2, i2, otherIndex, otherPos);\n              triangle2.a.applyMatrix4(geometryToBvh);\n              triangle2.b.applyMatrix4(geometryToBvh);\n              triangle2.c.applyMatrix4(geometryToBvh);\n              triangle2.needsUpdate = true;\n\n              for (var i = offset * 3, l = (offset + count) * 3; i < l; i += 3) {\n                setTriangle(triangle, i, index, pos);\n                triangle.needsUpdate = true;\n                var dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);\n\n                if (dist < closestDistance) {\n                  tempTargetDest1.copy(tempTarget1);\n\n                  if (tempTargetDest2) {\n                    tempTargetDest2.copy(tempTarget2);\n                  }\n\n                  closestDistance = dist;\n                  closestDistanceTriIndex = i / 3;\n                  closestDistanceOtherTriIndex = i2 / 3;\n                } // stop traversal if we find a point that's under the given threshold\n\n\n                if (dist < minThreshold) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      });\n      trianglePool.releasePrimitive(triangle);\n      trianglePool.releasePrimitive(triangle2);\n      if (closestDistance === Infinity) return null;\n      if (!target1.point) target1.point = tempTargetDest1.clone();else target1.point.copy(tempTargetDest1);\n      target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;\n\n      if (target2) {\n        if (!target2.point) target2.point = tempTargetDest2.clone();else target2.point.copy(tempTargetDest2);\n        target2.point.applyMatrix4(tempMatrix);\n        tempTargetDest1.applyMatrix4(tempMatrix);\n        target2.distance = tempTargetDest1.sub(target2.point).length();\n        target2.faceIndex = closestDistanceOtherTriIndex;\n      }\n\n      return target1;\n    }\n  }, {\n    key: \"closestPointToPoint\",\n    value: function closestPointToPoint(point) {\n      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var minThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var maxThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n      // early out if under minThreshold\n      // skip checking if over maxThreshold\n      // set minThreshold = maxThreshold to quickly check if a point is within a threshold\n      // returns Infinity if no value found\n      var minThresholdSq = minThreshold * minThreshold;\n      var maxThresholdSq = maxThreshold * maxThreshold;\n      var closestDistanceSq = Infinity;\n      var closestDistanceTriIndex = null;\n      this.shapecast({\n        boundsTraverseOrder: function boundsTraverseOrder(box) {\n          temp.copy(point).clamp(box.min, box.max);\n          return temp.distanceToSquared(point);\n        },\n        intersectsBounds: function intersectsBounds(box, isLeaf, score) {\n          return score < closestDistanceSq && score < maxThresholdSq;\n        },\n        intersectsTriangle: function intersectsTriangle(tri, triIndex) {\n          tri.closestPointToPoint(point, temp);\n          var distSq = point.distanceToSquared(temp);\n\n          if (distSq < closestDistanceSq) {\n            temp1.copy(temp);\n            closestDistanceSq = distSq;\n            closestDistanceTriIndex = triIndex;\n          }\n\n          if (distSq < minThresholdSq) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      });\n      if (closestDistanceSq === Infinity) return null;\n      var closestDistance = Math.sqrt(closestDistanceSq);\n      if (!target.point) target.point = temp1.clone();else target.point.copy(temp1);\n      target.distance = closestDistance, target.faceIndex = closestDistanceTriIndex;\n      return target;\n    }\n  }, {\n    key: \"getBoundingBox\",\n    value: function getBoundingBox(target) {\n      target.makeEmpty();\n      var roots = this._roots;\n      roots.forEach(function (buffer) {\n        arrayToBox(0, new Float32Array(buffer), tempBox);\n        target.union(tempBox);\n      });\n      return target;\n    }\n  }], [{\n    key: \"serialize\",\n    value: function serialize(bvh) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.isBufferGeometry) {\n        console.warn('MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.');\n        return MeshBVH.serialize(arguments[0], {\n          cloneBuffers: arguments[2] === undefined ? true : arguments[2]\n        });\n      }\n\n      options = _objectSpread({\n        cloneBuffers: true\n      }, options);\n      var geometry = bvh.geometry;\n      var rootData = bvh._roots;\n      var indexAttribute = geometry.getIndex();\n      var result;\n\n      if (options.cloneBuffers) {\n        result = {\n          roots: rootData.map(function (root) {\n            return root.slice();\n          }),\n          index: indexAttribute.array.slice()\n        };\n      } else {\n        result = {\n          roots: rootData,\n          index: indexAttribute.array\n        };\n      }\n\n      return result;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data, geometry) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof options === 'boolean') {\n        console.warn('MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.');\n        return MeshBVH.deserialize(arguments[0], arguments[1], {\n          setIndex: arguments[2] === undefined ? true : arguments[2]\n        });\n      }\n\n      options = _objectSpread({\n        setIndex: true\n      }, options);\n      var index = data.index,\n          roots = data.roots;\n      var bvh = new MeshBVH(geometry, _objectSpread(_objectSpread({}, options), {}, _defineProperty({}, SKIP_GENERATION, true)));\n      bvh._roots = roots;\n\n      if (options.setIndex) {\n        var indexAttribute = geometry.getIndex();\n\n        if (indexAttribute === null) {\n          var newIndex = new BufferAttribute(data.index, 1, false);\n          geometry.setIndex(newIndex);\n        } else if (indexAttribute.array !== index) {\n          indexAttribute.array.set(index);\n          indexAttribute.needsUpdate = true;\n        }\n      }\n\n      return bvh;\n    }\n  }]);\n\n  return MeshBVH;\n}();","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-mesh-bvh/src/core/MeshBVH.js"],"names":["Vector3","BufferAttribute","Box3","FrontSide","Matrix4","CENTER","BYTES_PER_NODE","IS_LEAFNODE_FLAG","buildPackedTree","raycast","raycastFirst","shapecast","intersectsGeometry","setBuffer","clearBuffer","OrientedBox","ExtendedTriangle","PrimitivePool","arrayToBox","iterateOverTriangles","setTriangle","SKIP_GENERATION","Symbol","aabb","aabb2","tempMatrix","obb","obb2","temp","temp1","temp2","temp3","temp4","tempBox","trianglePool","MeshBVH","geometry","options","isBufferGeometry","Error","index","isInterleavedBufferAttribute","Object","assign","strategy","maxDepth","maxLeafTris","verbose","useSharedArrayBuffer","setBoundingBox","onProgress","SharedArrayBuffer","_roots","boundingBox","getBoundingBox","nodeIndices","Array","isArray","Set","indexArr","array","posAttr","attributes","position","buffer","uint32Array","uint16Array","float32Array","byteOffset","roots","i","l","length","Uint32Array","Uint16Array","Float32Array","_traverse","byteLength","node32Index","force","node16Index","isLeaf","offset","count","minx","Infinity","miny","minz","maxx","maxy","maxz","x","getX","y","getY","z","getZ","left","right","offsetLeft","offsetRight","forceChildren","includesLeft","includesRight","has","traverseLeft","traverseRight","leftChange","rightChange","didChange","lefti","righti","minLeftValue","maxLeftValue","minRightValue","maxRightValue","callback","rootIndex","depth","splitAxis","stopTraversal","ray","materialOrSide","intersects","isMaterial","isArrayMaterial","groups","side","materialSide","materialIndex","startCount","j","jl","face","closestResult","result","distance","otherGeometry","geomToMesh","root","callbacks","_intersectsTriangleFunc","_orderNodesFunc","Function","originalTriangleFunc","tri","contained","i3","boundsTraverseOrder","intersectsBounds","intersectsTriangle","intersectsRange","console","warn","triangle","getPrimitive","originalIntersectsRange","nodeIndex","releasePrimitive","otherBvh","matrixToLocal","intersectsRanges","intersectsTriangles","indexAttr","positionAttr","otherIndexAttr","otherPositionAttr","copy","invert","triangle2","iterateOverDoubleTriangles","offset1","count1","offset2","count2","depth1","index1","depth2","index2","i2","l2","a","applyMatrix4","b","c","needsUpdate","i1","l1","originalIntersectsRanges","box","intersectsBox","nodeIndex1","nodeIndex2","boxToMesh","set","min","max","sphere","intersectsSphere","geometryToBvh","target1","target2","minThreshold","maxThreshold","computeBoundingBox","pos","otherPos","otherIndex","tempTarget1","tempTargetDest1","tempTarget2","tempTargetDest2","closestDistance","closestDistanceTriIndex","closestDistanceOtherTriIndex","matrix","distanceToBox","score","boundsTree","otherOffset","otherCount","dist","distanceToTriangle","triCount","point","clone","faceIndex","sub","target","minThresholdSq","maxThresholdSq","closestDistanceSq","clamp","distanceToSquared","triIndex","closestPointToPoint","distSq","Math","sqrt","makeEmpty","forEach","union","bvh","serialize","arguments","cloneBuffers","undefined","rootData","indexAttribute","getIndex","map","slice","data","deserialize","setIndex","newIndex"],"mappings":"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","sourcesContent":["import { Vector3, BufferAttribute, Box3, FrontSide, Matrix4 } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG } from './Constants.js';\nimport { buildPackedTree } from './buildFunctions.js';\nimport {\n\traycast,\n\traycastFirst,\n\tshapecast,\n\tintersectsGeometry,\n\tsetBuffer,\n\tclearBuffer,\n} from './castFunctions.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from '../utils/PrimitivePool.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { iterateOverTriangles, setTriangle } from '../utils/TriangleUtilities.js';\n\nconst SKIP_GENERATION = Symbol( 'skip tree generation' );\n\nconst aabb = /* @__PURE__ */ new Box3();\nconst aabb2 = /* @__PURE__ */ new Box3();\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp = /* @__PURE__ */ new Vector3();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\nconst tempBox = /* @__PURE__ */ new Box3();\nconst trianglePool = /* @__PURE__ */ new PrimitivePool( () => new ExtendedTriangle() );\n\nexport class MeshBVH {\n\n\tstatic serialize( bvh, options = {} ) {\n\n\t\tif ( options.isBufferGeometry ) {\n\n\t\t\tconsole.warn( 'MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.' );\n\n\t\t\treturn MeshBVH.serialize(\n\t\t\t\targuments[ 0 ],\n\t\t\t\t{\n\t\t\t\t\tcloneBuffers: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\toptions = {\n\t\t\tcloneBuffers: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst rootData = bvh._roots;\n\t\tconst indexAttribute = geometry.getIndex();\n\t\tlet result;\n\t\tif ( options.cloneBuffers ) {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData.map( root => root.slice() ),\n\t\t\t\tindex: indexAttribute.array.slice(),\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData,\n\t\t\t\tindex: indexAttribute.array,\n\t\t\t};\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tstatic deserialize( data, geometry, options = {} ) {\n\n\t\tif ( typeof options === 'boolean' ) {\n\n\t\t\tconsole.warn( 'MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.' );\n\n\t\t\treturn MeshBVH.deserialize(\n\t\t\t\targuments[ 0 ],\n\t\t\t\targuments[ 1 ],\n\t\t\t\t{\n\t\t\t\t\tsetIndex: arguments[ 2 ] === undefined ? true : arguments[ 2 ],\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\toptions = {\n\t\t\tsetIndex: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst { index, roots } = data;\n\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\n\t\tbvh._roots = roots;\n\n\t\tif ( options.setIndex ) {\n\n\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\tif ( indexAttribute === null ) {\n\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\n\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t} else if ( indexAttribute.array !== index ) {\n\n\t\t\t\tindexAttribute.array.set( index );\n\t\t\t\tindexAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvh;\n\n\t}\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\n\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\n\n\t\t}\n\n\t\t// default options\n\t\toptions = Object.assign( {\n\n\t\t\tstrategy: CENTER,\n\t\t\tmaxDepth: 40,\n\t\t\tmaxLeafTris: 10,\n\t\t\tverbose: true,\n\t\t\tuseSharedArrayBuffer: false,\n\t\t\tsetBoundingBox: true,\n\t\t\tonProgress: null,\n\n\t\t\t// undocumented options\n\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\n\t\t\t[ SKIP_GENERATION ]: false,\n\n\t\t}, options );\n\n\t\tif ( options.useSharedArrayBuffer && typeof SharedArrayBuffer === 'undefined' ) {\n\n\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\n\n\t\t}\n\n\t\tthis._roots = null;\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\n\n\t\t\tthis._roots = buildPackedTree( geometry, options );\n\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\n\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// retain references to the geometry so we can use them it without having to\n\t\t// take a geometry reference in every function.\n\t\tthis.geometry = geometry;\n\n\t}\n\n\trefit( nodeIndices = null ) {\n\n\t\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\t\tnodeIndices = new Set( nodeIndices );\n\n\t\t}\n\n\t\tconst geometry = this.geometry;\n\t\tconst indexArr = geometry.index.array;\n\t\tconst posAttr = geometry.attributes.position;\n\n\t\tlet buffer, uint32Array, uint16Array, float32Array;\n\t\tlet byteOffset = 0;\n\t\tconst roots = this._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tbuffer = roots[ i ];\n\t\t\tuint32Array = new Uint32Array( buffer );\n\t\t\tuint16Array = new Uint16Array( buffer );\n\t\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t\t_traverse( 0, byteOffset );\n\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t}\n\n\t\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\t\tlet minx = Infinity;\n\t\t\t\tlet miny = Infinity;\n\t\t\t\tlet minz = Infinity;\n\t\t\t\tlet maxx = - Infinity;\n\t\t\t\tlet maxy = - Infinity;\n\t\t\t\tlet maxz = - Infinity;\n\n\t\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\n\n\t\t\t\t\tconst index = indexArr[ i ];\n\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t\t) {\n\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst left = node32Index + 8;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\t\tconst offsetRight = right + byteOffset;\n\t\t\t\tlet forceChildren = force;\n\t\t\t\tlet includesLeft = false;\n\t\t\t\tlet includesRight = false;\n\n\t\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tincludesLeft = true;\n\t\t\t\t\tincludesRight = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\t\tlet leftChange = false;\n\t\t\t\tif ( traverseLeft ) {\n\n\t\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tlet rightChange = false;\n\t\t\t\tif ( traverseRight ) {\n\n\t\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tconst didChange = leftChange || rightChange;\n\t\t\t\tif ( didChange ) {\n\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn didChange;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttraverse( callback, rootIndex = 0 ) {\n\n\t\tconst buffer = this._roots[ rootIndex ];\n\t\tconst uint32Array = new Uint32Array( buffer );\n\t\tconst uint16Array = new Uint16Array( buffer );\n\t\t_traverse( 0 );\n\n\t\tfunction _traverse( node32Index, depth = 0 ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: use node functions here\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\n\n\t\t\t\tif ( ! stopTraversal ) {\n\n\t\t\t\t\t_traverse( left, depth + 1 );\n\t\t\t\t\t_traverse( right, depth + 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Core Cast Functions */\n\traycast( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst intersects = [];\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst startCount = intersects.length;\n\n\t\t\tsetBuffer( roots[ i ] );\n\t\t\traycast( 0, geometry, materialSide, ray, intersects );\n\t\t\tclearBuffer();\n\n\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\n\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn intersects;\n\n\t}\n\n\traycastFirst( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tlet closestResult = null;\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\n\t\t\tsetBuffer( roots[ i ] );\n\t\t\tconst result = raycastFirst( 0, geometry, materialSide, ray );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\n\n\t\t\t\tclosestResult = result;\n\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn closestResult;\n\n\t}\n\n\tintersectsGeometry( otherGeometry, geomToMesh ) {\n\n\t\tconst geometry = this.geometry;\n\t\tlet result = false;\n\t\tfor ( const root of this._roots ) {\n\n\t\t\tsetBuffer( root );\n\t\t\tresult = intersectsGeometry( 0, geometry, otherGeometry, geomToMesh );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tshapecast( callbacks, _intersectsTriangleFunc, _orderNodesFunc ) {\n\n\t\tconst geometry = this.geometry;\n\t\tif ( callbacks instanceof Function ) {\n\n\t\t\tif ( _intersectsTriangleFunc ) {\n\n\t\t\t\t// Support the previous function signature that provided three sequential index buffer\n\t\t\t\t// indices here.\n\t\t\t\tconst originalTriangleFunc = _intersectsTriangleFunc;\n\t\t\t\t_intersectsTriangleFunc = ( tri, index, contained, depth ) => {\n\n\t\t\t\t\tconst i3 = index * 3;\n\t\t\t\t\treturn originalTriangleFunc( tri, i3, i3 + 1, i3 + 2, contained, depth );\n\n\t\t\t\t};\n\n\n\t\t\t}\n\n\t\t\tcallbacks = {\n\n\t\t\t\tboundsTraverseOrder: _orderNodesFunc,\n\t\t\t\tintersectsBounds: callbacks,\n\t\t\t\tintersectsTriangle: _intersectsTriangleFunc,\n\t\t\t\tintersectsRange: null,\n\n\t\t\t};\n\n\t\t\tconsole.warn( 'MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.' );\n\n\t\t}\n\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tlet {\n\t\t\tboundsTraverseOrder,\n\t\t\tintersectsBounds,\n\t\t\tintersectsRange,\n\t\t\tintersectsTriangle,\n\t\t} = callbacks;\n\n\t\tif ( intersectsRange && intersectsTriangle ) {\n\n\t\t\tconst originalIntersectsRange = intersectsRange;\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\n\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\n\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t} else if ( ! intersectsRange ) {\n\n\t\t\tif ( intersectsTriangle ) {\n\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\n\n\t\t\t\t\treturn iterateOverTriangles( offset, count, geometry, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\n\n\t\t\t\t\treturn contained;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet result = false;\n\t\tlet byteOffset = 0;\n\t\tfor ( const root of this._roots ) {\n\n\t\t\tsetBuffer( root );\n\t\t\tresult = shapecast( 0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\t\t\tclearBuffer();\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tbyteOffset += root.byteLength;\n\n\t\t}\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\n\t\treturn result;\n\n\t}\n\n\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\n\n\t\t// BVHCast function for intersecting two BVHs against each other. Ultimately just uses two recursive shapecast calls rather\n\t\t// than an approach that walks down the tree (see bvhcast.js file for more info).\n\n\t\tlet {\n\t\t\tintersectsRanges,\n\t\t\tintersectsTriangles,\n\t\t} = callbacks;\n\n\t\tconst indexAttr = this.geometry.index;\n\t\tconst positionAttr = this.geometry.attributes.position;\n\n\t\tconst otherIndexAttr = otherBvh.geometry.index;\n\t\tconst otherPositionAttr = otherBvh.geometry.attributes.position;\n\n\t\ttempMatrix.copy( matrixToLocal ).invert();\n\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tconst triangle2 = trianglePool.getPrimitive();\n\n\t\tif ( intersectsTriangles ) {\n\n\t\t\tfunction iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2 * 3, otherIndexAttr, otherPositionAttr );\n\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle, i1 * 3, indexAttr, positionAttr );\n\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\tif ( intersectsTriangles( triangle, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tif ( intersectsRanges ) {\n\n\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\n\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\n\n\t\t\t}\n\n\t\t}\n\n\t\totherBvh.getBoundingBox( aabb2 );\n\t\taabb2.applyMatrix4( matrixToLocal );\n\t\tconst result = this.shapecast( {\n\n\t\t\tintersectsBounds: box => aabb2.intersectsBox( box ),\n\n\t\t\tintersectsRange: ( offset1, count1, contained, depth1, nodeIndex1, box ) => {\n\n\t\t\t\taabb.copy( box );\n\t\t\t\taabb.applyMatrix4( tempMatrix );\n\t\t\t\treturn otherBvh.shapecast( {\n\n\t\t\t\t\tintersectsBounds: box => aabb.intersectsBox( box ),\n\n\t\t\t\t\tintersectsRange: ( offset2, count2, contained, depth2, nodeIndex2 ) => {\n\n\t\t\t\t\t\treturn intersectsRanges( offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2 );\n\n\t\t\t\t\t},\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\t\ttrianglePool.releasePrimitive( triangle2 );\n\t\treturn result;\n\n\t}\n\n\t/* Derived Cast Functions */\n\tintersectsBox( box, boxToMesh ) {\n\n\t\tobb.set( box.min, box.max, boxToMesh );\n\t\tobb.needsUpdate = true;\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tobb.needsUpdate = true;\n\n\t\tconst geometry = this.geometry;\n\t\tconst pos = geometry.attributes.position;\n\t\tconst index = geometry.index;\n\t\tconst otherPos = otherGeometry.attributes.position;\n\t\tconst otherIndex = otherGeometry.index;\n\t\tconst triangle = trianglePool.getPrimitive();\n\t\tconst triangle2 = trianglePool.getPrimitive();\n\n\t\tlet tempTarget1 = temp1;\n\t\tlet tempTargetDest1 = temp2;\n\t\tlet tempTarget2 = null;\n\t\tlet tempTargetDest2 = null;\n\n\t\tif ( target2 ) {\n\n\t\t\ttempTarget2 = temp3;\n\t\t\ttempTargetDest2 = temp4;\n\n\t\t}\n\n\t\tlet closestDistance = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tlet closestDistanceOtherTriIndex = null;\n\t\ttempMatrix.copy( geometryToBvh ).invert();\n\t\tobb2.matrix.copy( tempMatrix );\n\t\tthis.shapecast(\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\t\treturn otherGeometry.boundsTree.shapecast( {\n\t\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\t\tfor ( let i2 = otherOffset * 3, l2 = ( otherOffset + otherCount ) * 3; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\n\t\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\n\t\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\t\tconst triCount = otherIndex ? otherIndex.count : otherPos.count;\n\t\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\t\tsetTriangle( triangle2, i2, otherIndex, otherPos );\n\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\tsetTriangle( triangle, i, index, pos );\n\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i / 3;\n\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2 / 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\ttrianglePool.releasePrimitive( triangle );\n\t\ttrianglePool.releasePrimitive( triangle2 );\n\n\t\tif ( closestDistance === Infinity ) return null;\n\n\t\tif ( ! target1.point ) target1.point = tempTargetDest1.clone();\n\t\telse target1.point.copy( tempTargetDest1 );\n\t\ttarget1.distance = closestDistance,\n\t\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\t\tif ( target2 ) {\n\n\t\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\t\telse target2.point.copy( tempTargetDest2 );\n\t\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t\t}\n\n\t\treturn target1;\n\n\t}\n\n\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\t// early out if under minThreshold\n\t\t// skip checking if over maxThreshold\n\t\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\n\t\t// returns Infinity if no value found\n\t\tconst minThresholdSq = minThreshold * minThreshold;\n\t\tconst maxThresholdSq = maxThreshold * maxThreshold;\n\t\tlet closestDistanceSq = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tthis.shapecast(\n\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\n\t\t\t\t\treturn temp.distanceToSquared( point );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsTriangle: ( tri, triIndex ) => {\n\n\t\t\t\t\ttri.closestPointToPoint( point, temp );\n\t\t\t\t\tconst distSq = point.distanceToSquared( temp );\n\t\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\t\ttemp1.copy( temp );\n\t\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\t\tclosestDistanceTriIndex = triIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( distSq < minThresholdSq ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\tif ( closestDistanceSq === Infinity ) return null;\n\n\t\tconst closestDistance = Math.sqrt( closestDistanceSq );\n\n\t\tif ( ! target.point ) target.point = temp1.clone();\n\t\telse target.point.copy( temp1 );\n\t\ttarget.distance = closestDistance,\n\t\ttarget.faceIndex = closestDistanceTriIndex;\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\ttarget.makeEmpty();\n\n\t\tconst roots = this._roots;\n\t\troots.forEach( buffer => {\n\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\n\t\t\ttarget.union( tempBox );\n\n\t\t} );\n\n\t\treturn target;\n\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}