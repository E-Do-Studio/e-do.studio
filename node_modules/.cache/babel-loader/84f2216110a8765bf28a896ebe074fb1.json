{"ast":null,"code":"const PixelShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: null\n    },\n    pixelSize: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying highp vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float pixelSize;\", \"uniform vec2 resolution;\", \"varying highp vec2 vUv;\", \"void main(){\", \"vec2 dxy = pixelSize / resolution;\", \"vec2 coord = dxy * floor( vUv / dxy );\", \"gl_FragColor = texture2D(tDiffuse, coord);\", \"}\"].join(\"\\n\")\n};\nexport { PixelShader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/shaders/PixelShader.js"],"names":["PixelShader","uniforms","tDiffuse","value","resolution","pixelSize","vertexShader","join","fragmentShader"],"mappings":"AAAA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,UAAU,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFJ;AAGRE,IAAAA,SAAS,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT;AAHH,GADQ;AAMlBG,EAAAA,YAAY,EAAE,CACZ,yBADY,EAEZ,eAFY,EAGZ,WAHY,EAIZ,2EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CANI;AAalBC,EAAAA,cAAc,EAAE,CACd,6BADc,EAEd,0BAFc,EAGd,0BAHc,EAId,yBAJc,EAKd,cALc,EAMd,oCANc,EAOd,wCAPc,EAQd,4CARc,EASd,GATc,EAUdD,IAVc,CAUT,IAVS;AAbE,CAApB;AAyBA,SACEP,WADF","sourcesContent":["const PixelShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    resolution: { value: null },\n    pixelSize: { value: 1 }\n  },\n  vertexShader: [\n    \"varying highp vec2 vUv;\",\n    \"void main() {\",\n    \"vUv = uv;\",\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform float pixelSize;\",\n    \"uniform vec2 resolution;\",\n    \"varying highp vec2 vUv;\",\n    \"void main(){\",\n    \"vec2 dxy = pixelSize / resolution;\",\n    \"vec2 coord = dxy * floor( vUv / dxy );\",\n    \"gl_FragColor = texture2D(tDiffuse, coord);\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  PixelShader\n};\n"]},"metadata":{},"sourceType":"module"}