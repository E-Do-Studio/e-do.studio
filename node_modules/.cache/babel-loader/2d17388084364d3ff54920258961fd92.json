{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\n\nvar LightningStorm = /*#__PURE__*/function (_Object3D) {\n  _inherits(LightningStorm, _Object3D);\n\n  var _super = _createSuper(LightningStorm);\n\n  function LightningStorm() {\n    var _this;\n\n    var stormParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LightningStorm);\n\n    _this = _super.call(this);\n    _this.isLightningStorm = true;\n    _this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    _this.lightningParameters = LightningStrike.copyParameters(stormParams.lightningParameters, stormParams.lightningParameters);\n    _this.lightningParameters.isEternal = false;\n    _this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({\n      color: 11599871\n    });\n\n    if (stormParams.onRayPosition !== void 0) {\n      _this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      _this.onRayPosition = function (source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        var height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n\n    _this.onLightningDown = stormParams.onLightningDown;\n    _this.inited = false;\n    _this.nextLightningTime = 0;\n    _this.lightningsMeshes = [];\n    _this.deadLightningsMeshes = [];\n\n    for (var i = 0; i < _this.stormParams.maxLightnings; i++) {\n      var lightning = new LightningStrike(LightningStrike.copyParameters({}, _this.lightningParameters));\n      var mesh = new Mesh(lightning, _this.lightningMaterial);\n\n      _this.deadLightningsMeshes.push(mesh);\n    }\n\n    return _this;\n  }\n\n  _createClass(LightningStorm, [{\n    key: \"update\",\n    value: function update(time) {\n      if (!this.inited) {\n        this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n        this.inited = true;\n      }\n\n      if (time >= this.nextLightningTime) {\n        var lightningMesh = this.deadLightningsMeshes.pop();\n\n        if (lightningMesh) {\n          var lightningParams1 = LightningStrike.copyParameters(lightningMesh.geometry.rayParameters, this.lightningParameters);\n          lightningParams1.birthTime = time;\n          lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n          this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n          lightningParams1.noiseSeed = Math.random();\n          this.add(lightningMesh);\n          this.lightningsMeshes.push(lightningMesh);\n        }\n\n        this.nextLightningTime = this.getNextLightningTime(time);\n      }\n\n      var i = 0,\n          il = this.lightningsMeshes.length;\n\n      while (i < il) {\n        var mesh = this.lightningsMeshes[i];\n        var lightning = mesh.geometry;\n        var prevState = lightning.state;\n        lightning.update(time);\n\n        if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n          if (this.onLightningDown) {\n            this.onLightningDown(lightning);\n          }\n        }\n\n        if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n          this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n          this.deadLightningsMeshes.push(mesh);\n          this.remove(mesh);\n          il--;\n        } else {\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"getNextLightningTime\",\n    value: function getNextLightningTime(currentTime) {\n      return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source, recursive) {\n      _get(_getPrototypeOf(LightningStorm.prototype), \"copy\", this).call(this, source, recursive);\n\n      this.stormParams.size = source.stormParams.size;\n      this.stormParams.minHeight = source.stormParams.minHeight;\n      this.stormParams.maxHeight = source.stormParams.maxHeight;\n      this.stormParams.maxSlope = source.stormParams.maxSlope;\n      this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n      this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n      this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n      this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n      this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n      this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n      this.lightningMaterial = source.stormParams.lightningMaterial;\n      this.onLightningDown = source.onLightningDown;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.stormParams).copy(this);\n    }\n  }]);\n\n  return LightningStorm;\n}(Object3D);\n\nexport { LightningStorm };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/objects/LightningStorm.js"],"names":["Object3D","MeshBasicMaterial","MathUtils","Mesh","LightningStrike","LightningStorm","stormParams","isLightningStorm","size","minHeight","maxHeight","maxSlope","maxLightnings","lightningMinPeriod","lightningMaxPeriod","lightningMinDuration","lightningMaxDuration","lightningParameters","copyParameters","isEternal","lightningMaterial","color","onRayPosition","source","dest","set","Math","random","height","lerp","multiplyScalar","add","onLightningDown","inited","nextLightningTime","lightningsMeshes","deadLightningsMeshes","i","lightning","mesh","push","time","getNextLightningTime","lightningMesh","pop","lightningParams1","geometry","rayParameters","birthTime","deathTime","sourceOffset","destOffset","noiseSeed","il","length","prevState","state","update","RAY_PROPAGATING","RAY_EXTINGUISHED","splice","indexOf","remove","currentTime","recursive","constructor","copy"],"mappings":"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","sourcesContent":["import { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\nclass LightningStorm extends Object3D {\n  constructor(stormParams = {}) {\n    super();\n    this.isLightningStorm = true;\n    this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    this.lightningParameters = LightningStrike.copyParameters(\n      stormParams.lightningParameters,\n      stormParams.lightningParameters\n    );\n    this.lightningParameters.isEternal = false;\n    this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({ color: 11599871 });\n    if (stormParams.onRayPosition !== void 0) {\n      this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      this.onRayPosition = function(source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        const height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    this.onLightningDown = stormParams.onLightningDown;\n    this.inited = false;\n    this.nextLightningTime = 0;\n    this.lightningsMeshes = [];\n    this.deadLightningsMeshes = [];\n    for (let i = 0; i < this.stormParams.maxLightnings; i++) {\n      const lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n      const mesh = new Mesh(lightning, this.lightningMaterial);\n      this.deadLightningsMeshes.push(mesh);\n    }\n  }\n  update(time) {\n    if (!this.inited) {\n      this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n      this.inited = true;\n    }\n    if (time >= this.nextLightningTime) {\n      const lightningMesh = this.deadLightningsMeshes.pop();\n      if (lightningMesh) {\n        const lightningParams1 = LightningStrike.copyParameters(\n          lightningMesh.geometry.rayParameters,\n          this.lightningParameters\n        );\n        lightningParams1.birthTime = time;\n        lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n        this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n        lightningParams1.noiseSeed = Math.random();\n        this.add(lightningMesh);\n        this.lightningsMeshes.push(lightningMesh);\n      }\n      this.nextLightningTime = this.getNextLightningTime(time);\n    }\n    let i = 0, il = this.lightningsMeshes.length;\n    while (i < il) {\n      const mesh = this.lightningsMeshes[i];\n      const lightning = mesh.geometry;\n      const prevState = lightning.state;\n      lightning.update(time);\n      if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n        if (this.onLightningDown) {\n          this.onLightningDown(lightning);\n        }\n      }\n      if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n        this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n        this.deadLightningsMeshes.push(mesh);\n        this.remove(mesh);\n        il--;\n      } else {\n        i++;\n      }\n    }\n  }\n  getNextLightningTime(currentTime) {\n    return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.stormParams.size = source.stormParams.size;\n    this.stormParams.minHeight = source.stormParams.minHeight;\n    this.stormParams.maxHeight = source.stormParams.maxHeight;\n    this.stormParams.maxSlope = source.stormParams.maxSlope;\n    this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n    this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n    this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n    this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n    this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n    this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n    this.lightningMaterial = source.stormParams.lightningMaterial;\n    this.onLightningDown = source.onLightningDown;\n    return this;\n  }\n  clone() {\n    return new this.constructor(this.stormParams).copy(this);\n  }\n}\nexport {\n  LightningStorm\n};\n"]},"metadata":{},"sourceType":"module"}