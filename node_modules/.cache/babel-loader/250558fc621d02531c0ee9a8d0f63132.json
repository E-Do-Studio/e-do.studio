{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBAFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nconst geometry = /* @__PURE__ */new BufferGeometry();\nconst float32Array = /* @__PURE__ */new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\nconst interleavedBuffer = /* @__PURE__ */new InterleavedBuffer(float32Array, 5);\n/* @__PURE__ */\n\ngeometry.setIndex([0, 1, 2, 0, 2, 3]);\n/* @__PURE__ */\n\ngeometry.setAttribute(\"position\", /* @__PURE__ */new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n/* @__PURE__ */\n\ngeometry.setAttribute(\"uv\", /* @__PURE__ */new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\nconst _Lensflare = class extends Mesh {\n  constructor() {\n    super(_Lensflare.Geometry, new MeshBasicMaterial({\n      opacity: 0,\n      transparent: true\n    }));\n    this.isLensflare = true;\n    this.type = \"Lensflare\";\n    this.frustumCulled = false;\n    this.renderOrder = Infinity;\n    const positionScreen = new Vector3();\n    const positionView = new Vector3();\n    const tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    tempMap.minFilter = NearestFilter;\n    tempMap.magFilter = NearestFilter;\n    tempMap.wrapS = ClampToEdgeWrapping;\n    tempMap.wrapT = ClampToEdgeWrapping;\n    const occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    occlusionMap.minFilter = NearestFilter;\n    occlusionMap.magFilter = NearestFilter;\n    occlusionMap.wrapS = ClampToEdgeWrapping;\n    occlusionMap.wrapT = ClampToEdgeWrapping;\n    const geometry2 = _Lensflare.Geometry;\n    const material1a = new RawShaderMaterial({\n      uniforms: {\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n      fragmentShader:\n      /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`,\n      depthTest: true,\n      depthWrite: false,\n      transparent: false\n    });\n    const material1b = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: tempMap\n        },\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n      fragmentShader:\n      /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`,\n      depthTest: false,\n      depthWrite: false,\n      transparent: false\n    });\n    const mesh1 = new Mesh(geometry2, material1a);\n    const elements = [];\n    const shader = LensflareElement.Shader;\n    const material2 = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: null\n        },\n        occlusionMap: {\n          value: occlusionMap\n        },\n        color: {\n          value: new Color(16777215)\n        },\n        scale: {\n          value: new Vector2()\n        },\n        screenPosition: {\n          value: new Vector3()\n        }\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false\n    });\n    const mesh2 = new Mesh(geometry2, material2);\n\n    this.addElement = function (element) {\n      elements.push(element);\n    };\n\n    const scale = new Vector2();\n    const screenPositionPixels = new Vector2();\n    const validArea = new Box2();\n    const viewport = new Vector4();\n\n    this.onBeforeRender = function (renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport);\n      const invAspect = viewport.w / viewport.z;\n      const halfViewportWidth = viewport.z / 2;\n      const halfViewportHeight = viewport.w / 2;\n      let size = 16 / viewport.w;\n      scale.set(size * invAspect, size);\n      validArea.min.set(viewport.x, viewport.y);\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n      positionView.setFromMatrixPosition(this.matrixWorld);\n      positionView.applyMatrix4(camera.matrixWorldInverse);\n      if (positionView.z > 0) return;\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n\n      if (validArea.containsPoint(screenPositionPixels)) {\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n        let uniforms = material1a.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1a, mesh1, null);\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n        uniforms = material1b.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1b, mesh1, null);\n        const vecX = -positionScreen.x * 2;\n        const vecY = -positionScreen.y * 2;\n\n        for (let i = 0, l = elements.length; i < l; i++) {\n          const element = elements[i];\n          const uniforms2 = material2.uniforms;\n          uniforms2[\"color\"].value.copy(element.color);\n          uniforms2[\"map\"].value = element.texture;\n          uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n          uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n          size = element.size / viewport.w;\n          const invAspect2 = viewport.w / viewport.z;\n          uniforms2[\"scale\"].value.set(size * invAspect2, size);\n          material2.uniformsNeedUpdate = true;\n          renderer.renderBufferDirect(camera, null, geometry2, material2, mesh2, null);\n        }\n      }\n    };\n\n    this.dispose = function () {\n      material1a.dispose();\n      material1b.dispose();\n      material2.dispose();\n      tempMap.dispose();\n      occlusionMap.dispose();\n\n      for (let i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose();\n      }\n    };\n  }\n\n};\n\nlet Lensflare = _Lensflare;\n\n__publicField(Lensflare, \"Geometry\", geometry);\n\nclass LensflareElement {\n  constructor(texture, size = 1, distance = 0, color = new Color(16777215)) {\n    this.texture = texture;\n    this.size = size;\n    this.distance = distance;\n    this.color = color;\n  }\n\n}\n\n__publicField(LensflareElement, \"Shader\", {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}`,\n  fragmentShader:\n  /* glsl */\n  `\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}`\n});\n\nexport { Lensflare, LensflareElement };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/objects/Lensflare.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","Mesh","MeshBasicMaterial","Vector3","DataTexture","RGBAFormat","NearestFilter","ClampToEdgeWrapping","RawShaderMaterial","Color","Vector2","AdditiveBlending","Box2","Vector4","geometry","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute","_Lensflare","constructor","Geometry","opacity","transparent","isLensflare","type","frustumCulled","renderOrder","Infinity","positionScreen","positionView","tempMap","Uint8Array","minFilter","magFilter","wrapS","wrapT","occlusionMap","geometry2","material1a","uniforms","scale","screenPosition","vertexShader","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","blending","mesh2","addElement","element","push","screenPositionPixels","validArea","viewport","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","uniforms2","texture","distance","invAspect2","uniformsNeedUpdate","dispose","Lensflare"],"mappings":"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,KAAK,EAAE;AAAT,KADG;AAER6C,IAAAA,YAAY,EAAE;AAAE7C,MAAAA,KAAK,EAAE;AAAT,KAFN;AAGR+D,IAAAA,KAAK,EAAE;AAAE/D,MAAAA,KAAK,EAAE;AAAT,KAHC;AAIRiD,IAAAA,KAAK,EAAE;AAAEjD,MAAAA,KAAK,EAAE;AAAT,KAJC;AAKRkD,IAAAA,cAAc,EAAE;AAAElD,MAAAA,KAAK,EAAE;AAAT;AALR,GAD8B;AAQxCmD,EAAAA,YAAY;AACV;AACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IA/C0C;AAiDxCC,EAAAA,cAAc;AACZ;AACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApE0C,CAA7B,CAAb;;AAuEA,SACEwD,SADF,EAEEhD,gBAFF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBAFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nconst geometry = /* @__PURE__ */ new BufferGeometry();\nconst float32Array = /* @__PURE__ */ new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\nconst interleavedBuffer = /* @__PURE__ */ new InterleavedBuffer(float32Array, 5);\n/* @__PURE__ */ geometry.setIndex([0, 1, 2, 0, 2, 3]);\n/* @__PURE__ */ geometry.setAttribute(\n  \"position\",\n  /* @__PURE__ */ new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false)\n);\n/* @__PURE__ */ geometry.setAttribute(\n  \"uv\",\n  /* @__PURE__ */ new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false)\n);\nconst _Lensflare = class extends Mesh {\n  constructor() {\n    super(_Lensflare.Geometry, new MeshBasicMaterial({ opacity: 0, transparent: true }));\n    this.isLensflare = true;\n    this.type = \"Lensflare\";\n    this.frustumCulled = false;\n    this.renderOrder = Infinity;\n    const positionScreen = new Vector3();\n    const positionView = new Vector3();\n    const tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    tempMap.minFilter = NearestFilter;\n    tempMap.magFilter = NearestFilter;\n    tempMap.wrapS = ClampToEdgeWrapping;\n    tempMap.wrapT = ClampToEdgeWrapping;\n    const occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    occlusionMap.minFilter = NearestFilter;\n    occlusionMap.magFilter = NearestFilter;\n    occlusionMap.wrapS = ClampToEdgeWrapping;\n    occlusionMap.wrapT = ClampToEdgeWrapping;\n    const geometry2 = _Lensflare.Geometry;\n    const material1a = new RawShaderMaterial({\n      uniforms: {\n        scale: { value: null },\n        screenPosition: { value: null }\n      },\n      vertexShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`\n      ),\n      depthTest: true,\n      depthWrite: false,\n      transparent: false\n    });\n    const material1b = new RawShaderMaterial({\n      uniforms: {\n        map: { value: tempMap },\n        scale: { value: null },\n        screenPosition: { value: null }\n      },\n      vertexShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`\n      ),\n      depthTest: false,\n      depthWrite: false,\n      transparent: false\n    });\n    const mesh1 = new Mesh(geometry2, material1a);\n    const elements = [];\n    const shader = LensflareElement.Shader;\n    const material2 = new RawShaderMaterial({\n      uniforms: {\n        map: { value: null },\n        occlusionMap: { value: occlusionMap },\n        color: { value: new Color(16777215) },\n        scale: { value: new Vector2() },\n        screenPosition: { value: new Vector3() }\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false\n    });\n    const mesh2 = new Mesh(geometry2, material2);\n    this.addElement = function(element) {\n      elements.push(element);\n    };\n    const scale = new Vector2();\n    const screenPositionPixels = new Vector2();\n    const validArea = new Box2();\n    const viewport = new Vector4();\n    this.onBeforeRender = function(renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport);\n      const invAspect = viewport.w / viewport.z;\n      const halfViewportWidth = viewport.z / 2;\n      const halfViewportHeight = viewport.w / 2;\n      let size = 16 / viewport.w;\n      scale.set(size * invAspect, size);\n      validArea.min.set(viewport.x, viewport.y);\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n      positionView.setFromMatrixPosition(this.matrixWorld);\n      positionView.applyMatrix4(camera.matrixWorldInverse);\n      if (positionView.z > 0)\n        return;\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n      if (validArea.containsPoint(screenPositionPixels)) {\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n        let uniforms = material1a.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1a, mesh1, null);\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n        uniforms = material1b.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1b, mesh1, null);\n        const vecX = -positionScreen.x * 2;\n        const vecY = -positionScreen.y * 2;\n        for (let i = 0, l = elements.length; i < l; i++) {\n          const element = elements[i];\n          const uniforms2 = material2.uniforms;\n          uniforms2[\"color\"].value.copy(element.color);\n          uniforms2[\"map\"].value = element.texture;\n          uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n          uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n          size = element.size / viewport.w;\n          const invAspect2 = viewport.w / viewport.z;\n          uniforms2[\"scale\"].value.set(size * invAspect2, size);\n          material2.uniformsNeedUpdate = true;\n          renderer.renderBufferDirect(camera, null, geometry2, material2, mesh2, null);\n        }\n      }\n    };\n    this.dispose = function() {\n      material1a.dispose();\n      material1b.dispose();\n      material2.dispose();\n      tempMap.dispose();\n      occlusionMap.dispose();\n      for (let i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose();\n      }\n    };\n  }\n};\nlet Lensflare = _Lensflare;\n__publicField(Lensflare, \"Geometry\", geometry);\nclass LensflareElement {\n  constructor(texture, size = 1, distance = 0, color = new Color(16777215)) {\n    this.texture = texture;\n    this.size = size;\n    this.distance = distance;\n    this.color = color;\n  }\n}\n__publicField(LensflareElement, \"Shader\", {\n  uniforms: {\n    map: { value: null },\n    occlusionMap: { value: null },\n    color: { value: null },\n    scale: { value: null },\n    screenPosition: { value: null }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}`\n  )\n});\nexport {\n  Lensflare,\n  LensflareElement\n};\n"]},"metadata":{},"sourceType":"module"}