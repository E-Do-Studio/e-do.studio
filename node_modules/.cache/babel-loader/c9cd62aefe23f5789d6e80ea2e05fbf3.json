{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget, Clock } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { MaskPass, ClearMaskPass } from \"./MaskPass.js\";\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    __publicField(this, \"renderer\");\n\n    __publicField(this, \"_pixelRatio\");\n\n    __publicField(this, \"_width\");\n\n    __publicField(this, \"_height\");\n\n    __publicField(this, \"renderTarget1\");\n\n    __publicField(this, \"renderTarget2\");\n\n    __publicField(this, \"writeBuffer\");\n\n    __publicField(this, \"readBuffer\");\n\n    __publicField(this, \"renderToScreen\");\n\n    __publicField(this, \"passes\", []);\n\n    __publicField(this, \"copyPass\");\n\n    __publicField(this, \"clock\");\n\n    this.renderer = renderer;\n\n    if (renderTarget === void 0) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = \"EffectComposer.rt1\";\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n\n    if (CopyShader === void 0) {\n      console.error(\"THREE.EffectComposer relies on CopyShader\");\n    }\n\n    if (ShaderPass === void 0) {\n      console.error(\"THREE.EffectComposer relies on ShaderPass\");\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    if (deltaTime === void 0) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil;\n          stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n          stencil.setFunc(context.EQUAL, 1, 4294967295);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== void 0) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === void 0) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/EffectComposer.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","LinearFilter","RGBAFormat","Vector2","WebGLRenderTarget","Clock","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","constructor","renderer","renderTarget","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","console","error","copyPass","clock","swapBuffers","tmp","addPass","pass","passes","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget, Clock } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { MaskPass, ClearMaskPass } from \"./MaskPass.js\";\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    __publicField(this, \"renderer\");\n    __publicField(this, \"_pixelRatio\");\n    __publicField(this, \"_width\");\n    __publicField(this, \"_height\");\n    __publicField(this, \"renderTarget1\");\n    __publicField(this, \"renderTarget2\");\n    __publicField(this, \"writeBuffer\");\n    __publicField(this, \"readBuffer\");\n    __publicField(this, \"renderToScreen\");\n    __publicField(this, \"passes\", []);\n    __publicField(this, \"copyPass\");\n    __publicField(this, \"clock\");\n    this.renderer = renderer;\n    if (renderTarget === void 0) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(\n        this._width * this._pixelRatio,\n        this._height * this._pixelRatio,\n        parameters\n      );\n      renderTarget.texture.name = \"EffectComposer.rt1\";\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    if (CopyShader === void 0) {\n      console.error(\"THREE.EffectComposer relies on CopyShader\");\n    }\n    if (ShaderPass === void 0) {\n      console.error(\"THREE.EffectComposer relies on ShaderPass\");\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  }\n  render(deltaTime) {\n    if (deltaTime === void 0) {\n      deltaTime = this.clock.getDelta();\n    }\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false)\n        continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil;\n          stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n          stencil.setFunc(context.EQUAL, 1, 4294967295);\n        }\n        this.swapBuffers();\n      }\n      if (MaskPass !== void 0) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n  reset(renderTarget) {\n    if (renderTarget === void 0) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n}\nexport {\n  EffectComposer\n};\n"]},"metadata":{},"sourceType":"module"}