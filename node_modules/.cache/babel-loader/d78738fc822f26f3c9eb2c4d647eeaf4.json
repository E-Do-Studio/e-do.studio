{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nvar DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nvar DEFAULT_PROFILE = \"generic-trigger\";\n\nvar applyEnvironmentMap = function applyEnvironmentMap(envMap, obj) {\n  obj.traverse(function (child) {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\n\nvar XRControllerModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRControllerModel, _Object3D);\n\n  var _super = _createSuper(XRControllerModel);\n\n  function XRControllerModel() {\n    var _this;\n\n    _classCallCheck(this, XRControllerModel);\n\n    _this = _super.call(this);\n\n    __publicField(_assertThisInitialized(_this), \"envMap\");\n\n    __publicField(_assertThisInitialized(_this), \"motionController\");\n\n    _this.motionController = null;\n    _this.envMap = null;\n    return _this;\n  }\n\n  _createClass(XRControllerModel, [{\n    key: \"setEnvironmentMap\",\n    value: function setEnvironmentMap(envMap) {\n      if (this.envMap == envMap) {\n        return this;\n      }\n\n      this.envMap = envMap;\n      applyEnvironmentMap(this.envMap, this);\n      return this;\n    }\n    /**\n     * Polls data from the XRInputSource and updates the model's components to match\n     * the real world data\n     */\n\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRControllerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (!this.motionController) return;\n      this.motionController.updateFromGamepad();\n      Object.values(this.motionController.components).forEach(function (component) {\n        Object.values(component.visualResponses).forEach(function (visualResponse) {\n          var valueNode = visualResponse.valueNode,\n              minNode = visualResponse.minNode,\n              maxNode = visualResponse.maxNode,\n              value = visualResponse.value,\n              valueNodeProperty = visualResponse.valueNodeProperty;\n          if (!valueNode) return;\n\n          if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n            valueNode.visible = value;\n          } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n            valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n            valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n          }\n        });\n      });\n    }\n  }]);\n\n  return XRControllerModel;\n}(Object3D);\n\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach(function (component) {\n    var type = component.type,\n        touchPointNodeName = component.touchPointNodeName,\n        visualResponses = component.visualResponses;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        var sphereGeometry = new SphereGeometry(1e-3);\n        var material = new MeshBasicMaterial({\n          color: 255\n        });\n        var sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(\"Could not find touch dot, \".concat(component.touchPointNodeName, \", in touchpad component \").concat(component.id));\n      }\n    }\n\n    Object.values(visualResponses).forEach(function (visualResponse) {\n      var valueNodeName = visualResponse.valueNodeName,\n          minNodeName = visualResponse.minNodeName,\n          maxNodeName = visualResponse.maxNodeName,\n          valueNodeProperty = visualResponse.valueNodeProperty;\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n\n        if (!visualResponse.minNode) {\n          console.warn(\"Could not find \".concat(minNodeName, \" in the model\"));\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(\"Could not find \".concat(maxNodeName, \" in the model\"));\n          return;\n        }\n      }\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(\"Could not find \".concat(valueNodeName, \" in the model\"));\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n\n  controllerModel.add(scene);\n}\n\nvar XRControllerModelFactory = /*#__PURE__*/function () {\n  function XRControllerModelFactory() {\n    var gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, XRControllerModelFactory);\n\n    __publicField(this, \"gltfLoader\");\n\n    __publicField(this, \"path\");\n\n    __publicField(this, \"_assetCache\");\n\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  _createClass(XRControllerModelFactory, [{\n    key: \"createControllerModel\",\n    value: function createControllerModel(controller) {\n      var _this2 = this;\n\n      var controllerModel = new XRControllerModel();\n      var scene = null;\n\n      var onConnected = function onConnected(event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad) return;\n        fetchProfile(xrInputSource, _this2.path, DEFAULT_PROFILE).then(function (_ref) {\n          var profile = _ref.profile,\n              assetPath = _ref.assetPath;\n\n          if (!assetPath) {\n            throw new Error(\"no asset path\");\n          }\n\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n          var assetUrl = controllerModel.motionController.assetUrl;\n          var cachedAsset = _this2._assetCache[assetUrl];\n\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          } else {\n            if (!_this2.gltfLoader) {\n              throw new Error(\"GLTFLoader not set.\");\n            }\n\n            _this2.gltfLoader.setPath(\"\");\n\n            _this2.gltfLoader.load(controllerModel.motionController.assetUrl, function (asset) {\n              if (!controllerModel.motionController) {\n                console.warn(\"motionController gone while gltf load, bailing...\");\n                return;\n              }\n\n              _this2._assetCache[assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            }, function () {}, function () {\n              throw new Error(\"Asset \".concat(assetUrl, \" missing or malformed.\"));\n            });\n          }\n        }).catch(function (err) {\n          console.warn(err);\n        });\n      };\n\n      controller.addEventListener(\"connected\", onConnected);\n\n      var onDisconnected = function onDisconnected() {\n        controller.removeEventListener(\"connected\", onConnected);\n        controller.removeEventListener(\"disconnected\", onDisconnected);\n        controllerModel.motionController = null;\n\n        if (scene) {\n          controllerModel.remove(scene);\n        }\n\n        scene = null;\n      };\n\n      controller.addEventListener(\"disconnected\", onDisconnected);\n      return controllerModel;\n    }\n  }]);\n\n  return XRControllerModelFactory;\n}();\n\nexport { XRControllerModelFactory };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","Object3D","SphereGeometry","MeshBasicMaterial","GLTFLoader","MotionControllerConstants","fetchProfile","MotionController","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","applyEnvironmentMap","envMap","traverse","child","material","needsUpdate","XRControllerModel","motionController","force","updateFromGamepad","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","path","_assetCache","controller","onConnected","event","xrInputSource","data","targetRayMode","gamepad","then","profile","assetPath","Error","assetUrl","cachedAsset","clone","setPath","load","asset","catch","err","addEventListener","onDisconnected","removeEventListener","remove"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nconst DEFAULT_PROFILE = \"generic-trigger\";\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse((child) => {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    __publicField(this, \"envMap\");\n    __publicField(this, \"motionController\");\n    this.motionController = null;\n    this.envMap = null;\n  }\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController)\n      return;\n    this.motionController.updateFromGamepad();\n    Object.values(this.motionController.components).forEach((component) => {\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n        if (!valueNode)\n          return;\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n}\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        const sphereGeometry = new SphereGeometry(1e-3);\n        const material = new MeshBasicMaterial({ color: 255 });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    }\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n  controllerModel.add(scene);\n}\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    __publicField(this, \"gltfLoader\");\n    __publicField(this, \"path\");\n    __publicField(this, \"_assetCache\");\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    const onConnected = (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad)\n        return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({ profile, assetPath }) => {\n        if (!assetPath) {\n          throw new Error(\"no asset path\");\n        }\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error(\"GLTFLoader not set.\");\n          }\n          this.gltfLoader.setPath(\"\");\n          this.gltfLoader.load(\n            controllerModel.motionController.assetUrl,\n            (asset) => {\n              if (!controllerModel.motionController) {\n                console.warn(\"motionController gone while gltf load, bailing...\");\n                return;\n              }\n              this._assetCache[assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            },\n            () => {\n            },\n            () => {\n              throw new Error(`Asset ${assetUrl} missing or malformed.`);\n            }\n          );\n        }\n      }).catch((err) => {\n        console.warn(err);\n      });\n    };\n    controller.addEventListener(\"connected\", onConnected);\n    const onDisconnected = () => {\n      controller.removeEventListener(\"connected\", onConnected);\n      controller.removeEventListener(\"disconnected\", onDisconnected);\n      controllerModel.motionController = null;\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n      scene = null;\n    };\n    controller.addEventListener(\"disconnected\", onDisconnected);\n    return controllerModel;\n  }\n}\nexport {\n  XRControllerModelFactory\n};\n"]},"metadata":{},"sourceType":"module"}