{"ast":null,"code":"import _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\n\nvar TubeGeometry = /*#__PURE__*/function (_ParametricGeometry) {\n  _inherits(TubeGeometry, _ParametricGeometry);\n\n  var _super = _createSuper(TubeGeometry);\n\n  function TubeGeometry(path) {\n    var _this;\n\n    var segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var segmentsRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    var closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, TubeGeometry);\n\n    var numpoints = segments + 1;\n    var frames = path.computeFrenetFrames(segments, closed),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals;\n    var position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      var i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      var normal = normals[i];\n      var binormal = binormals[i];\n      var cx = -radius * Math.cos(v);\n      var cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    _this = _super.call(this, ParametricTube, segments, segmentsRadius);\n    _this.tangents = tangents;\n    _this.normals = normals;\n    _this.binormals = binormals;\n    _this.path = path;\n    _this.segments = segments;\n    _this.radius = radius;\n    _this.segmentsRadius = segmentsRadius;\n    _this.closed = closed;\n    return _this;\n  }\n\n  return TubeGeometry;\n}(ParametricGeometry);\n\nvar ParametricGeometries = {\n  klein: function klein(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    var x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    var y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function plane(width, height) {\n    return function (u, v, target) {\n      var x = u * width;\n      var y = 0;\n      var z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function mobius(u, t, target) {\n    u = u - 0.5;\n    var v = 2 * Math.PI * t;\n    var a = 2;\n    var x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    var y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    var z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function mobius3d(u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    var phi = u / 2;\n    var major = 2.25,\n        a = 0.125,\n        b = 0.65;\n    var x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    var z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    var y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry: TubeGeometry,\n  TorusKnotGeometry: /*#__PURE__*/function (_TubeGeometry) {\n    _inherits(TorusKnotGeometry, _TubeGeometry);\n\n    var _super2 = _createSuper(TorusKnotGeometry);\n\n    function TorusKnotGeometry() {\n      var _this2;\n\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n      var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n      var segmentsT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n      var segmentsR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      var p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n      var q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n\n      _classCallCheck(this, TorusKnotGeometry);\n\n      var TorusKnotCurve = /*#__PURE__*/function (_Curve) {\n        _inherits(TorusKnotCurve, _Curve);\n\n        var _super3 = _createSuper(TorusKnotCurve);\n\n        function TorusKnotCurve() {\n          _classCallCheck(this, TorusKnotCurve);\n\n          return _super3.apply(this, arguments);\n        }\n\n        _createClass(TorusKnotCurve, [{\n          key: \"getPoint\",\n          value: function getPoint(t) {\n            var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n            var point = optionalTarget;\n            t *= Math.PI * 2;\n            var r = 0.5;\n            var x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n            var y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n            var z = r * Math.sin(q * t);\n            return point.set(x, y, z).multiplyScalar(radius);\n          }\n        }]);\n\n        return TorusKnotCurve;\n      }(Curve);\n\n      var segments = segmentsT;\n      var radiusSegments = segmentsR;\n      var extrudePath = new TorusKnotCurve();\n      _this2 = _super2.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n      _this2.radius = radius;\n      _this2.tube = tube;\n      _this2.segmentsT = segmentsT;\n      _this2.segmentsR = segmentsR;\n      _this2.p = p;\n      _this2.q = q;\n      return _this2;\n    }\n\n    return TorusKnotGeometry;\n  }(TubeGeometry),\n  SphereGeometry: /*#__PURE__*/function (_ParametricGeometry2) {\n    _inherits(SphereGeometry, _ParametricGeometry2);\n\n    var _super4 = _createSuper(SphereGeometry);\n\n    function SphereGeometry(size, u, v) {\n      _classCallCheck(this, SphereGeometry);\n\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        var x = size * Math.sin(u2) * Math.cos(v2);\n        var y = size * Math.sin(u2) * Math.sin(v2);\n        var z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n\n      return _super4.call(this, sphere, u, v);\n    }\n\n    return SphereGeometry;\n  }(ParametricGeometry),\n  PlaneGeometry: /*#__PURE__*/function (_ParametricGeometry3) {\n    _inherits(PlaneGeometry, _ParametricGeometry3);\n\n    var _super5 = _createSuper(PlaneGeometry);\n\n    function PlaneGeometry(width, depth, segmentsWidth, segmentsDepth) {\n      _classCallCheck(this, PlaneGeometry);\n\n      function plane(u, v, target) {\n        var x = u * width;\n        var y = 0;\n        var z = v * depth;\n        target.set(x, y, z);\n      }\n\n      return _super5.call(this, plane, segmentsWidth, segmentsDepth);\n    }\n\n    return PlaneGeometry;\n  }(ParametricGeometry)\n};\nexport { ParametricGeometries };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"names":["Vector3","Curve","ParametricGeometry","TubeGeometry","path","segments","radius","segmentsRadius","closed","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","u","v","target","Math","PI","i","floor","getPointAt","normal","binormal","cx","cos","cy","sin","x","y","z","copy","ParametricGeometries","klein","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","u2","v2","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"mappings":"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","sourcesContent":["import { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed), tangents = frames.tangents, normals = frames.normals, binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v);\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius);\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n}\nconst ParametricGeometries = {\n  klein: function(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function(width, height) {\n    return function(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function(u, t, target) {\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function(u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25, a = 0.125, b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n      class TorusKnotCurve extends Curve {\n        getPoint(t, optionalTarget = new Vector3()) {\n          const point = optionalTarget;\n          t *= Math.PI * 2;\n          const r = 0.5;\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          const z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }\n      const segments = segmentsT;\n      const radiusSegments = segmentsR;\n      const extrudePath = new TorusKnotCurve();\n      super(extrudePath, segments, tube, radiusSegments, true, false);\n      this.radius = radius;\n      this.tube = tube;\n      this.segmentsT = segmentsT;\n      this.segmentsR = segmentsR;\n      this.p = p;\n      this.q = q;\n    }\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        const x = size * Math.sin(u2) * Math.cos(v2);\n        const y = size * Math.sin(u2) * Math.sin(v2);\n        const z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n      super(sphere, u, v);\n    }\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width;\n        const y = 0;\n        const z = v * depth;\n        target.set(x, y, z);\n      }\n      super(plane, segmentsWidth, segmentsDepth);\n    }\n  }\n};\nexport {\n  ParametricGeometries\n};\n"]},"metadata":{},"sourceType":"module"}