{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { OrthographicCamera, PlaneGeometry, Mesh } from \"three\";\n\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    __publicField(this, \"enabled\", true); // if set to true, the pass indicates to swap read and write buffer after rendering\n\n\n    __publicField(this, \"needsSwap\", true); // if set to true, the pass clears its buffer before rendering\n\n\n    __publicField(this, \"clear\", false); // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n\n    __publicField(this, \"renderToScreen\", false);\n  }\n\n  setSize(width, height) {}\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n\n}\n\nclass FullScreenQuad {\n  constructor(material) {\n    __publicField(this, \"camera\", new OrthographicCamera(-1, 1, 1, -1, 0, 1));\n\n    __publicField(this, \"geometry\", new PlaneGeometry(2, 2));\n\n    __publicField(this, \"mesh\");\n\n    this.mesh = new Mesh(this.geometry, material);\n  }\n\n  get material() {\n    return this.mesh.material;\n  }\n\n  set material(value) {\n    this.mesh.material = value;\n  }\n\n  dispose() {\n    this.mesh.geometry.dispose();\n  }\n\n  render(renderer) {\n    renderer.render(this.mesh, this.camera);\n  }\n\n}\n\nexport { FullScreenQuad, Pass };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/Pass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","OrthographicCamera","PlaneGeometry","Mesh","Pass","constructor","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","console","error","FullScreenQuad","material","mesh","geometry","dispose","camera"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;;AACA,IAAIC,eAAe,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqBD,GAAG,IAAID,GAAP,GAAaJ,SAAS,CAACI,GAAD,EAAMC,GAAN,EAAW;AAAEE,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,YAAY,EAAE,IAAlC;AAAwCC,EAAAA,QAAQ,EAAE,IAAlD;AAAwDH,EAAAA;AAAxD,CAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAA1J;;AACA,IAAII,aAAa,GAAG,CAACN,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqB;AACvCH,EAAAA,eAAe,CAACC,GAAD,EAAM,OAAOC,GAAP,KAAe,QAAf,GAA0BA,GAAG,GAAG,EAAhC,GAAqCA,GAA3C,EAAgDC,KAAhD,CAAf;;AACA,SAAOA,KAAP;AACD,CAHD;;AAIA,SAASK,kBAAT,EAA6BC,aAA7B,EAA4CC,IAA5C,QAAwD,OAAxD;;AACA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AACZ;AACAL,IAAAA,aAAa,CAAC,IAAD,EAAO,SAAP,EAAkB,IAAlB,CAAb,CAFY,CAGZ;;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,WAAP,EAAoB,IAApB,CAAb,CAJY,CAKZ;;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,OAAP,EAAgB,KAAhB,CAAb,CANY,CAOZ;;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,gBAAP,EAAyB,KAAzB,CAAb;AACD;;AACDM,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB,CACtB;;AACDC,EAAAA,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2D;AAC/DC,IAAAA,OAAO,CAACC,KAAR,CAAc,4DAAd;AACD;;AAfQ;;AAiBX,MAAMC,cAAN,CAAqB;AACnBZ,EAAAA,WAAW,CAACa,QAAD,EAAW;AACpBlB,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,EAAiB,IAAIC,kBAAJ,CAAuB,CAAC,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,CAAjB,CAAb;;AACAD,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,EAAmB,IAAIE,aAAJ,CAAkB,CAAlB,EAAqB,CAArB,CAAnB,CAAb;;AACAF,IAAAA,aAAa,CAAC,IAAD,EAAO,MAAP,CAAb;;AACA,SAAKmB,IAAL,GAAY,IAAIhB,IAAJ,CAAS,KAAKiB,QAAd,EAAwBF,QAAxB,CAAZ;AACD;;AACW,MAARA,QAAQ,GAAG;AACb,WAAO,KAAKC,IAAL,CAAUD,QAAjB;AACD;;AACW,MAARA,QAAQ,CAACtB,KAAD,EAAQ;AAClB,SAAKuB,IAAL,CAAUD,QAAV,GAAqBtB,KAArB;AACD;;AACDyB,EAAAA,OAAO,GAAG;AACR,SAAKF,IAAL,CAAUC,QAAV,CAAmBC,OAAnB;AACD;;AACDZ,EAAAA,MAAM,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACD,MAAT,CAAgB,KAAKU,IAArB,EAA2B,KAAKG,MAAhC;AACD;;AAlBkB;;AAoBrB,SACEL,cADF,EAEEb,IAFF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { OrthographicCamera, PlaneGeometry, Mesh } from \"three\";\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    __publicField(this, \"enabled\", true);\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    __publicField(this, \"needsSwap\", true);\n    // if set to true, the pass clears its buffer before rendering\n    __publicField(this, \"clear\", false);\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    __publicField(this, \"renderToScreen\", false);\n  }\n  setSize(width, height) {\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n}\nclass FullScreenQuad {\n  constructor(material) {\n    __publicField(this, \"camera\", new OrthographicCamera(-1, 1, 1, -1, 0, 1));\n    __publicField(this, \"geometry\", new PlaneGeometry(2, 2));\n    __publicField(this, \"mesh\");\n    this.mesh = new Mesh(this.geometry, material);\n  }\n  get material() {\n    return this.mesh.material;\n  }\n  set material(value) {\n    this.mesh.material = value;\n  }\n  dispose() {\n    this.mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this.mesh, this.camera);\n  }\n}\nexport {\n  FullScreenQuad,\n  Pass\n};\n"]},"metadata":{},"sourceType":"module"}