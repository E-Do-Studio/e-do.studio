{"ast":null,"code":"import { WebGLCubeRenderTarget, LinearFilter } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction CubeCamera({\n  children,\n  fog,\n  frames = Infinity,\n  resolution = 256,\n  near = 1,\n  far = 1000,\n  ...props\n}) {\n  const ref = React.useRef();\n  const [camera, setCamera] = React.useState();\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const fbo = React.useMemo(() => new WebGLCubeRenderTarget(resolution, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    encoding: gl.outputEncoding\n  }), [resolution]);\n  let count = 0;\n  useFrame(() => {\n    if (camera && ref.current && (frames === Infinity || count < frames)) {\n      ref.current.traverse(obj => obj.visible = false);\n      const originalFog = scene.fog;\n      scene.fog = fog || originalFog;\n      camera.update(gl, scene);\n      scene.fog = originalFog;\n      ref.current.traverse(obj => obj.visible = true);\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: setCamera,\n    args: [near, far, fbo]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, children(fbo.texture)));\n}\n\nexport { CubeCamera };","map":{"version":3,"sources":["/Users/theodaguier/Git_Repo/E-Do-Studio/node_modules/@react-three/drei/core/CubeCamera.js"],"names":["WebGLCubeRenderTarget","LinearFilter","React","useThree","useFrame","CubeCamera","children","fog","frames","Infinity","resolution","near","far","props","ref","useRef","camera","setCamera","useState","scene","gl","fbo","useMemo","minFilter","magFilter","encoding","outputEncoding","count","current","traverse","obj","visible","originalFog","update","createElement","args","texture"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,YAAhC,QAAoD,OAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;;AAEA,SAASC,UAAT,CAAoB;AAClBC,EAAAA,QADkB;AAElBC,EAAAA,GAFkB;AAGlBC,EAAAA,MAAM,GAAGC,QAHS;AAIlBC,EAAAA,UAAU,GAAG,GAJK;AAKlBC,EAAAA,IAAI,GAAG,CALW;AAMlBC,EAAAA,GAAG,GAAG,IANY;AAOlB,KAAGC;AAPe,CAApB,EAQG;AACD,QAAMC,GAAG,GAAGZ,KAAK,CAACa,MAAN,EAAZ;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,KAAK,CAACgB,QAAN,EAA5B;AACA,QAAMC,KAAK,GAAGhB,QAAQ,CAAC,CAAC;AACtBgB,IAAAA;AADsB,GAAD,KAEjBA,KAFgB,CAAtB;AAGA,QAAMC,EAAE,GAAGjB,QAAQ,CAAC,CAAC;AACnBiB,IAAAA;AADmB,GAAD,KAEdA,EAFa,CAAnB;AAGA,QAAMC,GAAG,GAAGnB,KAAK,CAACoB,OAAN,CAAc,MAAM,IAAItB,qBAAJ,CAA0BU,UAA1B,EAAsC;AACpEa,IAAAA,SAAS,EAAEtB,YADyD;AAEpEuB,IAAAA,SAAS,EAAEvB,YAFyD;AAGpEwB,IAAAA,QAAQ,EAAEL,EAAE,CAACM;AAHuD,GAAtC,CAApB,EAIR,CAAChB,UAAD,CAJQ,CAAZ;AAKA,MAAIiB,KAAK,GAAG,CAAZ;AACAvB,EAAAA,QAAQ,CAAC,MAAM;AACb,QAAIY,MAAM,IAAIF,GAAG,CAACc,OAAd,KAA0BpB,MAAM,KAAKC,QAAX,IAAuBkB,KAAK,GAAGnB,MAAzD,CAAJ,EAAsE;AACpEM,MAAAA,GAAG,CAACc,OAAJ,CAAYC,QAAZ,CAAqBC,GAAG,IAAIA,GAAG,CAACC,OAAJ,GAAc,KAA1C;AACA,YAAMC,WAAW,GAAGb,KAAK,CAACZ,GAA1B;AACAY,MAAAA,KAAK,CAACZ,GAAN,GAAYA,GAAG,IAAIyB,WAAnB;AACAhB,MAAAA,MAAM,CAACiB,MAAP,CAAcb,EAAd,EAAkBD,KAAlB;AACAA,MAAAA,KAAK,CAACZ,GAAN,GAAYyB,WAAZ;AACAlB,MAAAA,GAAG,CAACc,OAAJ,CAAYC,QAAZ,CAAqBC,GAAG,IAAIA,GAAG,CAACC,OAAJ,GAAc,IAA1C;AACAJ,MAAAA,KAAK;AACN;AACF,GAVO,CAAR;AAWA,SAAO,aAAazB,KAAK,CAACgC,aAAN,CAAoB,OAApB,EAA6BrB,KAA7B,EAAoC,aAAaX,KAAK,CAACgC,aAAN,CAAoB,YAApB,EAAkC;AACrGpB,IAAAA,GAAG,EAAEG,SADgG;AAErGkB,IAAAA,IAAI,EAAE,CAACxB,IAAD,EAAOC,GAAP,EAAYS,GAAZ;AAF+F,GAAlC,CAAjD,EAGhB,aAAanB,KAAK,CAACgC,aAAN,CAAoB,OAApB,EAA6B;AAC5CpB,IAAAA,GAAG,EAAEA;AADuC,GAA7B,EAEdR,QAAQ,CAACe,GAAG,CAACe,OAAL,CAFM,CAHG,CAApB;AAMD;;AAED,SAAS/B,UAAT","sourcesContent":["import { WebGLCubeRenderTarget, LinearFilter } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction CubeCamera({\n  children,\n  fog,\n  frames = Infinity,\n  resolution = 256,\n  near = 1,\n  far = 1000,\n  ...props\n}) {\n  const ref = React.useRef();\n  const [camera, setCamera] = React.useState();\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const fbo = React.useMemo(() => new WebGLCubeRenderTarget(resolution, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    encoding: gl.outputEncoding\n  }), [resolution]);\n  let count = 0;\n  useFrame(() => {\n    if (camera && ref.current && (frames === Infinity || count < frames)) {\n      ref.current.traverse(obj => obj.visible = false);\n      const originalFog = scene.fog;\n      scene.fog = fog || originalFog;\n      camera.update(gl, scene);\n      scene.fog = originalFog;\n      ref.current.traverse(obj => obj.visible = true);\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: setCamera,\n    args: [near, far, fbo]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, children(fbo.texture)));\n}\n\nexport { CubeCamera };\n"]},"metadata":{},"sourceType":"module"}