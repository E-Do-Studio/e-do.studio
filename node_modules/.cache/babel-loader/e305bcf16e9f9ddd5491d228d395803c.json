{"ast":null,"code":"import { Vector3, Matrix3, LineSegments, BufferGeometry, Float32BufferAttribute, LineBasicMaterial } from \"three\";\n\nconst _v1 = /* @__PURE__ */new Vector3();\n\nconst _v2 = /* @__PURE__ */new Vector3();\n\nconst _normalMatrix = /* @__PURE__ */new Matrix3();\n\nclass VertexNormalsHelper extends LineSegments {\n  constructor(object, size = 1, color = 16711680) {\n    const geometry = new BufferGeometry();\n    const nNormals = object.geometry.attributes.normal.count;\n    const positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.setAttribute(\"position\", positions);\n    super(geometry, new LineBasicMaterial({\n      color,\n      toneMapped: false\n    }));\n    this.object = object;\n    this.size = size;\n    this.type = \"VertexNormalsHelper\";\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n\n  update() {\n    this.object.updateMatrixWorld(true);\n\n    _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position;\n    const objGeometry = this.object.geometry;\n\n    if (objGeometry) {\n      const objPos = objGeometry.attributes.position;\n      const objNorm = objGeometry.attributes.normal;\n      let idx = 0;\n\n      for (let j = 0, jl = objPos.count; j < jl; j++) {\n        _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld);\n\n        _v2.fromBufferAttribute(objNorm, j);\n\n        _v2.applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n\n        position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n        idx = idx + 1;\n      }\n    }\n\n    position.needsUpdate = true;\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n\n}\n\nexport { VertexNormalsHelper };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/helpers/VertexNormalsHelper.js"],"names":["Vector3","Matrix3","LineSegments","BufferGeometry","Float32BufferAttribute","LineBasicMaterial","_v1","_v2","_normalMatrix","VertexNormalsHelper","constructor","object","size","color","geometry","nNormals","attributes","normal","count","positions","setAttribute","toneMapped","type","matrixAutoUpdate","update","updateMatrixWorld","getNormalMatrix","matrixWorld","position","objGeometry","objPos","objNorm","idx","j","jl","fromBufferAttribute","applyMatrix4","applyMatrix3","normalize","multiplyScalar","add","setXYZ","x","y","z","needsUpdate","dispose","material"],"mappings":"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","sourcesContent":["import { Vector3, Matrix3, LineSegments, BufferGeometry, Float32BufferAttribute, LineBasicMaterial } from \"three\";\nconst _v1 = /* @__PURE__ */ new Vector3();\nconst _v2 = /* @__PURE__ */ new Vector3();\nconst _normalMatrix = /* @__PURE__ */ new Matrix3();\nclass VertexNormalsHelper extends LineSegments {\n  constructor(object, size = 1, color = 16711680) {\n    const geometry = new BufferGeometry();\n    const nNormals = object.geometry.attributes.normal.count;\n    const positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.setAttribute(\"position\", positions);\n    super(geometry, new LineBasicMaterial({ color, toneMapped: false }));\n    this.object = object;\n    this.size = size;\n    this.type = \"VertexNormalsHelper\";\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n  update() {\n    this.object.updateMatrixWorld(true);\n    _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position;\n    const objGeometry = this.object.geometry;\n    if (objGeometry) {\n      const objPos = objGeometry.attributes.position;\n      const objNorm = objGeometry.attributes.normal;\n      let idx = 0;\n      for (let j = 0, jl = objPos.count; j < jl; j++) {\n        _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld);\n        _v2.fromBufferAttribute(objNorm, j);\n        _v2.applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n        position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n        idx = idx + 1;\n      }\n    }\n    position.needsUpdate = true;\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nexport {\n  VertexNormalsHelper\n};\n"]},"metadata":{},"sourceType":"module"}