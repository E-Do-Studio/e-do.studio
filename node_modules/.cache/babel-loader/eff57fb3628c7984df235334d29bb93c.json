{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { PerspectiveCamera, Vector3, Quaternion } from \"three\";\n\nvar PeppersGhostEffect = function PeppersGhostEffect(renderer) {\n  _classCallCheck(this, PeppersGhostEffect);\n\n  var scope = this;\n  scope.cameraDistance = 15;\n  scope.reflectFromAbove = false;\n\n  var _halfWidth, _width, _height;\n\n  var _cameraF = new PerspectiveCamera();\n\n  var _cameraB = new PerspectiveCamera();\n\n  var _cameraL = new PerspectiveCamera();\n\n  var _cameraR = new PerspectiveCamera();\n\n  var _position = new Vector3();\n\n  var _quaternion = new Quaternion();\n\n  var _scale = new Vector3();\n\n  renderer.autoClear = false;\n\n  this.setSize = function (width, height) {\n    _halfWidth = width / 2;\n\n    if (width < height) {\n      _width = width / 3;\n      _height = width / 3;\n    } else {\n      _width = height / 3;\n      _height = height / 3;\n    }\n\n    renderer.setSize(width, height);\n  };\n\n  this.render = function (scene, camera) {\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n    camera.matrixWorld.decompose(_position, _quaternion, _scale);\n\n    _cameraF.position.copy(_position);\n\n    _cameraF.quaternion.copy(_quaternion);\n\n    _cameraF.translateZ(scope.cameraDistance);\n\n    _cameraF.lookAt(scene.position);\n\n    _cameraB.position.copy(_position);\n\n    _cameraB.quaternion.copy(_quaternion);\n\n    _cameraB.translateZ(-scope.cameraDistance);\n\n    _cameraB.lookAt(scene.position);\n\n    _cameraB.rotation.z += 180 * (Math.PI / 180);\n\n    _cameraL.position.copy(_position);\n\n    _cameraL.quaternion.copy(_quaternion);\n\n    _cameraL.translateX(-scope.cameraDistance);\n\n    _cameraL.lookAt(scene.position);\n\n    _cameraL.rotation.x += 90 * (Math.PI / 180);\n\n    _cameraR.position.copy(_position);\n\n    _cameraR.quaternion.copy(_quaternion);\n\n    _cameraR.translateX(scope.cameraDistance);\n\n    _cameraR.lookAt(scene.position);\n\n    _cameraR.rotation.x += 90 * (Math.PI / 180);\n    renderer.clear();\n    renderer.setScissorTest(true);\n    renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraB);\n    } else {\n      renderer.render(scene, _cameraF);\n    }\n\n    renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraF);\n    } else {\n      renderer.render(scene, _cameraB);\n    }\n\n    renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraR);\n    } else {\n      renderer.render(scene, _cameraL);\n    }\n\n    renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n    renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraL);\n    } else {\n      renderer.render(scene, _cameraR);\n    }\n\n    renderer.setScissorTest(false);\n  };\n};\n\nexport { PeppersGhostEffect };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/effects/PeppersGhostEffect.js"],"names":["PerspectiveCamera","Vector3","Quaternion","PeppersGhostEffect","renderer","scope","cameraDistance","reflectFromAbove","_halfWidth","_width","_height","_cameraF","_cameraB","_cameraL","_cameraR","_position","_quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport"],"mappings":";AAAA,SAASA,iBAAT,EAA4BC,OAA5B,EAAqCC,UAArC,QAAuD,OAAvD;;IACMC,kB,GACJ,4BAAYC,QAAZ,EAAsB;AAAA;;AACpB,MAAMC,KAAK,GAAG,IAAd;AACAA,EAAAA,KAAK,CAACC,cAAN,GAAuB,EAAvB;AACAD,EAAAA,KAAK,CAACE,gBAAN,GAAyB,KAAzB;;AACA,MAAIC,UAAJ,EAAgBC,MAAhB,EAAwBC,OAAxB;;AACA,MAAMC,QAAQ,GAAG,IAAIX,iBAAJ,EAAjB;;AACA,MAAMY,QAAQ,GAAG,IAAIZ,iBAAJ,EAAjB;;AACA,MAAMa,QAAQ,GAAG,IAAIb,iBAAJ,EAAjB;;AACA,MAAMc,QAAQ,GAAG,IAAId,iBAAJ,EAAjB;;AACA,MAAMe,SAAS,GAAG,IAAId,OAAJ,EAAlB;;AACA,MAAMe,WAAW,GAAG,IAAId,UAAJ,EAApB;;AACA,MAAMe,MAAM,GAAG,IAAIhB,OAAJ,EAAf;;AACAG,EAAAA,QAAQ,CAACc,SAAT,GAAqB,KAArB;;AACA,OAAKC,OAAL,GAAe,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACrCb,IAAAA,UAAU,GAAGY,KAAK,GAAG,CAArB;;AACA,QAAIA,KAAK,GAAGC,MAAZ,EAAoB;AAClBZ,MAAAA,MAAM,GAAGW,KAAK,GAAG,CAAjB;AACAV,MAAAA,OAAO,GAAGU,KAAK,GAAG,CAAlB;AACD,KAHD,MAGO;AACLX,MAAAA,MAAM,GAAGY,MAAM,GAAG,CAAlB;AACAX,MAAAA,OAAO,GAAGW,MAAM,GAAG,CAAnB;AACD;;AACDjB,IAAAA,QAAQ,CAACe,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB;AACD,GAVD;;AAWA,OAAKC,MAAL,GAAc,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACpC,QAAID,KAAK,CAACE,qBAAN,KAAgC,IAApC,EACEF,KAAK,CAACG,iBAAN;AACF,QAAIF,MAAM,CAACG,MAAP,KAAkB,IAAlB,IAA0BH,MAAM,CAACC,qBAAP,KAAiC,IAA/D,EACED,MAAM,CAACE,iBAAP;AACFF,IAAAA,MAAM,CAACI,WAAP,CAAmBC,SAAnB,CAA6Bd,SAA7B,EAAwCC,WAAxC,EAAqDC,MAArD;;AACAN,IAAAA,QAAQ,CAACmB,QAAT,CAAkBC,IAAlB,CAAuBhB,SAAvB;;AACAJ,IAAAA,QAAQ,CAACqB,UAAT,CAAoBD,IAApB,CAAyBf,WAAzB;;AACAL,IAAAA,QAAQ,CAACsB,UAAT,CAAoB5B,KAAK,CAACC,cAA1B;;AACAK,IAAAA,QAAQ,CAACuB,MAAT,CAAgBX,KAAK,CAACO,QAAtB;;AACAlB,IAAAA,QAAQ,CAACkB,QAAT,CAAkBC,IAAlB,CAAuBhB,SAAvB;;AACAH,IAAAA,QAAQ,CAACoB,UAAT,CAAoBD,IAApB,CAAyBf,WAAzB;;AACAJ,IAAAA,QAAQ,CAACqB,UAAT,CAAoB,CAAC5B,KAAK,CAACC,cAA3B;;AACAM,IAAAA,QAAQ,CAACsB,MAAT,CAAgBX,KAAK,CAACO,QAAtB;;AACAlB,IAAAA,QAAQ,CAACuB,QAAT,CAAkBC,CAAlB,IAAuB,OAAOC,IAAI,CAACC,EAAL,GAAU,GAAjB,CAAvB;;AACAzB,IAAAA,QAAQ,CAACiB,QAAT,CAAkBC,IAAlB,CAAuBhB,SAAvB;;AACAF,IAAAA,QAAQ,CAACmB,UAAT,CAAoBD,IAApB,CAAyBf,WAAzB;;AACAH,IAAAA,QAAQ,CAAC0B,UAAT,CAAoB,CAAClC,KAAK,CAACC,cAA3B;;AACAO,IAAAA,QAAQ,CAACqB,MAAT,CAAgBX,KAAK,CAACO,QAAtB;;AACAjB,IAAAA,QAAQ,CAACsB,QAAT,CAAkBK,CAAlB,IAAuB,MAAMH,IAAI,CAACC,EAAL,GAAU,GAAhB,CAAvB;;AACAxB,IAAAA,QAAQ,CAACgB,QAAT,CAAkBC,IAAlB,CAAuBhB,SAAvB;;AACAD,IAAAA,QAAQ,CAACkB,UAAT,CAAoBD,IAApB,CAAyBf,WAAzB;;AACAF,IAAAA,QAAQ,CAACyB,UAAT,CAAoBlC,KAAK,CAACC,cAA1B;;AACAQ,IAAAA,QAAQ,CAACoB,MAAT,CAAgBX,KAAK,CAACO,QAAtB;;AACAhB,IAAAA,QAAQ,CAACqB,QAAT,CAAkBK,CAAlB,IAAuB,MAAMH,IAAI,CAACC,EAAL,GAAU,GAAhB,CAAvB;AACAlC,IAAAA,QAAQ,CAACqC,KAAT;AACArC,IAAAA,QAAQ,CAACsC,cAAT,CAAwB,IAAxB;AACAtC,IAAAA,QAAQ,CAACuC,UAAT,CAAoBnC,UAAU,GAAGC,MAAM,GAAG,CAA1C,EAA6CC,OAAO,GAAG,CAAvD,EAA0DD,MAA1D,EAAkEC,OAAlE;AACAN,IAAAA,QAAQ,CAACwC,WAAT,CAAqBpC,UAAU,GAAGC,MAAM,GAAG,CAA3C,EAA8CC,OAAO,GAAG,CAAxD,EAA2DD,MAA3D,EAAmEC,OAAnE;;AACA,QAAIL,KAAK,CAACE,gBAAV,EAA4B;AAC1BH,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBX,QAAvB;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBZ,QAAvB;AACD;;AACDP,IAAAA,QAAQ,CAACuC,UAAT,CAAoBnC,UAAU,GAAGC,MAAM,GAAG,CAA1C,EAA6C,CAA7C,EAAgDA,MAAhD,EAAwDC,OAAxD;AACAN,IAAAA,QAAQ,CAACwC,WAAT,CAAqBpC,UAAU,GAAGC,MAAM,GAAG,CAA3C,EAA8C,CAA9C,EAAiDA,MAAjD,EAAyDC,OAAzD;;AACA,QAAIL,KAAK,CAACE,gBAAV,EAA4B;AAC1BH,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBZ,QAAvB;AACD,KAFD,MAEO;AACLP,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBX,QAAvB;AACD;;AACDR,IAAAA,QAAQ,CAACuC,UAAT,CAAoBnC,UAAU,GAAGC,MAAM,GAAG,CAAtB,GAA0BA,MAA9C,EAAsDC,OAAtD,EAA+DD,MAA/D,EAAuEC,OAAvE;AACAN,IAAAA,QAAQ,CAACwC,WAAT,CAAqBpC,UAAU,GAAGC,MAAM,GAAG,CAAtB,GAA0BA,MAA/C,EAAuDC,OAAvD,EAAgED,MAAhE,EAAwEC,OAAxE;;AACA,QAAIL,KAAK,CAACE,gBAAV,EAA4B;AAC1BH,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBT,QAAvB;AACD,KAFD,MAEO;AACLV,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBV,QAAvB;AACD;;AACDT,IAAAA,QAAQ,CAACuC,UAAT,CAAoBnC,UAAU,GAAGC,MAAM,GAAG,CAA1C,EAA6CC,OAA7C,EAAsDD,MAAtD,EAA8DC,OAA9D;AACAN,IAAAA,QAAQ,CAACwC,WAAT,CAAqBpC,UAAU,GAAGC,MAAM,GAAG,CAA3C,EAA8CC,OAA9C,EAAuDD,MAAvD,EAA+DC,OAA/D;;AACA,QAAIL,KAAK,CAACE,gBAAV,EAA4B;AAC1BH,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBV,QAAvB;AACD,KAFD,MAEO;AACLT,MAAAA,QAAQ,CAACkB,MAAT,CAAgBC,KAAhB,EAAuBT,QAAvB;AACD;;AACDV,IAAAA,QAAQ,CAACsC,cAAT,CAAwB,KAAxB;AACD,GAxDD;AAyDD,C;;AAEH,SACEvC,kBADF","sourcesContent":["import { PerspectiveCamera, Vector3, Quaternion } from \"three\";\nclass PeppersGhostEffect {\n  constructor(renderer) {\n    const scope = this;\n    scope.cameraDistance = 15;\n    scope.reflectFromAbove = false;\n    let _halfWidth, _width, _height;\n    const _cameraF = new PerspectiveCamera();\n    const _cameraB = new PerspectiveCamera();\n    const _cameraL = new PerspectiveCamera();\n    const _cameraR = new PerspectiveCamera();\n    const _position = new Vector3();\n    const _quaternion = new Quaternion();\n    const _scale = new Vector3();\n    renderer.autoClear = false;\n    this.setSize = function(width, height) {\n      _halfWidth = width / 2;\n      if (width < height) {\n        _width = width / 3;\n        _height = width / 3;\n      } else {\n        _width = height / 3;\n        _height = height / 3;\n      }\n      renderer.setSize(width, height);\n    };\n    this.render = function(scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      camera.matrixWorld.decompose(_position, _quaternion, _scale);\n      _cameraF.position.copy(_position);\n      _cameraF.quaternion.copy(_quaternion);\n      _cameraF.translateZ(scope.cameraDistance);\n      _cameraF.lookAt(scene.position);\n      _cameraB.position.copy(_position);\n      _cameraB.quaternion.copy(_quaternion);\n      _cameraB.translateZ(-scope.cameraDistance);\n      _cameraB.lookAt(scene.position);\n      _cameraB.rotation.z += 180 * (Math.PI / 180);\n      _cameraL.position.copy(_position);\n      _cameraL.quaternion.copy(_quaternion);\n      _cameraL.translateX(-scope.cameraDistance);\n      _cameraL.lookAt(scene.position);\n      _cameraL.rotation.x += 90 * (Math.PI / 180);\n      _cameraR.position.copy(_position);\n      _cameraR.quaternion.copy(_quaternion);\n      _cameraR.translateX(scope.cameraDistance);\n      _cameraR.lookAt(scene.position);\n      _cameraR.rotation.x += 90 * (Math.PI / 180);\n      renderer.clear();\n      renderer.setScissorTest(true);\n      renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraB);\n      } else {\n        renderer.render(scene, _cameraF);\n      }\n      renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraF);\n      } else {\n        renderer.render(scene, _cameraB);\n      }\n      renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraR);\n      } else {\n        renderer.render(scene, _cameraL);\n      }\n      renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n      renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraL);\n      } else {\n        renderer.render(scene, _cameraR);\n      }\n      renderer.setScissorTest(false);\n    };\n  }\n}\nexport {\n  PeppersGhostEffect\n};\n"]},"metadata":{},"sourceType":"module"}