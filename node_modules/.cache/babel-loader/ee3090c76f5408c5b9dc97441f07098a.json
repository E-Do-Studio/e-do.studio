{"ast":null,"code":"import { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh } from \"three\";\nimport potpack from \"potpack\";\n\nclass ProgressiveLightMap {\n  constructor(renderer, res = 1024) {\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false;\n    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n\n    this.uvMat.onBeforeCompile = shader => {\n      shader.vertexShader = \"#define USE_LIGHTMAP\\n\" + shader.vertexShader.slice(0, -1) + \"\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }\";\n      const bodyStart = shader.fragmentShader.indexOf(\"void main() {\");\n      shader.fragmentShader = \"varying vec2 vUv2;\\n\" + shader.fragmentShader.slice(0, bodyStart) + \"\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n\" + shader.fragmentShader.slice(bodyStart - 1, -1) + `\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\n\t\t\t\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n\t\t\t}`;\n      shader.uniforms.previousShadowMap = {\n        value: this.progressiveLightMap1.texture\n      };\n      shader.uniforms.averagingWindow = {\n        value: 100\n      };\n      this.uvMat.uniforms = shader.uniforms;\n      this.uvMat.userData.shader = shader;\n      this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n\n\n  addObjectsToLightMap(objects) {\n    this.uv_boxes = [];\n    const padding = 3 / this.res;\n\n    for (let ob = 0; ob < objects.length; ob++) {\n      const object = objects[ob];\n\n      if (object.isLight) {\n        this.scene.attach(object);\n        continue;\n      }\n\n      if (!object.geometry.hasAttribute(\"uv\")) {\n        console.warn(\"All lightmap objects need UVs!\");\n        continue;\n      }\n\n      if (this.blurringPlane == null) {\n        this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n      }\n\n      object.material.lightMap = this.progressiveLightMap2.texture;\n      object.material.dithering = true;\n      object.castShadow = true;\n      object.receiveShadow = true;\n      object.renderOrder = 1e3 + ob;\n      this.uv_boxes.push({\n        w: 1 + padding * 2,\n        h: 1 + padding * 2,\n        index: ob\n      });\n      this.lightMapContainers.push({\n        basicMat: object.material,\n        object\n      });\n      this.compiled = false;\n    }\n\n    const dimensions = potpack(this.uv_boxes);\n    this.uv_boxes.forEach(box => {\n      const uv2 = objects[box.index].geometry.getAttribute(\"uv\").clone();\n\n      for (let i = 0; i < uv2.array.length; i += uv2.itemSize) {\n        uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n        uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n      }\n\n      objects[box.index].geometry.setAttribute(\"uv2\", uv2);\n      objects[box.index].geometry.getAttribute(\"uv2\").needsUpdate = true;\n    });\n  }\n  /**\n   * This function renders each mesh one at a time into their respective surface maps\n   * @param {Camera} camera Standard Rendering Camera\n   * @param {number} blendWindow When >1, samples will accumulate over time.\n   * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n   */\n\n\n  update(camera, blendWindow = 100, blurEdges = true) {\n    if (this.blurringPlane == null) {\n      return;\n    }\n\n    const oldTarget = this.renderer.getRenderTarget();\n    this.blurringPlane.visible = blurEdges;\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n      this.scene.attach(this.lightMapContainers[l].object);\n    }\n\n    if (this.firstUpdate) {\n      this.renderer.setRenderTarget(this.tinyTarget);\n      this.renderer.render(this.scene, camera);\n      this.firstUpdate = false;\n    }\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.uvMat.uniforms.averagingWindow = {\n        value: blendWindow\n      };\n      this.lightMapContainers[l].object.material = this.uvMat;\n      this.lightMapContainers[l].object.oldFrustumCulled = this.lightMapContainers[l].object.frustumCulled;\n      this.lightMapContainers[l].object.frustumCulled = false;\n    }\n\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1;\n    this.renderer.setRenderTarget(activeMap);\n    this.uvMat.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.blurringPlane.material.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera);\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.frustumCulled = this.lightMapContainers[l].object.oldFrustumCulled;\n      this.lightMapContainers[l].object.material = this.lightMapContainers[l].basicMat;\n      this.lightMapContainers[l].object.oldScene.attach(this.lightMapContainers[l].object);\n    }\n\n    this.renderer.setRenderTarget(oldTarget);\n  }\n  /** DEBUG\n   * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n   * @param {boolean} visible Whether the debug plane should be visible\n   * @param {Vector3} position Where the debug plane should be drawn\n   */\n\n\n  showDebugLightmap(visible, position = void 0) {\n    if (this.lightMapContainers.length == 0) {\n      if (!this.warned) {\n        console.warn(\"Call this after adding the objects!\");\n        this.warned = true;\n      }\n\n      return;\n    }\n\n    if (this.labelMesh == null) {\n      this.labelMaterial = new MeshBasicMaterial({\n        map: this.progressiveLightMap1.texture,\n        side: DoubleSide\n      });\n      this.labelPlane = new PlaneGeometry(100, 100);\n      this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n      this.labelMesh.position.y = 250;\n      this.lightMapContainers[0].object.parent.add(this.labelMesh);\n    }\n\n    if (position != void 0) {\n      this.labelMesh.position.copy(position);\n    }\n\n    this.labelMesh.visible = visible;\n  }\n  /**\n   * INTERNAL Creates the Blurring Plane\n   * @param {number} res The square resolution of this object's lightMap.\n   * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n   */\n\n\n  _initializeBlurPlane(res, lightMap = null) {\n    const blurMaterial = new MeshBasicMaterial();\n    blurMaterial.uniforms = {\n      previousShadowMap: {\n        value: null\n      },\n      pixelOffset: {\n        value: 1 / res\n      },\n      polygonOffset: true,\n      polygonOffsetFactor: -1,\n      polygonOffsetUnits: 3\n    };\n\n    blurMaterial.onBeforeCompile = shader => {\n      shader.vertexShader = \"#define USE_UV\\n\" + shader.vertexShader.slice(0, -1) + \"\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }\";\n      const bodyStart = shader.fragmentShader.indexOf(\"void main() {\");\n      shader.fragmentShader = \"#define USE_UV\\n\" + shader.fragmentShader.slice(0, bodyStart) + \"\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n\" + shader.fragmentShader.slice(bodyStart - 1, -1) + `\tgl_FragColor.rgb = (\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\n\t\t}`;\n      shader.uniforms.previousShadowMap = {\n        value: lightMap.texture\n      };\n      shader.uniforms.pixelOffset = {\n        value: 0.5 / res\n      };\n      blurMaterial.uniforms = shader.uniforms;\n      blurMaterial.userData.shader = shader;\n      this.compiled = true;\n    };\n\n    this.blurringPlane = new Mesh(new PlaneGeometry(1, 1), blurMaterial);\n    this.blurringPlane.name = \"Blurring Plane\";\n    this.blurringPlane.frustumCulled = false;\n    this.blurringPlane.renderOrder = 0;\n    this.blurringPlane.material.depthWrite = false;\n    this.scene.add(this.blurringPlane);\n  }\n\n}\n\nexport { ProgressiveLightMap };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/misc/ProgressiveLightmap.js"],"names":["Scene","WebGLRenderTarget","FloatType","MeshPhongMaterial","MeshBasicMaterial","DoubleSide","PlaneGeometry","Mesh","potpack","ProgressiveLightMap","constructor","renderer","res","lightMapContainers","compiled","scene","background","tinyTarget","buffer1Active","firstUpdate","warned","format","test","navigator","userAgent","alfFloatType","progressiveLightMap1","type","progressiveLightMap2","uvMat","uniforms","onBeforeCompile","shader","vertexShader","slice","bodyStart","fragmentShader","indexOf","previousShadowMap","value","texture","averagingWindow","userData","addObjectsToLightMap","objects","uv_boxes","padding","ob","length","object","isLight","attach","geometry","hasAttribute","console","warn","blurringPlane","_initializeBlurPlane","material","lightMap","dithering","castShadow","receiveShadow","renderOrder","push","w","h","index","basicMat","dimensions","forEach","box","uv2","getAttribute","clone","i","array","itemSize","x","y","setAttribute","needsUpdate","update","camera","blendWindow","blurEdges","oldTarget","getRenderTarget","visible","l","oldScene","parent","setRenderTarget","render","oldFrustumCulled","frustumCulled","activeMap","inactiveMap","showDebugLightmap","position","labelMesh","labelMaterial","map","side","labelPlane","add","copy","blurMaterial","pixelOffset","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","name","depthWrite"],"mappings":"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","sourcesContent":["import { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh } from \"three\";\nimport potpack from \"potpack\";\nclass ProgressiveLightMap {\n  constructor(renderer, res = 1024) {\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false;\n    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, { type: format });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, { type: format });\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n    this.uvMat.onBeforeCompile = (shader) => {\n      shader.vertexShader = \"#define USE_LIGHTMAP\\n\" + shader.vertexShader.slice(0, -1) + \"\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }\";\n      const bodyStart = shader.fragmentShader.indexOf(\"void main() {\");\n      shader.fragmentShader = \"varying vec2 vUv2;\\n\" + shader.fragmentShader.slice(0, bodyStart) + \"\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n\" + shader.fragmentShader.slice(bodyStart - 1, -1) + `\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\n\t\t\t\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n\t\t\t}`;\n      shader.uniforms.previousShadowMap = { value: this.progressiveLightMap1.texture };\n      shader.uniforms.averagingWindow = { value: 100 };\n      this.uvMat.uniforms = shader.uniforms;\n      this.uvMat.userData.shader = shader;\n      this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n  addObjectsToLightMap(objects) {\n    this.uv_boxes = [];\n    const padding = 3 / this.res;\n    for (let ob = 0; ob < objects.length; ob++) {\n      const object = objects[ob];\n      if (object.isLight) {\n        this.scene.attach(object);\n        continue;\n      }\n      if (!object.geometry.hasAttribute(\"uv\")) {\n        console.warn(\"All lightmap objects need UVs!\");\n        continue;\n      }\n      if (this.blurringPlane == null) {\n        this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n      }\n      object.material.lightMap = this.progressiveLightMap2.texture;\n      object.material.dithering = true;\n      object.castShadow = true;\n      object.receiveShadow = true;\n      object.renderOrder = 1e3 + ob;\n      this.uv_boxes.push({ w: 1 + padding * 2, h: 1 + padding * 2, index: ob });\n      this.lightMapContainers.push({ basicMat: object.material, object });\n      this.compiled = false;\n    }\n    const dimensions = potpack(this.uv_boxes);\n    this.uv_boxes.forEach((box) => {\n      const uv2 = objects[box.index].geometry.getAttribute(\"uv\").clone();\n      for (let i = 0; i < uv2.array.length; i += uv2.itemSize) {\n        uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n        uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n      }\n      objects[box.index].geometry.setAttribute(\"uv2\", uv2);\n      objects[box.index].geometry.getAttribute(\"uv2\").needsUpdate = true;\n    });\n  }\n  /**\n   * This function renders each mesh one at a time into their respective surface maps\n   * @param {Camera} camera Standard Rendering Camera\n   * @param {number} blendWindow When >1, samples will accumulate over time.\n   * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n   */\n  update(camera, blendWindow = 100, blurEdges = true) {\n    if (this.blurringPlane == null) {\n      return;\n    }\n    const oldTarget = this.renderer.getRenderTarget();\n    this.blurringPlane.visible = blurEdges;\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n      this.scene.attach(this.lightMapContainers[l].object);\n    }\n    if (this.firstUpdate) {\n      this.renderer.setRenderTarget(this.tinyTarget);\n      this.renderer.render(this.scene, camera);\n      this.firstUpdate = false;\n    }\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.uvMat.uniforms.averagingWindow = { value: blendWindow };\n      this.lightMapContainers[l].object.material = this.uvMat;\n      this.lightMapContainers[l].object.oldFrustumCulled = this.lightMapContainers[l].object.frustumCulled;\n      this.lightMapContainers[l].object.frustumCulled = false;\n    }\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1;\n    this.renderer.setRenderTarget(activeMap);\n    this.uvMat.uniforms.previousShadowMap = { value: inactiveMap.texture };\n    this.blurringPlane.material.uniforms.previousShadowMap = { value: inactiveMap.texture };\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera);\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.frustumCulled = this.lightMapContainers[l].object.oldFrustumCulled;\n      this.lightMapContainers[l].object.material = this.lightMapContainers[l].basicMat;\n      this.lightMapContainers[l].object.oldScene.attach(this.lightMapContainers[l].object);\n    }\n    this.renderer.setRenderTarget(oldTarget);\n  }\n  /** DEBUG\n   * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n   * @param {boolean} visible Whether the debug plane should be visible\n   * @param {Vector3} position Where the debug plane should be drawn\n   */\n  showDebugLightmap(visible, position = void 0) {\n    if (this.lightMapContainers.length == 0) {\n      if (!this.warned) {\n        console.warn(\"Call this after adding the objects!\");\n        this.warned = true;\n      }\n      return;\n    }\n    if (this.labelMesh == null) {\n      this.labelMaterial = new MeshBasicMaterial({\n        map: this.progressiveLightMap1.texture,\n        side: DoubleSide\n      });\n      this.labelPlane = new PlaneGeometry(100, 100);\n      this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n      this.labelMesh.position.y = 250;\n      this.lightMapContainers[0].object.parent.add(this.labelMesh);\n    }\n    if (position != void 0) {\n      this.labelMesh.position.copy(position);\n    }\n    this.labelMesh.visible = visible;\n  }\n  /**\n   * INTERNAL Creates the Blurring Plane\n   * @param {number} res The square resolution of this object's lightMap.\n   * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n   */\n  _initializeBlurPlane(res, lightMap = null) {\n    const blurMaterial = new MeshBasicMaterial();\n    blurMaterial.uniforms = {\n      previousShadowMap: { value: null },\n      pixelOffset: { value: 1 / res },\n      polygonOffset: true,\n      polygonOffsetFactor: -1,\n      polygonOffsetUnits: 3\n    };\n    blurMaterial.onBeforeCompile = (shader) => {\n      shader.vertexShader = \"#define USE_UV\\n\" + shader.vertexShader.slice(0, -1) + \"\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }\";\n      const bodyStart = shader.fragmentShader.indexOf(\"void main() {\");\n      shader.fragmentShader = \"#define USE_UV\\n\" + shader.fragmentShader.slice(0, bodyStart) + \"\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n\" + shader.fragmentShader.slice(bodyStart - 1, -1) + `\tgl_FragColor.rgb = (\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\n\t\t}`;\n      shader.uniforms.previousShadowMap = { value: lightMap.texture };\n      shader.uniforms.pixelOffset = { value: 0.5 / res };\n      blurMaterial.uniforms = shader.uniforms;\n      blurMaterial.userData.shader = shader;\n      this.compiled = true;\n    };\n    this.blurringPlane = new Mesh(new PlaneGeometry(1, 1), blurMaterial);\n    this.blurringPlane.name = \"Blurring Plane\";\n    this.blurringPlane.frustumCulled = false;\n    this.blurringPlane.renderOrder = 0;\n    this.blurringPlane.material.depthWrite = false;\n    this.scene.add(this.blurringPlane);\n  }\n}\nexport {\n  ProgressiveLightMap\n};\n"]},"metadata":{},"sourceType":"module"}