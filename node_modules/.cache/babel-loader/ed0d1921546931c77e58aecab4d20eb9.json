{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar _SSRPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSRPass, _Pass);\n\n  var _super = _createSuper(_SSRPass);\n\n  function _SSRPass(_ref) {\n    var _this;\n\n    var renderer = _ref.renderer,\n        scene = _ref.scene,\n        camera = _ref.camera,\n        width = _ref.width,\n        height = _ref.height,\n        selects = _ref.selects,\n        _ref$bouncing = _ref.bouncing,\n        bouncing = _ref$bouncing === void 0 ? false : _ref$bouncing,\n        groundReflector = _ref.groundReflector;\n\n    _classCallCheck(this, _SSRPass);\n\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.renderer = renderer;\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.groundReflector = groundReflector;\n    _this.opacity = SSRShader.uniforms.opacity.value;\n    _this.output = 0;\n    _this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    _this.thickness = SSRShader.uniforms.thickness.value;\n    _this.tempColor = new Color();\n    _this._selects = selects;\n    _this.selective = Array.isArray(_this._selects);\n    Object.defineProperty(_assertThisInitialized(_this), \"selects\", {\n      get: function get() {\n        return this._selects;\n      },\n      set: function set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    _this._bouncing = bouncing;\n    Object.defineProperty(_assertThisInitialized(_this), \"bouncing\", {\n      get: function get() {\n        return this._bouncing;\n      },\n      set: function set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    _this.blur = true;\n    _this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(_assertThisInitialized(_this), \"distanceAttenuation\", {\n      get: function get() {\n        return this._distanceAttenuation;\n      },\n      set: function set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(_assertThisInitialized(_this), \"fresnel\", {\n      get: function get() {\n        return this._fresnel;\n      },\n      set: function set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(_assertThisInitialized(_this), \"infiniteThick\", {\n      get: function get() {\n        return this._infiniteThick;\n      },\n      set: function set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true\n    });\n    _this.prevRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.metalnessRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.ssrRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.blurRenderTarget = _this.ssrRenderTarget.clone();\n    _this.blurRenderTarget2 = _this.ssrRenderTarget.clone();\n    _this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(_this.width * _this.width + _this.height * _this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssrMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssrMaterial.defines.SELECTIVE = _this.selective;\n    _this.ssrMaterial.needsUpdate = true;\n    _this.ssrMaterial.uniforms[\"tMetalness\"].value = _this.metalnessRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.ssrMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssrMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.ssrMaterial.uniforms[\"thickness\"].value = _this.thickness;\n\n    _this.ssrMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n\n    _this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n\n    _this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    _this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssrRenderTarget.texture;\n\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n\n    _this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial2.uniforms[\"tDiffuse\"].value = _this.blurRenderTarget.texture;\n\n    _this.blurMaterial2.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation // premultipliedAlpha:true,\n\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n\n  _createClass(_SSRPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.prevRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.metalnessRenderTarget.dispose();\n      this.ssrRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.blurRenderTarget2.dispose();\n      this.normalMaterial.dispose();\n      this.metalnessOnMaterial.dispose();\n      this.metalnessOffMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.blurMaterial2.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n\n      if (this.groundReflector) {\n        this.groundReflector.visible = false;\n        this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n        this.groundReflector.visible = true;\n      }\n\n      renderer.render(this.scene, this.camera);\n      if (this.groundReflector) this.groundReflector.visible = false;\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n\n      if (this.selective) {\n        this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n      }\n\n      this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n      this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n      this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n\n      if (this.blur) {\n        this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n        this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n      }\n\n      switch (this.output) {\n        case _SSRPass.OUTPUT.Default:\n          if (this.bouncing) {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          } else {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          }\n\n          break;\n\n        case _SSRPass.OUTPUT.SSR:\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n\n          if (this.bouncing) {\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          }\n\n          break;\n\n        case _SSRPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSRPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSRPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSRPass.OUTPUT.Metalness:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        default:\n          console.warn(\"THREE.SSRPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderMetalness\",\n    value: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      var _this2 = this;\n\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n\n      this.scene.traverseVisible(function (child) {\n        child._SSRPassBackupMaterial = child.material;\n\n        if (_this2._selects.includes(child)) {\n          child.material = _this2.metalnessOnMaterial;\n        } else {\n          child.material = _this2.metalnessOffMaterial;\n        }\n      });\n      renderer.render(this.scene, this.camera);\n      this.scene.traverseVisible(function (child) {\n        child.material = child._SSRPassBackupMaterial;\n      });\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n      this.ssrMaterial.needsUpdate = true;\n      this.beautyRenderTarget.setSize(width, height);\n      this.prevRenderTarget.setSize(width, height);\n      this.ssrRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.metalnessRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.blurRenderTarget2.setSize(width, height);\n      this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }]);\n\n  return _SSRPass;\n}(Pass);\n\nvar SSRPass = _SSRPass;\n\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\n\nexport { SSRPass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/SSRPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","DepthTexture","UnsignedShortType","NearestFilter","WebGLRenderTarget","HalfFloatType","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","MeshBasicMaterial","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","NormalBlending","Pass","FullScreenQuad","SSRShader","SSRBlurShader","SSRDepthShader","CopyShader","_SSRPass","renderer","scene","camera","width","height","selects","bouncing","groundReflector","clear","opacity","uniforms","output","maxDistance","thickness","tempColor","_selects","selective","Array","isArray","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","type","minFilter","magFilter","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","assign","MAX_STEP","Math","sqrt","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","writeBuffer","setRenderTarget","visible","doRender","render","renderOverride","renderMetalness","renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","traverseVisible","child","_SSRPassBackupMaterial","includes","setSize","SSRPass"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSRPass = class extends Pass {\n  constructor({ renderer, scene, camera, width, height, selects, bouncing = false, groundReflector }) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val)\n          return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val)\n          return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val)\n          return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val)\n          return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val)\n          return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector)\n      this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur)\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n        else\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible((child) => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible((child) => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n};\nlet SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport {\n  SSRPass\n};\n"]},"metadata":{},"sourceType":"module"}