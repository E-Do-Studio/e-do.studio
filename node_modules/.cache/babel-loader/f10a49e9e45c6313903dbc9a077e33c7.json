{"ast":null,"code":"var HueSaturationShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    hue: {\n      value: 0\n    },\n    saturation: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float hue;\", \"uniform float saturation;\", \"varying vec2 vUv;\", \"void main() {\", \"\tgl_FragColor = texture2D( tDiffuse, vUv );\", // hue\n  \"\tfloat angle = hue * 3.14159265;\", \"\tfloat s = sin(angle), c = cos(angle);\", \"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\", \"\tfloat len = length(gl_FragColor.rgb);\", \"\tgl_FragColor.rgb = vec3(\", \"\t\tdot(gl_FragColor.rgb, weights.xyz),\", \"\t\tdot(gl_FragColor.rgb, weights.zxy),\", \"\t\tdot(gl_FragColor.rgb, weights.yzx)\", \"\t);\", // saturation\n  \"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\", \"\tif (saturation > 0.0) {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\", \"\t} else {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { HueSaturationShader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/shaders/HueSaturationShader.js"],"names":["HueSaturationShader","uniforms","tDiffuse","value","hue","saturation","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,GAAG,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFG;AAGRE,IAAAA,UAAU,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT;AAHJ,GADgB;AAM1BG,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CANY;AAa1BC,EAAAA,cAAc,EAAE,CACd,6BADc,EAEd,oBAFc,EAGd,2BAHc,EAId,mBAJc,EAKd,eALc,EAMd,6CANc,EAOd;AACA,oCARc,EASd,wCATc,EAUd,qFAVc,EAWd,wCAXc,EAYd,2BAZc,EAad,uCAbc,EAcd,uCAdc,EAed,sCAfc,EAgBd,KAhBc,EAiBd;AACA,8EAlBc,EAmBd,0BAnBc,EAoBd,0FApBc,EAqBd,WArBc,EAsBd,qEAtBc,EAuBd,IAvBc,EAwBd,GAxBc,EAyBdD,IAzBc,CAyBT,IAzBS;AAbU,CAA5B;AAwCA,SACEP,mBADF","sourcesContent":["const HueSaturationShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    hue: { value: 0 },\n    saturation: { value: 0 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform float hue;\",\n    \"uniform float saturation;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n    // hue\n    \"\tfloat angle = hue * 3.14159265;\",\n    \"\tfloat s = sin(angle), c = cos(angle);\",\n    \"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\n    \"\tfloat len = length(gl_FragColor.rgb);\",\n    \"\tgl_FragColor.rgb = vec3(\",\n    \"\t\tdot(gl_FragColor.rgb, weights.xyz),\",\n    \"\t\tdot(gl_FragColor.rgb, weights.zxy),\",\n    \"\t\tdot(gl_FragColor.rgb, weights.yzx)\",\n    \"\t);\",\n    // saturation\n    \"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\n    \"\tif (saturation > 0.0) {\",\n    \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\n    \"\t} else {\",\n    \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  HueSaturationShader\n};\n"]},"metadata":{},"sourceType":"module"}