{"ast":null,"code":"class WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener(\"message\", this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n\n    return -1;\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n\n    if (this.queue.length) {\n      const {\n        resolve: resolve2,\n        msg: msg2,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve2;\n      this.workers[workerId].postMessage(msg2, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n\n}\n\nexport { WorkerPool };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/utils/WorkerPool.js"],"names":["WorkerPool","constructor","pool","queue","workers","workersResolve","workerStatus","_initWorker","workerId","worker","workerCreator","addEventListener","_onMessage","bind","_getIdleWorker","i","msg","resolve","length","resolve2","msg2","transfer","shift","postMessage","setWorkerCreator","setWorkerLimit","Promise","push","dispose","forEach","terminate"],"mappings":"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","sourcesContent":["class WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener(\"message\", this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++)\n      if (!(this.workerStatus & 1 << i))\n        return i;\n    return -1;\n  }\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n    if (this.queue.length) {\n      const { resolve: resolve2, msg: msg2, transfer } = this.queue.shift();\n      this.workersResolve[workerId] = resolve2;\n      this.workers[workerId].postMessage(msg2, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n  postMessage(msg, transfer) {\n    return new Promise((resolve) => {\n      const workerId = this._getIdleWorker();\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({ resolve, msg, transfer });\n      }\n    });\n  }\n  dispose() {\n    this.workers.forEach((worker) => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n}\nexport {\n  WorkerPool\n};\n"]},"metadata":{},"sourceType":"module"}