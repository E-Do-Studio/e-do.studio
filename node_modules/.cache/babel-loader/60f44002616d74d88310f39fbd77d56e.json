{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Vector2, Group, Raycaster, Matrix4 } from \"three\";\n\nvar _pointer = /* @__PURE__ */new Vector2();\n\nvar _event = {\n  type: \"\",\n  data: _pointer\n};\n\nvar InteractiveGroup = /*#__PURE__*/function (_Group) {\n  _inherits(InteractiveGroup, _Group);\n\n  var _super = _createSuper(InteractiveGroup);\n\n  function InteractiveGroup(renderer, camera) {\n    var _this;\n\n    _classCallCheck(this, InteractiveGroup);\n\n    _this = _super.call(this);\n\n    var scope = _assertThisInitialized(_this);\n\n    var raycaster = new Raycaster();\n    var tempMatrix = new Matrix4();\n    var element = renderer.domElement;\n\n    function onPointerEvent(event) {\n      event.stopPropagation();\n      _pointer.x = event.clientX / element.clientWidth * 2 - 1;\n      _pointer.y = -(event.clientY / element.clientHeight) * 2 + 1;\n      raycaster.setFromCamera(_pointer, camera);\n      var intersects = raycaster.intersectObjects(scope.children, false);\n\n      if (intersects.length > 0) {\n        var intersection = intersects[0];\n        var object = intersection.object;\n        var uv = intersection.uv;\n        _event.type = event.type;\n\n        _event.data.set(uv.x, 1 - uv.y);\n\n        object.dispatchEvent(_event);\n      }\n    }\n\n    element.addEventListener(\"pointerdown\", onPointerEvent);\n    element.addEventListener(\"pointerup\", onPointerEvent);\n    element.addEventListener(\"pointermove\", onPointerEvent);\n    element.addEventListener(\"mousedown\", onPointerEvent);\n    element.addEventListener(\"mouseup\", onPointerEvent);\n    element.addEventListener(\"mousemove\", onPointerEvent);\n    element.addEventListener(\"click\", onPointerEvent);\n    var events = {\n      move: \"mousemove\",\n      select: \"click\",\n      selectstart: \"mousedown\",\n      selectend: \"mouseup\"\n    };\n\n    function onXRControllerEvent(event) {\n      var controller = event.target;\n      tempMatrix.identity().extractRotation(controller.matrixWorld);\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      var intersections = raycaster.intersectObjects(scope.children, false);\n\n      if (intersections.length > 0) {\n        var intersection = intersections[0];\n        var object = intersection.object;\n        var uv = intersection.uv;\n        _event.type = events[event.type];\n\n        _event.data.set(uv.x, 1 - uv.y);\n\n        object.dispatchEvent(_event);\n      }\n    }\n\n    var controller1 = renderer.xr.getController(0);\n    controller1.addEventListener(\"move\", onXRControllerEvent);\n    controller1.addEventListener(\"select\", onXRControllerEvent);\n    controller1.addEventListener(\"selectstart\", onXRControllerEvent);\n    controller1.addEventListener(\"selectend\", onXRControllerEvent);\n    var controller2 = renderer.xr.getController(1);\n    controller2.addEventListener(\"move\", onXRControllerEvent);\n    controller2.addEventListener(\"select\", onXRControllerEvent);\n    controller2.addEventListener(\"selectstart\", onXRControllerEvent);\n    controller2.addEventListener(\"selectend\", onXRControllerEvent);\n    return _this;\n  }\n\n  return InteractiveGroup;\n}(Group);\n\nexport { InteractiveGroup };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/interactive/InteractiveGroup.js"],"names":["Vector2","Group","Raycaster","Matrix4","_pointer","_event","type","data","InteractiveGroup","renderer","camera","scope","raycaster","tempMatrix","element","domElement","onPointerEvent","event","stopPropagation","x","clientX","clientWidth","y","clientY","clientHeight","setFromCamera","intersects","intersectObjects","children","length","intersection","object","uv","set","dispatchEvent","addEventListener","events","move","select","selectstart","selectend","onXRControllerEvent","controller","target","identity","extractRotation","matrixWorld","ray","origin","setFromMatrixPosition","direction","applyMatrix4","intersections","controller1","xr","getController","controller2"],"mappings":"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","sourcesContent":["import { Vector2, Group, Raycaster, Matrix4 } from \"three\";\nconst _pointer = /* @__PURE__ */ new Vector2();\nconst _event = { type: \"\", data: _pointer };\nclass InteractiveGroup extends Group {\n  constructor(renderer, camera) {\n    super();\n    const scope = this;\n    const raycaster = new Raycaster();\n    const tempMatrix = new Matrix4();\n    const element = renderer.domElement;\n    function onPointerEvent(event) {\n      event.stopPropagation();\n      _pointer.x = event.clientX / element.clientWidth * 2 - 1;\n      _pointer.y = -(event.clientY / element.clientHeight) * 2 + 1;\n      raycaster.setFromCamera(_pointer, camera);\n      const intersects = raycaster.intersectObjects(scope.children, false);\n      if (intersects.length > 0) {\n        const intersection = intersects[0];\n        const object = intersection.object;\n        const uv = intersection.uv;\n        _event.type = event.type;\n        _event.data.set(uv.x, 1 - uv.y);\n        object.dispatchEvent(_event);\n      }\n    }\n    element.addEventListener(\"pointerdown\", onPointerEvent);\n    element.addEventListener(\"pointerup\", onPointerEvent);\n    element.addEventListener(\"pointermove\", onPointerEvent);\n    element.addEventListener(\"mousedown\", onPointerEvent);\n    element.addEventListener(\"mouseup\", onPointerEvent);\n    element.addEventListener(\"mousemove\", onPointerEvent);\n    element.addEventListener(\"click\", onPointerEvent);\n    const events = {\n      move: \"mousemove\",\n      select: \"click\",\n      selectstart: \"mousedown\",\n      selectend: \"mouseup\"\n    };\n    function onXRControllerEvent(event) {\n      const controller = event.target;\n      tempMatrix.identity().extractRotation(controller.matrixWorld);\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      const intersections = raycaster.intersectObjects(scope.children, false);\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const object = intersection.object;\n        const uv = intersection.uv;\n        _event.type = events[event.type];\n        _event.data.set(uv.x, 1 - uv.y);\n        object.dispatchEvent(_event);\n      }\n    }\n    const controller1 = renderer.xr.getController(0);\n    controller1.addEventListener(\"move\", onXRControllerEvent);\n    controller1.addEventListener(\"select\", onXRControllerEvent);\n    controller1.addEventListener(\"selectstart\", onXRControllerEvent);\n    controller1.addEventListener(\"selectend\", onXRControllerEvent);\n    const controller2 = renderer.xr.getController(1);\n    controller2.addEventListener(\"move\", onXRControllerEvent);\n    controller2.addEventListener(\"select\", onXRControllerEvent);\n    controller2.addEventListener(\"selectstart\", onXRControllerEvent);\n    controller2.addEventListener(\"selectend\", onXRControllerEvent);\n  }\n}\nexport {\n  InteractiveGroup\n};\n"]},"metadata":{},"sourceType":"module"}