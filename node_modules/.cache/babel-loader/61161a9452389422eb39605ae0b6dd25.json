{"ast":null,"code":"import _slicedToArray from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Plane, Line3, Sphere, Box3, Triangle } from \"three\";\nimport { Capsule } from \"./Capsule.js\";\n\nvar _v1 = /* @__PURE__ */new Vector3();\n\nvar _v2 = /* @__PURE__ */new Vector3();\n\nvar _plane = /* @__PURE__ */new Plane();\n\nvar _line1 = /* @__PURE__ */new Line3();\n\nvar _line2 = /* @__PURE__ */new Line3();\n\nvar _sphere = /* @__PURE__ */new Sphere();\n\nvar _capsule = /* @__PURE__ */new Capsule();\n\nvar Octree = /*#__PURE__*/function () {\n  function Octree(box) {\n    _classCallCheck(this, Octree);\n\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n\n  _createClass(Octree, [{\n    key: \"addTriangle\",\n    value: function addTriangle(triangle) {\n      if (!this.bounds) this.bounds = new Box3();\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.triangles.push(triangle);\n      return this;\n    }\n  }, {\n    key: \"calcBox\",\n    value: function calcBox() {\n      this.box = this.bounds.clone();\n      this.box.min.x -= 0.01;\n      this.box.min.y -= 0.01;\n      this.box.min.z -= 0.01;\n      return this;\n    }\n  }, {\n    key: \"split\",\n    value: function split(level) {\n      if (!this.box) return;\n      var subTrees = [];\n\n      var halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5);\n\n      for (var x = 0; x < 2; x++) {\n        for (var y = 0; y < 2; y++) {\n          for (var z = 0; z < 2; z++) {\n            var box = new Box3();\n\n            var v = _v1.set(x, y, z);\n\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\n            box.max.copy(box.min).add(halfsize);\n            subTrees.push(new Octree(box));\n          }\n        }\n      }\n\n      var triangle;\n\n      while (triangle = this.triangles.pop()) {\n        for (var i = 0; i < subTrees.length; i++) {\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\n            subTrees[i].triangles.push(triangle);\n          }\n        }\n      }\n\n      for (var _i = 0; _i < subTrees.length; _i++) {\n        var len = subTrees[_i].triangles.length;\n\n        if (len > 8 && level < 16) {\n          subTrees[_i].split(level + 1);\n        }\n\n        if (len !== 0) {\n          this.subTrees.push(subTrees[_i]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.calcBox();\n      this.split(0);\n      return this;\n    }\n  }, {\n    key: \"getRayTriangles\",\n    value: function getRayTriangles(ray, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!ray.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getRayTriangles(ray, triangles);\n        }\n      }\n\n      return triangles;\n    }\n  }, {\n    key: \"triangleCapsuleIntersect\",\n    value: function triangleCapsuleIntersect(capsule, triangle) {\n      triangle.getPlane(_plane);\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n        return false;\n      }\n\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n\n      if (triangle.containsPoint(intersectPoint)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: intersectPoint.clone(),\n          depth: Math.abs(Math.min(d1, d2))\n        };\n      }\n\n      var r2 = capsule.radius * capsule.radius;\n\n      var line1 = _line1.set(capsule.start, capsule.end);\n\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (var i = 0; i < lines.length; i++) {\n        var line2 = _line2.set(lines[i][0], lines[i][1]);\n\n        var _capsule$lineLineMini = capsule.lineLineMinimumPoints(line1, line2),\n            _capsule$lineLineMini2 = _slicedToArray(_capsule$lineLineMini, 2),\n            point1 = _capsule$lineLineMini2[0],\n            point2 = _capsule$lineLineMini2[1];\n\n        if (point1.distanceToSquared(point2) < r2) {\n          return {\n            normal: point1.clone().sub(point2).normalize(),\n            point: point2.clone(),\n            depth: capsule.radius - point1.distanceTo(point2)\n          };\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"triangleSphereIntersect\",\n    value: function triangleSphereIntersect(sphere, triangle) {\n      triangle.getPlane(_plane);\n      if (!sphere.intersectsPlane(_plane)) return false;\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\n      var r2 = sphere.radius * sphere.radius - depth * depth;\n\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\n\n      if (triangle.containsPoint(sphere.center)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: plainPoint.clone(),\n          depth: Math.abs(_plane.distanceToSphere(sphere))\n        };\n      }\n\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (var i = 0; i < lines.length; i++) {\n        _line1.set(lines[i][0], lines[i][1]);\n\n        _line1.closestPointToPoint(plainPoint, true, _v2);\n\n        var d = _v2.distanceToSquared(sphere.center);\n\n        if (d < r2) {\n          return {\n            normal: sphere.center.clone().sub(_v2).normalize(),\n            point: _v2.clone(),\n            depth: sphere.radius - Math.sqrt(d)\n          };\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getSphereTriangles\",\n    value: function getSphereTriangles(sphere, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!sphere.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getSphereTriangles(sphere, triangles);\n        }\n      }\n    }\n  }, {\n    key: \"getCapsuleTriangles\",\n    value: function getCapsuleTriangles(capsule, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!capsule.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getCapsuleTriangles(capsule, triangles);\n        }\n      }\n    }\n  }, {\n    key: \"sphereIntersect\",\n    value: function sphereIntersect(sphere) {\n      _sphere.copy(sphere);\n\n      var triangles = [];\n      var result,\n          hit = false;\n      this.getSphereTriangles(sphere, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n          hit = true;\n\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    }\n  }, {\n    key: \"capsuleIntersect\",\n    value: function capsuleIntersect(capsule) {\n      _capsule.copy(capsule);\n\n      var triangles = [];\n      var result,\n          hit = false;\n      this.getCapsuleTriangles(_capsule, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n          hit = true;\n\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    }\n  }, {\n    key: \"rayIntersect\",\n    value: function rayIntersect(ray) {\n      if (ray.direction.length() === 0) return;\n      var triangles = [];\n      var triangle,\n          position,\n          distance = 1e100;\n      this.getRayTriangles(ray, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        var result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n\n        if (result) {\n          var newdistance = result.sub(ray.origin).length();\n\n          if (distance > newdistance) {\n            position = result.clone().add(ray.origin);\n            distance = newdistance;\n            triangle = triangles[i];\n          }\n        }\n      }\n\n      return distance < 1e100 ? {\n        distance: distance,\n        triangle: triangle,\n        position: position\n      } : false;\n    }\n  }, {\n    key: \"fromGraphNode\",\n    value: function fromGraphNode(group) {\n      var _this = this;\n\n      group.updateWorldMatrix(true, true);\n      group.traverse(function (obj) {\n        if (obj.isMesh === true) {\n          var geometry,\n              isTemp = false;\n\n          if (obj.geometry.index !== null) {\n            isTemp = true;\n            geometry = obj.geometry.toNonIndexed();\n          } else {\n            geometry = obj.geometry;\n          }\n\n          var positionAttribute = geometry.getAttribute(\"position\");\n\n          for (var i = 0; i < positionAttribute.count; i += 3) {\n            var v1 = new Vector3().fromBufferAttribute(positionAttribute, i);\n            var v2 = new Vector3().fromBufferAttribute(positionAttribute, i + 1);\n            var v3 = new Vector3().fromBufferAttribute(positionAttribute, i + 2);\n            v1.applyMatrix4(obj.matrixWorld);\n            v2.applyMatrix4(obj.matrixWorld);\n            v3.applyMatrix4(obj.matrixWorld);\n\n            _this.addTriangle(new Triangle(v1, v2, v3));\n          }\n\n          if (isTemp) {\n            geometry.dispose();\n          }\n        }\n      });\n      this.build();\n      return this;\n    }\n  }]);\n\n  return Octree;\n}();\n\nexport { Octree };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/math/Octree.js"],"names":["Vector3","Plane","Line3","Sphere","Box3","Triangle","Capsule","_v1","_v2","_plane","_line1","_line2","_sphere","_capsule","Octree","box","triangles","subTrees","triangle","bounds","min","x","Math","a","b","c","y","z","max","push","clone","level","halfsize","copy","sub","multiplyScalar","v","set","add","multiply","pop","i","length","intersectsTriangle","len","split","calcBox","ray","subTree","intersectsBox","j","indexOf","getRayTriangles","capsule","getPlane","d1","distanceToPoint","start","radius","d2","end","delta","abs","intersectPoint","lerp","containsPoint","normal","point","depth","r2","line1","lines","line2","lineLineMinimumPoints","point1","point2","distanceToSquared","normalize","distanceTo","sphere","intersectsPlane","distanceToSphere","plainPoint","projectPoint","center","closestPointToPoint","d","sqrt","getSphereTriangles","getCapsuleTriangles","result","hit","triangleSphereIntersect","collisionVector","triangleCapsuleIntersect","translate","getCenter","direction","position","distance","intersectTriangle","newdistance","origin","group","updateWorldMatrix","traverse","obj","isMesh","geometry","isTemp","index","toNonIndexed","positionAttribute","getAttribute","count","v1","fromBufferAttribute","v2","v3","applyMatrix4","matrixWorld","addTriangle","dispose","build"],"mappings":"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","sourcesContent":["import { Vector3, Plane, Line3, Sphere, Box3, Triangle } from \"three\";\nimport { Capsule } from \"./Capsule.js\";\nconst _v1 = /* @__PURE__ */ new Vector3();\nconst _v2 = /* @__PURE__ */ new Vector3();\nconst _plane = /* @__PURE__ */ new Plane();\nconst _line1 = /* @__PURE__ */ new Line3();\nconst _line2 = /* @__PURE__ */ new Line3();\nconst _sphere = /* @__PURE__ */ new Sphere();\nconst _capsule = /* @__PURE__ */ new Capsule();\nclass Octree {\n  constructor(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n  addTriangle(triangle) {\n    if (!this.bounds)\n      this.bounds = new Box3();\n    this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.triangles.push(triangle);\n    return this;\n  }\n  calcBox() {\n    this.box = this.bounds.clone();\n    this.box.min.x -= 0.01;\n    this.box.min.y -= 0.01;\n    this.box.min.z -= 0.01;\n    return this;\n  }\n  split(level) {\n    if (!this.box)\n      return;\n    const subTrees = [];\n    const halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5);\n    for (let x = 0; x < 2; x++) {\n      for (let y = 0; y < 2; y++) {\n        for (let z = 0; z < 2; z++) {\n          const box = new Box3();\n          const v = _v1.set(x, y, z);\n          box.min.copy(this.box.min).add(v.multiply(halfsize));\n          box.max.copy(box.min).add(halfsize);\n          subTrees.push(new Octree(box));\n        }\n      }\n    }\n    let triangle;\n    while (triangle = this.triangles.pop()) {\n      for (let i = 0; i < subTrees.length; i++) {\n        if (subTrees[i].box.intersectsTriangle(triangle)) {\n          subTrees[i].triangles.push(triangle);\n        }\n      }\n    }\n    for (let i = 0; i < subTrees.length; i++) {\n      const len = subTrees[i].triangles.length;\n      if (len > 8 && level < 16) {\n        subTrees[i].split(level + 1);\n      }\n      if (len !== 0) {\n        this.subTrees.push(subTrees[i]);\n      }\n    }\n    return this;\n  }\n  build() {\n    this.calcBox();\n    this.split(0);\n    return this;\n  }\n  getRayTriangles(ray, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!ray.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getRayTriangles(ray, triangles);\n      }\n    }\n    return triangles;\n  }\n  triangleCapsuleIntersect(capsule, triangle) {\n    triangle.getPlane(_plane);\n    const d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n    const d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n    if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n      return false;\n    }\n    const delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n    const intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n    if (triangle.containsPoint(intersectPoint)) {\n      return { normal: _plane.normal.clone(), point: intersectPoint.clone(), depth: Math.abs(Math.min(d1, d2)) };\n    }\n    const r2 = capsule.radius * capsule.radius;\n    const line1 = _line1.set(capsule.start, capsule.end);\n    const lines = [\n      [triangle.a, triangle.b],\n      [triangle.b, triangle.c],\n      [triangle.c, triangle.a]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const line2 = _line2.set(lines[i][0], lines[i][1]);\n      const [point1, point2] = capsule.lineLineMinimumPoints(line1, line2);\n      if (point1.distanceToSquared(point2) < r2) {\n        return {\n          normal: point1.clone().sub(point2).normalize(),\n          point: point2.clone(),\n          depth: capsule.radius - point1.distanceTo(point2)\n        };\n      }\n    }\n    return false;\n  }\n  triangleSphereIntersect(sphere, triangle) {\n    triangle.getPlane(_plane);\n    if (!sphere.intersectsPlane(_plane))\n      return false;\n    const depth = Math.abs(_plane.distanceToSphere(sphere));\n    const r2 = sphere.radius * sphere.radius - depth * depth;\n    const plainPoint = _plane.projectPoint(sphere.center, _v1);\n    if (triangle.containsPoint(sphere.center)) {\n      return {\n        normal: _plane.normal.clone(),\n        point: plainPoint.clone(),\n        depth: Math.abs(_plane.distanceToSphere(sphere))\n      };\n    }\n    const lines = [\n      [triangle.a, triangle.b],\n      [triangle.b, triangle.c],\n      [triangle.c, triangle.a]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      _line1.set(lines[i][0], lines[i][1]);\n      _line1.closestPointToPoint(plainPoint, true, _v2);\n      const d = _v2.distanceToSquared(sphere.center);\n      if (d < r2) {\n        return {\n          normal: sphere.center.clone().sub(_v2).normalize(),\n          point: _v2.clone(),\n          depth: sphere.radius - Math.sqrt(d)\n        };\n      }\n    }\n    return false;\n  }\n  getSphereTriangles(sphere, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!sphere.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getSphereTriangles(sphere, triangles);\n      }\n    }\n  }\n  getCapsuleTriangles(capsule, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!capsule.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getCapsuleTriangles(capsule, triangles);\n      }\n    }\n  }\n  sphereIntersect(sphere) {\n    _sphere.copy(sphere);\n    const triangles = [];\n    let result, hit = false;\n    this.getSphereTriangles(sphere, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n        hit = true;\n        _sphere.center.add(result.normal.multiplyScalar(result.depth));\n      }\n    }\n    if (hit) {\n      const collisionVector = _sphere.center.clone().sub(sphere.center);\n      const depth = collisionVector.length();\n      return { normal: collisionVector.normalize(), depth };\n    }\n    return false;\n  }\n  capsuleIntersect(capsule) {\n    _capsule.copy(capsule);\n    const triangles = [];\n    let result, hit = false;\n    this.getCapsuleTriangles(_capsule, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n        hit = true;\n        _capsule.translate(result.normal.multiplyScalar(result.depth));\n      }\n    }\n    if (hit) {\n      const collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n      const depth = collisionVector.length();\n      return { normal: collisionVector.normalize(), depth };\n    }\n    return false;\n  }\n  rayIntersect(ray) {\n    if (ray.direction.length() === 0)\n      return;\n    const triangles = [];\n    let triangle, position, distance = 1e100;\n    this.getRayTriangles(ray, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      const result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n      if (result) {\n        const newdistance = result.sub(ray.origin).length();\n        if (distance > newdistance) {\n          position = result.clone().add(ray.origin);\n          distance = newdistance;\n          triangle = triangles[i];\n        }\n      }\n    }\n    return distance < 1e100 ? { distance, triangle, position } : false;\n  }\n  fromGraphNode(group) {\n    group.updateWorldMatrix(true, true);\n    group.traverse((obj) => {\n      if (obj.isMesh === true) {\n        let geometry, isTemp = false;\n        if (obj.geometry.index !== null) {\n          isTemp = true;\n          geometry = obj.geometry.toNonIndexed();\n        } else {\n          geometry = obj.geometry;\n        }\n        const positionAttribute = geometry.getAttribute(\"position\");\n        for (let i = 0; i < positionAttribute.count; i += 3) {\n          const v1 = new Vector3().fromBufferAttribute(positionAttribute, i);\n          const v2 = new Vector3().fromBufferAttribute(positionAttribute, i + 1);\n          const v3 = new Vector3().fromBufferAttribute(positionAttribute, i + 2);\n          v1.applyMatrix4(obj.matrixWorld);\n          v2.applyMatrix4(obj.matrixWorld);\n          v3.applyMatrix4(obj.matrixWorld);\n          this.addTriangle(new Triangle(v1, v2, v3));\n        }\n        if (isTemp) {\n          geometry.dispose();\n        }\n      }\n    });\n    this.build();\n    return this;\n  }\n}\nexport {\n  Octree\n};\n"]},"metadata":{},"sourceType":"module"}