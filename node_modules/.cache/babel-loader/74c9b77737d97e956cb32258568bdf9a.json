{"ast":null,"code":"import { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\n\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n          tangents = frames.tangents,\n          normals = frames.normals,\n          binormals = frames.binormals;\n    const position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v);\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    super(ParametricTube, segments, segmentsRadius);\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n\n}\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n      class TorusKnotCurve extends Curve {\n        getPoint(t, optionalTarget = new Vector3()) {\n          const point = optionalTarget;\n          t *= Math.PI * 2;\n          const r = 0.5;\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          const z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n\n      }\n\n      const segments = segmentsT;\n      const radiusSegments = segmentsR;\n      const extrudePath = new TorusKnotCurve();\n      super(extrudePath, segments, tube, radiusSegments, true, false);\n      this.radius = radius;\n      this.tube = tube;\n      this.segmentsT = segmentsT;\n      this.segmentsR = segmentsR;\n      this.p = p;\n      this.q = q;\n    }\n\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        const x = size * Math.sin(u2) * Math.cos(v2);\n        const y = size * Math.sin(u2) * Math.sin(v2);\n        const z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n\n      super(sphere, u, v);\n    }\n\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width;\n        const y = 0;\n        const z = v * depth;\n        target.set(x, y, z);\n      }\n\n      super(plane, segmentsWidth, segmentsDepth);\n    }\n\n  }\n};\nexport { ParametricGeometries };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"names":["Vector3","Curve","ParametricGeometry","TubeGeometry","constructor","path","segments","radius","segmentsRadius","closed","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","u","v","target","Math","PI","i","floor","getPointAt","normal","binormal","cx","cos","cy","sin","x","y","z","copy","ParametricGeometries","klein","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","u2","v2","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"mappings":"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","sourcesContent":["import { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed), tangents = frames.tangents, normals = frames.normals, binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v);\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius);\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n}\nconst ParametricGeometries = {\n  klein: function(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function(width, height) {\n    return function(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function(u, t, target) {\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function(u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25, a = 0.125, b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n      class TorusKnotCurve extends Curve {\n        getPoint(t, optionalTarget = new Vector3()) {\n          const point = optionalTarget;\n          t *= Math.PI * 2;\n          const r = 0.5;\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          const z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }\n      const segments = segmentsT;\n      const radiusSegments = segmentsR;\n      const extrudePath = new TorusKnotCurve();\n      super(extrudePath, segments, tube, radiusSegments, true, false);\n      this.radius = radius;\n      this.tube = tube;\n      this.segmentsT = segmentsT;\n      this.segmentsR = segmentsR;\n      this.p = p;\n      this.q = q;\n    }\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        const x = size * Math.sin(u2) * Math.cos(v2);\n        const y = size * Math.sin(u2) * Math.sin(v2);\n        const z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n      super(sphere, u, v);\n    }\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width;\n        const y = 0;\n        const z = v * depth;\n        target.set(x, y, z);\n      }\n      super(plane, segmentsWidth, segmentsDepth);\n    }\n  }\n};\nexport {\n  ParametricGeometries\n};\n"]},"metadata":{},"sourceType":"module"}