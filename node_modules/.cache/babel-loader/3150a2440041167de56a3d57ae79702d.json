{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { ShaderMaterial, UniformsUtils } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\n\nclass ShaderPass extends Pass {\n  constructor(shader, textureID = \"tDiffuse\") {\n    super();\n\n    __publicField(this, \"textureID\");\n\n    __publicField(this, \"uniforms\");\n\n    __publicField(this, \"material\");\n\n    __publicField(this, \"fsQuad\");\n\n    this.textureID = textureID;\n\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms;\n      this.material = shader;\n    } else {\n      this.uniforms = UniformsUtils.clone(shader.uniforms);\n      this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.fsQuad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { ShaderPass };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/ShaderPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","ShaderPass","constructor","shader","textureID","uniforms","material","clone","defines","assign","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;;AACA,IAAIC,eAAe,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqBD,GAAG,IAAID,GAAP,GAAaJ,SAAS,CAACI,GAAD,EAAMC,GAAN,EAAW;AAAEE,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,YAAY,EAAE,IAAlC;AAAwCC,EAAAA,QAAQ,EAAE,IAAlD;AAAwDH,EAAAA;AAAxD,CAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAA1J;;AACA,IAAII,aAAa,GAAG,CAACN,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqB;AACvCH,EAAAA,eAAe,CAACC,GAAD,EAAM,OAAOC,GAAP,KAAe,QAAf,GAA0BA,GAAG,GAAG,EAAhC,GAAqCA,GAA3C,EAAgDC,KAAhD,CAAf;;AACA,SAAOA,KAAP;AACD,CAHD;;AAIA,SAASK,cAAT,EAAyBC,aAAzB,QAA8C,OAA9C;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;;AACA,MAAMC,UAAN,SAAyBF,IAAzB,CAA8B;AAC5BG,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAS,GAAG,UAArB,EAAiC;AAC1C;;AACAR,IAAAA,aAAa,CAAC,IAAD,EAAO,WAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,CAAb;;AACA,SAAKQ,SAAL,GAAiBA,SAAjB;;AACA,QAAID,MAAM,YAAYN,cAAtB,EAAsC;AACpC,WAAKQ,QAAL,GAAgBF,MAAM,CAACE,QAAvB;AACA,WAAKC,QAAL,GAAgBH,MAAhB;AACD,KAHD,MAGO;AACL,WAAKE,QAAL,GAAgBP,aAAa,CAACS,KAAd,CAAoBJ,MAAM,CAACE,QAA3B,CAAhB;AACA,WAAKC,QAAL,GAAgB,IAAIT,cAAJ,CAAmB;AACjCW,QAAAA,OAAO,EAAErB,MAAM,CAACsB,MAAP,CAAc,EAAd,EAAkBN,MAAM,CAACK,OAAzB,CADwB;AAEjCH,QAAAA,QAAQ,EAAE,KAAKA,QAFkB;AAGjCK,QAAAA,YAAY,EAAEP,MAAM,CAACO,YAHY;AAIjCC,QAAAA,cAAc,EAAER,MAAM,CAACQ;AAJU,OAAnB,CAAhB;AAMD;;AACD,SAAKC,MAAL,GAAc,IAAIZ,cAAJ,CAAmB,KAAKM,QAAxB,CAAd;AACD;;AACDO,EAAAA,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoC;AACxC,QAAI,KAAKX,QAAL,CAAc,KAAKD,SAAnB,CAAJ,EAAmC;AACjC,WAAKC,QAAL,CAAc,KAAKD,SAAnB,EAA8BZ,KAA9B,GAAsCwB,UAAU,CAACC,OAAjD;AACD;;AACD,SAAKL,MAAL,CAAYN,QAAZ,GAAuB,KAAKA,QAA5B;;AACA,QAAI,KAAKY,cAAT,EAAyB;AACvBJ,MAAAA,QAAQ,CAACK,eAAT,CAAyB,IAAzB;AACA,WAAKP,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,CAACK,eAAT,CAAyBJ,WAAzB;AACA,UAAI,KAAKK,KAAT,EACEN,QAAQ,CAACM,KAAT,CAAeN,QAAQ,CAACO,cAAxB,EAAwCP,QAAQ,CAACQ,cAAjD,EAAiER,QAAQ,CAACS,gBAA1E;AACF,WAAKX,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD;AACF;;AApC2B;;AAsC9B,SACEb,UADF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { ShaderMaterial, UniformsUtils } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nclass ShaderPass extends Pass {\n  constructor(shader, textureID = \"tDiffuse\") {\n    super();\n    __publicField(this, \"textureID\");\n    __publicField(this, \"uniforms\");\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    this.textureID = textureID;\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms;\n      this.material = shader;\n    } else {\n      this.uniforms = UniformsUtils.clone(shader.uniforms);\n      this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n    this.fsQuad.material = this.material;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport {\n  ShaderPass\n};\n"]},"metadata":{},"sourceType":"module"}