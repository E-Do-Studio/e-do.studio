{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from \"three\";\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n\nconst initSplineTexture = (numberOfCurves = 1) => {\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\n\nconst updateSplineTexture = (texture, splineCurve, offset = 0) => {\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n\n  texture.needsUpdate = true;\n};\n\nconst setTextureValue = (texture, index, x, y, z, o) => {\n  const image = texture.image;\n  const {\n    data\n  } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o;\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\n\nconst getUniforms = splineTexture => ({\n  spineTexture: {\n    value: splineTexture\n  },\n  pathOffset: {\n    type: \"f\",\n    value: 0\n  },\n  // time of path curve\n  pathSegment: {\n    type: \"f\",\n    value: 1\n  },\n  // fractional length of path\n  spineOffset: {\n    type: \"f\",\n    value: 161\n  },\n  spineLength: {\n    type: \"f\",\n    value: 400\n  },\n  flow: {\n    type: \"i\",\n    value: 1\n  }\n});\n\nfunction modifyShader(material, uniforms, numberOfCurves = 1) {\n  if (material.__ok) return;\n  material.__ok = true;\n\n  material.onBeforeCompile = shader => {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader =\n    /* glsl */\n    `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t`.replace(\"#include <beginnormal_vertex>\", \"\").replace(\"#include <defaultnormal_vertex>\", \"\").replace(\"#include <begin_vertex>\", \"\").replace(/void\\s*main\\s*\\(\\)\\s*\\{/,\n    /* glsl */\n    `\n        void main() {\n        #include <beginnormal_vertex>\n\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\n\n        bool bend = flow > 0;\n        float xWeight = bend ? 0. : 1.;\n\n        #ifdef USE_INSTANCING\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n        #else\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n        #endif\n\n        mt = mod(mt, textureStacks);\n        float rowOffset = floor(mt);\n\n        #ifdef USE_INSTANCING\n        rowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n        #endif\n\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\n        mat3 basis = mat3(a, b, c);\n\n        vec3 transformed = basis\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n          + spinePos;\n\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`).replace(\"#include <project_vertex>\",\n    /* glsl */\n    `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`);\n    shader.vertexShader = vertexShader;\n  };\n}\n\nclass Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh, numberOfCurves = 1) {\n    __publicField(this, \"curveArray\");\n\n    __publicField(this, \"curveLengthArray\");\n\n    __publicField(this, \"object3D\");\n\n    __publicField(this, \"splineTexure\");\n\n    __publicField(this, \"uniforms\");\n\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse(child => {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length) throw Error(\"Index out of range for Flow\");\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n\n}\n\nconst matrix = /* @__PURE__ */new Matrix4();\n\nclass InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    mesh.frustumCulled = false;\n    super(mesh, curveCount);\n\n    __publicField(this, \"offsets\");\n\n    __publicField(this, \"whichCurve\");\n\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n\n\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n\n\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n\n\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo)) throw Error(\"curve index being set is Not a Number (NaN)\");\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n\n}\n\nexport { Flow, InstancedFlow, getUniforms, initSplineTexture, modifyShader, updateSplineTexture };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/modifiers/CurveModifier.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","DataTexture","RGBAFormat","FloatType","RepeatWrapping","NearestFilter","Mesh","InstancedMesh","Matrix4","DynamicDrawUsage","CHANNELS","TEXTURE_WIDTH","TEXTURE_HEIGHT","initSplineTexture","numberOfCurves","dataArray","Float32Array","dataTexture","wrapS","wrapT","magFilter","needsUpdate","updateSplineTexture","texture","splineCurve","offset","numberOfPoints","Math","floor","arcLengthDivisions","updateArcLengths","points","getSpacedPoints","frenetFrames","computeFrenetFrames","i","rowOffset","rowIndex","pt","setTextureValue","x","y","z","tangents","normals","binormals","index","o","image","data","getUniforms","splineTexture","spineTexture","pathOffset","type","pathSegment","spineOffset","spineLength","flow","modifyShader","material","uniforms","__ok","onBeforeCompile","shader","__modified","assign","vertexShader","replace","Flow","constructor","mesh","obj3D","clone","splineTexure","traverse","child","curveArray","Array","curveLengthArray","object3D","updateCurve","curve","length","Error","curveLength","getLength","moveAlongCurve","amount","matrix","InstancedFlow","count","curveCount","geometry","instanceMatrix","setUsage","frustumCulled","offsets","fill","whichCurve","writeChanges","makeTranslation","setMatrixAt","moveIndividualAlongCurve","setCurve","curveNo","isNaN"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from \"three\";\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\nconst initSplineTexture = (numberOfCurves = 1) => {\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\nconst updateSplineTexture = (texture, splineCurve, offset = 0) => {\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n  texture.needsUpdate = true;\n};\nconst setTextureValue = (texture, index, x, y, z, o) => {\n  const image = texture.image;\n  const { data } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o;\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\nconst getUniforms = (splineTexture) => ({\n  spineTexture: { value: splineTexture },\n  pathOffset: { type: \"f\", value: 0 },\n  // time of path curve\n  pathSegment: { type: \"f\", value: 1 },\n  // fractional length of path\n  spineOffset: { type: \"f\", value: 161 },\n  spineLength: { type: \"f\", value: 400 },\n  flow: { type: \"i\", value: 1 }\n});\nfunction modifyShader(material, uniforms, numberOfCurves = 1) {\n  if (material.__ok)\n    return;\n  material.__ok = true;\n  material.onBeforeCompile = (shader) => {\n    if (shader.__modified)\n      return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader = (\n      /* glsl */\n      `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t`.replace(\"#include <beginnormal_vertex>\", \"\").replace(\"#include <defaultnormal_vertex>\", \"\").replace(\"#include <begin_vertex>\", \"\").replace(\n        /void\\s*main\\s*\\(\\)\\s*\\{/,\n        /* glsl */\n        `\n        void main() {\n        #include <beginnormal_vertex>\n\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\n\n        bool bend = flow > 0;\n        float xWeight = bend ? 0. : 1.;\n\n        #ifdef USE_INSTANCING\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n        #else\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n        #endif\n\n        mt = mod(mt, textureStacks);\n        float rowOffset = floor(mt);\n\n        #ifdef USE_INSTANCING\n        rowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n        #endif\n\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\n        mat3 basis = mat3(a, b, c);\n\n        vec3 transformed = basis\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n          + spinePos;\n\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`\n      ).replace(\n        \"#include <project_vertex>\",\n        /* glsl */\n        `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`\n      )\n    );\n    shader.vertexShader = vertexShader;\n  };\n}\nclass Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh, numberOfCurves = 1) {\n    __publicField(this, \"curveArray\");\n    __publicField(this, \"curveLengthArray\");\n    __publicField(this, \"object3D\");\n    __publicField(this, \"splineTexure\");\n    __publicField(this, \"uniforms\");\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse((child) => {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length)\n      throw Error(\"Index out of range for Flow\");\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n}\nconst matrix = /* @__PURE__ */ new Matrix4();\nclass InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    mesh.frustumCulled = false;\n    super(mesh, curveCount);\n    __publicField(this, \"offsets\");\n    __publicField(this, \"whichCurve\");\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo))\n      throw Error(\"curve index being set is Not a Number (NaN)\");\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n}\nexport {\n  Flow,\n  InstancedFlow,\n  getUniforms,\n  initSplineTexture,\n  modifyShader,\n  updateSplineTexture\n};\n"]},"metadata":{},"sourceType":"module"}