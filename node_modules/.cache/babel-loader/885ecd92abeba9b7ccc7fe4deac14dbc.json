{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CompressedTextureLoader } from \"three\";\n\nvar KTXLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(KTXLoader, _CompressedTextureLoa);\n\n  var _super = _createSuper(KTXLoader);\n\n  function KTXLoader(manager) {\n    _classCallCheck(this, KTXLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(KTXLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var ktx = new KhronosTextureContainer(buffer, 1);\n      return {\n        mipmaps: ktx.mipmaps(loadMipmaps),\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        format: ktx.glInternalFormat,\n        isCubemap: ktx.numberOfFaces === 6,\n        mipmapCount: ktx.numberOfMipmapLevels\n      };\n    }\n  }]);\n\n  return KTXLoader;\n}(CompressedTextureLoader);\n\nvar HEADER_LEN = 12 + 13 * 4;\nvar COMPRESSED_2D = 0;\n\nvar KhronosTextureContainer = /*#__PURE__*/function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected) {\n    _classCallCheck(this, KhronosTextureContainer);\n\n    this.arrayBuffer = arrayBuffer;\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n\n    if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n      console.error(\"texture missing KTX identifier\");\n      return;\n    }\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 67305985;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n\n    if (this.glType !== 0) {\n      console.warn(\"only compressed formats currently supported\");\n      return;\n    } else {\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn(\"only 2D textures currently supported\");\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn(\"texture arrays not currently supported\");\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    }\n\n    this.loadType = COMPRESSED_2D;\n  }\n\n  _createClass(KhronosTextureContainer, [{\n    key: \"mipmaps\",\n    value: function mipmaps(loadMipmaps) {\n      var mipmaps = [];\n      var dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n      var width = this.pixelWidth;\n      var height = this.pixelHeight;\n      var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n      for (var level = 0; level < mipmapCount; level++) {\n        var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n        dataOffset += 4;\n\n        for (var face = 0; face < this.numberOfFaces; face++) {\n          var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n          mipmaps.push({\n            data: byteArray,\n            width: width,\n            height: height\n          });\n          dataOffset += imageSize;\n          dataOffset += 3 - (imageSize + 3) % 4;\n        }\n\n        width = Math.max(1, width * 0.5);\n        height = Math.max(1, height * 0.5);\n      }\n\n      return mipmaps;\n    }\n  }]);\n\n  return KhronosTextureContainer;\n}();\n\nexport { KTXLoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/KTXLoader.js"],"names":["CompressedTextureLoader","KTXLoader","manager","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","HEADER_LEN","COMPRESSED_2D","arrayBuffer","facesExpected","identifier","Uint8Array","console","error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","warn","Math","max","loadType","dataOffset","level","imageSize","Int32Array","face","byteArray","push","data"],"mappings":"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","sourcesContent":["import { CompressedTextureLoader } from \"three\";\nclass KTXLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer, loadMipmaps) {\n    const ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n}\nconst HEADER_LEN = 12 + 13 * 4;\nconst COMPRESSED_2D = 0;\nclass KhronosTextureContainer {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  constructor(arrayBuffer, facesExpected) {\n    this.arrayBuffer = arrayBuffer;\n    const identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n    if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n      console.error(\"texture missing KTX identifier\");\n      return;\n    }\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 67305985;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n    if (this.glType !== 0) {\n      console.warn(\"only compressed formats currently supported\");\n      return;\n    } else {\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn(\"only 2D textures currently supported\");\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      console.warn(\"texture arrays not currently supported\");\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    }\n    this.loadType = COMPRESSED_2D;\n  }\n  mipmaps(loadMipmaps) {\n    const mipmaps = [];\n    let dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n    let width = this.pixelWidth;\n    let height = this.pixelHeight;\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n      dataOffset += 4;\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({ data: byteArray, width, height });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4;\n      }\n      width = Math.max(1, width * 0.5);\n      height = Math.max(1, height * 0.5);\n    }\n    return mipmaps;\n  }\n}\nexport {\n  KTXLoader\n};\n"]},"metadata":{},"sourceType":"module"}