{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, LineBasicMaterial, BufferGeometry, Float32BufferAttribute, LineSegments, Group, Euler } from \"three\";\n\nvar GCodeLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(GCodeLoader, _Loader);\n\n  var _super = _createSuper(GCodeLoader);\n\n  function GCodeLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, GCodeLoader);\n\n    _this = _super.call(this, manager);\n    _this.splitLayer = false;\n    return _this;\n  }\n\n  _createClass(GCodeLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var state = {\n        x: 0,\n        y: 0,\n        z: 0,\n        e: 0,\n        f: 0,\n        extruding: false,\n        relative: false\n      };\n      var layers = [];\n      var currentLayer = void 0;\n      var pathMaterial = new LineBasicMaterial({\n        color: 16711680\n      });\n      pathMaterial.name = \"path\";\n      var extrudingMaterial = new LineBasicMaterial({\n        color: 65280\n      });\n      extrudingMaterial.name = \"extruded\";\n\n      function newLayer(line) {\n        currentLayer = {\n          vertex: [],\n          pathVertex: [],\n          z: line.z\n        };\n        layers.push(currentLayer);\n      }\n\n      function addSegment(p1, p2) {\n        if (currentLayer === void 0) {\n          newLayer(p1);\n        }\n\n        if (state.extruding) {\n          currentLayer.vertex.push(p1.x, p1.y, p1.z);\n          currentLayer.vertex.push(p2.x, p2.y, p2.z);\n        } else {\n          currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n          currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n        }\n      }\n\n      function delta(v1, v2) {\n        return state.relative ? v2 : v2 - v1;\n      }\n\n      function absolute(v1, v2) {\n        return state.relative ? v1 + v2 : v2;\n      }\n\n      var lines = data.replace(/;.+/g, \"\").split(\"\\n\");\n\n      var _loop = function _loop(i) {\n        var tokens = lines[i].split(\" \");\n        var cmd = tokens[0].toUpperCase();\n        var args = {};\n        tokens.splice(1).forEach(function (token) {\n          if (token[0] !== void 0) {\n            var key = token[0].toLowerCase();\n            var value = parseFloat(token.substring(1));\n            args[key] = value;\n          }\n        });\n\n        if (cmd === \"G0\" || cmd === \"G1\") {\n          var line = {\n            x: args.x !== void 0 ? absolute(state.x, args.x) : state.x,\n            y: args.y !== void 0 ? absolute(state.y, args.y) : state.y,\n            z: args.z !== void 0 ? absolute(state.z, args.z) : state.z,\n            e: args.e !== void 0 ? absolute(state.e, args.e) : state.e,\n            f: args.f !== void 0 ? absolute(state.f, args.f) : state.f\n          };\n\n          if (delta(state.e, line.e) > 0) {\n            line.extruding = delta(state.e, line.e) > 0;\n\n            if (currentLayer == void 0 || line.z != currentLayer.z) {\n              newLayer(line);\n            }\n          }\n\n          addSegment(state, line);\n          state = line;\n        } else if (cmd === \"G2\" || cmd === \"G3\") {} else if (cmd === \"G90\") {\n          state.relative = false;\n        } else if (cmd === \"G91\") {\n          state.relative = true;\n        } else if (cmd === \"G92\") {\n          var _line = state;\n          _line.x = args.x !== void 0 ? args.x : _line.x;\n          _line.y = args.y !== void 0 ? args.y : _line.y;\n          _line.z = args.z !== void 0 ? args.z : _line.z;\n          _line.e = args.e !== void 0 ? args.e : _line.e;\n          state = _line;\n        } else {}\n      };\n\n      for (var i = 0; i < lines.length; i++) {\n        _loop(i);\n      }\n\n      function addObject(vertex, extruding, i) {\n        var geometry = new BufferGeometry();\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertex, 3));\n        var segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n        segments.name = \"layer\" + i;\n        object.add(segments);\n      }\n\n      var object = new Group();\n      object.name = \"gcode\";\n\n      if (this.splitLayer) {\n        for (var _i = 0; _i < layers.length; _i++) {\n          var layer = layers[_i];\n          addObject(layer.vertex, true, _i);\n          addObject(layer.pathVertex, false, _i);\n        }\n      } else {\n        var vertex = [],\n            pathVertex = [];\n\n        for (var _i2 = 0; _i2 < layers.length; _i2++) {\n          var _layer = layers[_i2];\n          var layerVertex = _layer.vertex;\n          var layerPathVertex = _layer.pathVertex;\n\n          for (var j = 0; j < layerVertex.length; j++) {\n            vertex.push(layerVertex[j]);\n          }\n\n          for (var _j = 0; _j < layerPathVertex.length; _j++) {\n            pathVertex.push(layerPathVertex[_j]);\n          }\n        }\n\n        addObject(vertex, true, layers.length);\n        addObject(pathVertex, false, layers.length);\n      }\n\n      object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n      return object;\n    }\n  }]);\n\n  return GCodeLoader;\n}(Loader);\n\nexport { GCodeLoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/GCodeLoader.js"],"names":["Loader","FileLoader","LineBasicMaterial","BufferGeometry","Float32BufferAttribute","LineSegments","Group","Euler","GCodeLoader","manager","splitLayer","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","state","x","y","z","f","extruding","relative","layers","currentLayer","pathMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","addSegment","p1","p2","delta","v1","v2","absolute","lines","replace","split","i","tokens","cmd","toUpperCase","args","splice","forEach","token","key","toLowerCase","value","parseFloat","substring","length","addObject","geometry","setAttribute","segments","object","add","layer","layerVertex","layerPathVertex","j","quaternion","setFromEuler","Math","PI"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, LineBasicMaterial, BufferGeometry, Float32BufferAttribute, LineSegments, Group, Euler } from \"three\";\nclass GCodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.splitLayer = false;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    let state = { x: 0, y: 0, z: 0, e: 0, f: 0, extruding: false, relative: false };\n    let layers = [];\n    let currentLayer = void 0;\n    const pathMaterial = new LineBasicMaterial({ color: 16711680 });\n    pathMaterial.name = \"path\";\n    const extrudingMaterial = new LineBasicMaterial({ color: 65280 });\n    extrudingMaterial.name = \"extruded\";\n    function newLayer(line) {\n      currentLayer = { vertex: [], pathVertex: [], z: line.z };\n      layers.push(currentLayer);\n    }\n    function addSegment(p1, p2) {\n      if (currentLayer === void 0) {\n        newLayer(p1);\n      }\n      if (state.extruding) {\n        currentLayer.vertex.push(p1.x, p1.y, p1.z);\n        currentLayer.vertex.push(p2.x, p2.y, p2.z);\n      } else {\n        currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n        currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n      }\n    }\n    function delta(v1, v2) {\n      return state.relative ? v2 : v2 - v1;\n    }\n    function absolute(v1, v2) {\n      return state.relative ? v1 + v2 : v2;\n    }\n    let lines = data.replace(/;.+/g, \"\").split(\"\\n\");\n    for (let i = 0; i < lines.length; i++) {\n      let tokens = lines[i].split(\" \");\n      let cmd = tokens[0].toUpperCase();\n      let args = {};\n      tokens.splice(1).forEach(function(token) {\n        if (token[0] !== void 0) {\n          let key = token[0].toLowerCase();\n          let value = parseFloat(token.substring(1));\n          args[key] = value;\n        }\n      });\n      if (cmd === \"G0\" || cmd === \"G1\") {\n        let line = {\n          x: args.x !== void 0 ? absolute(state.x, args.x) : state.x,\n          y: args.y !== void 0 ? absolute(state.y, args.y) : state.y,\n          z: args.z !== void 0 ? absolute(state.z, args.z) : state.z,\n          e: args.e !== void 0 ? absolute(state.e, args.e) : state.e,\n          f: args.f !== void 0 ? absolute(state.f, args.f) : state.f\n        };\n        if (delta(state.e, line.e) > 0) {\n          line.extruding = delta(state.e, line.e) > 0;\n          if (currentLayer == void 0 || line.z != currentLayer.z) {\n            newLayer(line);\n          }\n        }\n        addSegment(state, line);\n        state = line;\n      } else if (cmd === \"G2\" || cmd === \"G3\") {\n      } else if (cmd === \"G90\") {\n        state.relative = false;\n      } else if (cmd === \"G91\") {\n        state.relative = true;\n      } else if (cmd === \"G92\") {\n        let line = state;\n        line.x = args.x !== void 0 ? args.x : line.x;\n        line.y = args.y !== void 0 ? args.y : line.y;\n        line.z = args.z !== void 0 ? args.z : line.z;\n        line.e = args.e !== void 0 ? args.e : line.e;\n        state = line;\n      } else {\n      }\n    }\n    function addObject(vertex, extruding, i) {\n      let geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(vertex, 3));\n      let segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n      segments.name = \"layer\" + i;\n      object.add(segments);\n    }\n    const object = new Group();\n    object.name = \"gcode\";\n    if (this.splitLayer) {\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        addObject(layer.vertex, true, i);\n        addObject(layer.pathVertex, false, i);\n      }\n    } else {\n      const vertex = [], pathVertex = [];\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        let layerVertex = layer.vertex;\n        let layerPathVertex = layer.pathVertex;\n        for (let j = 0; j < layerVertex.length; j++) {\n          vertex.push(layerVertex[j]);\n        }\n        for (let j = 0; j < layerPathVertex.length; j++) {\n          pathVertex.push(layerPathVertex[j]);\n        }\n      }\n      addObject(vertex, true, layers.length);\n      addObject(pathVertex, false, layers.length);\n    }\n    object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    return object;\n  }\n}\nexport {\n  GCodeLoader\n};\n"]},"metadata":{},"sourceType":"module"}