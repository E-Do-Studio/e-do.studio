{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\n\nvar _box = /* @__PURE__ */new Box3();\n\nvar _vector = /* @__PURE__ */new Vector3();\n\nvar LineSegmentsGeometry = /*#__PURE__*/function (_InstancedBufferGeome) {\n  _inherits(LineSegmentsGeometry, _InstancedBufferGeome);\n\n  var _super = _createSuper(LineSegmentsGeometry);\n\n  function LineSegmentsGeometry() {\n    var _this;\n\n    _classCallCheck(this, LineSegmentsGeometry);\n\n    _this = _super.call(this);\n    _this.isLineSegmentsGeometry = true;\n    _this.type = \"LineSegmentsGeometry\";\n    var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n\n    _this.setIndex(index);\n\n    _this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n\n    _this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    return _this;\n  }\n\n  _createClass(LineSegmentsGeometry, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix) {\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n\n      if (start !== void 0) {\n        start.applyMatrix4(matrix);\n        end.applyMatrix4(matrix);\n        start.needsUpdate = true;\n      }\n\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      var lineSegments;\n\n      if (array instanceof Float32Array) {\n        lineSegments = array;\n      } else if (Array.isArray(array)) {\n        lineSegments = new Float32Array(array);\n      }\n\n      var instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n      this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n      this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n      this.computeBoundingBox();\n      this.computeBoundingSphere();\n      return this;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors(array) {\n      var colors;\n\n      if (array instanceof Float32Array) {\n        colors = array;\n      } else if (Array.isArray(array)) {\n        colors = new Float32Array(array);\n      }\n\n      var instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);\n      this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\n      this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\n      return this;\n    }\n  }, {\n    key: \"fromWireframeGeometry\",\n    value: function fromWireframeGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromEdgesGeometry\",\n    value: function fromEdgesGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromMesh\",\n    value: function fromMesh(mesh) {\n      this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n      return this;\n    }\n  }, {\n    key: \"fromLineSegments\",\n    value: function fromLineSegments(lineSegments) {\n      var geometry = lineSegments.geometry;\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"computeBoundingBox\",\n    value: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n\n      if (start !== void 0 && end !== void 0) {\n        this.boundingBox.setFromBufferAttribute(start);\n\n        _box.setFromBufferAttribute(end);\n\n        this.boundingBox.union(_box);\n      }\n    }\n  }, {\n    key: \"computeBoundingSphere\",\n    value: function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n\n      if (this.boundingBox === null) {\n        this.computeBoundingBox();\n      }\n\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n\n      if (start !== void 0 && end !== void 0) {\n        var center = this.boundingSphere.center;\n        this.boundingBox.getCenter(center);\n        var maxRadiusSq = 0;\n\n        for (var i = 0, il = start.count; i < il; i++) {\n          _vector.fromBufferAttribute(start, i);\n\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n\n          _vector.fromBufferAttribute(end, i);\n\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        }\n\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error(\"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\", this);\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {}\n  }, {\n    key: \"applyMatrix\",\n    value: function applyMatrix(matrix) {\n      console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n      return this.applyMatrix4(matrix);\n    }\n  }]);\n\n  return LineSegmentsGeometry;\n}(InstancedBufferGeometry);\n\nexport { LineSegmentsGeometry };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/lines/LineSegmentsGeometry.js"],"names":["Box3","Vector3","InstancedBufferGeometry","Float32BufferAttribute","InstancedInterleavedBuffer","InterleavedBufferAttribute","WireframeGeometry","Sphere","_box","_vector","LineSegmentsGeometry","isLineSegmentsGeometry","type","positions","uvs","index","setIndex","setAttribute","matrix","start","attributes","instanceStart","end","instanceEnd","applyMatrix4","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","colors","instanceColorBuffer","geometry","setPositions","position","mesh","fromWireframeGeometry","setFromBufferAttribute","union","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","warn"],"mappings":"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","sourcesContent":["import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\nconst _box = /* @__PURE__ */ new Box3();\nconst _vector = /* @__PURE__ */ new Vector3();\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = \"LineSegmentsGeometry\";\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n    this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n    this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);\n    this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\n    this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\n          \"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\",\n          this\n        );\n      }\n    }\n  }\n  toJSON() {\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n}\nexport {\n  LineSegmentsGeometry\n};\n"]},"metadata":{},"sourceType":"module"}