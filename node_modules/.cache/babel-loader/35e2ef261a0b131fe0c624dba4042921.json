{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { UniformsUtils, Vector2, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\n\nvar WaterPass = /*#__PURE__*/function (_Pass) {\n  _inherits(WaterPass, _Pass);\n\n  var _super = _createSuper(WaterPass);\n\n  function WaterPass() {\n    var _this;\n\n    _classCallCheck(this, WaterPass);\n\n    _this = _super.call(this);\n\n    __publicField(_assertThisInitialized(_this), \"material\");\n\n    __publicField(_assertThisInitialized(_this), \"fsQuad\");\n\n    __publicField(_assertThisInitialized(_this), \"factor\");\n\n    __publicField(_assertThisInitialized(_this), \"time\");\n\n    __publicField(_assertThisInitialized(_this), \"uniforms\");\n\n    _this.uniforms = UniformsUtils.clone({\n      tex: {\n        value: null\n      },\n      time: {\n        value: 0\n      },\n      factor: {\n        value: 0\n      },\n      resolution: {\n        value: new Vector2(64, 64)\n      }\n    });\n    _this.material = new ShaderMaterial({\n      uniforms: _this.uniforms,\n      vertexShader: \"\\n      varying vec2 vUv;\\n      void main(){  \\n        vUv = uv; \\n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n        gl_Position = projectionMatrix * modelViewPosition;\\n      }\",\n      fragmentShader: \"\\n      uniform float time;\\n      uniform float factor;\\n      uniform vec2 resolution;\\n      uniform sampler2D tex;\\n      varying vec2 vUv;\\n      void main() {  \\n        vec2 uv1 = vUv;\\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\\n        float frequency = 6.0 * factor;\\n        float amplitude = 0.015 * factor;\\n        float x = uv1.y * frequency + time * .7; \\n        float y = uv1.x * frequency + time * .3;\\n        uv1.x += cos(x+y) * amplitude * cos(y);\\n        uv1.y += sin(x-y) * amplitude * cos(y);\\n        vec4 rgba = texture2D(tex, uv1);\\n        gl_FragColor = rgba;\\n      }\"\n    });\n    _this.fsQuad = new FullScreenQuad(_this.material);\n    _this.factor = 0;\n    _this.time = 0;\n    return _this;\n  }\n\n  _createClass(WaterPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      this.uniforms[\"tex\"].value = readBuffer.texture;\n      this.uniforms[\"time\"].value = this.time;\n      this.uniforms[\"factor\"].value = this.factor;\n\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n    }\n  }]);\n\n  return WaterPass;\n}(Pass);\n\nexport { WaterPass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/WaterPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","UniformsUtils","Vector2","ShaderMaterial","Pass","FullScreenQuad","WaterPass","uniforms","clone","tex","time","factor","resolution","material","vertexShader","fragmentShader","fsQuad","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","render","clear"],"mappings":";;;;;AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX;AAAA,SAAqBD,GAAG,IAAID,GAAP,GAAaJ,SAAS,CAACI,GAAD,EAAMC,GAAN,EAAW;AAAEE,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,YAAY,EAAE,IAAlC;AAAwCC,IAAAA,QAAQ,EAAE,IAAlD;AAAwDH,IAAAA,KAAK,EAALA;AAAxD,GAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAApI;AAAA,CAAtB;;AACA,IAAII,aAAa,GAAG,SAAhBA,aAAgB,CAACN,GAAD,EAAMC,GAAN,EAAWC,KAAX,EAAqB;AACvCH,EAAAA,eAAe,CAACC,GAAD,EAAM,OAAOC,GAAP,KAAe,QAAf,GAA0BA,GAAG,GAAG,EAAhC,GAAqCA,GAA3C,EAAgDC,KAAhD,CAAf;;AACA,SAAOA,KAAP;AACD,CAHD;;AAIA,SAASK,aAAT,EAAwBC,OAAxB,EAAiCC,cAAjC,QAAuD,OAAvD;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;;IACMC,S;;;;;AACJ,uBAAc;AAAA;;AAAA;;AACZ;;AACAN,IAAAA,aAAa,gCAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,gCAAO,QAAP,CAAb;;AACAA,IAAAA,aAAa,gCAAO,QAAP,CAAb;;AACAA,IAAAA,aAAa,gCAAO,MAAP,CAAb;;AACAA,IAAAA,aAAa,gCAAO,UAAP,CAAb;;AACA,UAAKO,QAAL,GAAgBN,aAAa,CAACO,KAAd,CAAoB;AAClCC,MAAAA,GAAG,EAAE;AAAEb,QAAAA,KAAK,EAAE;AAAT,OAD6B;AAElCc,MAAAA,IAAI,EAAE;AAAEd,QAAAA,KAAK,EAAE;AAAT,OAF4B;AAGlCe,MAAAA,MAAM,EAAE;AAAEf,QAAAA,KAAK,EAAE;AAAT,OAH0B;AAIlCgB,MAAAA,UAAU,EAAE;AAAEhB,QAAAA,KAAK,EAAE,IAAIM,OAAJ,CAAY,EAAZ,EAAgB,EAAhB;AAAT;AAJsB,KAApB,CAAhB;AAMA,UAAKW,QAAL,GAAgB,IAAIV,cAAJ,CAAmB;AACjCI,MAAAA,QAAQ,EAAE,MAAKA,QADkB;AAEjCO,MAAAA,YAAY,sNAFqB;AASjCC,MAAAA,cAAc;AATmB,KAAnB,CAAhB;AA4BA,UAAKC,MAAL,GAAc,IAAIX,cAAJ,CAAmB,MAAKQ,QAAxB,CAAd;AACA,UAAKF,MAAL,GAAc,CAAd;AACA,UAAKD,IAAL,GAAY,CAAZ;AA3CY;AA4Cb;;;;WACD,gBAAOO,QAAP,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0C;AACxC,WAAKZ,QAAL,CAAc,KAAd,EAAqBX,KAArB,GAA6BuB,UAAU,CAACC,OAAxC;AACA,WAAKb,QAAL,CAAc,MAAd,EAAsBX,KAAtB,GAA8B,KAAKc,IAAnC;AACA,WAAKH,QAAL,CAAc,QAAd,EAAwBX,KAAxB,GAAgC,KAAKe,MAArC;;AACA,UAAI,KAAKU,cAAT,EAAyB;AACvBJ,QAAAA,QAAQ,CAACK,eAAT,CAAyB,IAAzB;AACA,aAAKN,MAAL,CAAYO,MAAZ,CAAmBN,QAAnB;AACD,OAHD,MAGO;AACLA,QAAAA,QAAQ,CAACK,eAAT,CAAyBJ,WAAzB;AACA,YAAI,KAAKM,KAAT,EACEP,QAAQ,CAACO,KAAT;AACF,aAAKR,MAAL,CAAYO,MAAZ,CAAmBN,QAAnB;AACD;AACF;;;;EA3DqBb,I;;AA6DxB,SACEE,SADF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { UniformsUtils, Vector2, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nclass WaterPass extends Pass {\n  constructor() {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"factor\");\n    __publicField(this, \"time\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone({\n      tex: { value: null },\n      time: { value: 0 },\n      factor: { value: 0 },\n      resolution: { value: new Vector2(64, 64) }\n    });\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.factor = 0;\n    this.time = 0;\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tex\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value = this.time;\n    this.uniforms[\"factor\"].value = this.factor;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport {\n  WaterPass\n};\n"]},"metadata":{},"sourceType":"module"}