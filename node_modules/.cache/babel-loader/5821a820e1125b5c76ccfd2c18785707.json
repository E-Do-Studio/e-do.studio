{"ast":null,"code":"import { PerspectiveCamera, Vector3, Quaternion } from \"three\";\n\nclass PeppersGhostEffect {\n  constructor(renderer) {\n    const scope = this;\n    scope.cameraDistance = 15;\n    scope.reflectFromAbove = false;\n\n    let _halfWidth, _width, _height;\n\n    const _cameraF = new PerspectiveCamera();\n\n    const _cameraB = new PerspectiveCamera();\n\n    const _cameraL = new PerspectiveCamera();\n\n    const _cameraR = new PerspectiveCamera();\n\n    const _position = new Vector3();\n\n    const _quaternion = new Quaternion();\n\n    const _scale = new Vector3();\n\n    renderer.autoClear = false;\n\n    this.setSize = function (width, height) {\n      _halfWidth = width / 2;\n\n      if (width < height) {\n        _width = width / 3;\n        _height = width / 3;\n      } else {\n        _width = height / 3;\n        _height = height / 3;\n      }\n\n      renderer.setSize(width, height);\n    };\n\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      camera.matrixWorld.decompose(_position, _quaternion, _scale);\n\n      _cameraF.position.copy(_position);\n\n      _cameraF.quaternion.copy(_quaternion);\n\n      _cameraF.translateZ(scope.cameraDistance);\n\n      _cameraF.lookAt(scene.position);\n\n      _cameraB.position.copy(_position);\n\n      _cameraB.quaternion.copy(_quaternion);\n\n      _cameraB.translateZ(-scope.cameraDistance);\n\n      _cameraB.lookAt(scene.position);\n\n      _cameraB.rotation.z += 180 * (Math.PI / 180);\n\n      _cameraL.position.copy(_position);\n\n      _cameraL.quaternion.copy(_quaternion);\n\n      _cameraL.translateX(-scope.cameraDistance);\n\n      _cameraL.lookAt(scene.position);\n\n      _cameraL.rotation.x += 90 * (Math.PI / 180);\n\n      _cameraR.position.copy(_position);\n\n      _cameraR.quaternion.copy(_quaternion);\n\n      _cameraR.translateX(scope.cameraDistance);\n\n      _cameraR.lookAt(scene.position);\n\n      _cameraR.rotation.x += 90 * (Math.PI / 180);\n      renderer.clear();\n      renderer.setScissorTest(true);\n      renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraB);\n      } else {\n        renderer.render(scene, _cameraF);\n      }\n\n      renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraF);\n      } else {\n        renderer.render(scene, _cameraB);\n      }\n\n      renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraR);\n      } else {\n        renderer.render(scene, _cameraL);\n      }\n\n      renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n      renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraL);\n      } else {\n        renderer.render(scene, _cameraR);\n      }\n\n      renderer.setScissorTest(false);\n    };\n  }\n\n}\n\nexport { PeppersGhostEffect };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/effects/PeppersGhostEffect.js"],"names":["PerspectiveCamera","Vector3","Quaternion","PeppersGhostEffect","constructor","renderer","scope","cameraDistance","reflectFromAbove","_halfWidth","_width","_height","_cameraF","_cameraB","_cameraL","_cameraR","_position","_quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport"],"mappings":"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","sourcesContent":["import { PerspectiveCamera, Vector3, Quaternion } from \"three\";\nclass PeppersGhostEffect {\n  constructor(renderer) {\n    const scope = this;\n    scope.cameraDistance = 15;\n    scope.reflectFromAbove = false;\n    let _halfWidth, _width, _height;\n    const _cameraF = new PerspectiveCamera();\n    const _cameraB = new PerspectiveCamera();\n    const _cameraL = new PerspectiveCamera();\n    const _cameraR = new PerspectiveCamera();\n    const _position = new Vector3();\n    const _quaternion = new Quaternion();\n    const _scale = new Vector3();\n    renderer.autoClear = false;\n    this.setSize = function(width, height) {\n      _halfWidth = width / 2;\n      if (width < height) {\n        _width = width / 3;\n        _height = width / 3;\n      } else {\n        _width = height / 3;\n        _height = height / 3;\n      }\n      renderer.setSize(width, height);\n    };\n    this.render = function(scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      camera.matrixWorld.decompose(_position, _quaternion, _scale);\n      _cameraF.position.copy(_position);\n      _cameraF.quaternion.copy(_quaternion);\n      _cameraF.translateZ(scope.cameraDistance);\n      _cameraF.lookAt(scene.position);\n      _cameraB.position.copy(_position);\n      _cameraB.quaternion.copy(_quaternion);\n      _cameraB.translateZ(-scope.cameraDistance);\n      _cameraB.lookAt(scene.position);\n      _cameraB.rotation.z += 180 * (Math.PI / 180);\n      _cameraL.position.copy(_position);\n      _cameraL.quaternion.copy(_quaternion);\n      _cameraL.translateX(-scope.cameraDistance);\n      _cameraL.lookAt(scene.position);\n      _cameraL.rotation.x += 90 * (Math.PI / 180);\n      _cameraR.position.copy(_position);\n      _cameraR.quaternion.copy(_quaternion);\n      _cameraR.translateX(scope.cameraDistance);\n      _cameraR.lookAt(scene.position);\n      _cameraR.rotation.x += 90 * (Math.PI / 180);\n      renderer.clear();\n      renderer.setScissorTest(true);\n      renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraB);\n      } else {\n        renderer.render(scene, _cameraF);\n      }\n      renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraF);\n      } else {\n        renderer.render(scene, _cameraB);\n      }\n      renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraR);\n      } else {\n        renderer.render(scene, _cameraL);\n      }\n      renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n      renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraL);\n      } else {\n        renderer.render(scene, _cameraR);\n      }\n      renderer.setScissorTest(false);\n    };\n  }\n}\nexport {\n  PeppersGhostEffect\n};\n"]},"metadata":{},"sourceType":"module"}