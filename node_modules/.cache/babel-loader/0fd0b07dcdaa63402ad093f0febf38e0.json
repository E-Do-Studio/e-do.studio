{"ast":null,"code":"var DigitalGlitch = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    //diffuse texture\n    tDisp: {\n      value: null\n    },\n    //displacement texture for digital glitch squares\n    byp: {\n      value: 0\n    },\n    //apply the glitch ?\n    amount: {\n      value: 0.08\n    },\n    angle: {\n      value: 0.02\n    },\n    seed: {\n      value: 0.02\n    },\n    seed_x: {\n      value: 0.02\n    },\n    //-1,1\n    seed_y: {\n      value: 0.02\n    },\n    //-1,1\n    distortion_x: {\n      value: 0.5\n    },\n    distortion_y: {\n      value: 0.6\n    },\n    col_s: {\n      value: 0.05\n    }\n  },\n  vertexShader: \"varying vec2 vUv;\\n     void main() {\\n     \\t vUv = uv;\\n     \\t gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n     }\",\n  fragmentShader: \"uniform int byp; //should we apply the glitch ?\\n     uniform sampler2D tDiffuse;\\n     uniform sampler2D tDisp;\\n     uniform float amount;\\n     uniform float angle;\\n     uniform float seed;\\n     uniform float seed_x;\\n     uniform float seed_y;\\n     uniform float distortion_x;\\n     uniform float distortion_y;\\n     uniform float col_s;\\n\\n     varying vec2 vUv;\\n\\n     float rand(vec2 co){\\n     \\t return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n     }\\n\\n     void main() {\\n     \\tif(byp<1) {\\n     \\t\\tvec2 p = vUv;\\n     \\t\\tfloat xs = floor(gl_FragCoord.x / 0.5);\\n     \\t\\tfloat ys = floor(gl_FragCoord.y / 0.5);\\n    //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\\n     \\t\\tvec4 normal = texture2D (tDisp, p*seed*seed);\\n     \\t\\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\\n     \\t\\t\\tif(seed_x>0.){\\n     \\t\\t\\t\\tp.y = 1. - (p.y + distortion_y);\\n     \\t\\t\\t}\\n     \\t\\t\\telse {\\n     \\t\\t\\t\\tp.y = distortion_y;\\n     \\t\\t\\t}\\n     \\t\\t}\\n     \\t\\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\\n     \\t\\t\\tif(seed_y>0.){\\n     \\t\\t\\t\\tp.x=distortion_x;\\n     \\t\\t\\t}\\n     \\t\\t\\telse {\\n     \\t\\t\\t\\tp.x = 1. - (p.x + distortion_x);\\n     \\t\\t\\t}\\n     \\t\\t}\\n     \\t\\tp.x+=normal.x*seed_x*(seed/5.);\\n     \\t\\tp.y+=normal.y*seed_y*(seed/5.);\\n    //base from RGB shift shader\\n     \\t\\tvec2 offset = amount * vec2( cos(angle), sin(angle));\\n     \\t\\tvec4 cr = texture2D(tDiffuse, p + offset);\\n     \\t\\tvec4 cga = texture2D(tDiffuse, p);\\n     \\t\\tvec4 cb = texture2D(tDiffuse, p - offset);\\n     \\t\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n    //add noise\\n     \\t\\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\\n     \\t\\tgl_FragColor = gl_FragColor+ snow;\\n     \\t}\\n     \\telse {\\n     \\t\\tgl_FragColor=texture2D (tDiffuse, vUv);\\n     \\t}\\n    }\"\n};\nexport { DigitalGlitch };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/shaders/DigitalGlitch.js"],"names":["DigitalGlitch","uniforms","tDiffuse","value","tDisp","byp","amount","angle","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","vertexShader","fragmentShader"],"mappings":"AAAA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAER;AACAC,IAAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAHC;AAIR;AACAE,IAAAA,GAAG,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KALG;AAMR;AACAG,IAAAA,MAAM,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAPA;AAQRI,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KARC;AASRK,IAAAA,IAAI,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT,KATE;AAURM,IAAAA,MAAM,EAAE;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAVA;AAWR;AACAO,IAAAA,MAAM,EAAE;AAAEP,MAAAA,KAAK,EAAE;AAAT,KAZA;AAaR;AACAQ,IAAAA,YAAY,EAAE;AAAER,MAAAA,KAAK,EAAE;AAAT,KAdN;AAeRS,IAAAA,YAAY,EAAE;AAAET,MAAAA,KAAK,EAAE;AAAT,KAfN;AAgBRU,IAAAA,KAAK,EAAE;AAAEV,MAAAA,KAAK,EAAE;AAAT;AAhBC,GADU;AAmBpBW,EAAAA,YAAY,uJAnBQ;AAwBpBC,EAAAA,cAAc;AAxBM,CAAtB;AAkFA,SACEf,aADF","sourcesContent":["const DigitalGlitch = {\n  uniforms: {\n    tDiffuse: { value: null },\n    //diffuse texture\n    tDisp: { value: null },\n    //displacement texture for digital glitch squares\n    byp: { value: 0 },\n    //apply the glitch ?\n    amount: { value: 0.08 },\n    angle: { value: 0.02 },\n    seed: { value: 0.02 },\n    seed_x: { value: 0.02 },\n    //-1,1\n    seed_y: { value: 0.02 },\n    //-1,1\n    distortion_x: { value: 0.5 },\n    distortion_y: { value: 0.6 },\n    col_s: { value: 0.05 }\n  },\n  vertexShader: `varying vec2 vUv;\n     void main() {\n     \t vUv = uv;\n     \t gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n     }`,\n  fragmentShader: `uniform int byp; //should we apply the glitch ?\n     uniform sampler2D tDiffuse;\n     uniform sampler2D tDisp;\n     uniform float amount;\n     uniform float angle;\n     uniform float seed;\n     uniform float seed_x;\n     uniform float seed_y;\n     uniform float distortion_x;\n     uniform float distortion_y;\n     uniform float col_s;\n\n     varying vec2 vUv;\n\n     float rand(vec2 co){\n     \t return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n     }\n\n     void main() {\n     \tif(byp<1) {\n     \t\tvec2 p = vUv;\n     \t\tfloat xs = floor(gl_FragCoord.x / 0.5);\n     \t\tfloat ys = floor(gl_FragCoord.y / 0.5);\n    //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n     \t\tvec4 normal = texture2D (tDisp, p*seed*seed);\n     \t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n     \t\t\tif(seed_x>0.){\n     \t\t\t\tp.y = 1. - (p.y + distortion_y);\n     \t\t\t}\n     \t\t\telse {\n     \t\t\t\tp.y = distortion_y;\n     \t\t\t}\n     \t\t}\n     \t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\n     \t\t\tif(seed_y>0.){\n     \t\t\t\tp.x=distortion_x;\n     \t\t\t}\n     \t\t\telse {\n     \t\t\t\tp.x = 1. - (p.x + distortion_x);\n     \t\t\t}\n     \t\t}\n     \t\tp.x+=normal.x*seed_x*(seed/5.);\n     \t\tp.y+=normal.y*seed_y*(seed/5.);\n    //base from RGB shift shader\n     \t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n     \t\tvec4 cr = texture2D(tDiffuse, p + offset);\n     \t\tvec4 cga = texture2D(tDiffuse, p);\n     \t\tvec4 cb = texture2D(tDiffuse, p - offset);\n     \t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n    //add noise\n     \t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\n     \t\tgl_FragColor = gl_FragColor+ snow;\n     \t}\n     \telse {\n     \t\tgl_FragColor=texture2D (tDiffuse, vUv);\n     \t}\n    }`\n};\nexport {\n  DigitalGlitch\n};\n"]},"metadata":{},"sourceType":"module"}