{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar WorkerPool = /*#__PURE__*/function () {\n  function WorkerPool() {\n    var pool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n\n    _classCallCheck(this, WorkerPool);\n\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _createClass(WorkerPool, [{\n    key: \"_initWorker\",\n    value: function _initWorker(workerId) {\n      if (!this.workers[workerId]) {\n        var worker = this.workerCreator();\n        worker.addEventListener(\"message\", this._onMessage.bind(this, workerId));\n        this.workers[workerId] = worker;\n      }\n    }\n  }, {\n    key: \"_getIdleWorker\",\n    value: function _getIdleWorker() {\n      for (var i = 0; i < this.pool; i++) {\n        if (!(this.workerStatus & 1 << i)) return i;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(workerId, msg) {\n      var resolve = this.workersResolve[workerId];\n      resolve && resolve(msg);\n\n      if (this.queue.length) {\n        var _this$queue$shift = this.queue.shift(),\n            resolve2 = _this$queue$shift.resolve,\n            msg2 = _this$queue$shift.msg,\n            transfer = _this$queue$shift.transfer;\n\n        this.workersResolve[workerId] = resolve2;\n        this.workers[workerId].postMessage(msg2, transfer);\n      } else {\n        this.workerStatus ^= 1 << workerId;\n      }\n    }\n  }, {\n    key: \"setWorkerCreator\",\n    value: function setWorkerCreator(workerCreator) {\n      this.workerCreator = workerCreator;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(pool) {\n      this.pool = pool;\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(msg, transfer) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var workerId = _this._getIdleWorker();\n\n        if (workerId !== -1) {\n          _this._initWorker(workerId);\n\n          _this.workerStatus |= 1 << workerId;\n          _this.workersResolve[workerId] = resolve;\n\n          _this.workers[workerId].postMessage(msg, transfer);\n        } else {\n          _this.queue.push({\n            resolve: resolve,\n            msg: msg,\n            transfer: transfer\n          });\n        }\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workers.forEach(function (worker) {\n        return worker.terminate();\n      });\n      this.workersResolve.length = 0;\n      this.workers.length = 0;\n      this.queue.length = 0;\n      this.workerStatus = 0;\n    }\n  }]);\n\n  return WorkerPool;\n}();\n\nexport { WorkerPool };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/utils/WorkerPool.js"],"names":["WorkerPool","pool","queue","workers","workersResolve","workerStatus","workerId","worker","workerCreator","addEventListener","_onMessage","bind","i","msg","resolve","length","shift","resolve2","msg2","transfer","postMessage","Promise","_getIdleWorker","_initWorker","push","forEach","terminate"],"mappings":"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","sourcesContent":["class WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener(\"message\", this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++)\n      if (!(this.workerStatus & 1 << i))\n        return i;\n    return -1;\n  }\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n    if (this.queue.length) {\n      const { resolve: resolve2, msg: msg2, transfer } = this.queue.shift();\n      this.workersResolve[workerId] = resolve2;\n      this.workers[workerId].postMessage(msg2, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n  postMessage(msg, transfer) {\n    return new Promise((resolve) => {\n      const workerId = this._getIdleWorker();\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({ resolve, msg, transfer });\n      }\n    });\n  }\n  dispose() {\n    this.workers.forEach((worker) => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n}\nexport {\n  WorkerPool\n};\n"]},"metadata":{},"sourceType":"module"}