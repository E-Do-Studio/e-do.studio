{"ast":null,"code":"import { ExtrudeGeometry } from \"three\";\n\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters = {}) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n\n    if (font === void 0) {\n      super();\n    } else {\n      const shapes = font.generateShapes(text, size, {\n        lineHeight,\n        letterSpacing\n      });\n      super(shapes, { ...rest,\n        bevelEnabled,\n        bevelSize,\n        bevelThickness,\n        depth: height\n      });\n    }\n\n    this.type = \"TextGeometry\";\n  }\n\n}\n\nexport { TextGeometry as TextBufferGeometry, TextGeometry };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/geometries/TextGeometry.js"],"names":["ExtrudeGeometry","TextGeometry","constructor","text","parameters","bevelEnabled","bevelSize","bevelThickness","font","height","size","lineHeight","letterSpacing","rest","shapes","generateShapes","depth","type","TextBufferGeometry"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AACA,MAAMC,YAAN,SAA2BD,eAA3B,CAA2C;AACzCE,EAAAA,WAAW,CAACC,IAAD,EAAOC,UAAU,GAAG,EAApB,EAAwB;AACjC,UAAM;AACJC,MAAAA,YAAY,GAAG,KADX;AAEJC,MAAAA,SAAS,GAAG,CAFR;AAGJC,MAAAA,cAAc,GAAG,EAHb;AAIJC,MAAAA,IAJI;AAKJC,MAAAA,MAAM,GAAG,EALL;AAMJC,MAAAA,IAAI,GAAG,GANH;AAOJC,MAAAA,UAAU,GAAG,CAPT;AAQJC,MAAAA,aAAa,GAAG,CARZ;AASJ,SAAGC;AATC,QAUFT,UAVJ;;AAWA,QAAII,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnB;AACD,KAFD,MAEO;AACL,YAAMM,MAAM,GAAGN,IAAI,CAACO,cAAL,CAAoBZ,IAApB,EAA0BO,IAA1B,EAAgC;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,OAAhC,CAAf;AACA,YAAME,MAAN,EAAc,EAAE,GAAGD,IAAL;AAAWR,QAAAA,YAAX;AAAyBC,QAAAA,SAAzB;AAAoCC,QAAAA,cAApC;AAAoDS,QAAAA,KAAK,EAAEP;AAA3D,OAAd;AACD;;AACD,SAAKQ,IAAL,GAAY,cAAZ;AACD;;AApBwC;;AAsB3C,SACEhB,YAAY,IAAIiB,kBADlB,EAEEjB,YAFF","sourcesContent":["import { ExtrudeGeometry } from \"three\";\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters = {}) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n    if (font === void 0) {\n      super();\n    } else {\n      const shapes = font.generateShapes(text, size, { lineHeight, letterSpacing });\n      super(shapes, { ...rest, bevelEnabled, bevelSize, bevelThickness, depth: height });\n    }\n    this.type = \"TextGeometry\";\n  }\n}\nexport {\n  TextGeometry as TextBufferGeometry,\n  TextGeometry\n};\n"]},"metadata":{},"sourceType":"module"}