{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar _SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSAOPass, _Pass);\n\n  var _super = _createSuper(_SSAOPass);\n\n  function _SSAOPass(scene, camera, width, height) {\n    var _this;\n\n    _classCallCheck(this, _SSAOPass);\n\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 5e-3;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = /* @__PURE__ */new Map();\n\n    _this.generateSampleKernel();\n\n    _this.generateRandomKernelRotations();\n\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    });\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone();\n\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms[\"tNoise\"].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms[\"kernel\"].value = _this.kernel;\n    _this.ssaoMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n\n    _this.ssaoMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n\n    _this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n\n    _this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssaoRenderTarget.texture;\n\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n\n  _createClass(_SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      this.restoreVisibility();\n      this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n      this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n\n      switch (this.output) {\n        case _SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case _SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        default:\n          console.warn(\"THREE.SSAOPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n          height = 4;\n\n      if (SimplexNoise === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n      }\n\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n\n  return _SSAOPass;\n}(Pass);\n\nvar SSAOPass = _SSAOPass;\n\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\n\nexport { SSAOPass };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","_SSAOPass","scene","camera","width","height","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","assign","uniforms","vertexShader","fragmentShader","blending","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","render","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get","SSAOPass"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */ new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false)\n      this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4, height = 4;\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine)\n        object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n};\nlet SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport {\n  SSAOPass\n};\n"]},"metadata":{},"sourceType":"module"}