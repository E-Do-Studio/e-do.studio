{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Frustum, Vector3 } from \"three\";\nvar frustum = /* @__PURE__ */new Frustum();\nvar center = /* @__PURE__ */new Vector3();\nvar tmpPoint = /* @__PURE__ */new Vector3();\nvar vecNear = /* @__PURE__ */new Vector3();\nvar vecTopLeft = /* @__PURE__ */new Vector3();\nvar vecTopRight = /* @__PURE__ */new Vector3();\nvar vecDownRight = /* @__PURE__ */new Vector3();\nvar vecDownLeft = /* @__PURE__ */new Vector3();\nvar vecFarTopLeft = /* @__PURE__ */new Vector3();\nvar vecFarTopRight = /* @__PURE__ */new Vector3();\nvar vecFarDownRight = /* @__PURE__ */new Vector3();\nvar vecFarDownLeft = /* @__PURE__ */new Vector3();\nvar vectemp1 = /* @__PURE__ */new Vector3();\nvar vectemp2 = /* @__PURE__ */new Vector3();\nvar vectemp3 = /* @__PURE__ */new Vector3();\n\nvar SelectionBox = /*#__PURE__*/function () {\n  function SelectionBox(camera, scene, deep) {\n    _classCallCheck(this, SelectionBox);\n\n    this.camera = camera;\n    this.scene = scene;\n    this.startPoint = new Vector3();\n    this.endPoint = new Vector3();\n    this.collection = [];\n    this.deep = deep || Number.MAX_VALUE;\n  }\n\n  _createClass(SelectionBox, [{\n    key: \"select\",\n    value: function select(startPoint, endPoint) {\n      this.startPoint = startPoint || this.startPoint;\n      this.endPoint = endPoint || this.endPoint;\n      this.collection = [];\n      this.updateFrustum(this.startPoint, this.endPoint);\n      this.searchChildInFrustum(frustum, this.scene);\n      return this.collection;\n    }\n  }, {\n    key: \"updateFrustum\",\n    value: function updateFrustum(startPoint, endPoint) {\n      startPoint = startPoint || this.startPoint;\n      endPoint = endPoint || this.endPoint;\n\n      if (startPoint.x === endPoint.x) {\n        endPoint.x += Number.EPSILON;\n      }\n\n      if (startPoint.y === endPoint.y) {\n        endPoint.y += Number.EPSILON;\n      }\n\n      this.camera.updateProjectionMatrix();\n      this.camera.updateMatrixWorld();\n\n      if (this.camera.isPerspectiveCamera) {\n        tmpPoint.copy(startPoint);\n        tmpPoint.x = Math.min(startPoint.x, endPoint.x);\n        tmpPoint.y = Math.max(startPoint.y, endPoint.y);\n        endPoint.x = Math.max(startPoint.x, endPoint.x);\n        endPoint.y = Math.min(startPoint.y, endPoint.y);\n        vecNear.setFromMatrixPosition(this.camera.matrixWorld);\n        vecTopLeft.copy(tmpPoint);\n        vecTopRight.set(endPoint.x, tmpPoint.y, 0);\n        vecDownRight.copy(endPoint);\n        vecDownLeft.set(tmpPoint.x, endPoint.y, 0);\n        vecTopLeft.unproject(this.camera);\n        vecTopRight.unproject(this.camera);\n        vecDownRight.unproject(this.camera);\n        vecDownLeft.unproject(this.camera);\n        vectemp1.copy(vecTopLeft).sub(vecNear);\n        vectemp2.copy(vecTopRight).sub(vecNear);\n        vectemp3.copy(vecDownRight).sub(vecNear);\n        vectemp1.normalize();\n        vectemp2.normalize();\n        vectemp3.normalize();\n        vectemp1.multiplyScalar(this.deep);\n        vectemp2.multiplyScalar(this.deep);\n        vectemp3.multiplyScalar(this.deep);\n        vectemp1.add(vecNear);\n        vectemp2.add(vecNear);\n        vectemp3.add(vecNear);\n        var planes = frustum.planes;\n        planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight);\n        planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight);\n        planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear);\n        planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear);\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n        planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1);\n        planes[5].normal.multiplyScalar(-1);\n      } else if (this.camera.isOrthographicCamera) {\n        var left = Math.min(startPoint.x, endPoint.x);\n        var top = Math.max(startPoint.y, endPoint.y);\n        var right = Math.max(startPoint.x, endPoint.x);\n        var down = Math.min(startPoint.y, endPoint.y);\n        vecTopLeft.set(left, top, -1);\n        vecTopRight.set(right, top, -1);\n        vecDownRight.set(right, down, -1);\n        vecDownLeft.set(left, down, -1);\n        vecFarTopLeft.set(left, top, 1);\n        vecFarTopRight.set(right, top, 1);\n        vecFarDownRight.set(right, down, 1);\n        vecFarDownLeft.set(left, down, 1);\n        vecTopLeft.unproject(this.camera);\n        vecTopRight.unproject(this.camera);\n        vecDownRight.unproject(this.camera);\n        vecDownLeft.unproject(this.camera);\n        vecFarTopLeft.unproject(this.camera);\n        vecFarTopRight.unproject(this.camera);\n        vecFarDownRight.unproject(this.camera);\n        vecFarDownLeft.unproject(this.camera);\n        var planes = frustum.planes;\n        planes[0].setFromCoplanarPoints(vecTopLeft, vecFarTopLeft, vecFarTopRight);\n        planes[1].setFromCoplanarPoints(vecTopRight, vecFarTopRight, vecFarDownRight);\n        planes[2].setFromCoplanarPoints(vecFarDownRight, vecFarDownLeft, vecDownLeft);\n        planes[3].setFromCoplanarPoints(vecFarDownLeft, vecFarTopLeft, vecTopLeft);\n        planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n        planes[5].setFromCoplanarPoints(vecFarDownRight, vecFarTopRight, vecFarTopLeft);\n        planes[5].normal.multiplyScalar(-1);\n      } else {\n        console.error(\"THREE.SelectionBox: Unsupported camera type.\");\n      }\n    }\n  }, {\n    key: \"searchChildInFrustum\",\n    value: function searchChildInFrustum(frustum2, object) {\n      if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material !== void 0) {\n          if (object.geometry.boundingSphere === null) object.geometry.computeBoundingSphere();\n          center.copy(object.geometry.boundingSphere.center);\n          center.applyMatrix4(object.matrixWorld);\n\n          if (frustum2.containsPoint(center)) {\n            this.collection.push(object);\n          }\n        }\n      }\n\n      if (object.children.length > 0) {\n        for (var x = 0; x < object.children.length; x++) {\n          this.searchChildInFrustum(frustum2, object.children[x]);\n        }\n      }\n    }\n  }]);\n\n  return SelectionBox;\n}();\n\nexport { SelectionBox };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/interactive/SelectionBox.js"],"names":["Frustum","Vector3","frustum","center","tmpPoint","vecNear","vecTopLeft","vecTopRight","vecDownRight","vecDownLeft","vecFarTopLeft","vecFarTopRight","vecFarDownRight","vecFarDownLeft","vectemp1","vectemp2","vectemp3","SelectionBox","camera","scene","deep","startPoint","endPoint","collection","Number","MAX_VALUE","updateFrustum","searchChildInFrustum","x","EPSILON","y","updateProjectionMatrix","updateMatrixWorld","isPerspectiveCamera","copy","Math","min","max","setFromMatrixPosition","matrixWorld","set","unproject","sub","normalize","multiplyScalar","add","planes","setFromCoplanarPoints","normal","isOrthographicCamera","left","top","right","down","console","error","frustum2","object","isMesh","isLine","isPoints","material","geometry","boundingSphere","computeBoundingSphere","applyMatrix4","containsPoint","push","children","length"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,OAAjC;AACA,IAAMC,OAAO,GAAG,eAAgB,IAAIF,OAAJ,EAAhC;AACA,IAAMG,MAAM,GAAG,eAAgB,IAAIF,OAAJ,EAA/B;AACA,IAAMG,QAAQ,GAAG,eAAgB,IAAIH,OAAJ,EAAjC;AACA,IAAMI,OAAO,GAAG,eAAgB,IAAIJ,OAAJ,EAAhC;AACA,IAAMK,UAAU,GAAG,eAAgB,IAAIL,OAAJ,EAAnC;AACA,IAAMM,WAAW,GAAG,eAAgB,IAAIN,OAAJ,EAApC;AACA,IAAMO,YAAY,GAAG,eAAgB,IAAIP,OAAJ,EAArC;AACA,IAAMQ,WAAW,GAAG,eAAgB,IAAIR,OAAJ,EAApC;AACA,IAAMS,aAAa,GAAG,eAAgB,IAAIT,OAAJ,EAAtC;AACA,IAAMU,cAAc,GAAG,eAAgB,IAAIV,OAAJ,EAAvC;AACA,IAAMW,eAAe,GAAG,eAAgB,IAAIX,OAAJ,EAAxC;AACA,IAAMY,cAAc,GAAG,eAAgB,IAAIZ,OAAJ,EAAvC;AACA,IAAMa,QAAQ,GAAG,eAAgB,IAAIb,OAAJ,EAAjC;AACA,IAAMc,QAAQ,GAAG,eAAgB,IAAId,OAAJ,EAAjC;AACA,IAAMe,QAAQ,GAAG,eAAgB,IAAIf,OAAJ,EAAjC;;IACMgB,Y;AACJ,wBAAYC,MAAZ,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AAAA;;AAC/B,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKE,UAAL,GAAkB,IAAIpB,OAAJ,EAAlB;AACA,SAAKqB,QAAL,GAAgB,IAAIrB,OAAJ,EAAhB;AACA,SAAKsB,UAAL,GAAkB,EAAlB;AACA,SAAKH,IAAL,GAAYA,IAAI,IAAII,MAAM,CAACC,SAA3B;AACD;;;;WACD,gBAAOJ,UAAP,EAAmBC,QAAnB,EAA6B;AAC3B,WAAKD,UAAL,GAAkBA,UAAU,IAAI,KAAKA,UAArC;AACA,WAAKC,QAAL,GAAgBA,QAAQ,IAAI,KAAKA,QAAjC;AACA,WAAKC,UAAL,GAAkB,EAAlB;AACA,WAAKG,aAAL,CAAmB,KAAKL,UAAxB,EAAoC,KAAKC,QAAzC;AACA,WAAKK,oBAAL,CAA0BzB,OAA1B,EAAmC,KAAKiB,KAAxC;AACA,aAAO,KAAKI,UAAZ;AACD;;;WACD,uBAAcF,UAAd,EAA0BC,QAA1B,EAAoC;AAClCD,MAAAA,UAAU,GAAGA,UAAU,IAAI,KAAKA,UAAhC;AACAC,MAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKA,QAA5B;;AACA,UAAID,UAAU,CAACO,CAAX,KAAiBN,QAAQ,CAACM,CAA9B,EAAiC;AAC/BN,QAAAA,QAAQ,CAACM,CAAT,IAAcJ,MAAM,CAACK,OAArB;AACD;;AACD,UAAIR,UAAU,CAACS,CAAX,KAAiBR,QAAQ,CAACQ,CAA9B,EAAiC;AAC/BR,QAAAA,QAAQ,CAACQ,CAAT,IAAcN,MAAM,CAACK,OAArB;AACD;;AACD,WAAKX,MAAL,CAAYa,sBAAZ;AACA,WAAKb,MAAL,CAAYc,iBAAZ;;AACA,UAAI,KAAKd,MAAL,CAAYe,mBAAhB,EAAqC;AACnC7B,QAAAA,QAAQ,CAAC8B,IAAT,CAAcb,UAAd;AACAjB,QAAAA,QAAQ,CAACwB,CAAT,GAAaO,IAAI,CAACC,GAAL,CAASf,UAAU,CAACO,CAApB,EAAuBN,QAAQ,CAACM,CAAhC,CAAb;AACAxB,QAAAA,QAAQ,CAAC0B,CAAT,GAAaK,IAAI,CAACE,GAAL,CAAShB,UAAU,CAACS,CAApB,EAAuBR,QAAQ,CAACQ,CAAhC,CAAb;AACAR,QAAAA,QAAQ,CAACM,CAAT,GAAaO,IAAI,CAACE,GAAL,CAAShB,UAAU,CAACO,CAApB,EAAuBN,QAAQ,CAACM,CAAhC,CAAb;AACAN,QAAAA,QAAQ,CAACQ,CAAT,GAAaK,IAAI,CAACC,GAAL,CAASf,UAAU,CAACS,CAApB,EAAuBR,QAAQ,CAACQ,CAAhC,CAAb;AACAzB,QAAAA,OAAO,CAACiC,qBAAR,CAA8B,KAAKpB,MAAL,CAAYqB,WAA1C;AACAjC,QAAAA,UAAU,CAAC4B,IAAX,CAAgB9B,QAAhB;AACAG,QAAAA,WAAW,CAACiC,GAAZ,CAAgBlB,QAAQ,CAACM,CAAzB,EAA4BxB,QAAQ,CAAC0B,CAArC,EAAwC,CAAxC;AACAtB,QAAAA,YAAY,CAAC0B,IAAb,CAAkBZ,QAAlB;AACAb,QAAAA,WAAW,CAAC+B,GAAZ,CAAgBpC,QAAQ,CAACwB,CAAzB,EAA4BN,QAAQ,CAACQ,CAArC,EAAwC,CAAxC;AACAxB,QAAAA,UAAU,CAACmC,SAAX,CAAqB,KAAKvB,MAA1B;AACAX,QAAAA,WAAW,CAACkC,SAAZ,CAAsB,KAAKvB,MAA3B;AACAV,QAAAA,YAAY,CAACiC,SAAb,CAAuB,KAAKvB,MAA5B;AACAT,QAAAA,WAAW,CAACgC,SAAZ,CAAsB,KAAKvB,MAA3B;AACAJ,QAAAA,QAAQ,CAACoB,IAAT,CAAc5B,UAAd,EAA0BoC,GAA1B,CAA8BrC,OAA9B;AACAU,QAAAA,QAAQ,CAACmB,IAAT,CAAc3B,WAAd,EAA2BmC,GAA3B,CAA+BrC,OAA/B;AACAW,QAAAA,QAAQ,CAACkB,IAAT,CAAc1B,YAAd,EAA4BkC,GAA5B,CAAgCrC,OAAhC;AACAS,QAAAA,QAAQ,CAAC6B,SAAT;AACA5B,QAAAA,QAAQ,CAAC4B,SAAT;AACA3B,QAAAA,QAAQ,CAAC2B,SAAT;AACA7B,QAAAA,QAAQ,CAAC8B,cAAT,CAAwB,KAAKxB,IAA7B;AACAL,QAAAA,QAAQ,CAAC6B,cAAT,CAAwB,KAAKxB,IAA7B;AACAJ,QAAAA,QAAQ,CAAC4B,cAAT,CAAwB,KAAKxB,IAA7B;AACAN,QAAAA,QAAQ,CAAC+B,GAAT,CAAaxC,OAAb;AACAU,QAAAA,QAAQ,CAAC8B,GAAT,CAAaxC,OAAb;AACAW,QAAAA,QAAQ,CAAC6B,GAAT,CAAaxC,OAAb;AACA,YAAIyC,MAAM,GAAG5C,OAAO,CAAC4C,MAArB;AACAA,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgC1C,OAAhC,EAAyCC,UAAzC,EAAqDC,WAArD;AACAuC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgC1C,OAAhC,EAAyCE,WAAzC,EAAsDC,YAAtD;AACAsC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCvC,YAAhC,EAA8CC,WAA9C,EAA2DJ,OAA3D;AACAyC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCtC,WAAhC,EAA6CH,UAA7C,EAAyDD,OAAzD;AACAyC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCxC,WAAhC,EAA6CC,YAA7C,EAA2DC,WAA3D;AACAqC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgC/B,QAAhC,EAA0CD,QAA1C,EAAoDD,QAApD;AACAgC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUE,MAAV,CAAiBJ,cAAjB,CAAgC,CAAC,CAAjC;AACD,OAnCD,MAmCO,IAAI,KAAK1B,MAAL,CAAY+B,oBAAhB,EAAsC;AAC3C,YAAMC,IAAI,GAAGf,IAAI,CAACC,GAAL,CAASf,UAAU,CAACO,CAApB,EAAuBN,QAAQ,CAACM,CAAhC,CAAb;AACA,YAAMuB,GAAG,GAAGhB,IAAI,CAACE,GAAL,CAAShB,UAAU,CAACS,CAApB,EAAuBR,QAAQ,CAACQ,CAAhC,CAAZ;AACA,YAAMsB,KAAK,GAAGjB,IAAI,CAACE,GAAL,CAAShB,UAAU,CAACO,CAApB,EAAuBN,QAAQ,CAACM,CAAhC,CAAd;AACA,YAAMyB,IAAI,GAAGlB,IAAI,CAACC,GAAL,CAASf,UAAU,CAACS,CAApB,EAAuBR,QAAQ,CAACQ,CAAhC,CAAb;AACAxB,QAAAA,UAAU,CAACkC,GAAX,CAAeU,IAAf,EAAqBC,GAArB,EAA0B,CAAC,CAA3B;AACA5C,QAAAA,WAAW,CAACiC,GAAZ,CAAgBY,KAAhB,EAAuBD,GAAvB,EAA4B,CAAC,CAA7B;AACA3C,QAAAA,YAAY,CAACgC,GAAb,CAAiBY,KAAjB,EAAwBC,IAAxB,EAA8B,CAAC,CAA/B;AACA5C,QAAAA,WAAW,CAAC+B,GAAZ,CAAgBU,IAAhB,EAAsBG,IAAtB,EAA4B,CAAC,CAA7B;AACA3C,QAAAA,aAAa,CAAC8B,GAAd,CAAkBU,IAAlB,EAAwBC,GAAxB,EAA6B,CAA7B;AACAxC,QAAAA,cAAc,CAAC6B,GAAf,CAAmBY,KAAnB,EAA0BD,GAA1B,EAA+B,CAA/B;AACAvC,QAAAA,eAAe,CAAC4B,GAAhB,CAAoBY,KAApB,EAA2BC,IAA3B,EAAiC,CAAjC;AACAxC,QAAAA,cAAc,CAAC2B,GAAf,CAAmBU,IAAnB,EAAyBG,IAAzB,EAA+B,CAA/B;AACA/C,QAAAA,UAAU,CAACmC,SAAX,CAAqB,KAAKvB,MAA1B;AACAX,QAAAA,WAAW,CAACkC,SAAZ,CAAsB,KAAKvB,MAA3B;AACAV,QAAAA,YAAY,CAACiC,SAAb,CAAuB,KAAKvB,MAA5B;AACAT,QAAAA,WAAW,CAACgC,SAAZ,CAAsB,KAAKvB,MAA3B;AACAR,QAAAA,aAAa,CAAC+B,SAAd,CAAwB,KAAKvB,MAA7B;AACAP,QAAAA,cAAc,CAAC8B,SAAf,CAAyB,KAAKvB,MAA9B;AACAN,QAAAA,eAAe,CAAC6B,SAAhB,CAA0B,KAAKvB,MAA/B;AACAL,QAAAA,cAAc,CAAC4B,SAAf,CAAyB,KAAKvB,MAA9B;AACA,YAAI4B,MAAM,GAAG5C,OAAO,CAAC4C,MAArB;AACAA,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCzC,UAAhC,EAA4CI,aAA5C,EAA2DC,cAA3D;AACAmC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCxC,WAAhC,EAA6CI,cAA7C,EAA6DC,eAA7D;AACAkC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCnC,eAAhC,EAAiDC,cAAjD,EAAiEJ,WAAjE;AACAqC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgClC,cAAhC,EAAgDH,aAAhD,EAA+DJ,UAA/D;AACAwC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCxC,WAAhC,EAA6CC,YAA7C,EAA2DC,WAA3D;AACAqC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUC,qBAAV,CAAgCnC,eAAhC,EAAiDD,cAAjD,EAAiED,aAAjE;AACAoC,QAAAA,MAAM,CAAC,CAAD,CAAN,CAAUE,MAAV,CAAiBJ,cAAjB,CAAgC,CAAC,CAAjC;AACD,OA7BM,MA6BA;AACLU,QAAAA,OAAO,CAACC,KAAR,CAAc,8CAAd;AACD;AACF;;;WACD,8BAAqBC,QAArB,EAA+BC,MAA/B,EAAuC;AACrC,UAAIA,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACE,MAAxB,IAAkCF,MAAM,CAACG,QAA7C,EAAuD;AACrD,YAAIH,MAAM,CAACI,QAAP,KAAoB,KAAK,CAA7B,EAAgC;AAC9B,cAAIJ,MAAM,CAACK,QAAP,CAAgBC,cAAhB,KAAmC,IAAvC,EACEN,MAAM,CAACK,QAAP,CAAgBE,qBAAhB;AACF7D,UAAAA,MAAM,CAAC+B,IAAP,CAAYuB,MAAM,CAACK,QAAP,CAAgBC,cAAhB,CAA+B5D,MAA3C;AACAA,UAAAA,MAAM,CAAC8D,YAAP,CAAoBR,MAAM,CAAClB,WAA3B;;AACA,cAAIiB,QAAQ,CAACU,aAAT,CAAuB/D,MAAvB,CAAJ,EAAoC;AAClC,iBAAKoB,UAAL,CAAgB4C,IAAhB,CAAqBV,MAArB;AACD;AACF;AACF;;AACD,UAAIA,MAAM,CAACW,QAAP,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,aAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,MAAM,CAACW,QAAP,CAAgBC,MAApC,EAA4CzC,CAAC,EAA7C,EAAiD;AAC/C,eAAKD,oBAAL,CAA0B6B,QAA1B,EAAoCC,MAAM,CAACW,QAAP,CAAgBxC,CAAhB,CAApC;AACD;AACF;AACF;;;;;;AAEH,SACEX,YADF","sourcesContent":["import { Frustum, Vector3 } from \"three\";\nconst frustum = /* @__PURE__ */ new Frustum();\nconst center = /* @__PURE__ */ new Vector3();\nconst tmpPoint = /* @__PURE__ */ new Vector3();\nconst vecNear = /* @__PURE__ */ new Vector3();\nconst vecTopLeft = /* @__PURE__ */ new Vector3();\nconst vecTopRight = /* @__PURE__ */ new Vector3();\nconst vecDownRight = /* @__PURE__ */ new Vector3();\nconst vecDownLeft = /* @__PURE__ */ new Vector3();\nconst vecFarTopLeft = /* @__PURE__ */ new Vector3();\nconst vecFarTopRight = /* @__PURE__ */ new Vector3();\nconst vecFarDownRight = /* @__PURE__ */ new Vector3();\nconst vecFarDownLeft = /* @__PURE__ */ new Vector3();\nconst vectemp1 = /* @__PURE__ */ new Vector3();\nconst vectemp2 = /* @__PURE__ */ new Vector3();\nconst vectemp3 = /* @__PURE__ */ new Vector3();\nclass SelectionBox {\n  constructor(camera, scene, deep) {\n    this.camera = camera;\n    this.scene = scene;\n    this.startPoint = new Vector3();\n    this.endPoint = new Vector3();\n    this.collection = [];\n    this.deep = deep || Number.MAX_VALUE;\n  }\n  select(startPoint, endPoint) {\n    this.startPoint = startPoint || this.startPoint;\n    this.endPoint = endPoint || this.endPoint;\n    this.collection = [];\n    this.updateFrustum(this.startPoint, this.endPoint);\n    this.searchChildInFrustum(frustum, this.scene);\n    return this.collection;\n  }\n  updateFrustum(startPoint, endPoint) {\n    startPoint = startPoint || this.startPoint;\n    endPoint = endPoint || this.endPoint;\n    if (startPoint.x === endPoint.x) {\n      endPoint.x += Number.EPSILON;\n    }\n    if (startPoint.y === endPoint.y) {\n      endPoint.y += Number.EPSILON;\n    }\n    this.camera.updateProjectionMatrix();\n    this.camera.updateMatrixWorld();\n    if (this.camera.isPerspectiveCamera) {\n      tmpPoint.copy(startPoint);\n      tmpPoint.x = Math.min(startPoint.x, endPoint.x);\n      tmpPoint.y = Math.max(startPoint.y, endPoint.y);\n      endPoint.x = Math.max(startPoint.x, endPoint.x);\n      endPoint.y = Math.min(startPoint.y, endPoint.y);\n      vecNear.setFromMatrixPosition(this.camera.matrixWorld);\n      vecTopLeft.copy(tmpPoint);\n      vecTopRight.set(endPoint.x, tmpPoint.y, 0);\n      vecDownRight.copy(endPoint);\n      vecDownLeft.set(tmpPoint.x, endPoint.y, 0);\n      vecTopLeft.unproject(this.camera);\n      vecTopRight.unproject(this.camera);\n      vecDownRight.unproject(this.camera);\n      vecDownLeft.unproject(this.camera);\n      vectemp1.copy(vecTopLeft).sub(vecNear);\n      vectemp2.copy(vecTopRight).sub(vecNear);\n      vectemp3.copy(vecDownRight).sub(vecNear);\n      vectemp1.normalize();\n      vectemp2.normalize();\n      vectemp3.normalize();\n      vectemp1.multiplyScalar(this.deep);\n      vectemp2.multiplyScalar(this.deep);\n      vectemp3.multiplyScalar(this.deep);\n      vectemp1.add(vecNear);\n      vectemp2.add(vecNear);\n      vectemp3.add(vecNear);\n      var planes = frustum.planes;\n      planes[0].setFromCoplanarPoints(vecNear, vecTopLeft, vecTopRight);\n      planes[1].setFromCoplanarPoints(vecNear, vecTopRight, vecDownRight);\n      planes[2].setFromCoplanarPoints(vecDownRight, vecDownLeft, vecNear);\n      planes[3].setFromCoplanarPoints(vecDownLeft, vecTopLeft, vecNear);\n      planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n      planes[5].setFromCoplanarPoints(vectemp3, vectemp2, vectemp1);\n      planes[5].normal.multiplyScalar(-1);\n    } else if (this.camera.isOrthographicCamera) {\n      const left = Math.min(startPoint.x, endPoint.x);\n      const top = Math.max(startPoint.y, endPoint.y);\n      const right = Math.max(startPoint.x, endPoint.x);\n      const down = Math.min(startPoint.y, endPoint.y);\n      vecTopLeft.set(left, top, -1);\n      vecTopRight.set(right, top, -1);\n      vecDownRight.set(right, down, -1);\n      vecDownLeft.set(left, down, -1);\n      vecFarTopLeft.set(left, top, 1);\n      vecFarTopRight.set(right, top, 1);\n      vecFarDownRight.set(right, down, 1);\n      vecFarDownLeft.set(left, down, 1);\n      vecTopLeft.unproject(this.camera);\n      vecTopRight.unproject(this.camera);\n      vecDownRight.unproject(this.camera);\n      vecDownLeft.unproject(this.camera);\n      vecFarTopLeft.unproject(this.camera);\n      vecFarTopRight.unproject(this.camera);\n      vecFarDownRight.unproject(this.camera);\n      vecFarDownLeft.unproject(this.camera);\n      var planes = frustum.planes;\n      planes[0].setFromCoplanarPoints(vecTopLeft, vecFarTopLeft, vecFarTopRight);\n      planes[1].setFromCoplanarPoints(vecTopRight, vecFarTopRight, vecFarDownRight);\n      planes[2].setFromCoplanarPoints(vecFarDownRight, vecFarDownLeft, vecDownLeft);\n      planes[3].setFromCoplanarPoints(vecFarDownLeft, vecFarTopLeft, vecTopLeft);\n      planes[4].setFromCoplanarPoints(vecTopRight, vecDownRight, vecDownLeft);\n      planes[5].setFromCoplanarPoints(vecFarDownRight, vecFarTopRight, vecFarTopLeft);\n      planes[5].normal.multiplyScalar(-1);\n    } else {\n      console.error(\"THREE.SelectionBox: Unsupported camera type.\");\n    }\n  }\n  searchChildInFrustum(frustum2, object) {\n    if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material !== void 0) {\n        if (object.geometry.boundingSphere === null)\n          object.geometry.computeBoundingSphere();\n        center.copy(object.geometry.boundingSphere.center);\n        center.applyMatrix4(object.matrixWorld);\n        if (frustum2.containsPoint(center)) {\n          this.collection.push(object);\n        }\n      }\n    }\n    if (object.children.length > 0) {\n      for (let x = 0; x < object.children.length; x++) {\n        this.searchChildInFrustum(frustum2, object.children[x]);\n      }\n    }\n  }\n}\nexport {\n  SelectionBox\n};\n"]},"metadata":{},"sourceType":"module"}