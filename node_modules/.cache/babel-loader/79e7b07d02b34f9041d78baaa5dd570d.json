{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from \"three\";\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from \"./Projector.js\";\n\nvar SVGObject = /*#__PURE__*/function (_Object3D) {\n  _inherits(SVGObject, _Object3D);\n\n  var _super = _createSuper(SVGObject);\n\n  function SVGObject(node) {\n    var _this2;\n\n    _classCallCheck(this, SVGObject);\n\n    _this2 = _super.call(this);\n    _this2.isSVGObject = true;\n    _this2.node = node;\n    return _this2;\n  }\n\n  return SVGObject;\n}(Object3D);\n\nvar SVGRenderer = function SVGRenderer() {\n  _classCallCheck(this, SVGRenderer);\n\n  var _renderData,\n      _elements,\n      _lights,\n      _svgWidth,\n      _svgHeight,\n      _svgWidthHalf,\n      _svgHeightHalf,\n      _v1,\n      _v2,\n      _v3,\n      _svgNode,\n      _pathCount = 0,\n      _precision = null,\n      _quality = 1,\n      _currentPath,\n      _currentStyle;\n\n  var _this = this,\n      _clipBox = new Box2(),\n      _elemBox = new Box2(),\n      _color = new Color(),\n      _diffuseColor = new Color(),\n      _ambientLight = new Color(),\n      _directionalLights = new Color(),\n      _pointLights = new Color(),\n      _clearColor = new Color(),\n      _vector3 = new Vector3(),\n      _centroid = new Vector3(),\n      _normal = new Vector3(),\n      _normalViewMatrix = new Matrix3(),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _svgPathPool = [],\n      _projector = new Projector(),\n      _svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n\n  this.domElement = _svg;\n  this.autoClear = true;\n  this.sortObjects = true;\n  this.sortElements = true;\n  this.overdraw = 0.5;\n  this.info = {\n    render: {\n      vertices: 0,\n      faces: 0\n    }\n  };\n\n  this.setQuality = function (quality) {\n    switch (quality) {\n      case \"high\":\n        _quality = 1;\n        break;\n\n      case \"low\":\n        _quality = 0;\n        break;\n    }\n  };\n\n  this.setClearColor = function (color) {\n    _clearColor.set(color);\n  };\n\n  this.setPixelRatio = function () {};\n\n  this.setSize = function (width, height) {\n    _svgWidth = width;\n    _svgHeight = height;\n    _svgWidthHalf = _svgWidth / 2;\n    _svgHeightHalf = _svgHeight / 2;\n\n    _svg.setAttribute(\"viewBox\", -_svgWidthHalf + \" \" + -_svgHeightHalf + \" \" + _svgWidth + \" \" + _svgHeight);\n\n    _svg.setAttribute(\"width\", _svgWidth);\n\n    _svg.setAttribute(\"height\", _svgHeight);\n\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n  };\n\n  this.getSize = function () {\n    return {\n      width: _svgWidth,\n      height: _svgHeight\n    };\n  };\n\n  this.setPrecision = function (precision) {\n    _precision = precision;\n  };\n\n  function removeChildNodes() {\n    _pathCount = 0;\n\n    while (_svg.childNodes.length > 0) {\n      _svg.removeChild(_svg.childNodes[0]);\n    }\n  }\n\n  function convert(c) {\n    return _precision !== null ? c.toFixed(_precision) : c;\n  }\n\n  this.clear = function () {\n    removeChildNodes();\n    _svg.style.backgroundColor = _clearColor.getStyle();\n  };\n\n  this.render = function (scene, camera) {\n    if (camera instanceof Camera === false) {\n      console.error(\"THREE.SVGRenderer.render: camera is not an instance of Camera.\");\n      return;\n    }\n\n    var background = scene.background;\n\n    if (background && background.isColor) {\n      removeChildNodes();\n      _svg.style.backgroundColor = background.getStyle();\n    } else if (this.autoClear === true) {\n      this.clear();\n    }\n\n    _this.info.render.vertices = 0;\n    _this.info.render.faces = 0;\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n    _elements = _renderData.elements;\n    _lights = _renderData.lights;\n\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\n    calculateLights(_lights);\n    _currentPath = \"\";\n    _currentStyle = \"\";\n\n    for (var e = 0, el = _elements.length; e < el; e++) {\n      var element = _elements[e];\n      var material = element.material;\n      if (material === void 0 || material.opacity === 0) continue;\n\n      _elemBox.makeEmpty();\n\n      if (element instanceof RenderableSprite) {\n        _v1 = element;\n        _v1.x *= _svgWidthHalf;\n        _v1.y *= -_svgHeightHalf;\n        renderSprite(_v1, element, material);\n      } else if (element instanceof RenderableLine) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderLine(_v1, _v2, material);\n        }\n      } else if (element instanceof RenderableFace) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v3 = element.v3;\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _v3.positionScreen.x *= _svgWidthHalf;\n        _v3.positionScreen.y *= -_svgHeightHalf;\n\n        if (this.overdraw > 0) {\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n        }\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderFace3(_v1, _v2, _v3, element, material);\n        }\n      }\n    }\n\n    flushPath();\n    scene.traverseVisible(function (object) {\n      if (object.isSVGObject) {\n        _vector3.setFromMatrixPosition(object.matrixWorld);\n\n        _vector3.applyMatrix4(_viewProjectionMatrix);\n\n        if (_vector3.z < -1 || _vector3.z > 1) return;\n        var x = _vector3.x * _svgWidthHalf;\n        var y = -_vector3.y * _svgHeightHalf;\n        var node = object.node;\n        node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\n        _svg.appendChild(node);\n      }\n    });\n  };\n\n  function calculateLights(lights) {\n    _ambientLight.setRGB(0, 0, 0);\n\n    _directionalLights.setRGB(0, 0, 0);\n\n    _pointLights.setRGB(0, 0, 0);\n\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isAmbientLight) {\n        _ambientLight.r += lightColor.r;\n        _ambientLight.g += lightColor.g;\n        _ambientLight.b += lightColor.b;\n      } else if (light.isDirectionalLight) {\n        _directionalLights.r += lightColor.r;\n        _directionalLights.g += lightColor.g;\n        _directionalLights.b += lightColor.b;\n      } else if (light.isPointLight) {\n        _pointLights.r += lightColor.r;\n        _pointLights.g += lightColor.g;\n        _pointLights.b += lightColor.b;\n      }\n    }\n  }\n\n  function calculateLight(lights, position, normal, color) {\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isDirectionalLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\n        var amount = normal.dot(lightPosition);\n        if (amount <= 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      } else if (light.isPointLight) {\n        var _lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\n        var _amount = normal.dot(_vector3.subVectors(_lightPosition, position).normalize());\n\n        if (_amount <= 0) continue;\n        _amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(_lightPosition) / light.distance, 1);\n        if (_amount == 0) continue;\n        _amount *= light.intensity;\n        color.r += lightColor.r * _amount;\n        color.g += lightColor.g * _amount;\n        color.b += lightColor.b * _amount;\n      }\n    }\n  }\n\n  function renderSprite(v1, element, material) {\n    var scaleX = element.scale.x * _svgWidthHalf;\n    var scaleY = element.scale.y * _svgHeightHalf;\n\n    if (material.isPointsMaterial) {\n      scaleX *= material.size;\n      scaleY *= material.size;\n    }\n\n    var path = \"M\" + convert(v1.x - scaleX * 0.5) + \",\" + convert(v1.y - scaleY * 0.5) + \"h\" + convert(scaleX) + \"v\" + convert(scaleY) + \"h\" + convert(-scaleX) + \"z\";\n    var style = \"\";\n\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\n      style = \"fill:\" + material.color.getStyle() + \";fill-opacity:\" + material.opacity;\n    }\n\n    addPath(style, path);\n  }\n\n  function renderLine(v1, v2, material) {\n    var path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y);\n\n    if (material.isLineBasicMaterial) {\n      var style = \"fill:none;stroke:\" + material.color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.linewidth + \";stroke-linecap:\" + material.linecap;\n\n      if (material.isLineDashedMaterial) {\n        style = style + \";stroke-dasharray:\" + material.dashSize + \",\" + material.gapSize;\n      }\n\n      addPath(style, path);\n    }\n  }\n\n  function renderFace3(v1, v2, v3, element, material) {\n    _this.info.render.vertices += 3;\n    _this.info.render.faces++;\n    var path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y) + \"L\" + convert(v3.positionScreen.x) + \",\" + convert(v3.positionScreen.y) + \"z\";\n    var style = \"\";\n\n    if (material.isMeshBasicMaterial) {\n      _color.copy(material.color);\n\n      if (material.vertexColors) {\n        _color.multiply(element.color);\n      }\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n      _diffuseColor.copy(material.color);\n\n      if (material.vertexColors) {\n        _diffuseColor.multiply(element.color);\n      }\n\n      _color.copy(_ambientLight);\n\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\n      calculateLight(_lights, _centroid, element.normalModel, _color);\n\n      _color.multiply(_diffuseColor).add(material.emissive);\n    } else if (material.isMeshNormalMaterial) {\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n    }\n\n    if (material.wireframe) {\n      style = \"fill:none;stroke:\" + _color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.wireframeLinewidth + \";stroke-linecap:\" + material.wireframeLinecap + \";stroke-linejoin:\" + material.wireframeLinejoin;\n    } else {\n      style = \"fill:\" + _color.getStyle() + \";fill-opacity:\" + material.opacity;\n    }\n\n    addPath(style, path);\n  }\n\n  function expand(v1, v2, pixels) {\n    var x = v2.x - v1.x,\n        y = v2.y - v1.y;\n    var det = x * x + y * y;\n    if (det === 0) return;\n    var idet = pixels / Math.sqrt(det);\n    x *= idet;\n    y *= idet;\n    v2.x += x;\n    v2.y += y;\n    v1.x -= x;\n    v1.y -= y;\n  }\n\n  function addPath(style, path) {\n    if (_currentStyle === style) {\n      _currentPath += path;\n    } else {\n      flushPath();\n      _currentStyle = style;\n      _currentPath = path;\n    }\n  }\n\n  function flushPath() {\n    if (_currentPath) {\n      _svgNode = getPathNode(_pathCount++);\n\n      _svgNode.setAttribute(\"d\", _currentPath);\n\n      _svgNode.setAttribute(\"style\", _currentStyle);\n\n      _svg.appendChild(_svgNode);\n    }\n\n    _currentPath = \"\";\n    _currentStyle = \"\";\n  }\n\n  function getPathNode(id) {\n    if (_svgPathPool[id] == null) {\n      _svgPathPool[id] = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n      if (_quality == 0) {\n        _svgPathPool[id].setAttribute(\"shape-rendering\", \"crispEdges\");\n      }\n\n      return _svgPathPool[id];\n    }\n\n    return _svgPathPool[id];\n  }\n};\n\nexport { SVGObject, SVGRenderer };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/renderers/SVGRenderer.js"],"names":["Object3D","Box2","Color","Vector3","Matrix3","Matrix4","Camera","Projector","RenderableSprite","RenderableLine","RenderableFace","SVGObject","node","isSVGObject","SVGRenderer","_renderData","_elements","_lights","_svgWidth","_svgHeight","_svgWidthHalf","_svgHeightHalf","_v1","_v2","_v3","_svgNode","_pathCount","_precision","_quality","_currentPath","_currentStyle","_this","_clipBox","_elemBox","_color","_diffuseColor","_ambientLight","_directionalLights","_pointLights","_clearColor","_vector3","_centroid","_normal","_normalViewMatrix","_viewMatrix","_viewProjectionMatrix","_svgPathPool","_projector","_svg","document","createElementNS","domElement","autoClear","sortObjects","sortElements","overdraw","info","render","vertices","faces","setQuality","quality","setClearColor","color","set","setPixelRatio","setSize","width","height","setAttribute","min","max","getSize","setPrecision","precision","removeChildNodes","childNodes","length","removeChild","convert","c","toFixed","clear","style","backgroundColor","getStyle","scene","camera","console","error","background","isColor","copy","matrixWorldInverse","multiplyMatrices","projectionMatrix","projectScene","elements","lights","getNormalMatrix","calculateLights","e","el","element","material","opacity","makeEmpty","x","y","renderSprite","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","v3","z","expand","renderFace3","flushPath","traverseVisible","object","setFromMatrixPosition","matrixWorld","applyMatrix4","appendChild","setRGB","l","ll","light","lightColor","isAmbientLight","r","g","b","isDirectionalLight","isPointLight","calculateLight","position","normal","lightPosition","normalize","amount","dot","intensity","subVectors","distance","Math","distanceTo","scaleX","scale","scaleY","isPointsMaterial","size","path","isSpriteMaterial","addPath","isLineBasicMaterial","linewidth","linecap","isLineDashedMaterial","dashSize","gapSize","isMeshBasicMaterial","vertexColors","multiply","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","positionWorld","add","divideScalar","normalModel","emissive","isMeshNormalMaterial","applyMatrix3","multiplyScalar","addScalar","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","pixels","det","idet","sqrt","getPathNode","id"],"mappings":"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","sourcesContent":["import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from \"three\";\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from \"./Projector.js\";\nclass SVGObject extends Object3D {\n  constructor(node) {\n    super();\n    this.isSVGObject = true;\n    this.node = node;\n  }\n}\nclass SVGRenderer {\n  constructor() {\n    let _renderData, _elements, _lights, _svgWidth, _svgHeight, _svgWidthHalf, _svgHeightHalf, _v1, _v2, _v3, _svgNode, _pathCount = 0, _precision = null, _quality = 1, _currentPath, _currentStyle;\n    const _this = this, _clipBox = new Box2(), _elemBox = new Box2(), _color = new Color(), _diffuseColor = new Color(), _ambientLight = new Color(), _directionalLights = new Color(), _pointLights = new Color(), _clearColor = new Color(), _vector3 = new Vector3(), _centroid = new Vector3(), _normal = new Vector3(), _normalViewMatrix = new Matrix3(), _viewMatrix = new Matrix4(), _viewProjectionMatrix = new Matrix4(), _svgPathPool = [], _projector = new Projector(), _svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    this.domElement = _svg;\n    this.autoClear = true;\n    this.sortObjects = true;\n    this.sortElements = true;\n    this.overdraw = 0.5;\n    this.info = {\n      render: {\n        vertices: 0,\n        faces: 0\n      }\n    };\n    this.setQuality = function(quality) {\n      switch (quality) {\n        case \"high\":\n          _quality = 1;\n          break;\n        case \"low\":\n          _quality = 0;\n          break;\n      }\n    };\n    this.setClearColor = function(color) {\n      _clearColor.set(color);\n    };\n    this.setPixelRatio = function() {\n    };\n    this.setSize = function(width, height) {\n      _svgWidth = width;\n      _svgHeight = height;\n      _svgWidthHalf = _svgWidth / 2;\n      _svgHeightHalf = _svgHeight / 2;\n      _svg.setAttribute(\"viewBox\", -_svgWidthHalf + \" \" + -_svgHeightHalf + \" \" + _svgWidth + \" \" + _svgHeight);\n      _svg.setAttribute(\"width\", _svgWidth);\n      _svg.setAttribute(\"height\", _svgHeight);\n      _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n      _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n    };\n    this.getSize = function() {\n      return {\n        width: _svgWidth,\n        height: _svgHeight\n      };\n    };\n    this.setPrecision = function(precision) {\n      _precision = precision;\n    };\n    function removeChildNodes() {\n      _pathCount = 0;\n      while (_svg.childNodes.length > 0) {\n        _svg.removeChild(_svg.childNodes[0]);\n      }\n    }\n    function convert(c) {\n      return _precision !== null ? c.toFixed(_precision) : c;\n    }\n    this.clear = function() {\n      removeChildNodes();\n      _svg.style.backgroundColor = _clearColor.getStyle();\n    };\n    this.render = function(scene, camera) {\n      if (camera instanceof Camera === false) {\n        console.error(\"THREE.SVGRenderer.render: camera is not an instance of Camera.\");\n        return;\n      }\n      const background = scene.background;\n      if (background && background.isColor) {\n        removeChildNodes();\n        _svg.style.backgroundColor = background.getStyle();\n      } else if (this.autoClear === true) {\n        this.clear();\n      }\n      _this.info.render.vertices = 0;\n      _this.info.render.faces = 0;\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n      _elements = _renderData.elements;\n      _lights = _renderData.lights;\n      _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n      calculateLights(_lights);\n      _currentPath = \"\";\n      _currentStyle = \"\";\n      for (let e = 0, el = _elements.length; e < el; e++) {\n        const element = _elements[e];\n        const material = element.material;\n        if (material === void 0 || material.opacity === 0)\n          continue;\n        _elemBox.makeEmpty();\n        if (element instanceof RenderableSprite) {\n          _v1 = element;\n          _v1.x *= _svgWidthHalf;\n          _v1.y *= -_svgHeightHalf;\n          renderSprite(_v1, element, material);\n        } else if (element instanceof RenderableLine) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderLine(_v1, _v2, material);\n          }\n        } else if (element instanceof RenderableFace) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v3 = element.v3;\n          if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1)\n            continue;\n          if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1)\n            continue;\n          if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1)\n            continue;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _v3.positionScreen.x *= _svgWidthHalf;\n          _v3.positionScreen.y *= -_svgHeightHalf;\n          if (this.overdraw > 0) {\n            expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n            expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n            expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n          }\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderFace3(_v1, _v2, _v3, element, material);\n          }\n        }\n      }\n      flushPath();\n      scene.traverseVisible(function(object) {\n        if (object.isSVGObject) {\n          _vector3.setFromMatrixPosition(object.matrixWorld);\n          _vector3.applyMatrix4(_viewProjectionMatrix);\n          if (_vector3.z < -1 || _vector3.z > 1)\n            return;\n          const x = _vector3.x * _svgWidthHalf;\n          const y = -_vector3.y * _svgHeightHalf;\n          const node = object.node;\n          node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n          _svg.appendChild(node);\n        }\n      });\n    };\n    function calculateLights(lights) {\n      _ambientLight.setRGB(0, 0, 0);\n      _directionalLights.setRGB(0, 0, 0);\n      _pointLights.setRGB(0, 0, 0);\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isAmbientLight) {\n          _ambientLight.r += lightColor.r;\n          _ambientLight.g += lightColor.g;\n          _ambientLight.b += lightColor.b;\n        } else if (light.isDirectionalLight) {\n          _directionalLights.r += lightColor.r;\n          _directionalLights.g += lightColor.g;\n          _directionalLights.b += lightColor.b;\n        } else if (light.isPointLight) {\n          _pointLights.r += lightColor.r;\n          _pointLights.g += lightColor.g;\n          _pointLights.b += lightColor.b;\n        }\n      }\n    }\n    function calculateLight(lights, position, normal, color) {\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isDirectionalLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n          let amount = normal.dot(lightPosition);\n          if (amount <= 0)\n            continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        } else if (light.isPointLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n          let amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n          if (amount <= 0)\n            continue;\n          amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n          if (amount == 0)\n            continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        }\n      }\n    }\n    function renderSprite(v1, element, material) {\n      let scaleX = element.scale.x * _svgWidthHalf;\n      let scaleY = element.scale.y * _svgHeightHalf;\n      if (material.isPointsMaterial) {\n        scaleX *= material.size;\n        scaleY *= material.size;\n      }\n      const path = \"M\" + convert(v1.x - scaleX * 0.5) + \",\" + convert(v1.y - scaleY * 0.5) + \"h\" + convert(scaleX) + \"v\" + convert(scaleY) + \"h\" + convert(-scaleX) + \"z\";\n      let style = \"\";\n      if (material.isSpriteMaterial || material.isPointsMaterial) {\n        style = \"fill:\" + material.color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function renderLine(v1, v2, material) {\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y);\n      if (material.isLineBasicMaterial) {\n        let style = \"fill:none;stroke:\" + material.color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.linewidth + \";stroke-linecap:\" + material.linecap;\n        if (material.isLineDashedMaterial) {\n          style = style + \";stroke-dasharray:\" + material.dashSize + \",\" + material.gapSize;\n        }\n        addPath(style, path);\n      }\n    }\n    function renderFace3(v1, v2, v3, element, material) {\n      _this.info.render.vertices += 3;\n      _this.info.render.faces++;\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y) + \"L\" + convert(v3.positionScreen.x) + \",\" + convert(v3.positionScreen.y) + \"z\";\n      let style = \"\";\n      if (material.isMeshBasicMaterial) {\n        _color.copy(material.color);\n        if (material.vertexColors) {\n          _color.multiply(element.color);\n        }\n      } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n        _diffuseColor.copy(material.color);\n        if (material.vertexColors) {\n          _diffuseColor.multiply(element.color);\n        }\n        _color.copy(_ambientLight);\n        _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n        calculateLight(_lights, _centroid, element.normalModel, _color);\n        _color.multiply(_diffuseColor).add(material.emissive);\n      } else if (material.isMeshNormalMaterial) {\n        _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n        _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n      }\n      if (material.wireframe) {\n        style = \"fill:none;stroke:\" + _color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.wireframeLinewidth + \";stroke-linecap:\" + material.wireframeLinecap + \";stroke-linejoin:\" + material.wireframeLinejoin;\n      } else {\n        style = \"fill:\" + _color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function expand(v1, v2, pixels) {\n      let x = v2.x - v1.x, y = v2.y - v1.y;\n      const det = x * x + y * y;\n      if (det === 0)\n        return;\n      const idet = pixels / Math.sqrt(det);\n      x *= idet;\n      y *= idet;\n      v2.x += x;\n      v2.y += y;\n      v1.x -= x;\n      v1.y -= y;\n    }\n    function addPath(style, path) {\n      if (_currentStyle === style) {\n        _currentPath += path;\n      } else {\n        flushPath();\n        _currentStyle = style;\n        _currentPath = path;\n      }\n    }\n    function flushPath() {\n      if (_currentPath) {\n        _svgNode = getPathNode(_pathCount++);\n        _svgNode.setAttribute(\"d\", _currentPath);\n        _svgNode.setAttribute(\"style\", _currentStyle);\n        _svg.appendChild(_svgNode);\n      }\n      _currentPath = \"\";\n      _currentStyle = \"\";\n    }\n    function getPathNode(id) {\n      if (_svgPathPool[id] == null) {\n        _svgPathPool[id] = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        if (_quality == 0) {\n          _svgPathPool[id].setAttribute(\"shape-rendering\", \"crispEdges\");\n        }\n        return _svgPathPool[id];\n      }\n      return _svgPathPool[id];\n    }\n  }\n}\nexport {\n  SVGObject,\n  SVGRenderer\n};\n"]},"metadata":{},"sourceType":"module"}