{"ast":null,"code":"var RGBShiftShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    amount: {\n      value: 5e-3\n    },\n    angle: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float amount;\", \"uniform float angle;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 offset = amount * vec2( cos(angle), sin(angle));\", \"\tvec4 cr = texture2D(tDiffuse, vUv + offset);\", \"\tvec4 cga = texture2D(tDiffuse, vUv);\", \"\tvec4 cb = texture2D(tDiffuse, vUv - offset);\", \"\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\", \"}\"].join(\"\\n\")\n};\nexport { RGBShiftShader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/shaders/RGBShiftShader.js"],"names":["RGBShiftShader","uniforms","tDiffuse","value","amount","angle","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,MAAM,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFA;AAGRE,IAAAA,KAAK,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT;AAHC,GADW;AAMrBG,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CANO;AAarBC,EAAAA,cAAc,EAAE,CACd,6BADc,EAEd,uBAFc,EAGd,sBAHc,EAId,mBAJc,EAKd,eALc,EAMd,wDANc,EAOd,+CAPc,EAQd,uCARc,EASd,+CATc,EAUd,iDAVc,EAWd,GAXc,EAYdD,IAZc,CAYT,IAZS;AAbK,CAAvB;AA2BA,SACEP,cADF","sourcesContent":["const RGBShiftShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    amount: { value: 5e-3 },\n    angle: { value: 0 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform float amount;\",\n    \"uniform float angle;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec2 offset = amount * vec2( cos(angle), sin(angle));\",\n    \"\tvec4 cr = texture2D(tDiffuse, vUv + offset);\",\n    \"\tvec4 cga = texture2D(tDiffuse, vUv);\",\n    \"\tvec4 cb = texture2D(tDiffuse, vUv - offset);\",\n    \"\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  RGBShiftShader\n};\n"]},"metadata":{},"sourceType":"module"}