{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState, useEffect } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\nimport shuffle from \"lodash/shuffle\";\nimport image from \"./test.jpg\";\nimport image1 from \"./img/2023_BOTTLES_BOOK2102 copie.webp\";\nimport image2 from \"./img/ATTIRE_THE_STUDIO_MBACH_ATTIRE_010_FRANKLIN_BLACK_028 copie.webp\";\nimport image3 from \"./img/GIAMBATTISTA_23FWPVCA5091-09VIS-6750_26 copie.webp\";\nimport image4 from \"./img/GIAMBATTISTA_A2TIDY-TA07-08 copie.webp\";\nimport image5 from \"./img/JPG_23-12-U-PA061B-J033_Front copie.webp\";\nimport image6 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image7 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image8 from \"./img/MELISSA_JPG_F-CS002-X033-22-side-tiff-1 copie.webp\";\nimport image9 from \"./img/Parfum_x_Y_Project-back-tiff-1 copie.webp\";\nimport image10 from \"./img/SHANGXIA_FR1223S007QUARTZ-Fullbody-tiff-1 copie.webp\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Photo = /*#__PURE__*/memo(_c = () => {\n  const images = shuffle([image, image1, image2, image3, image4, image5, image6, image7, image8, image9, image10]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(ImageBlock, {\n      image: image\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n});\n_c2 = Photo;\n\nconst ImageBlock = ({\n  image\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const {\n    viewport\n  } = useThree();\n  const texture = useTexture(image); // Calculer les dimensions du plan en fonction de la taille de l'image\n\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n\n  const planeHeight = planeWidth / aspectRatio; // Utiliser PlaneGeometry avec les dimensions calculées\n\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n  const [t, setT] = useState(0);\n  const direction = useRef();\n  useFrame(({\n    mouse\n  }) => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (!direction.current) {\n      direction.current = mouse.x > 0.5 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n    setT(t + 1);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    position: [Math.random() * 10 - 5, Math.random() * 10 - 5, 0],\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageBlock, \"6evXA8AQinEbMoqpnTb6MnnCKA0=\", false, function () {\n  return [useThree, useTexture, useFrame];\n});\n\n_c3 = ImageBlock;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");\n$RefreshReg$(_c3, \"ImageBlock\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["useTexture","memo","useRef","useState","useEffect","PlaneGeometry","Mesh","MeshBasicMaterial","useThree","useFrame","appliedForces","shuffle","image","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","Photo","images","map","index","ImageBlock","ref","viewport","texture","imageWidth","width","imageHeight","height","aspectRatio","planeWidth","planeHeight","geometry","t","setT","direction","mouse","current","x","position","add","Math","random"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,EAAiCC,SAAjC,QAAkD,OAAlD;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,iBAA9B,QAAuD,OAAvD;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,wCAAnB;AACA,OAAOC,MAAP,MAAmB,wEAAnB;AACA,OAAOC,MAAP,MAAmB,0DAAnB;AACA,OAAOC,MAAP,MAAmB,8CAAnB;AACA,OAAOC,MAAP,MAAmB,gDAAnB;AACA,OAAOC,MAAP,MAAmB,oDAAnB;AACA,OAAOC,MAAP,MAAmB,oDAAnB;AACA,OAAOC,MAAP,MAAmB,0DAAnB;AACA,OAAOC,MAAP,MAAmB,iDAAnB;AACA,OAAOC,OAAP,MAAoB,4DAApB;;;AAEA,OAAO,MAAMC,KAAK,gBAAGtB,IAAI,MAAC,MAAM;AAC9B,QAAMuB,MAAM,GAAGb,OAAO,CAAC,CACrBC,KADqB,EAErBC,MAFqB,EAGrBC,MAHqB,EAIrBC,MAJqB,EAKrBC,MALqB,EAMrBC,MANqB,EAOrBC,MAPqB,EAQrBC,MARqB,EASrBC,MATqB,EAUrBC,MAVqB,EAWrBC,OAXqB,CAAD,CAAtB;AAcA,sBACE;AAAA,cACGE,MAAM,CAACC,GAAP,CAAW,CAACb,KAAD,EAAQc,KAAR,kBACV,QAAC,UAAD;AAAwB,MAAA,KAAK,EAAEd;AAA/B,OAAiBc,KAAjB;AAAA;AAAA;AAAA;AAAA,YADD;AADH,mBADF;AAOD,CAtBwB,CAAlB;MAAMH,K;;AAwBb,MAAMI,UAAU,GAAG,CAAC;AAAEf,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAChC,QAAMgB,GAAG,GAAG1B,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM;AAAE2B,IAAAA;AAAF,MAAerB,QAAQ,EAA7B;AAEA,QAAMsB,OAAO,GAAG9B,UAAU,CAACY,KAAD,CAA1B,CAJgC,CAMhC;;AACA,QAAMmB,UAAU,GAAGD,OAAO,CAAClB,KAAR,CAAcoB,KAAjC;AACA,QAAMC,WAAW,GAAGH,OAAO,CAAClB,KAAR,CAAcsB,MAAlC;AACA,QAAMC,WAAW,GAAGJ,UAAU,GAAGE,WAAjC;AACA,QAAMG,UAAU,GAAG,CAAnB,CAVgC,CAUV;;AACtB,QAAMC,WAAW,GAAGD,UAAU,GAAGD,WAAjC,CAXgC,CAahC;;AACA,QAAMG,QAAQ,GAAG,IAAIjC,aAAJ,CAAkB+B,UAAlB,EAA8BC,WAA9B,CAAjB;AAEA,QAAM,CAACE,CAAD,EAAIC,IAAJ,IAAYrC,QAAQ,CAAC,CAAD,CAA1B;AACA,QAAMsC,SAAS,GAAGvC,MAAM,EAAxB;AAEAO,EAAAA,QAAQ,CAAC,CAAC;AAAEiC,IAAAA;AAAF,GAAD,KAAe;AACtB,QAAI,CAACd,GAAG,CAACe,OAAT,EAAkB;AAChB;AACD;;AACD,QAAI,CAACF,SAAS,CAACE,OAAf,EAAwB;AACtBF,MAAAA,SAAS,CAACE,OAAV,GAAoBD,KAAK,CAACE,CAAN,GAAU,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAAzC;AACD;;AAEDhB,IAAAA,GAAG,CAACe,OAAJ,CAAYE,QAAZ,CAAqBC,GAArB,CAAyBpC,aAAa,CAAC6B,CAAD,EAAIE,SAAS,CAACE,OAAd,CAAtC;AAEAH,IAAAA,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ;AACD,GAXO,CAAR;AAaA,sBACE;AACE,IAAA,GAAG,EAAEX,GADP;AAEE,IAAA,QAAQ,EAAE,CAACmB,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAAtB,EAAyBD,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAA9C,EAAiD,CAAjD,CAFZ;AAGE,IAAA,QAAQ,EAAEV,QAHZ;AAAA,2BAKE;AAAmB,MAAA,GAAG,EAAER;AAAxB;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAzCD;;GAAMH,U;UAEiBnB,Q,EAELR,U,EAehBS,Q;;;MAnBIkB,U","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState, useEffect } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\nimport shuffle from \"lodash/shuffle\";\n\nimport image from \"./test.jpg\";\nimport image1 from \"./img/2023_BOTTLES_BOOK2102 copie.webp\";\nimport image2 from \"./img/ATTIRE_THE_STUDIO_MBACH_ATTIRE_010_FRANKLIN_BLACK_028 copie.webp\";\nimport image3 from \"./img/GIAMBATTISTA_23FWPVCA5091-09VIS-6750_26 copie.webp\";\nimport image4 from \"./img/GIAMBATTISTA_A2TIDY-TA07-08 copie.webp\";\nimport image5 from \"./img/JPG_23-12-U-PA061B-J033_Front copie.webp\";\nimport image6 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image7 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image8 from \"./img/MELISSA_JPG_F-CS002-X033-22-side-tiff-1 copie.webp\";\nimport image9 from \"./img/Parfum_x_Y_Project-back-tiff-1 copie.webp\";\nimport image10 from \"./img/SHANGXIA_FR1223S007QUARTZ-Fullbody-tiff-1 copie.webp\";\n\nexport const Photo = memo(() => {\n  const images = shuffle([\n    image,\n    image1,\n    image2,\n    image3,\n    image4,\n    image5,\n    image6,\n    image7,\n    image8,\n    image9,\n    image10,\n  ]);\n\n  return (\n    <>\n      {images.map((image, index) => (\n        <ImageBlock key={index} image={image} />\n      ))}\n    </>\n  );\n});\n\nconst ImageBlock = ({ image }) => {\n  const ref = useRef(null);\n  const { viewport } = useThree();\n\n  const texture = useTexture(image);\n\n  // Calculer les dimensions du plan en fonction de la taille de l'image\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n  const planeHeight = planeWidth / aspectRatio;\n\n  // Utiliser PlaneGeometry avec les dimensions calculées\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n\n  const [t, setT] = useState(0);\n  const direction = useRef();\n\n  useFrame(({ mouse }) => {\n    if (!ref.current) {\n      return;\n    }\n    if (!direction.current) {\n      direction.current = mouse.x > 0.5 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n\n    setT(t + 1);\n  });\n\n  return (\n    <mesh\n      ref={ref}\n      position={[Math.random() * 10 - 5, Math.random() * 10 - 5, 0]}\n      geometry={geometry}\n    >\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}