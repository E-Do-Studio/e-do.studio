{"ast":null,"code":"'use strict';\n\nvar SMTPConnection = require('smtp-connection');\n\nvar packageData = require('../package.json');\n\nvar wellknown = require('nodemailer-wellknown');\n\nvar clone = require('clone');\n\nvar PoolResource = require('./pool-resource');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar shared = require('nodemailer-shared'); // expose to the world\n\n\nmodule.exports = function (options) {\n  return new SMTPPool(options);\n};\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\n\n\nfunction SMTPPool(options) {\n  EventEmitter.call(this);\n  var hostData;\n\n  if (options && typeof options === 'string') {\n    options = {\n      url: options\n    };\n  }\n\n  this.options = options && clone(options) || {};\n\n  if (this.options.service && (hostData = wellknown(this.options.service))) {\n    Object.keys(hostData).forEach(function (key) {\n      if (!(key in this.options)) {\n        this.options[key] = hostData[key];\n      }\n    }.bind(this));\n  } // parse a configuration URL into configuration options\n\n\n  if (this.options.url) {\n    hostData = shared.parseConnectionUrl(this.options.url);\n    Object.keys(hostData).forEach(function (key) {\n      if (!(key in this.options)) {\n        this.options[key] = hostData[key];\n      }\n    }.bind(this));\n  }\n\n  this.options.maxConnections = this.options.maxConnections || 5;\n  this.options.maxMessages = this.options.maxMessages || 100;\n  this.logger = this.options.logger = shared.getLogger(this.options); // temporary object\n\n  var connection = new SMTPConnection(this.options);\n  this.name = 'SMTP (pool)';\n  this.version = packageData.version + '[client:' + connection.version + ']';\n  this._rateLimit = {\n    counter: 0,\n    timeout: null,\n    waiting: [],\n    checkpoint: false\n  };\n  this._closed = false;\n  this._queue = [];\n  this._connections = [];\n  this._connectionCounter = 0;\n}\n\nutil.inherits(SMTPPool, EventEmitter);\n/**\n * Queues an e-mail to be sent using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\n\nSMTPPool.prototype.send = function (mail, callback) {\n  this._queue.push({\n    mail: mail,\n    callback: callback\n  });\n\n  this._processMessages();\n};\n/**\n * Closes all connections in the pool. If there is a message being sent, the connection\n * is closed later\n */\n\n\nSMTPPool.prototype.close = function () {\n  var connection;\n  var len = this._connections.length;\n  this._closed = true; // clear rate limit timer if it exists\n\n  clearTimeout(this._rateLimit.timeout); // remove all available connections\n\n  for (var i = len - 1; i >= 0; i--) {\n    if (this._connections[i] && this._connections[i].available) {\n      connection = this._connections[i];\n      connection.close();\n      this.logger.info('Connection #%s removed', connection.id);\n    }\n  }\n\n  if (len && !this._connections.length) {\n    this.logger.debug('All connections removed');\n  }\n};\n/**\n * Check the queue and available connections. If there is a message to be sent and there is\n * an available connection, then use this connection to send the mail\n */\n\n\nSMTPPool.prototype._processMessages = function () {\n  var connection;\n\n  if (!this._queue.length || this._closed) {\n    return;\n  } // find first available connection\n\n\n  for (var i = 0, len = this._connections.length; i < len; i++) {\n    if (this._connections[i].available) {\n      connection = this._connections[i];\n      break;\n    }\n  }\n\n  if (!connection && this._connections.length < this.options.maxConnections) {\n    connection = this._createConnection();\n  }\n\n  if (!connection) {\n    return;\n  }\n\n  var element = connection.queueElement = this._queue.shift();\n\n  element.messageId = (connection.queueElement.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n  connection.available = false;\n  this.logger.debug('Assigned message <%s> to #%s (%s)', element.messageId, connection.id, connection.messages + 1);\n\n  if (this.options.rateLimit) {\n    this._rateLimit.counter++;\n\n    if (!this._rateLimit.checkpoint) {\n      this._rateLimit.checkpoint = Date.now();\n    }\n  }\n\n  connection.send(element.mail, function (err, info) {\n    // only process callback if current handler is not changed\n    if (element === connection.queueElement) {\n      element.callback(err, info);\n      connection.queueElement = false;\n    }\n  });\n};\n/**\n * Creates a new pool resource\n */\n\n\nSMTPPool.prototype._createConnection = function () {\n  var connection = new PoolResource(this);\n  connection.id = ++this._connectionCounter;\n  this.logger.info('Created new pool resource #%s', connection.id); // resource comes available\n\n  connection.on('available', function () {\n    this.logger.debug('Connection #%s became available', connection.id);\n\n    if (this._closed) {\n      // if already closed run close() that will remove this connections from connections list\n      this.close();\n    } else {\n      // check if there's anything else to send\n      this._processMessages();\n    }\n  }.bind(this)); // resource is terminated with an error\n\n  connection.once('error', function (err) {\n    if (err.code !== 'EMAXLIMIT') {\n      this.logger.error('Pool Error for #%s: %s', connection.id, err.message);\n    } else {\n      this.logger.debug('Max messages limit exchausted for #%s', connection.id);\n    }\n\n    if (connection.queueElement) {\n      connection.queueElement.callback(err);\n      connection.queueElement = false;\n    } // remove the erroneus connection from connections list\n\n\n    this._removeConnection(connection);\n\n    this._continueProcessing();\n  }.bind(this));\n  connection.once('close', function () {\n    this.logger.info('Connection #%s was closed', connection.id);\n\n    this._removeConnection(connection);\n\n    if (connection.queueElement) {\n      // If the connection closed when sending, add the message to the queue again\n      // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n      // in the next event loop\n      setTimeout(function () {\n        if (connection.queueElement) {\n          this.logger.debug('Re-queued message <%s> for #%s', connection.queueElement.messageId, connection.id);\n\n          this._queue.unshift(connection.queueElement);\n\n          connection.queueElement = false;\n        }\n\n        this._continueProcessing();\n      }.bind(this), 50);\n    } else {\n      this._continueProcessing();\n    }\n  }.bind(this));\n\n  this._connections.push(connection);\n\n  return connection;\n};\n/**\n * Continue to process message if the pool hasn't closed\n */\n\n\nSMTPPool.prototype._continueProcessing = function () {\n  if (this._closed) {\n    this.close();\n  } else {\n    setTimeout(this._processMessages.bind(this), 100);\n  }\n};\n/**\n * Remove resource from pool\n *\n * @param {Object} connection The PoolResource to remove\n */\n\n\nSMTPPool.prototype._removeConnection = function (connection) {\n  var index = this._connections.indexOf(connection);\n\n  if (index !== -1) {\n    this._connections.splice(index, 1);\n  }\n};\n/**\n * Checks if connections have hit current rate limit and if so, queues the availability callback\n *\n * @param {Function} callback Callback function to run once rate limiter has been cleared\n */\n\n\nSMTPPool.prototype._checkRateLimit = function (callback) {\n  if (!this.options.rateLimit) {\n    return callback();\n  }\n\n  var now = Date.now();\n\n  if (this._rateLimit.counter < this.options.rateLimit) {\n    return callback();\n  }\n\n  this._rateLimit.waiting.push(callback);\n\n  if (this._rateLimit.checkpoint <= now - 1000) {\n    return this._clearRateLimit();\n  } else if (!this._rateLimit.timeout) {\n    this._rateLimit.timeout = setTimeout(this._clearRateLimit.bind(this), 1000 - (now - this._rateLimit.checkpoint));\n    this._rateLimit.checkpoint = now;\n  }\n};\n/**\n * Clears current rate limit limitation and runs paused callback\n */\n\n\nSMTPPool.prototype._clearRateLimit = function () {\n  clearTimeout(this._rateLimit.timeout);\n  this._rateLimit.timeout = null;\n  this._rateLimit.counter = 0;\n  this._rateLimit.checkpoint = false; // resume all paused connections\n\n  while (this._rateLimit.waiting.length) {\n    var cb = this._rateLimit.waiting.shift();\n\n    setImmediate(cb);\n  }\n};","map":{"version":3,"sources":["/Users/theodaguier/e-do/node_modules/nodemailer-smtp-pool/lib/smtp-pool.js"],"names":["SMTPConnection","require","packageData","wellknown","clone","PoolResource","EventEmitter","util","shared","module","exports","options","SMTPPool","call","hostData","url","service","Object","keys","forEach","key","bind","parseConnectionUrl","maxConnections","maxMessages","logger","getLogger","connection","name","version","_rateLimit","counter","timeout","waiting","checkpoint","_closed","_queue","_connections","_connectionCounter","inherits","prototype","send","mail","callback","push","_processMessages","close","len","length","clearTimeout","i","available","info","id","debug","_createConnection","element","queueElement","shift","messageId","message","getHeader","replace","messages","rateLimit","Date","now","err","on","once","code","error","_removeConnection","_continueProcessing","setTimeout","unshift","index","indexOf","splice","_checkRateLimit","_clearRateLimit","cb","setImmediate"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,iBAAD,CAA1B;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,QAAD,CAAP,CAAkBK,YAArC;;AACA,IAAIC,IAAI,GAAGN,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIO,MAAM,GAAGP,OAAO,CAAC,mBAAD,CAApB,C,CAEA;;;AACAQ,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AAChC,SAAO,IAAIC,QAAJ,CAAaD,OAAb,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBD,OAAlB,EAA2B;AACvBL,EAAAA,YAAY,CAACO,IAAb,CAAkB,IAAlB;AAEA,MAAIC,QAAJ;;AAEA,MAAIH,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;AACxCA,IAAAA,OAAO,GAAG;AACNI,MAAAA,GAAG,EAAEJ;AADC,KAAV;AAGH;;AAED,OAAKA,OAAL,GAAeA,OAAO,IAAIP,KAAK,CAACO,OAAD,CAAhB,IAA6B,EAA5C;;AAEA,MAAI,KAAKA,OAAL,CAAaK,OAAb,KAAyBF,QAAQ,GAAGX,SAAS,CAAC,KAAKQ,OAAL,CAAaK,OAAd,CAA7C,CAAJ,EAA0E;AACtEC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,OAAtB,CAA8B,UAAUC,GAAV,EAAe;AACzC,UAAI,EAAEA,GAAG,IAAI,KAAKT,OAAd,CAAJ,EAA4B;AACxB,aAAKA,OAAL,CAAaS,GAAb,IAAoBN,QAAQ,CAACM,GAAD,CAA5B;AACH;AACJ,KAJ6B,CAI5BC,IAJ4B,CAIvB,IAJuB,CAA9B;AAKH,GAnBsB,CAqBvB;;;AACA,MAAI,KAAKV,OAAL,CAAaI,GAAjB,EAAsB;AAClBD,IAAAA,QAAQ,GAAGN,MAAM,CAACc,kBAAP,CAA0B,KAAKX,OAAL,CAAaI,GAAvC,CAAX;AACAE,IAAAA,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,OAAtB,CAA8B,UAAUC,GAAV,EAAe;AACzC,UAAI,EAAEA,GAAG,IAAI,KAAKT,OAAd,CAAJ,EAA4B;AACxB,aAAKA,OAAL,CAAaS,GAAb,IAAoBN,QAAQ,CAACM,GAAD,CAA5B;AACH;AACJ,KAJ6B,CAI5BC,IAJ4B,CAIvB,IAJuB,CAA9B;AAKH;;AAED,OAAKV,OAAL,CAAaY,cAAb,GAA8B,KAAKZ,OAAL,CAAaY,cAAb,IAA+B,CAA7D;AACA,OAAKZ,OAAL,CAAaa,WAAb,GAA2B,KAAKb,OAAL,CAAaa,WAAb,IAA4B,GAAvD;AAEA,OAAKC,MAAL,GAAc,KAAKd,OAAL,CAAac,MAAb,GAAsBjB,MAAM,CAACkB,SAAP,CAAiB,KAAKf,OAAtB,CAApC,CAlCuB,CAoCvB;;AACA,MAAIgB,UAAU,GAAG,IAAI3B,cAAJ,CAAmB,KAAKW,OAAxB,CAAjB;AAEA,OAAKiB,IAAL,GAAY,aAAZ;AACA,OAAKC,OAAL,GAAe3B,WAAW,CAAC2B,OAAZ,GAAsB,UAAtB,GAAmCF,UAAU,CAACE,OAA9C,GAAwD,GAAvE;AAEA,OAAKC,UAAL,GAAkB;AACdC,IAAAA,OAAO,EAAE,CADK;AAEdC,IAAAA,OAAO,EAAE,IAFK;AAGdC,IAAAA,OAAO,EAAE,EAHK;AAIdC,IAAAA,UAAU,EAAE;AAJE,GAAlB;AAMA,OAAKC,OAAL,GAAe,KAAf;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,YAAL,GAAoB,EAApB;AACA,OAAKC,kBAAL,GAA0B,CAA1B;AACH;;AACD/B,IAAI,CAACgC,QAAL,CAAc3B,QAAd,EAAwBN,YAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAM,QAAQ,CAAC4B,SAAT,CAAmBC,IAAnB,GAA0B,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AAChD,OAAKP,MAAL,CAAYQ,IAAZ,CAAiB;AACbF,IAAAA,IAAI,EAAEA,IADO;AAEbC,IAAAA,QAAQ,EAAEA;AAFG,GAAjB;;AAIA,OAAKE,gBAAL;AACH,CAND;AAQA;AACA;AACA;AACA;;;AACAjC,QAAQ,CAAC4B,SAAT,CAAmBM,KAAnB,GAA2B,YAAY;AACnC,MAAInB,UAAJ;AACA,MAAIoB,GAAG,GAAG,KAAKV,YAAL,CAAkBW,MAA5B;AACA,OAAKb,OAAL,GAAe,IAAf,CAHmC,CAKnC;;AACAc,EAAAA,YAAY,CAAC,KAAKnB,UAAL,CAAgBE,OAAjB,CAAZ,CANmC,CAQnC;;AACA,OAAK,IAAIkB,CAAC,GAAGH,GAAG,GAAG,CAAnB,EAAsBG,CAAC,IAAI,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AAC/B,QAAI,KAAKb,YAAL,CAAkBa,CAAlB,KAAwB,KAAKb,YAAL,CAAkBa,CAAlB,EAAqBC,SAAjD,EAA4D;AACxDxB,MAAAA,UAAU,GAAG,KAAKU,YAAL,CAAkBa,CAAlB,CAAb;AACAvB,MAAAA,UAAU,CAACmB,KAAX;AACA,WAAKrB,MAAL,CAAY2B,IAAZ,CAAiB,wBAAjB,EAA2CzB,UAAU,CAAC0B,EAAtD;AACH;AACJ;;AAED,MAAIN,GAAG,IAAI,CAAC,KAAKV,YAAL,CAAkBW,MAA9B,EAAsC;AAClC,SAAKvB,MAAL,CAAY6B,KAAZ,CAAkB,yBAAlB;AACH;AACJ,CApBD;AAsBA;AACA;AACA;AACA;;;AACA1C,QAAQ,CAAC4B,SAAT,CAAmBK,gBAAnB,GAAsC,YAAY;AAC9C,MAAIlB,UAAJ;;AAEA,MAAI,CAAC,KAAKS,MAAL,CAAYY,MAAb,IAAuB,KAAKb,OAAhC,EAAyC;AACrC;AACH,GAL6C,CAO9C;;;AACA,OAAK,IAAIe,CAAC,GAAG,CAAR,EAAWH,GAAG,GAAG,KAAKV,YAAL,CAAkBW,MAAxC,EAAgDE,CAAC,GAAGH,GAApD,EAAyDG,CAAC,EAA1D,EAA8D;AAC1D,QAAI,KAAKb,YAAL,CAAkBa,CAAlB,EAAqBC,SAAzB,EAAoC;AAChCxB,MAAAA,UAAU,GAAG,KAAKU,YAAL,CAAkBa,CAAlB,CAAb;AACA;AACH;AACJ;;AAED,MAAI,CAACvB,UAAD,IAAe,KAAKU,YAAL,CAAkBW,MAAlB,GAA2B,KAAKrC,OAAL,CAAaY,cAA3D,EAA2E;AACvEI,IAAAA,UAAU,GAAG,KAAK4B,iBAAL,EAAb;AACH;;AAED,MAAI,CAAC5B,UAAL,EAAiB;AACb;AACH;;AAED,MAAI6B,OAAO,GAAG7B,UAAU,CAAC8B,YAAX,GAA0B,KAAKrB,MAAL,CAAYsB,KAAZ,EAAxC;;AACAF,EAAAA,OAAO,CAACG,SAAR,GAAoB,CAAChC,UAAU,CAAC8B,YAAX,CAAwBf,IAAxB,CAA6BkB,OAA7B,CAAqCC,SAArC,CAA+C,YAA/C,KAAgE,EAAjE,EAAqEC,OAArE,CAA6E,SAA7E,EAAwF,EAAxF,CAApB;AAEAnC,EAAAA,UAAU,CAACwB,SAAX,GAAuB,KAAvB;AAEA,OAAK1B,MAAL,CAAY6B,KAAZ,CAAkB,mCAAlB,EAAuDE,OAAO,CAACG,SAA/D,EAA0EhC,UAAU,CAAC0B,EAArF,EAAyF1B,UAAU,CAACoC,QAAX,GAAsB,CAA/G;;AAEA,MAAI,KAAKpD,OAAL,CAAaqD,SAAjB,EAA4B;AACxB,SAAKlC,UAAL,CAAgBC,OAAhB;;AACA,QAAI,CAAC,KAAKD,UAAL,CAAgBI,UAArB,EAAiC;AAC7B,WAAKJ,UAAL,CAAgBI,UAAhB,GAA6B+B,IAAI,CAACC,GAAL,EAA7B;AACH;AACJ;;AAEDvC,EAAAA,UAAU,CAACc,IAAX,CAAgBe,OAAO,CAACd,IAAxB,EAA8B,UAAUyB,GAAV,EAAef,IAAf,EAAqB;AAC/C;AACA,QAAII,OAAO,KAAK7B,UAAU,CAAC8B,YAA3B,EAAyC;AACrCD,MAAAA,OAAO,CAACb,QAAR,CAAiBwB,GAAjB,EAAsBf,IAAtB;AACAzB,MAAAA,UAAU,CAAC8B,YAAX,GAA0B,KAA1B;AACH;AACJ,GAND;AAOH,CA5CD;AA8CA;AACA;AACA;;;AACA7C,QAAQ,CAAC4B,SAAT,CAAmBe,iBAAnB,GAAuC,YAAY;AAC/C,MAAI5B,UAAU,GAAG,IAAItB,YAAJ,CAAiB,IAAjB,CAAjB;AAEAsB,EAAAA,UAAU,CAAC0B,EAAX,GAAgB,EAAE,KAAKf,kBAAvB;AAEA,OAAKb,MAAL,CAAY2B,IAAZ,CAAiB,+BAAjB,EAAkDzB,UAAU,CAAC0B,EAA7D,EAL+C,CAO/C;;AACA1B,EAAAA,UAAU,CAACyC,EAAX,CAAc,WAAd,EAA2B,YAAY;AACnC,SAAK3C,MAAL,CAAY6B,KAAZ,CAAkB,iCAAlB,EAAqD3B,UAAU,CAAC0B,EAAhE;;AAEA,QAAI,KAAKlB,OAAT,EAAkB;AACd;AACA,WAAKW,KAAL;AACH,KAHD,MAGO;AACH;AACA,WAAKD,gBAAL;AACH;AACJ,GAV0B,CAUzBxB,IAVyB,CAUpB,IAVoB,CAA3B,EAR+C,CAoB/C;;AACAM,EAAAA,UAAU,CAAC0C,IAAX,CAAgB,OAAhB,EAAyB,UAAUF,GAAV,EAAe;AACpC,QAAIA,GAAG,CAACG,IAAJ,KAAa,WAAjB,EAA8B;AAC1B,WAAK7C,MAAL,CAAY8C,KAAZ,CAAkB,wBAAlB,EAA4C5C,UAAU,CAAC0B,EAAvD,EAA2Dc,GAAG,CAACP,OAA/D;AACH,KAFD,MAEO;AACH,WAAKnC,MAAL,CAAY6B,KAAZ,CAAkB,uCAAlB,EAA2D3B,UAAU,CAAC0B,EAAtE;AACH;;AAED,QAAI1B,UAAU,CAAC8B,YAAf,EAA6B;AACzB9B,MAAAA,UAAU,CAAC8B,YAAX,CAAwBd,QAAxB,CAAiCwB,GAAjC;AACAxC,MAAAA,UAAU,CAAC8B,YAAX,GAA0B,KAA1B;AACH,KAVmC,CAYpC;;;AACA,SAAKe,iBAAL,CAAuB7C,UAAvB;;AAEA,SAAK8C,mBAAL;AACH,GAhBwB,CAgBvBpD,IAhBuB,CAgBlB,IAhBkB,CAAzB;AAkBAM,EAAAA,UAAU,CAAC0C,IAAX,CAAgB,OAAhB,EAAyB,YAAY;AACjC,SAAK5C,MAAL,CAAY2B,IAAZ,CAAiB,2BAAjB,EAA8CzB,UAAU,CAAC0B,EAAzD;;AAEA,SAAKmB,iBAAL,CAAuB7C,UAAvB;;AAEA,QAAIA,UAAU,CAAC8B,YAAf,EAA6B;AACzB;AACA;AACA;AACAiB,MAAAA,UAAU,CAAC,YAAY;AACnB,YAAI/C,UAAU,CAAC8B,YAAf,EAA6B;AACzB,eAAKhC,MAAL,CAAY6B,KAAZ,CAAkB,gCAAlB,EAAoD3B,UAAU,CAAC8B,YAAX,CAAwBE,SAA5E,EAAuFhC,UAAU,CAAC0B,EAAlG;;AACA,eAAKjB,MAAL,CAAYuC,OAAZ,CAAoBhD,UAAU,CAAC8B,YAA/B;;AACA9B,UAAAA,UAAU,CAAC8B,YAAX,GAA0B,KAA1B;AACH;;AACD,aAAKgB,mBAAL;AACH,OAPU,CAOTpD,IAPS,CAOJ,IAPI,CAAD,EAOI,EAPJ,CAAV;AAQH,KAZD,MAYO;AACH,WAAKoD,mBAAL;AACH;AACJ,GApBwB,CAoBvBpD,IApBuB,CAoBlB,IApBkB,CAAzB;;AAsBA,OAAKgB,YAAL,CAAkBO,IAAlB,CAAuBjB,UAAvB;;AAEA,SAAOA,UAAP;AACH,CAhED;AAkEA;AACA;AACA;;;AACAf,QAAQ,CAAC4B,SAAT,CAAmBiC,mBAAnB,GAAyC,YAAY;AACjD,MAAI,KAAKtC,OAAT,EAAkB;AACd,SAAKW,KAAL;AACH,GAFD,MAEO;AACH4B,IAAAA,UAAU,CAAC,KAAK7B,gBAAL,CAAsBxB,IAAtB,CAA2B,IAA3B,CAAD,EAAmC,GAAnC,CAAV;AACH;AACJ,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAT,QAAQ,CAAC4B,SAAT,CAAmBgC,iBAAnB,GAAuC,UAAU7C,UAAV,EAAsB;AACzD,MAAIiD,KAAK,GAAG,KAAKvC,YAAL,CAAkBwC,OAAlB,CAA0BlD,UAA1B,CAAZ;;AAEA,MAAIiD,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,SAAKvC,YAAL,CAAkByC,MAAlB,CAAyBF,KAAzB,EAAgC,CAAhC;AACH;AACJ,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAhE,QAAQ,CAAC4B,SAAT,CAAmBuC,eAAnB,GAAqC,UAAUpC,QAAV,EAAoB;AACrD,MAAI,CAAC,KAAKhC,OAAL,CAAaqD,SAAlB,EAA6B;AACzB,WAAOrB,QAAQ,EAAf;AACH;;AAED,MAAIuB,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAV;;AAEA,MAAI,KAAKpC,UAAL,CAAgBC,OAAhB,GAA0B,KAAKpB,OAAL,CAAaqD,SAA3C,EAAsD;AAClD,WAAOrB,QAAQ,EAAf;AACH;;AAED,OAAKb,UAAL,CAAgBG,OAAhB,CAAwBW,IAAxB,CAA6BD,QAA7B;;AAEA,MAAI,KAAKb,UAAL,CAAgBI,UAAhB,IAA8BgC,GAAG,GAAG,IAAxC,EAA8C;AAC1C,WAAO,KAAKc,eAAL,EAAP;AACH,GAFD,MAEO,IAAI,CAAC,KAAKlD,UAAL,CAAgBE,OAArB,EAA8B;AACjC,SAAKF,UAAL,CAAgBE,OAAhB,GAA0B0C,UAAU,CAAC,KAAKM,eAAL,CAAqB3D,IAArB,CAA0B,IAA1B,CAAD,EAAkC,QAAQ6C,GAAG,GAAG,KAAKpC,UAAL,CAAgBI,UAA9B,CAAlC,CAApC;AACA,SAAKJ,UAAL,CAAgBI,UAAhB,GAA6BgC,GAA7B;AACH;AACJ,CAnBD;AAqBA;AACA;AACA;;;AACAtD,QAAQ,CAAC4B,SAAT,CAAmBwC,eAAnB,GAAqC,YAAY;AAC7C/B,EAAAA,YAAY,CAAC,KAAKnB,UAAL,CAAgBE,OAAjB,CAAZ;AACA,OAAKF,UAAL,CAAgBE,OAAhB,GAA0B,IAA1B;AACA,OAAKF,UAAL,CAAgBC,OAAhB,GAA0B,CAA1B;AACA,OAAKD,UAAL,CAAgBI,UAAhB,GAA6B,KAA7B,CAJ6C,CAM7C;;AACA,SAAO,KAAKJ,UAAL,CAAgBG,OAAhB,CAAwBe,MAA/B,EAAuC;AACnC,QAAIiC,EAAE,GAAG,KAAKnD,UAAL,CAAgBG,OAAhB,CAAwByB,KAAxB,EAAT;;AACAwB,IAAAA,YAAY,CAACD,EAAD,CAAZ;AACH;AACJ,CAXD","sourcesContent":["'use strict';\n\nvar SMTPConnection = require('smtp-connection');\nvar packageData = require('../package.json');\nvar wellknown = require('nodemailer-wellknown');\nvar clone = require('clone');\nvar PoolResource = require('./pool-resource');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar shared = require('nodemailer-shared');\n\n// expose to the world\nmodule.exports = function (options) {\n    return new SMTPPool(options);\n};\n\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */\nfunction SMTPPool(options) {\n    EventEmitter.call(this);\n\n    var hostData;\n\n    if (options && typeof options === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    this.options = options && clone(options) || {};\n\n    if (this.options.service && (hostData = wellknown(this.options.service))) {\n        Object.keys(hostData).forEach(function (key) {\n            if (!(key in this.options)) {\n                this.options[key] = hostData[key];\n            }\n        }.bind(this));\n    }\n\n    // parse a configuration URL into configuration options\n    if (this.options.url) {\n        hostData = shared.parseConnectionUrl(this.options.url);\n        Object.keys(hostData).forEach(function (key) {\n            if (!(key in this.options)) {\n                this.options[key] = hostData[key];\n            }\n        }.bind(this));\n    }\n\n    this.options.maxConnections = this.options.maxConnections || 5;\n    this.options.maxMessages = this.options.maxMessages || 100;\n\n    this.logger = this.options.logger = shared.getLogger(this.options);\n\n    // temporary object\n    var connection = new SMTPConnection(this.options);\n\n    this.name = 'SMTP (pool)';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n\n    this._rateLimit = {\n        counter: 0,\n        timeout: null,\n        waiting: [],\n        checkpoint: false\n    };\n    this._closed = false;\n    this._queue = [];\n    this._connections = [];\n    this._connectionCounter = 0;\n}\nutil.inherits(SMTPPool, EventEmitter);\n\n/**\n * Queues an e-mail to be sent using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\nSMTPPool.prototype.send = function (mail, callback) {\n    this._queue.push({\n        mail: mail,\n        callback: callback\n    });\n    this._processMessages();\n};\n\n/**\n * Closes all connections in the pool. If there is a message being sent, the connection\n * is closed later\n */\nSMTPPool.prototype.close = function () {\n    var connection;\n    var len = this._connections.length;\n    this._closed = true;\n\n    // clear rate limit timer if it exists\n    clearTimeout(this._rateLimit.timeout);\n\n    // remove all available connections\n    for (var i = len - 1; i >= 0; i--) {\n        if (this._connections[i] && this._connections[i].available) {\n            connection = this._connections[i];\n            connection.close();\n            this.logger.info('Connection #%s removed', connection.id);\n        }\n    }\n\n    if (len && !this._connections.length) {\n        this.logger.debug('All connections removed');\n    }\n};\n\n/**\n * Check the queue and available connections. If there is a message to be sent and there is\n * an available connection, then use this connection to send the mail\n */\nSMTPPool.prototype._processMessages = function () {\n    var connection;\n\n    if (!this._queue.length || this._closed) {\n        return;\n    }\n\n    // find first available connection\n    for (var i = 0, len = this._connections.length; i < len; i++) {\n        if (this._connections[i].available) {\n            connection = this._connections[i];\n            break;\n        }\n    }\n\n    if (!connection && this._connections.length < this.options.maxConnections) {\n        connection = this._createConnection();\n    }\n\n    if (!connection) {\n        return;\n    }\n\n    var element = connection.queueElement = this._queue.shift();\n    element.messageId = (connection.queueElement.mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n\n    connection.available = false;\n\n    this.logger.debug('Assigned message <%s> to #%s (%s)', element.messageId, connection.id, connection.messages + 1);\n\n    if (this.options.rateLimit) {\n        this._rateLimit.counter++;\n        if (!this._rateLimit.checkpoint) {\n            this._rateLimit.checkpoint = Date.now();\n        }\n    }\n\n    connection.send(element.mail, function (err, info) {\n        // only process callback if current handler is not changed\n        if (element === connection.queueElement) {\n            element.callback(err, info);\n            connection.queueElement = false;\n        }\n    });\n};\n\n/**\n * Creates a new pool resource\n */\nSMTPPool.prototype._createConnection = function () {\n    var connection = new PoolResource(this);\n\n    connection.id = ++this._connectionCounter;\n\n    this.logger.info('Created new pool resource #%s', connection.id);\n\n    // resource comes available\n    connection.on('available', function () {\n        this.logger.debug('Connection #%s became available', connection.id);\n\n        if (this._closed) {\n            // if already closed run close() that will remove this connections from connections list\n            this.close();\n        } else {\n            // check if there's anything else to send\n            this._processMessages();\n        }\n    }.bind(this));\n\n    // resource is terminated with an error\n    connection.once('error', function (err) {\n        if (err.code !== 'EMAXLIMIT') {\n            this.logger.error('Pool Error for #%s: %s', connection.id, err.message);\n        } else {\n            this.logger.debug('Max messages limit exchausted for #%s', connection.id);\n        }\n\n        if (connection.queueElement) {\n            connection.queueElement.callback(err);\n            connection.queueElement = false;\n        }\n\n        // remove the erroneus connection from connections list\n        this._removeConnection(connection);\n\n        this._continueProcessing();\n    }.bind(this));\n\n    connection.once('close', function () {\n        this.logger.info('Connection #%s was closed', connection.id);\n\n        this._removeConnection(connection);\n\n        if (connection.queueElement) {\n            // If the connection closed when sending, add the message to the queue again\n            // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n            // in the next event loop\n            setTimeout(function () {\n                if (connection.queueElement) {\n                    this.logger.debug('Re-queued message <%s> for #%s', connection.queueElement.messageId, connection.id);\n                    this._queue.unshift(connection.queueElement);\n                    connection.queueElement = false;\n                }\n                this._continueProcessing();\n            }.bind(this), 50);\n        } else {\n            this._continueProcessing();\n        }\n    }.bind(this));\n\n    this._connections.push(connection);\n\n    return connection;\n};\n\n/**\n * Continue to process message if the pool hasn't closed\n */\nSMTPPool.prototype._continueProcessing = function () {\n    if (this._closed) {\n        this.close();\n    } else {\n        setTimeout(this._processMessages.bind(this), 100);\n    }\n};\n\n/**\n * Remove resource from pool\n *\n * @param {Object} connection The PoolResource to remove\n */\nSMTPPool.prototype._removeConnection = function (connection) {\n    var index = this._connections.indexOf(connection);\n\n    if (index !== -1) {\n        this._connections.splice(index, 1);\n    }\n};\n\n/**\n * Checks if connections have hit current rate limit and if so, queues the availability callback\n *\n * @param {Function} callback Callback function to run once rate limiter has been cleared\n */\nSMTPPool.prototype._checkRateLimit = function (callback) {\n    if (!this.options.rateLimit) {\n        return callback();\n    }\n\n    var now = Date.now();\n\n    if (this._rateLimit.counter < this.options.rateLimit) {\n        return callback();\n    }\n\n    this._rateLimit.waiting.push(callback);\n\n    if (this._rateLimit.checkpoint <= now - 1000) {\n        return this._clearRateLimit();\n    } else if (!this._rateLimit.timeout) {\n        this._rateLimit.timeout = setTimeout(this._clearRateLimit.bind(this), 1000 - (now - this._rateLimit.checkpoint));\n        this._rateLimit.checkpoint = now;\n    }\n};\n\n/**\n * Clears current rate limit limitation and runs paused callback\n */\nSMTPPool.prototype._clearRateLimit = function () {\n    clearTimeout(this._rateLimit.timeout);\n    this._rateLimit.timeout = null;\n    this._rateLimit.counter = 0;\n    this._rateLimit.checkpoint = false;\n\n    // resume all paused connections\n    while (this._rateLimit.waiting.length) {\n        var cb = this._rateLimit.waiting.shift();\n        setImmediate(cb);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}