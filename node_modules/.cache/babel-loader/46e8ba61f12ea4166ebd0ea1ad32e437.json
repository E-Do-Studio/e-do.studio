{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { UniformsUtils, WebGLRenderTarget, LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\n\nclass AfterimagePass extends Pass {\n  constructor(damp = 0.96, shader = AfterimageShader) {\n    super();\n\n    __publicField(this, \"shader\");\n\n    __publicField(this, \"uniforms\");\n\n    __publicField(this, \"textureComp\");\n\n    __publicField(this, \"textureOld\");\n\n    __publicField(this, \"shaderMaterial\");\n\n    __publicField(this, \"compFsQuad\");\n\n    __publicField(this, \"copyFsQuad\");\n\n    this.shader = shader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.uniforms[\"damp\"].value = damp;\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.shaderMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader\n    });\n    this.compFsQuad = new FullScreenQuad(this.shaderMaterial);\n    let material = new MeshBasicMaterial();\n    this.copyFsQuad = new FullScreenQuad(material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tOld\"].value = this.textureOld.texture;\n    this.uniforms[\"tNew\"].value = readBuffer.texture;\n    renderer.setRenderTarget(this.textureComp);\n    this.compFsQuad.render(renderer);\n    this.copyFsQuad.material.map = this.textureComp.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.copyFsQuad.render(renderer);\n    }\n\n    let temp = this.textureOld;\n    this.textureOld = this.textureComp;\n    this.textureComp = temp;\n  }\n\n  setSize(width, height) {\n    this.textureComp.setSize(width, height);\n    this.textureOld.setSize(width, height);\n  }\n\n}\n\nexport { AfterimagePass };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/AfterimagePass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","UniformsUtils","WebGLRenderTarget","LinearFilter","NearestFilter","RGBAFormat","ShaderMaterial","MeshBasicMaterial","Pass","FullScreenQuad","AfterimageShader","AfterimagePass","constructor","damp","shader","uniforms","clone","textureComp","window","innerWidth","innerHeight","minFilter","magFilter","format","textureOld","shaderMaterial","vertexShader","fragmentShader","compFsQuad","material","copyFsQuad","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","map","renderToScreen","clear","temp","setSize","width","height"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { UniformsUtils, WebGLRenderTarget, LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\nclass AfterimagePass extends Pass {\n  constructor(damp = 0.96, shader = AfterimageShader) {\n    super();\n    __publicField(this, \"shader\");\n    __publicField(this, \"uniforms\");\n    __publicField(this, \"textureComp\");\n    __publicField(this, \"textureOld\");\n    __publicField(this, \"shaderMaterial\");\n    __publicField(this, \"compFsQuad\");\n    __publicField(this, \"copyFsQuad\");\n    this.shader = shader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.uniforms[\"damp\"].value = damp;\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.shaderMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader\n    });\n    this.compFsQuad = new FullScreenQuad(this.shaderMaterial);\n    let material = new MeshBasicMaterial();\n    this.copyFsQuad = new FullScreenQuad(material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tOld\"].value = this.textureOld.texture;\n    this.uniforms[\"tNew\"].value = readBuffer.texture;\n    renderer.setRenderTarget(this.textureComp);\n    this.compFsQuad.render(renderer);\n    this.copyFsQuad.material.map = this.textureComp.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.copyFsQuad.render(renderer);\n    }\n    let temp = this.textureOld;\n    this.textureOld = this.textureComp;\n    this.textureComp = temp;\n  }\n  setSize(width, height) {\n    this.textureComp.setSize(width, height);\n    this.textureOld.setSize(width, height);\n  }\n}\nexport {\n  AfterimagePass\n};\n"]},"metadata":{},"sourceType":"module"}