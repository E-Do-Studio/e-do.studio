{"ast":null,"code":"import { Vector3 } from \"three\";\nconst ColorCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    powRGB: {\n      value: /* @__PURE__ */new Vector3(2, 2, 2)\n    },\n    mulRGB: {\n      value: /* @__PURE__ */new Vector3(1, 1, 1)\n    },\n    addRGB: {\n      value: /* @__PURE__ */new Vector3(0, 0, 0)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec3 powRGB;\", \"uniform vec3 mulRGB;\", \"uniform vec3 addRGB;\", \"varying vec2 vUv;\", \"void main() {\", \"\tgl_FragColor = texture2D( tDiffuse, vUv );\", \"\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\", \"}\"].join(\"\\n\")\n};\nexport { ColorCorrectionShader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/shaders/ColorCorrectionShader.js"],"names":["Vector3","ColorCorrectionShader","uniforms","tDiffuse","value","powRGB","mulRGB","addRGB","vertexShader","join","fragmentShader"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,MAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,MAAM,EAAE;AAAED,MAAAA,KAAK,EAAE,eAAgB,IAAIJ,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;AAAzB,KAFA;AAGRM,IAAAA,MAAM,EAAE;AAAEF,MAAAA,KAAK,EAAE,eAAgB,IAAIJ,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;AAAzB,KAHA;AAIRO,IAAAA,MAAM,EAAE;AAAEH,MAAAA,KAAK,EAAE,eAAgB,IAAIJ,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;AAAzB;AAJA,GADkB;AAO5BQ,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CAPc;AAc5BC,EAAAA,cAAc,EAAE,CACd,6BADc,EAEd,sBAFc,EAGd,sBAHc,EAId,sBAJc,EAKd,mBALc,EAMd,eANc,EAOd,6CAPc,EAQd,4EARc,EASd,GATc,EAUdD,IAVc,CAUT,IAVS;AAdY,CAA9B;AA0BA,SACER,qBADF","sourcesContent":["import { Vector3 } from \"three\";\nconst ColorCorrectionShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    powRGB: { value: /* @__PURE__ */ new Vector3(2, 2, 2) },\n    mulRGB: { value: /* @__PURE__ */ new Vector3(1, 1, 1) },\n    addRGB: { value: /* @__PURE__ */ new Vector3(0, 0, 0) }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform vec3 powRGB;\",\n    \"uniform vec3 mulRGB;\",\n    \"uniform vec3 addRGB;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n    \"\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  ColorCorrectionShader\n};\n"]},"metadata":{},"sourceType":"module"}