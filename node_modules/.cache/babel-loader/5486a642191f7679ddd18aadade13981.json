{"ast":null,"code":"'use strict';\n\nvar SMTPConnection = require('smtp-connection');\n\nvar packageData = require('../package.json');\n\nvar wellknown = require('nodemailer-wellknown');\n\nvar shared = require('nodemailer-shared');\n\nvar clone = require('clone');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util'); // expose to the world\n\n\nmodule.exports = function (options) {\n  return new SMTPTransport(options);\n};\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\n\n\nfunction SMTPTransport(options) {\n  EventEmitter.call(this);\n  var hostData;\n\n  if (options && typeof options === 'string') {\n    options = {\n      url: options\n    };\n  }\n\n  this.options = options && clone(options) || {};\n\n  if (this.options.service && (hostData = wellknown(this.options.service))) {\n    Object.keys(hostData).forEach(function (key) {\n      if (!(key in this.options)) {\n        this.options[key] = hostData[key];\n      }\n    }.bind(this));\n  } // parse a configuration URL into configuration options\n\n\n  if (this.options.url) {\n    hostData = shared.parseConnectionUrl(this.options.url);\n    Object.keys(hostData).forEach(function (key) {\n      if (!(key in this.options)) {\n        this.options[key] = hostData[key];\n      }\n    }.bind(this));\n  }\n\n  this.logger = shared.getLogger(this.options); // temporary object\n\n  var connection = new SMTPConnection(this.options);\n  this.name = 'SMTP';\n  this.version = packageData.version + '[client:' + connection.version + ']';\n}\n\nutil.inherits(SMTPTransport, EventEmitter);\n/**\n * Sends an e-mail using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\n\nSMTPTransport.prototype.send = function (mail, callback) {\n  var connection = new SMTPConnection(this.options);\n  var returned = false;\n  connection.once('error', function (err) {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    connection.close();\n    return callback(err);\n  });\n  connection.once('end', function () {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    return callback(new Error('Connection closed'));\n  });\n\n  var sendMessage = function () {\n    var envelope = mail.data.envelope || mail.message.getEnvelope();\n    var messageId = (mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n    var recipients = [].concat(envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info('Sending message <%s> to <%s>', messageId, recipients.join(', '));\n    connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n      if (returned) {\n        return;\n      }\n\n      returned = true;\n      connection.close();\n\n      if (err) {\n        return callback(err);\n      }\n\n      info.envelope = {\n        from: envelope.from,\n        to: envelope.to\n      };\n      info.messageId = messageId;\n      return callback(null, info);\n    });\n  }.bind(this);\n\n  connection.connect(function () {\n    if (returned) {\n      return;\n    }\n\n    if (this.options.auth) {\n      connection.login(this.options.auth, function (err) {\n        if (returned) {\n          return;\n        }\n\n        if (err) {\n          returned = true;\n          connection.close();\n          return callback(err);\n        }\n\n        sendMessage();\n      });\n    } else {\n      sendMessage();\n    }\n  }.bind(this));\n};","map":{"version":3,"sources":["/Users/theodaguier/e-do/node_modules/nodemailer-smtp-transport/lib/smtp-transport.js"],"names":["SMTPConnection","require","packageData","wellknown","shared","clone","EventEmitter","util","module","exports","options","SMTPTransport","call","hostData","url","service","Object","keys","forEach","key","bind","parseConnectionUrl","logger","getLogger","connection","name","version","inherits","prototype","send","mail","callback","returned","once","err","close","Error","sendMessage","envelope","data","message","getEnvelope","messageId","getHeader","replace","recipients","concat","to","length","push","splice","info","join","createReadStream","from","connect","auth","login"],"mappings":"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","sourcesContent":["'use strict';\n\nvar SMTPConnection = require('smtp-connection');\nvar packageData = require('../package.json');\nvar wellknown = require('nodemailer-wellknown');\nvar shared = require('nodemailer-shared');\nvar clone = require('clone');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\n// expose to the world\nmodule.exports = function (options) {\n    return new SMTPTransport(options);\n};\n\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\nfunction SMTPTransport(options) {\n    EventEmitter.call(this);\n\n    var hostData;\n\n    if (options && typeof options === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    this.options = options && clone(options) || {};\n\n    if (this.options.service && (hostData = wellknown(this.options.service))) {\n        Object.keys(hostData).forEach(function (key) {\n            if (!(key in this.options)) {\n                this.options[key] = hostData[key];\n            }\n        }.bind(this));\n    }\n\n    // parse a configuration URL into configuration options\n    if (this.options.url) {\n        hostData = shared.parseConnectionUrl(this.options.url);\n        Object.keys(hostData).forEach(function (key) {\n            if (!(key in this.options)) {\n                this.options[key] = hostData[key];\n            }\n        }.bind(this));\n    }\n\n    this.logger = shared.getLogger(this.options);\n\n    // temporary object\n    var connection = new SMTPConnection(this.options);\n\n    this.name = 'SMTP';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n}\nutil.inherits(SMTPTransport, EventEmitter);\n\n/**\n * Sends an e-mail using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\nSMTPTransport.prototype.send = function (mail, callback) {\n    var connection = new SMTPConnection(this.options);\n    var returned = false;\n\n    connection.once('error', function (err) {\n        if (returned) {\n            return;\n        }\n        returned = true;\n        connection.close();\n        return callback(err);\n    });\n\n    connection.once('end', function () {\n        if (returned) {\n            return;\n        }\n        returned = true;\n        return callback(new Error('Connection closed'));\n    });\n\n    var sendMessage = function () {\n        var envelope = mail.data.envelope || mail.message.getEnvelope();\n        var messageId = (mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n        var recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n\n        this.logger.info('Sending message <%s> to <%s>', messageId, recipients.join(', '));\n\n        connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            connection.close();\n            if (err) {\n                return callback(err);\n            }\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n            return callback(null, info);\n        });\n    }.bind(this);\n\n    connection.connect(function () {\n        if (returned) {\n            return;\n        }\n\n        if (this.options.auth) {\n            connection.login(this.options.auth, function (err) {\n                if (returned) {\n                    return;\n                }\n\n                if (err) {\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                }\n\n                sendMessage();\n            });\n        } else {\n            sendMessage();\n        }\n    }.bind(this));\n};\n"]},"metadata":{},"sourceType":"script"}