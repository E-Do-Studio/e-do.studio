{"ast":null,"code":"import { Color, ShaderMaterial, UniformsUtils, UniformsLib, BackSide } from \"three\";\n\nclass OutlineEffect {\n  constructor(renderer, parameters = {}) {\n    this.enabled = true;\n    const defaultThickness = parameters.defaultThickness !== void 0 ? parameters.defaultThickness : 3e-3;\n    const defaultColor = new Color().fromArray(parameters.defaultColor !== void 0 ? parameters.defaultColor : [0, 0, 0]);\n    const defaultAlpha = parameters.defaultAlpha !== void 0 ? parameters.defaultAlpha : 1;\n    const defaultKeepAlive = parameters.defaultKeepAlive !== void 0 ? parameters.defaultKeepAlive : false;\n    const cache = {};\n    const removeThresholdCount = 60;\n    const originalMaterials = {};\n    const originalOnBeforeRenders = {};\n    const uniformsOutline = {\n      outlineThickness: {\n        value: defaultThickness\n      },\n      outlineColor: {\n        value: defaultColor\n      },\n      outlineAlpha: {\n        value: defaultAlpha\n      }\n    };\n    const vertexShader = [\"#include <common>\", \"#include <uv_pars_vertex>\", \"#include <displacementmap_pars_vertex>\", \"#include <fog_pars_vertex>\", \"#include <morphtarget_pars_vertex>\", \"#include <skinning_pars_vertex>\", \"#include <logdepthbuf_pars_vertex>\", \"#include <clipping_planes_pars_vertex>\", \"uniform float outlineThickness;\", \"vec4 calculateOutline( vec4 pos, vec3 normal, vec4 skinned ) {\", \"\tfloat thickness = outlineThickness;\", \"\tconst float ratio = 1.0;\", // TODO: support outline thickness ratio for each vertex\n    \"\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + normal, 1.0 );\", // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n    \"\tvec4 norm = normalize( pos - pos2 );\", \"\treturn pos + norm * thickness * pos.w * ratio;\", \"}\", \"void main() {\", \"\t#include <uv_vertex>\", \"\t#include <beginnormal_vertex>\", \"\t#include <morphnormal_vertex>\", \"\t#include <skinbase_vertex>\", \"\t#include <skinnormal_vertex>\", \"\t#include <begin_vertex>\", \"\t#include <morphtarget_vertex>\", \"\t#include <skinning_vertex>\", \"\t#include <displacementmap_vertex>\", \"\t#include <project_vertex>\", \"\tvec3 outlineNormal = - objectNormal;\", // the outline material is always rendered with BackSide\n    \"\tgl_Position = calculateOutline( gl_Position, outlineNormal, vec4( transformed, 1.0 ) );\", \"\t#include <logdepthbuf_vertex>\", \"\t#include <clipping_planes_vertex>\", \"\t#include <fog_vertex>\", \"}\"].join(\"\\n\");\n    const fragmentShader = [\"#include <common>\", \"#include <fog_pars_fragment>\", \"#include <logdepthbuf_pars_fragment>\", \"#include <clipping_planes_pars_fragment>\", \"uniform vec3 outlineColor;\", \"uniform float outlineAlpha;\", \"void main() {\", \"\t#include <clipping_planes_fragment>\", \"\t#include <logdepthbuf_fragment>\", \"\tgl_FragColor = vec4( outlineColor, outlineAlpha );\", \"\t#include <tonemapping_fragment>\", \"\t#include <encodings_fragment>\", \"\t#include <fog_fragment>\", \"\t#include <premultiplied_alpha_fragment>\", \"}\"].join(\"\\n\");\n\n    function createMaterial() {\n      return new ShaderMaterial({\n        type: \"OutlineEffect\",\n        uniforms: UniformsUtils.merge([UniformsLib[\"fog\"], UniformsLib[\"displacementmap\"], uniformsOutline]),\n        vertexShader,\n        fragmentShader,\n        side: BackSide\n      });\n    }\n\n    function getOutlineMaterialFromCache(originalMaterial) {\n      let data = cache[originalMaterial.uuid];\n\n      if (data === void 0) {\n        data = {\n          material: createMaterial(),\n          used: true,\n          keepAlive: defaultKeepAlive,\n          count: 0\n        };\n        cache[originalMaterial.uuid] = data;\n      }\n\n      data.used = true;\n      return data.material;\n    }\n\n    function getOutlineMaterial(originalMaterial) {\n      const outlineMaterial = getOutlineMaterialFromCache(originalMaterial);\n      originalMaterials[outlineMaterial.uuid] = originalMaterial;\n      updateOutlineMaterial(outlineMaterial, originalMaterial);\n      return outlineMaterial;\n    }\n\n    function isCompatible(object) {\n      const geometry = object.geometry;\n      const hasNormals = geometry !== void 0 && geometry.attributes.normal !== void 0;\n      return object.isMesh === true && object.material !== void 0 && hasNormals === true;\n    }\n\n    function setOutlineMaterial(object) {\n      if (isCompatible(object) === false) return;\n\n      if (Array.isArray(object.material)) {\n        for (let i = 0, il = object.material.length; i < il; i++) {\n          object.material[i] = getOutlineMaterial(object.material[i]);\n        }\n      } else {\n        object.material = getOutlineMaterial(object.material);\n      }\n\n      originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n      object.onBeforeRender = onBeforeRender;\n    }\n\n    function restoreOriginalMaterial(object) {\n      if (isCompatible(object) === false) return;\n\n      if (Array.isArray(object.material)) {\n        for (let i = 0, il = object.material.length; i < il; i++) {\n          object.material[i] = originalMaterials[object.material[i].uuid];\n        }\n      } else {\n        object.material = originalMaterials[object.material.uuid];\n      }\n\n      object.onBeforeRender = originalOnBeforeRenders[object.uuid];\n    }\n\n    function onBeforeRender(renderer2, scene, camera, geometry, material) {\n      const originalMaterial = originalMaterials[material.uuid];\n      if (originalMaterial === void 0) return;\n      updateUniforms(material, originalMaterial);\n    }\n\n    function updateUniforms(material, originalMaterial) {\n      const outlineParameters = originalMaterial.userData.outlineParameters;\n      material.uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n      if (outlineParameters !== void 0) {\n        if (outlineParameters.thickness !== void 0) material.uniforms.outlineThickness.value = outlineParameters.thickness;\n        if (outlineParameters.color !== void 0) material.uniforms.outlineColor.value.fromArray(outlineParameters.color);\n        if (outlineParameters.alpha !== void 0) material.uniforms.outlineAlpha.value = outlineParameters.alpha;\n      }\n\n      if (originalMaterial.displacementMap) {\n        material.uniforms.displacementMap.value = originalMaterial.displacementMap;\n        material.uniforms.displacementScale.value = originalMaterial.displacementScale;\n        material.uniforms.displacementBias.value = originalMaterial.displacementBias;\n      }\n    }\n\n    function updateOutlineMaterial(material, originalMaterial) {\n      if (material.name === \"invisible\") return;\n      const outlineParameters = originalMaterial.userData.outlineParameters;\n      material.fog = originalMaterial.fog;\n      material.toneMapped = originalMaterial.toneMapped;\n      material.premultipliedAlpha = originalMaterial.premultipliedAlpha;\n      material.displacementMap = originalMaterial.displacementMap;\n\n      if (outlineParameters !== void 0) {\n        if (originalMaterial.visible === false) {\n          material.visible = false;\n        } else {\n          material.visible = outlineParameters.visible !== void 0 ? outlineParameters.visible : true;\n        }\n\n        material.transparent = outlineParameters.alpha !== void 0 && outlineParameters.alpha < 1 ? true : originalMaterial.transparent;\n        if (outlineParameters.keepAlive !== void 0) cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n      } else {\n        material.transparent = originalMaterial.transparent;\n        material.visible = originalMaterial.visible;\n      }\n\n      if (originalMaterial.wireframe === true || originalMaterial.depthTest === false) material.visible = false;\n\n      if (originalMaterial.clippingPlanes) {\n        material.clipping = true;\n        material.clippingPlanes = originalMaterial.clippingPlanes;\n        material.clipIntersection = originalMaterial.clipIntersection;\n        material.clipShadows = originalMaterial.clipShadows;\n      }\n\n      material.version = originalMaterial.version;\n    }\n\n    function cleanupCache() {\n      let keys;\n      keys = Object.keys(originalMaterials);\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        originalMaterials[keys[i]] = void 0;\n      }\n\n      keys = Object.keys(originalOnBeforeRenders);\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        originalOnBeforeRenders[keys[i]] = void 0;\n      }\n\n      keys = Object.keys(cache);\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const key = keys[i];\n\n        if (cache[key].used === false) {\n          cache[key].count++;\n\n          if (cache[key].keepAlive === false && cache[key].count > removeThresholdCount) {\n            delete cache[key];\n          }\n        } else {\n          cache[key].used = false;\n          cache[key].count = 0;\n        }\n      }\n    }\n\n    this.render = function (scene, camera) {\n      if (this.enabled === false) {\n        renderer.render(scene, camera);\n        return;\n      }\n\n      const currentAutoClear = renderer.autoClear;\n      renderer.autoClear = this.autoClear;\n      renderer.render(scene, camera);\n      renderer.autoClear = currentAutoClear;\n      this.renderOutline(scene, camera);\n    };\n\n    this.renderOutline = function (scene, camera) {\n      const currentAutoClear = renderer.autoClear;\n      const currentSceneAutoUpdate = scene.matrixWorldAutoUpdate;\n      const currentSceneBackground = scene.background;\n      const currentShadowMapEnabled = renderer.shadowMap.enabled;\n      scene.matrixWorldAutoUpdate = false;\n      scene.background = null;\n      renderer.autoClear = false;\n      renderer.shadowMap.enabled = false;\n      scene.traverse(setOutlineMaterial);\n      renderer.render(scene, camera);\n      scene.traverse(restoreOriginalMaterial);\n      cleanupCache();\n      scene.matrixWorldAutoUpdate = currentSceneAutoUpdate;\n      scene.background = currentSceneBackground;\n      renderer.autoClear = currentAutoClear;\n      renderer.shadowMap.enabled = currentShadowMapEnabled;\n    };\n\n    this.autoClear = renderer.autoClear;\n    this.domElement = renderer.domElement;\n    this.shadowMap = renderer.shadowMap;\n\n    this.clear = function (color, depth, stencil) {\n      renderer.clear(color, depth, stencil);\n    };\n\n    this.getPixelRatio = function () {\n      return renderer.getPixelRatio();\n    };\n\n    this.setPixelRatio = function (value) {\n      renderer.setPixelRatio(value);\n    };\n\n    this.getSize = function (target) {\n      return renderer.getSize(target);\n    };\n\n    this.setSize = function (width, height, updateStyle) {\n      renderer.setSize(width, height, updateStyle);\n    };\n\n    this.setViewport = function (x, y, width, height) {\n      renderer.setViewport(x, y, width, height);\n    };\n\n    this.setScissor = function (x, y, width, height) {\n      renderer.setScissor(x, y, width, height);\n    };\n\n    this.setScissorTest = function (boolean) {\n      renderer.setScissorTest(boolean);\n    };\n\n    this.setRenderTarget = function (renderTarget) {\n      renderer.setRenderTarget(renderTarget);\n    };\n  }\n\n}\n\nexport { OutlineEffect };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/effects/OutlineEffect.js"],"names":["Color","ShaderMaterial","UniformsUtils","UniformsLib","BackSide","OutlineEffect","constructor","renderer","parameters","enabled","defaultThickness","defaultColor","fromArray","defaultAlpha","defaultKeepAlive","cache","removeThresholdCount","originalMaterials","originalOnBeforeRenders","uniformsOutline","outlineThickness","value","outlineColor","outlineAlpha","vertexShader","join","fragmentShader","createMaterial","type","uniforms","merge","side","getOutlineMaterialFromCache","originalMaterial","data","uuid","material","used","keepAlive","count","getOutlineMaterial","outlineMaterial","updateOutlineMaterial","isCompatible","object","geometry","hasNormals","attributes","normal","isMesh","setOutlineMaterial","Array","isArray","i","il","length","onBeforeRender","restoreOriginalMaterial","renderer2","scene","camera","updateUniforms","outlineParameters","userData","opacity","thickness","color","alpha","displacementMap","displacementScale","displacementBias","name","fog","toneMapped","premultipliedAlpha","visible","transparent","wireframe","depthTest","clippingPlanes","clipping","clipIntersection","clipShadows","version","cleanupCache","keys","Object","key","render","currentAutoClear","autoClear","renderOutline","currentSceneAutoUpdate","matrixWorldAutoUpdate","currentSceneBackground","background","currentShadowMapEnabled","shadowMap","traverse","domElement","clear","depth","stencil","getPixelRatio","setPixelRatio","getSize","target","setSize","width","height","updateStyle","setViewport","x","y","setScissor","setScissorTest","boolean","setRenderTarget","renderTarget"],"mappings":"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","sourcesContent":["import { Color, ShaderMaterial, UniformsUtils, UniformsLib, BackSide } from \"three\";\nclass OutlineEffect {\n  constructor(renderer, parameters = {}) {\n    this.enabled = true;\n    const defaultThickness = parameters.defaultThickness !== void 0 ? parameters.defaultThickness : 3e-3;\n    const defaultColor = new Color().fromArray(\n      parameters.defaultColor !== void 0 ? parameters.defaultColor : [0, 0, 0]\n    );\n    const defaultAlpha = parameters.defaultAlpha !== void 0 ? parameters.defaultAlpha : 1;\n    const defaultKeepAlive = parameters.defaultKeepAlive !== void 0 ? parameters.defaultKeepAlive : false;\n    const cache = {};\n    const removeThresholdCount = 60;\n    const originalMaterials = {};\n    const originalOnBeforeRenders = {};\n    const uniformsOutline = {\n      outlineThickness: { value: defaultThickness },\n      outlineColor: { value: defaultColor },\n      outlineAlpha: { value: defaultAlpha }\n    };\n    const vertexShader = [\n      \"#include <common>\",\n      \"#include <uv_pars_vertex>\",\n      \"#include <displacementmap_pars_vertex>\",\n      \"#include <fog_pars_vertex>\",\n      \"#include <morphtarget_pars_vertex>\",\n      \"#include <skinning_pars_vertex>\",\n      \"#include <logdepthbuf_pars_vertex>\",\n      \"#include <clipping_planes_pars_vertex>\",\n      \"uniform float outlineThickness;\",\n      \"vec4 calculateOutline( vec4 pos, vec3 normal, vec4 skinned ) {\",\n      \"\tfloat thickness = outlineThickness;\",\n      \"\tconst float ratio = 1.0;\",\n      // TODO: support outline thickness ratio for each vertex\n      \"\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + normal, 1.0 );\",\n      // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n      \"\tvec4 norm = normalize( pos - pos2 );\",\n      \"\treturn pos + norm * thickness * pos.w * ratio;\",\n      \"}\",\n      \"void main() {\",\n      \"\t#include <uv_vertex>\",\n      \"\t#include <beginnormal_vertex>\",\n      \"\t#include <morphnormal_vertex>\",\n      \"\t#include <skinbase_vertex>\",\n      \"\t#include <skinnormal_vertex>\",\n      \"\t#include <begin_vertex>\",\n      \"\t#include <morphtarget_vertex>\",\n      \"\t#include <skinning_vertex>\",\n      \"\t#include <displacementmap_vertex>\",\n      \"\t#include <project_vertex>\",\n      \"\tvec3 outlineNormal = - objectNormal;\",\n      // the outline material is always rendered with BackSide\n      \"\tgl_Position = calculateOutline( gl_Position, outlineNormal, vec4( transformed, 1.0 ) );\",\n      \"\t#include <logdepthbuf_vertex>\",\n      \"\t#include <clipping_planes_vertex>\",\n      \"\t#include <fog_vertex>\",\n      \"}\"\n    ].join(\"\\n\");\n    const fragmentShader = [\n      \"#include <common>\",\n      \"#include <fog_pars_fragment>\",\n      \"#include <logdepthbuf_pars_fragment>\",\n      \"#include <clipping_planes_pars_fragment>\",\n      \"uniform vec3 outlineColor;\",\n      \"uniform float outlineAlpha;\",\n      \"void main() {\",\n      \"\t#include <clipping_planes_fragment>\",\n      \"\t#include <logdepthbuf_fragment>\",\n      \"\tgl_FragColor = vec4( outlineColor, outlineAlpha );\",\n      \"\t#include <tonemapping_fragment>\",\n      \"\t#include <encodings_fragment>\",\n      \"\t#include <fog_fragment>\",\n      \"\t#include <premultiplied_alpha_fragment>\",\n      \"}\"\n    ].join(\"\\n\");\n    function createMaterial() {\n      return new ShaderMaterial({\n        type: \"OutlineEffect\",\n        uniforms: UniformsUtils.merge([UniformsLib[\"fog\"], UniformsLib[\"displacementmap\"], uniformsOutline]),\n        vertexShader,\n        fragmentShader,\n        side: BackSide\n      });\n    }\n    function getOutlineMaterialFromCache(originalMaterial) {\n      let data = cache[originalMaterial.uuid];\n      if (data === void 0) {\n        data = {\n          material: createMaterial(),\n          used: true,\n          keepAlive: defaultKeepAlive,\n          count: 0\n        };\n        cache[originalMaterial.uuid] = data;\n      }\n      data.used = true;\n      return data.material;\n    }\n    function getOutlineMaterial(originalMaterial) {\n      const outlineMaterial = getOutlineMaterialFromCache(originalMaterial);\n      originalMaterials[outlineMaterial.uuid] = originalMaterial;\n      updateOutlineMaterial(outlineMaterial, originalMaterial);\n      return outlineMaterial;\n    }\n    function isCompatible(object) {\n      const geometry = object.geometry;\n      const hasNormals = geometry !== void 0 && geometry.attributes.normal !== void 0;\n      return object.isMesh === true && object.material !== void 0 && hasNormals === true;\n    }\n    function setOutlineMaterial(object) {\n      if (isCompatible(object) === false)\n        return;\n      if (Array.isArray(object.material)) {\n        for (let i = 0, il = object.material.length; i < il; i++) {\n          object.material[i] = getOutlineMaterial(object.material[i]);\n        }\n      } else {\n        object.material = getOutlineMaterial(object.material);\n      }\n      originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n      object.onBeforeRender = onBeforeRender;\n    }\n    function restoreOriginalMaterial(object) {\n      if (isCompatible(object) === false)\n        return;\n      if (Array.isArray(object.material)) {\n        for (let i = 0, il = object.material.length; i < il; i++) {\n          object.material[i] = originalMaterials[object.material[i].uuid];\n        }\n      } else {\n        object.material = originalMaterials[object.material.uuid];\n      }\n      object.onBeforeRender = originalOnBeforeRenders[object.uuid];\n    }\n    function onBeforeRender(renderer2, scene, camera, geometry, material) {\n      const originalMaterial = originalMaterials[material.uuid];\n      if (originalMaterial === void 0)\n        return;\n      updateUniforms(material, originalMaterial);\n    }\n    function updateUniforms(material, originalMaterial) {\n      const outlineParameters = originalMaterial.userData.outlineParameters;\n      material.uniforms.outlineAlpha.value = originalMaterial.opacity;\n      if (outlineParameters !== void 0) {\n        if (outlineParameters.thickness !== void 0)\n          material.uniforms.outlineThickness.value = outlineParameters.thickness;\n        if (outlineParameters.color !== void 0)\n          material.uniforms.outlineColor.value.fromArray(outlineParameters.color);\n        if (outlineParameters.alpha !== void 0)\n          material.uniforms.outlineAlpha.value = outlineParameters.alpha;\n      }\n      if (originalMaterial.displacementMap) {\n        material.uniforms.displacementMap.value = originalMaterial.displacementMap;\n        material.uniforms.displacementScale.value = originalMaterial.displacementScale;\n        material.uniforms.displacementBias.value = originalMaterial.displacementBias;\n      }\n    }\n    function updateOutlineMaterial(material, originalMaterial) {\n      if (material.name === \"invisible\")\n        return;\n      const outlineParameters = originalMaterial.userData.outlineParameters;\n      material.fog = originalMaterial.fog;\n      material.toneMapped = originalMaterial.toneMapped;\n      material.premultipliedAlpha = originalMaterial.premultipliedAlpha;\n      material.displacementMap = originalMaterial.displacementMap;\n      if (outlineParameters !== void 0) {\n        if (originalMaterial.visible === false) {\n          material.visible = false;\n        } else {\n          material.visible = outlineParameters.visible !== void 0 ? outlineParameters.visible : true;\n        }\n        material.transparent = outlineParameters.alpha !== void 0 && outlineParameters.alpha < 1 ? true : originalMaterial.transparent;\n        if (outlineParameters.keepAlive !== void 0)\n          cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n      } else {\n        material.transparent = originalMaterial.transparent;\n        material.visible = originalMaterial.visible;\n      }\n      if (originalMaterial.wireframe === true || originalMaterial.depthTest === false)\n        material.visible = false;\n      if (originalMaterial.clippingPlanes) {\n        material.clipping = true;\n        material.clippingPlanes = originalMaterial.clippingPlanes;\n        material.clipIntersection = originalMaterial.clipIntersection;\n        material.clipShadows = originalMaterial.clipShadows;\n      }\n      material.version = originalMaterial.version;\n    }\n    function cleanupCache() {\n      let keys;\n      keys = Object.keys(originalMaterials);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        originalMaterials[keys[i]] = void 0;\n      }\n      keys = Object.keys(originalOnBeforeRenders);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        originalOnBeforeRenders[keys[i]] = void 0;\n      }\n      keys = Object.keys(cache);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const key = keys[i];\n        if (cache[key].used === false) {\n          cache[key].count++;\n          if (cache[key].keepAlive === false && cache[key].count > removeThresholdCount) {\n            delete cache[key];\n          }\n        } else {\n          cache[key].used = false;\n          cache[key].count = 0;\n        }\n      }\n    }\n    this.render = function(scene, camera) {\n      if (this.enabled === false) {\n        renderer.render(scene, camera);\n        return;\n      }\n      const currentAutoClear = renderer.autoClear;\n      renderer.autoClear = this.autoClear;\n      renderer.render(scene, camera);\n      renderer.autoClear = currentAutoClear;\n      this.renderOutline(scene, camera);\n    };\n    this.renderOutline = function(scene, camera) {\n      const currentAutoClear = renderer.autoClear;\n      const currentSceneAutoUpdate = scene.matrixWorldAutoUpdate;\n      const currentSceneBackground = scene.background;\n      const currentShadowMapEnabled = renderer.shadowMap.enabled;\n      scene.matrixWorldAutoUpdate = false;\n      scene.background = null;\n      renderer.autoClear = false;\n      renderer.shadowMap.enabled = false;\n      scene.traverse(setOutlineMaterial);\n      renderer.render(scene, camera);\n      scene.traverse(restoreOriginalMaterial);\n      cleanupCache();\n      scene.matrixWorldAutoUpdate = currentSceneAutoUpdate;\n      scene.background = currentSceneBackground;\n      renderer.autoClear = currentAutoClear;\n      renderer.shadowMap.enabled = currentShadowMapEnabled;\n    };\n    this.autoClear = renderer.autoClear;\n    this.domElement = renderer.domElement;\n    this.shadowMap = renderer.shadowMap;\n    this.clear = function(color, depth, stencil) {\n      renderer.clear(color, depth, stencil);\n    };\n    this.getPixelRatio = function() {\n      return renderer.getPixelRatio();\n    };\n    this.setPixelRatio = function(value) {\n      renderer.setPixelRatio(value);\n    };\n    this.getSize = function(target) {\n      return renderer.getSize(target);\n    };\n    this.setSize = function(width, height, updateStyle) {\n      renderer.setSize(width, height, updateStyle);\n    };\n    this.setViewport = function(x, y, width, height) {\n      renderer.setViewport(x, y, width, height);\n    };\n    this.setScissor = function(x, y, width, height) {\n      renderer.setScissor(x, y, width, height);\n    };\n    this.setScissorTest = function(boolean) {\n      renderer.setScissorTest(boolean);\n    };\n    this.setRenderTarget = function(renderTarget) {\n      renderer.setRenderTarget(renderTarget);\n    };\n  }\n}\nexport {\n  OutlineEffect\n};\n"]},"metadata":{},"sourceType":"module"}