{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Triangle, Vector3 } from \"three\";\n\nvar _face = /* @__PURE__ */new Triangle();\n\nvar _color = /* @__PURE__ */new Vector3();\n\nvar MeshSurfaceSampler = /*#__PURE__*/function () {\n  function MeshSurfaceSampler(mesh) {\n    _classCallCheck(this, MeshSurfaceSampler);\n\n    var geometry = mesh.geometry;\n\n    if (geometry.index) {\n      console.warn(\"THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.\");\n      geometry = geometry.toNonIndexed();\n    }\n\n    this.geometry = geometry;\n    this.randomFunction = Math.random;\n    this.positionAttribute = this.geometry.getAttribute(\"position\");\n    this.colorAttribute = this.geometry.getAttribute(\"color\");\n    this.weightAttribute = null;\n    this.distribution = null;\n  }\n\n  _createClass(MeshSurfaceSampler, [{\n    key: \"setWeightAttribute\",\n    value: function setWeightAttribute(name) {\n      this.weightAttribute = name ? this.geometry.getAttribute(name) : null;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var positionAttribute = this.positionAttribute;\n      var weightAttribute = this.weightAttribute;\n      var faceWeights = new Float32Array(positionAttribute.count / 3);\n\n      for (var i = 0; i < positionAttribute.count; i += 3) {\n        var faceWeight = 1;\n\n        if (weightAttribute) {\n          faceWeight = weightAttribute.getX(i) + weightAttribute.getX(i + 1) + weightAttribute.getX(i + 2);\n        }\n\n        _face.a.fromBufferAttribute(positionAttribute, i);\n\n        _face.b.fromBufferAttribute(positionAttribute, i + 1);\n\n        _face.c.fromBufferAttribute(positionAttribute, i + 2);\n\n        faceWeight *= _face.getArea();\n        faceWeights[i / 3] = faceWeight;\n      }\n\n      this.distribution = new Float32Array(positionAttribute.count / 3);\n      var cumulativeTotal = 0;\n\n      for (var _i = 0; _i < faceWeights.length; _i++) {\n        cumulativeTotal += faceWeights[_i];\n        this.distribution[_i] = cumulativeTotal;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setRandomGenerator\",\n    value: function setRandomGenerator(randomFunction) {\n      this.randomFunction = randomFunction;\n      return this;\n    }\n  }, {\n    key: \"sample\",\n    value: function sample(targetPosition, targetNormal, targetColor) {\n      var faceIndex = this.sampleFaceIndex();\n      return this.sampleFace(faceIndex, targetPosition, targetNormal, targetColor);\n    }\n  }, {\n    key: \"sampleFaceIndex\",\n    value: function sampleFaceIndex() {\n      var cumulativeTotal = this.distribution[this.distribution.length - 1];\n      return this.binarySearch(this.randomFunction() * cumulativeTotal);\n    }\n  }, {\n    key: \"binarySearch\",\n    value: function binarySearch(x) {\n      var dist = this.distribution;\n      var start = 0;\n      var end = dist.length - 1;\n      var index = -1;\n\n      while (start <= end) {\n        var mid = Math.ceil((start + end) / 2);\n\n        if (mid === 0 || dist[mid - 1] <= x && dist[mid] > x) {\n          index = mid;\n          break;\n        } else if (x < dist[mid]) {\n          end = mid - 1;\n        } else {\n          start = mid + 1;\n        }\n      }\n\n      return index;\n    }\n  }, {\n    key: \"sampleFace\",\n    value: function sampleFace(faceIndex, targetPosition, targetNormal, targetColor) {\n      var u = this.randomFunction();\n      var v = this.randomFunction();\n\n      if (u + v > 1) {\n        u = 1 - u;\n        v = 1 - v;\n      }\n\n      _face.a.fromBufferAttribute(this.positionAttribute, faceIndex * 3);\n\n      _face.b.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 1);\n\n      _face.c.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 2);\n\n      targetPosition.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n\n      if (targetNormal !== void 0) {\n        _face.getNormal(targetNormal);\n      }\n\n      if (targetColor !== void 0 && this.colorAttribute !== void 0) {\n        _face.a.fromBufferAttribute(this.colorAttribute, faceIndex * 3);\n\n        _face.b.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 1);\n\n        _face.c.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 2);\n\n        _color.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n\n        targetColor.r = _color.x;\n        targetColor.g = _color.y;\n        targetColor.b = _color.z;\n      }\n\n      return this;\n    }\n  }]);\n\n  return MeshSurfaceSampler;\n}();\n\nexport { MeshSurfaceSampler };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/math/MeshSurfaceSampler.js"],"names":["Triangle","Vector3","_face","_color","MeshSurfaceSampler","mesh","geometry","index","console","warn","toNonIndexed","randomFunction","Math","random","positionAttribute","getAttribute","colorAttribute","weightAttribute","distribution","name","faceWeights","Float32Array","count","i","faceWeight","getX","a","fromBufferAttribute","b","c","getArea","cumulativeTotal","length","targetPosition","targetNormal","targetColor","faceIndex","sampleFaceIndex","sampleFace","binarySearch","x","dist","start","end","mid","ceil","u","v","set","addScaledVector","getNormal","r","g","y","z"],"mappings":"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","sourcesContent":["import { Triangle, Vector3 } from \"three\";\nconst _face = /* @__PURE__ */ new Triangle();\nconst _color = /* @__PURE__ */ new Vector3();\nclass MeshSurfaceSampler {\n  constructor(mesh) {\n    let geometry = mesh.geometry;\n    if (geometry.index) {\n      console.warn(\"THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.\");\n      geometry = geometry.toNonIndexed();\n    }\n    this.geometry = geometry;\n    this.randomFunction = Math.random;\n    this.positionAttribute = this.geometry.getAttribute(\"position\");\n    this.colorAttribute = this.geometry.getAttribute(\"color\");\n    this.weightAttribute = null;\n    this.distribution = null;\n  }\n  setWeightAttribute(name) {\n    this.weightAttribute = name ? this.geometry.getAttribute(name) : null;\n    return this;\n  }\n  build() {\n    const positionAttribute = this.positionAttribute;\n    const weightAttribute = this.weightAttribute;\n    const faceWeights = new Float32Array(positionAttribute.count / 3);\n    for (let i = 0; i < positionAttribute.count; i += 3) {\n      let faceWeight = 1;\n      if (weightAttribute) {\n        faceWeight = weightAttribute.getX(i) + weightAttribute.getX(i + 1) + weightAttribute.getX(i + 2);\n      }\n      _face.a.fromBufferAttribute(positionAttribute, i);\n      _face.b.fromBufferAttribute(positionAttribute, i + 1);\n      _face.c.fromBufferAttribute(positionAttribute, i + 2);\n      faceWeight *= _face.getArea();\n      faceWeights[i / 3] = faceWeight;\n    }\n    this.distribution = new Float32Array(positionAttribute.count / 3);\n    let cumulativeTotal = 0;\n    for (let i = 0; i < faceWeights.length; i++) {\n      cumulativeTotal += faceWeights[i];\n      this.distribution[i] = cumulativeTotal;\n    }\n    return this;\n  }\n  setRandomGenerator(randomFunction) {\n    this.randomFunction = randomFunction;\n    return this;\n  }\n  sample(targetPosition, targetNormal, targetColor) {\n    const faceIndex = this.sampleFaceIndex();\n    return this.sampleFace(faceIndex, targetPosition, targetNormal, targetColor);\n  }\n  sampleFaceIndex() {\n    const cumulativeTotal = this.distribution[this.distribution.length - 1];\n    return this.binarySearch(this.randomFunction() * cumulativeTotal);\n  }\n  binarySearch(x) {\n    const dist = this.distribution;\n    let start = 0;\n    let end = dist.length - 1;\n    let index = -1;\n    while (start <= end) {\n      const mid = Math.ceil((start + end) / 2);\n      if (mid === 0 || dist[mid - 1] <= x && dist[mid] > x) {\n        index = mid;\n        break;\n      } else if (x < dist[mid]) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n    return index;\n  }\n  sampleFace(faceIndex, targetPosition, targetNormal, targetColor) {\n    let u = this.randomFunction();\n    let v = this.randomFunction();\n    if (u + v > 1) {\n      u = 1 - u;\n      v = 1 - v;\n    }\n    _face.a.fromBufferAttribute(this.positionAttribute, faceIndex * 3);\n    _face.b.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 1);\n    _face.c.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 2);\n    targetPosition.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n    if (targetNormal !== void 0) {\n      _face.getNormal(targetNormal);\n    }\n    if (targetColor !== void 0 && this.colorAttribute !== void 0) {\n      _face.a.fromBufferAttribute(this.colorAttribute, faceIndex * 3);\n      _face.b.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 1);\n      _face.c.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 2);\n      _color.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n      targetColor.r = _color.x;\n      targetColor.g = _color.y;\n      targetColor.b = _color.z;\n    }\n    return this;\n  }\n}\nexport {\n  MeshSurfaceSampler\n};\n"]},"metadata":{},"sourceType":"module"}