{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { strToU8, zipSync } from \"fflate\";\nimport { Mesh, MeshPhysicalMaterial } from \"three\";\n\nclass USDZExporter {\n  constructor() {\n    __publicField(this, \"PRECISION\", 7);\n\n    __publicField(this, \"materials\");\n\n    __publicField(this, \"textures\");\n\n    __publicField(this, \"files\");\n\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n\n  async parse(scene) {\n    const modelFileName = \"model.usda\";\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible(object => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = \"geometries/Geometry_\" + geometry.id + \".usd\";\n\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split(\"_\")[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(resolve => canvas == null ? void 0 : canvas.toBlob(resolve, isRGBA ? \"image/png\" : \"image/jpeg\", 1));\n\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    }\n\n    let offset = 0;\n\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n\n      if (file && typeof file.length === \"number\") {\n        offset = file.length;\n      }\n    }\n\n    return zipSync(this.files, {\n      level: 0\n    });\n  }\n\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== \"undefined\" && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && image instanceof OffscreenCanvas || typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext(\"2d\");\n      context == null ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n      if (color !== void 0) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context == null ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n\n        if (imagedata) {\n          const data = imagedata == null ? void 0 : imagedata.data;\n\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n\n          context == null ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n\n      return canvas;\n    }\n  }\n\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  } // Xform\n\n\n  buildXform(object, geometry, material) {\n    const name = \"Object_\" + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn(\"THREE.USDZExporter: USDZ does not support negative scales\", object);\n    }\n\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(array, 8)}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  } // Mesh\n\n\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n\n  buildMesh(geometry) {\n    const name = \"Geometry\";\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(\", \");\n  }\n\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      return geometry.index.array.join(\", \");\n    }\n\n    const array = [];\n    const length = geometry.attributes.position.count;\n\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n\n    return array.join(\", \");\n  }\n\n  buildVector3Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: Normals missing.\");\n      return Array(count).fill(\"(0, 0, 0)\").join(\", \");\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(\", \");\n  }\n\n  buildVector2Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: UVs missing.\");\n      return Array(count).fill(\"(0, 0)\").join(\", \");\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 2) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(\", \");\n  } // Materials\n\n\n  buildMaterials(materials) {\n    const array = [];\n\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n\n    return `def \"Materials\"\n{\n${array.join(\"\")}\n}\n`;\n  }\n\n  buildMaterial(material) {\n    const pad = \"            \";\n    const inputs = [];\n    const samplers = [];\n\n    if (material.map !== null) {\n      inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.map, \"diffuse\", material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n\n    if (material.emissiveMap !== null) {\n      inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.emissiveMap, \"emissive\"));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n\n    if (material.normalMap !== null) {\n      inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.normalMap, \"normal\"));\n    }\n\n    if (material.aoMap !== null) {\n      inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n      samplers.push(this.buildTexture(material, material.aoMap, \"occlusion\"));\n    }\n\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n      samplers.push(this.buildTexture(material, material.roughnessMap, \"roughness\"));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n      samplers.push(this.buildTexture(material, material.metalnessMap, \"metallic\"));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join(\"\\n\")}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join(\"\\n\")}\n    }\n`;\n  }\n\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? \"_\" + color.getHexString() : \"\");\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n\n}\n\nexport { USDZExporter };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/exporters/USDZExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","strToU8","zipSync","Mesh","MeshPhysicalMaterial","USDZExporter","constructor","materials","textures","files","parse","scene","modelFileName","output","buildHeader","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","texture","color","split","isRGBA","format","canvas","imageToCanvas","image","blob","Promise","resolve","toBlob","Uint8Array","arrayBuffer","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","extra","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { strToU8, zipSync } from \"fflate\";\nimport { Mesh, MeshPhysicalMaterial } from \"three\";\nclass USDZExporter {\n  constructor() {\n    __publicField(this, \"PRECISION\", 7);\n    __publicField(this, \"materials\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"files\");\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  async parse(scene) {\n    const modelFileName = \"model.usda\";\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible((object) => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = \"geometries/Geometry_\" + geometry.id + \".usd\";\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split(\"_\")[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(\n        (resolve) => canvas == null ? void 0 : canvas.toBlob(resolve, isRGBA ? \"image/png\" : \"image/jpeg\", 1)\n      );\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    }\n    let offset = 0;\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, { extra: { 12345: padding } }];\n      }\n      if (file && typeof file.length === \"number\") {\n        offset = file.length;\n      }\n    }\n    return zipSync(this.files, { level: 0 });\n  }\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== \"undefined\" && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && image instanceof OffscreenCanvas || typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext(\"2d\");\n      context == null ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      if (color !== void 0) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context == null ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n        if (imagedata) {\n          const data = imagedata == null ? void 0 : imagedata.data;\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n          context == null ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n      return canvas;\n    }\n  }\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  }\n  // Xform\n  buildXform(object, geometry, material) {\n    const name = \"Object_\" + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn(\"THREE.USDZExporter: USDZ does not support negative scales\", object);\n    }\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(\n      array,\n      8\n    )}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  }\n  // Mesh\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n  buildMesh(geometry) {\n    const name = \"Geometry\";\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(\", \");\n  }\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      return geometry.index.array.join(\", \");\n    }\n    const array = [];\n    const length = geometry.attributes.position.count;\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n    return array.join(\", \");\n  }\n  buildVector3Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: Normals missing.\");\n      return Array(count).fill(\"(0, 0, 0)\").join(\", \");\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(\n        `(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`\n      );\n    }\n    return array.join(\", \");\n  }\n  buildVector2Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: UVs missing.\");\n      return Array(count).fill(\"(0, 0)\").join(\", \");\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 2) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n    return array.join(\", \");\n  }\n  // Materials\n  buildMaterials(materials) {\n    const array = [];\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n    return `def \"Materials\"\n{\n${array.join(\"\")}\n}\n`;\n  }\n  buildMaterial(material) {\n    const pad = \"            \";\n    const inputs = [];\n    const samplers = [];\n    if (material.map !== null) {\n      inputs.push(\n        `${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.map, \"diffuse\", material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n    if (material.emissiveMap !== null) {\n      inputs.push(\n        `${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.emissiveMap, \"emissive\"));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n    if (material.normalMap !== null) {\n      inputs.push(\n        `${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.normalMap, \"normal\"));\n    }\n    if (material.aoMap !== null) {\n      inputs.push(\n        `${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`\n      );\n      samplers.push(this.buildTexture(material, material.aoMap, \"occlusion\"));\n    }\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(\n        `${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`\n      );\n      samplers.push(this.buildTexture(material, material.roughnessMap, \"roughness\"));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(\n        `${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`\n      );\n      samplers.push(this.buildTexture(material, material.metalnessMap, \"metallic\"));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join(\"\\n\")}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join(\"\\n\")}\n    }\n`;\n  }\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? \"_\" + color.getHexString() : \"\");\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n}\nexport {\n  USDZExporter\n};\n"]},"metadata":{},"sourceType":"module"}