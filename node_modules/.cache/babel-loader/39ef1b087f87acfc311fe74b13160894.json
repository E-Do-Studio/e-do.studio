{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useEffect, useMemo, useRef } from \"react\";\nimport { BoxBufferGeometry, Mesh, MeshBasicMaterial, TextureLoader } from \"three\";\nimport image from \"./test.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Photo = /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n\n  const textureRef = useRef(null);\n  const imageWidth = useRef(0);\n  const imageHeight = useRef(0);\n  useEffect(() => {\n    const loader = new TextureLoader();\n    loader.load(image, loadedTexture => {\n      // Mettre à jour la référence de texture avec l'image chargée\n      textureRef.current = loadedTexture; // Récupérer les dimensions de l'image chargée\n\n      imageWidth.current = loadedTexture.image.width;\n      imageHeight.current = loadedTexture.image.height;\n    }, undefined, error => {\n      console.error(\"Erreur lors du chargement de l'image\", error);\n    });\n  }, []); // Utiliser les dimensions de l'image chargée pour la taille du cube\n\n  const width = imageWidth.current;\n  const height = imageHeight.current;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [width, height, 0.1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      attach: \"material\",\n      map: textureRef.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}, \"rTjwj7iUzCsY3KpxJ4LE2E9Dono=\"));\n_c2 = Photo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["memo","useEffect","useMemo","useRef","BoxBufferGeometry","Mesh","MeshBasicMaterial","TextureLoader","image","Photo","textureRef","imageWidth","imageHeight","loader","load","loadedTexture","current","width","height","undefined","error","console"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,EAAmCC,MAAnC,QAAiD,OAAjD;AACA,SACEC,iBADF,EAEEC,IAFF,EAGEC,iBAHF,EAIEC,aAJF,QAKO,OALP;AAMA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,OAAO,MAAMC,KAAK,gBAAGT,IAAI,SAAC,MAAM;AAAA;;AAC9B,QAAMU,UAAU,GAAGP,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMQ,UAAU,GAAGR,MAAM,CAAC,CAAD,CAAzB;AACA,QAAMS,WAAW,GAAGT,MAAM,CAAC,CAAD,CAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,MAAM,GAAG,IAAIN,aAAJ,EAAf;AAEAM,IAAAA,MAAM,CAACC,IAAP,CACEN,KADF,EAEGO,aAAD,IAAmB;AACjB;AACAL,MAAAA,UAAU,CAACM,OAAX,GAAqBD,aAArB,CAFiB,CAIjB;;AACAJ,MAAAA,UAAU,CAACK,OAAX,GAAqBD,aAAa,CAACP,KAAd,CAAoBS,KAAzC;AACAL,MAAAA,WAAW,CAACI,OAAZ,GAAsBD,aAAa,CAACP,KAAd,CAAoBU,MAA1C;AACD,KATH,EAUEC,SAVF,EAWGC,KAAD,IAAW;AACTC,MAAAA,OAAO,CAACD,KAAR,CAAc,sCAAd,EAAsDA,KAAtD;AACD,KAbH;AAeD,GAlBQ,EAkBN,EAlBM,CAAT,CAL8B,CAyB9B;;AACA,QAAMH,KAAK,GAAGN,UAAU,CAACK,OAAzB;AACA,QAAME,MAAM,GAAGN,WAAW,CAACI,OAA3B;AAEA,sBACE;AAAA,4BACE;AAAmB,MAAA,IAAI,EAAE,CAACC,KAAD,EAAQC,MAAR,EAAgB,GAAhB;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAmB,MAAA,MAAM,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAER,UAAU,CAACM;AAArD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAnCwB,kCAAlB;MAAMP,K","sourcesContent":["import { memo, useEffect, useMemo, useRef } from \"react\";\nimport {\n  BoxBufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  TextureLoader,\n} from \"three\";\nimport image from \"./test.png\";\n\nexport const Photo = memo(() => {\n  const textureRef = useRef(null);\n  const imageWidth = useRef(0);\n  const imageHeight = useRef(0);\n\n  useEffect(() => {\n    const loader = new TextureLoader();\n\n    loader.load(\n      image,\n      (loadedTexture) => {\n        // Mettre à jour la référence de texture avec l'image chargée\n        textureRef.current = loadedTexture;\n\n        // Récupérer les dimensions de l'image chargée\n        imageWidth.current = loadedTexture.image.width;\n        imageHeight.current = loadedTexture.image.height;\n      },\n      undefined,\n      (error) => {\n        console.error(\"Erreur lors du chargement de l'image\", error);\n      }\n    );\n  }, []);\n\n  // Utiliser les dimensions de l'image chargée pour la taille du cube\n  const width = imageWidth.current;\n  const height = imageHeight.current;\n\n  return (\n    <mesh>\n      <boxBufferGeometry args={[width, height, 0.1]} />\n      <meshBasicMaterial attach=\"material\" map={textureRef.current} />\n    </mesh>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}