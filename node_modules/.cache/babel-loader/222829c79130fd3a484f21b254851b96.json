{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Object3D } from \"three\";\nimport { XRHandPrimitiveModel } from \"./XRHandPrimitiveModel.js\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\n\nvar XRHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRHandModel, _Object3D);\n\n  var _super = _createSuper(XRHandModel);\n\n  function XRHandModel(controller) {\n    var _this;\n\n    _classCallCheck(this, XRHandModel);\n\n    _this = _super.call(this);\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    return _this;\n  }\n\n  _createClass(XRHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }]);\n\n  return XRHandModel;\n}(Object3D);\n\nvar XRHandModelFactory = /*#__PURE__*/function () {\n  function XRHandModelFactory() {\n    _classCallCheck(this, XRHandModelFactory);\n\n    this.path = null;\n  }\n\n  _createClass(XRHandModelFactory, [{\n    key: \"setPath\",\n    value: function setPath(path) {\n      this.path = path;\n      return this;\n    }\n  }, {\n    key: \"createHandModel\",\n    value: function createHandModel(controller, profile) {\n      var _this2 = this;\n\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener(\"connected\", function (event) {\n        var xrInputSource = event.data;\n\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.xrInputSource = xrInputSource;\n\n          if (profile === void 0 || profile === \"spheres\") {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: \"sphere\"\n            });\n          } else if (profile === \"boxes\") {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: \"box\"\n            });\n          } else if (profile === \"mesh\") {\n            handModel.motionController = new XRHandMeshModel(handModel, controller, _this2.path, xrInputSource.handedness);\n          }\n        }\n      });\n      controller.addEventListener(\"disconnected\", function () {});\n      return handModel;\n    }\n  }]);\n\n  return XRHandModelFactory;\n}();\n\nexport { XRHandModelFactory };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"names":["Object3D","XRHandPrimitiveModel","XRHandMeshModel","XRHandModel","controller","motionController","envMap","mesh","force","updateMesh","XRHandModelFactory","path","profile","handModel","addEventListener","event","xrInputSource","data","hand","handedness","primitive"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,eAAT,QAAgC,sBAAhC;;IACMC,W;;;;;AACJ,uBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACtB;AACA,UAAKA,UAAL,GAAkBA,UAAlB;AACA,UAAKC,gBAAL,GAAwB,IAAxB;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,IAAL,GAAY,IAAZ;AALsB;AAMvB;;;;WACD,2BAAkBC,KAAlB,EAAyB;AACvB,yFAAwBA,KAAxB;;AACA,UAAI,KAAKH,gBAAT,EAA2B;AACzB,aAAKA,gBAAL,CAAsBI,UAAtB;AACD;AACF;;;;EAbuBT,Q;;IAepBU,kB;AACJ,gCAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAZ;AACD;;;;WACD,iBAAQA,IAAR,EAAc;AACZ,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACD;;;WACD,yBAAgBP,UAAhB,EAA4BQ,OAA5B,EAAqC;AAAA;;AACnC,UAAMC,SAAS,GAAG,IAAIV,WAAJ,CAAgBC,UAAhB,CAAlB;AACAA,MAAAA,UAAU,CAACU,gBAAX,CAA4B,WAA5B,EAAyC,UAACC,KAAD,EAAW;AAClD,YAAMC,aAAa,GAAGD,KAAK,CAACE,IAA5B;;AACA,YAAID,aAAa,CAACE,IAAd,IAAsB,CAACL,SAAS,CAACR,gBAArC,EAAuD;AACrDQ,UAAAA,SAAS,CAACG,aAAV,GAA0BA,aAA1B;;AACA,cAAIJ,OAAO,KAAK,KAAK,CAAjB,IAAsBA,OAAO,KAAK,SAAtC,EAAiD;AAC/CC,YAAAA,SAAS,CAACR,gBAAV,GAA6B,IAAIJ,oBAAJ,CAC3BY,SAD2B,EAE3BT,UAF2B,EAG3B,MAAI,CAACO,IAHsB,EAI3BK,aAAa,CAACG,UAJa,EAK3B;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAL2B,CAA7B;AAOD,WARD,MAQO,IAAIR,OAAO,KAAK,OAAhB,EAAyB;AAC9BC,YAAAA,SAAS,CAACR,gBAAV,GAA6B,IAAIJ,oBAAJ,CAC3BY,SAD2B,EAE3BT,UAF2B,EAG3B,MAAI,CAACO,IAHsB,EAI3BK,aAAa,CAACG,UAJa,EAK3B;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAL2B,CAA7B;AAOD,WARM,MAQA,IAAIR,OAAO,KAAK,MAAhB,EAAwB;AAC7BC,YAAAA,SAAS,CAACR,gBAAV,GAA6B,IAAIH,eAAJ,CAAoBW,SAApB,EAA+BT,UAA/B,EAA2C,MAAI,CAACO,IAAhD,EAAsDK,aAAa,CAACG,UAApE,CAA7B;AACD;AACF;AACF,OAxBD;AAyBAf,MAAAA,UAAU,CAACU,gBAAX,CAA4B,cAA5B,EAA4C,YAAM,CACjD,CADD;AAEA,aAAOD,SAAP;AACD;;;;;;AAEH,SACEH,kBADF","sourcesContent":["import { Object3D } from \"three\";\nimport { XRHandPrimitiveModel } from \"./XRHandPrimitiveModel.js\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n}\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener(\"connected\", (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource;\n        if (profile === void 0 || profile === \"spheres\") {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: \"sphere\" }\n          );\n        } else if (profile === \"boxes\") {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: \"box\" }\n          );\n        } else if (profile === \"mesh\") {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n    });\n    return handModel;\n  }\n}\nexport {\n  XRHandModelFactory\n};\n"]},"metadata":{},"sourceType":"module"}