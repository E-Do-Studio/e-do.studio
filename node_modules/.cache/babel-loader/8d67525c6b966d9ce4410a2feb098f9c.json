{"ast":null,"code":"import { Mesh, IcosahedronGeometry, ShaderMaterial, DoubleSide } from \"three\";\n\nconst isCubeTexture = def => def && def.isCubeTexture;\n\nclass GroundProjectedEnv extends Mesh {\n  constructor(texture, options) {\n    var _a, _b;\n\n    const isCubeMap = isCubeTexture(texture);\n    const w = (_b = isCubeMap ? (_a = texture.image[0]) == null ? void 0 : _a.width : texture.image.width) != null ? _b : 1024;\n    const cubeSize = w / 4;\n\n    const _lodMax = Math.floor(Math.log2(cubeSize));\n\n    const _cubeSize = Math.pow(2, _lodMax);\n\n    const width = 3 * Math.max(_cubeSize, 16 * 7);\n    const height = 4 * _cubeSize;\n    const defines = [isCubeMap ? \"#define ENVMAP_TYPE_CUBE\" : \"\", `#define CUBEUV_TEXEL_WIDTH ${1 / width}`, `#define CUBEUV_TEXEL_HEIGHT ${1 / height}`, `#define CUBEUV_MAX_MIP ${_lodMax}.0`];\n    const vertexShader =\n    /* glsl */\n    `\n        varying vec3 vWorldPosition;\n        void main() \n        {\n            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\n            vWorldPosition = worldPosition.xyz;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n        `;\n    const fragmentShader = defines.join(\"\\n\") +\n    /* glsl */\n    `\n        #define ENVMAP_TYPE_CUBE_UV\n        varying vec3 vWorldPosition;\n        uniform float radius;\n        uniform float height;\n        uniform float angle;\n        #ifdef ENVMAP_TYPE_CUBE\n            uniform samplerCube map;\n        #else\n            uniform sampler2D map;\n        #endif\n        // From: https://www.shadertoy.com/view/4tsBD7\n        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \n        {\n            float d = dot ( rd, n );\n            \n            if( d > 0.0 ) { return 1e6; }\n            \n            vec3  o = ro - c;\n            float t = - dot( n, o ) / d;\n            vec3  q = o + rd * t;\n            \n            return ( dot( q, q ) < r * r ) ? t : 1e6;\n        }\n        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\n        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) \n        {\n            vec3 oc = ro - ce;\n            float b = dot( oc, rd );\n            float c = dot( oc, oc ) - ra * ra;\n            float h = b * b - c;\n            \n            if( h < 0.0 ) { return -1.0; }\n            \n            h = sqrt( h );\n            \n            return - b + h;\n        }\n        vec3 project() \n        {\n            vec3 p = normalize( vWorldPosition );\n            vec3 camPos = cameraPosition;\n            camPos.y -= height;\n            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\n            if( intersection > 0.0 ) {\n                \n                vec3 h = vec3( 0.0, - height, 0.0 );\n                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\n                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;\n            } else {\n                p = vec3( 0.0, 1.0, 0.0 );\n            }\n            return p;\n        }\n        #include <common>\n        #include <cube_uv_reflection_fragment>\n        void main() \n        {\n            vec3 projectedWorldPosition = project();\n            \n            #ifdef ENVMAP_TYPE_CUBE\n                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\n            #else\n                vec3 direction = normalize( projectedWorldPosition );\n                vec2 uv = equirectUv( direction );\n                vec3 outcolor = texture2D( map, uv ).rgb;\n            #endif\n            gl_FragColor = vec4( outcolor, 1.0 );\n            #include <tonemapping_fragment>\n            #include <encodings_fragment>\n        }\n        `;\n    const uniforms = {\n      map: {\n        value: texture\n      },\n      height: {\n        value: (options == null ? void 0 : options.height) || 15\n      },\n      radius: {\n        value: (options == null ? void 0 : options.radius) || 100\n      }\n    };\n    const geometry = new IcosahedronGeometry(1, 16);\n    const material = new ShaderMaterial({\n      uniforms,\n      fragmentShader,\n      vertexShader,\n      side: DoubleSide\n    });\n    super(geometry, material);\n  }\n\n  set radius(radius) {\n    this.material.uniforms.radius.value = radius;\n  }\n\n  get radius() {\n    return this.material.uniforms.radius.value;\n  }\n\n  set height(height) {\n    this.material.uniforms.height.value = height;\n  }\n\n  get height() {\n    return this.material.uniforms.height.value;\n  }\n\n}\n\nexport { GroundProjectedEnv };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/objects/GroundProjectedEnv.js"],"names":["Mesh","IcosahedronGeometry","ShaderMaterial","DoubleSide","isCubeTexture","def","GroundProjectedEnv","constructor","texture","options","_a","_b","isCubeMap","w","image","width","cubeSize","_lodMax","Math","floor","log2","_cubeSize","pow","max","height","defines","vertexShader","fragmentShader","join","uniforms","map","value","radius","geometry","material","side"],"mappings":"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","sourcesContent":["import { Mesh, IcosahedronGeometry, ShaderMaterial, DoubleSide } from \"three\";\nconst isCubeTexture = (def) => def && def.isCubeTexture;\nclass GroundProjectedEnv extends Mesh {\n  constructor(texture, options) {\n    var _a, _b;\n    const isCubeMap = isCubeTexture(texture);\n    const w = (_b = isCubeMap ? (_a = texture.image[0]) == null ? void 0 : _a.width : texture.image.width) != null ? _b : 1024;\n    const cubeSize = w / 4;\n    const _lodMax = Math.floor(Math.log2(cubeSize));\n    const _cubeSize = Math.pow(2, _lodMax);\n    const width = 3 * Math.max(_cubeSize, 16 * 7);\n    const height = 4 * _cubeSize;\n    const defines = [\n      isCubeMap ? \"#define ENVMAP_TYPE_CUBE\" : \"\",\n      `#define CUBEUV_TEXEL_WIDTH ${1 / width}`,\n      `#define CUBEUV_TEXEL_HEIGHT ${1 / height}`,\n      `#define CUBEUV_MAX_MIP ${_lodMax}.0`\n    ];\n    const vertexShader = (\n      /* glsl */\n      `\n        varying vec3 vWorldPosition;\n        void main() \n        {\n            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\n            vWorldPosition = worldPosition.xyz;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n        `\n    );\n    const fragmentShader = defines.join(\"\\n\") + /* glsl */\n    `\n        #define ENVMAP_TYPE_CUBE_UV\n        varying vec3 vWorldPosition;\n        uniform float radius;\n        uniform float height;\n        uniform float angle;\n        #ifdef ENVMAP_TYPE_CUBE\n            uniform samplerCube map;\n        #else\n            uniform sampler2D map;\n        #endif\n        // From: https://www.shadertoy.com/view/4tsBD7\n        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \n        {\n            float d = dot ( rd, n );\n            \n            if( d > 0.0 ) { return 1e6; }\n            \n            vec3  o = ro - c;\n            float t = - dot( n, o ) / d;\n            vec3  q = o + rd * t;\n            \n            return ( dot( q, q ) < r * r ) ? t : 1e6;\n        }\n        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\n        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) \n        {\n            vec3 oc = ro - ce;\n            float b = dot( oc, rd );\n            float c = dot( oc, oc ) - ra * ra;\n            float h = b * b - c;\n            \n            if( h < 0.0 ) { return -1.0; }\n            \n            h = sqrt( h );\n            \n            return - b + h;\n        }\n        vec3 project() \n        {\n            vec3 p = normalize( vWorldPosition );\n            vec3 camPos = cameraPosition;\n            camPos.y -= height;\n            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\n            if( intersection > 0.0 ) {\n                \n                vec3 h = vec3( 0.0, - height, 0.0 );\n                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\n                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;\n            } else {\n                p = vec3( 0.0, 1.0, 0.0 );\n            }\n            return p;\n        }\n        #include <common>\n        #include <cube_uv_reflection_fragment>\n        void main() \n        {\n            vec3 projectedWorldPosition = project();\n            \n            #ifdef ENVMAP_TYPE_CUBE\n                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\n            #else\n                vec3 direction = normalize( projectedWorldPosition );\n                vec2 uv = equirectUv( direction );\n                vec3 outcolor = texture2D( map, uv ).rgb;\n            #endif\n            gl_FragColor = vec4( outcolor, 1.0 );\n            #include <tonemapping_fragment>\n            #include <encodings_fragment>\n        }\n        `;\n    const uniforms = {\n      map: { value: texture },\n      height: { value: (options == null ? void 0 : options.height) || 15 },\n      radius: { value: (options == null ? void 0 : options.radius) || 100 }\n    };\n    const geometry = new IcosahedronGeometry(1, 16);\n    const material = new ShaderMaterial({\n      uniforms,\n      fragmentShader,\n      vertexShader,\n      side: DoubleSide\n    });\n    super(geometry, material);\n  }\n  set radius(radius) {\n    this.material.uniforms.radius.value = radius;\n  }\n  get radius() {\n    return this.material.uniforms.radius.value;\n  }\n  set height(height) {\n    this.material.uniforms.height.value = height;\n  }\n  get height() {\n    return this.material.uniforms.height.value;\n  }\n}\nexport {\n  GroundProjectedEnv\n};\n"]},"metadata":{},"sourceType":"module"}