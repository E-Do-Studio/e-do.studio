{"ast":null,"code":"import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from \"three\";\nimport { CSMFrustum } from \"./CSMFrustum.js\";\nimport { CSMShader } from \"./CSMShader.js\";\n\nconst _cameraToLightMatrix = /* @__PURE__ */new Matrix4();\n\nconst _lightSpaceFrustum = /* @__PURE__ */new CSMFrustum();\n\nconst _center = /* @__PURE__ */new Vector3();\n\nconst _bbox = /* @__PURE__ */new Box3();\n\nconst _uniformArray = [];\nconst _logArray = [];\n\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 1e5;\n    this.mode = data.mode || \"practical\";\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 1e-6;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2e3;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = /* @__PURE__ */new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(16777215, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i];\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2);\n\n      if (this.fade) {\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n\n    switch (this.mode) {\n      case \"uniform\":\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case \"logarithmic\":\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case \"practical\":\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n\n      case \"custom\":\n        if (this.customSplitsCallback === void 0) console.error(\"CSM: Custom split scheme callback not defined.\");\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n\n    function uniformSplit(amount, near, far2, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far2 - near) * i / amount) / far2);\n      }\n\n      target.push(1);\n    }\n\n    function logarithmicSplit(amount, near, far2, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far2 / near) ** (i / amount) / far2);\n      }\n\n      target.push(1);\n    }\n\n    function practicalSplit(amount, near, far2, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far2, _logArray);\n      uniformSplit(amount, near, far2, _uniformArray);\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n\n      target.push(1);\n    }\n  }\n\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n\n      _bbox.makeEmpty();\n\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n\n        _bbox.expandByPoint(farVerts[j]);\n      }\n\n      _bbox.getCenter(_center);\n\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n\n    if (this.fade) {\n      material.defines.CSM_FADE = \"\";\n    }\n\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n\n    material.onBeforeCompile = function (shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n\n    shaders.set(material, null);\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n\n      if (!this.fade && \"CSM_FADE\" in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !(\"CSM_FADE\" in material.defines)) {\n        material.defines.CSM_FADE = \"\";\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n\n    target.length = this.breaks.length;\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n\n}\n\nexport { CSM };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/csm/CSM.js"],"names":["Matrix4","Vector3","Box3","DirectionalLight","MathUtils","ShaderChunk","Vector2","CSMFrustum","CSMShader","_cameraToLightMatrix","_lightSpaceFrustum","_center","_bbox","_uniformArray","_logArray","CSM","constructor","data","camera","parent","cascades","maxFar","mode","shadowMapSize","shadowBias","lightDirection","normalize","lightIntensity","lightNear","lightFar","lightMargin","customSplitsCallback","fade","mainFrustum","frustums","breaks","lights","shaders","Map","createLights","updateFrustums","injectInclude","i","light","castShadow","shadow","mapSize","width","height","near","far","bias","add","target","push","initCascades","updateProjectionMatrix","setFromProjectionMatrix","projectionMatrix","split","updateShadowBounds","length","shadowCam","frustum","nearVerts","vertices","farVerts","point1","point2","distanceTo","squaredBBWidth","Math","max","linearDepth","z","margin","pow","left","right","top","bottom","getBreaks","min","uniformSplit","logarithmicSplit","practicalSplit","console","error","amount","far2","lambda","lerp","update","texelWidth","texelHeight","updateMatrixWorld","multiplyMatrices","matrixWorldInverse","matrixWorld","toSpace","makeEmpty","j","expandByPoint","getCenter","x","floor","y","applyMatrix4","position","copy","lights_fragment_begin","lights_pars_begin","setupMaterial","material","defines","USE_CSM","CSM_CASCADES","CSM_FADE","breaksVec2","scope","onBeforeCompile","shader","getExtendedBreaks","uniforms","CSM_cascades","value","cameraNear","shadowFar","set","updateUniforms","forEach","needsUpdate","prev","remove","dispose","clear"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,gBAAjC,EAAmDC,SAAnD,EAA8DC,WAA9D,EAA2EC,OAA3E,QAA0F,OAA1F;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,gBAA1B;;AACA,MAAMC,oBAAoB,GAAG,eAAgB,IAAIT,OAAJ,EAA7C;;AACA,MAAMU,kBAAkB,GAAG,eAAgB,IAAIH,UAAJ,EAA3C;;AACA,MAAMI,OAAO,GAAG,eAAgB,IAAIV,OAAJ,EAAhC;;AACA,MAAMW,KAAK,GAAG,eAAgB,IAAIV,IAAJ,EAA9B;;AACA,MAAMW,aAAa,GAAG,EAAtB;AACA,MAAMC,SAAS,GAAG,EAAlB;;AACA,MAAMC,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChBA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,SAAKC,MAAL,GAAcD,IAAI,CAACC,MAAnB;AACA,SAAKC,MAAL,GAAcF,IAAI,CAACE,MAAnB;AACA,SAAKC,QAAL,GAAgBH,IAAI,CAACG,QAAL,IAAiB,CAAjC;AACA,SAAKC,MAAL,GAAcJ,IAAI,CAACI,MAAL,IAAe,GAA7B;AACA,SAAKC,IAAL,GAAYL,IAAI,CAACK,IAAL,IAAa,WAAzB;AACA,SAAKC,aAAL,GAAqBN,IAAI,CAACM,aAAL,IAAsB,IAA3C;AACA,SAAKC,UAAL,GAAkBP,IAAI,CAACO,UAAL,IAAmB,IAArC;AACA,SAAKC,cAAL,GAAsBR,IAAI,CAACQ,cAAL,IAAuB,IAAIxB,OAAJ,CAAY,CAAZ,EAAe,CAAC,CAAhB,EAAmB,CAAnB,EAAsByB,SAAtB,EAA7C;AACA,SAAKC,cAAL,GAAsBV,IAAI,CAACU,cAAL,IAAuB,CAA7C;AACA,SAAKC,SAAL,GAAiBX,IAAI,CAACW,SAAL,IAAkB,CAAnC;AACA,SAAKC,QAAL,GAAgBZ,IAAI,CAACY,QAAL,IAAiB,GAAjC;AACA,SAAKC,WAAL,GAAmBb,IAAI,CAACa,WAAL,IAAoB,GAAvC;AACA,SAAKC,oBAAL,GAA4Bd,IAAI,CAACc,oBAAjC;AACA,SAAKC,IAAL,GAAY,KAAZ;AACA,SAAKC,WAAL,GAAmB,IAAI1B,UAAJ,EAAnB;AACA,SAAK2B,QAAL,GAAgB,EAAhB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,eAAgB,IAAIC,GAAJ,EAA/B;AACA,SAAKC,YAAL;AACA,SAAKC,cAAL;AACA,SAAKC,aAAL;AACD;;AACDF,EAAAA,YAAY,GAAG;AACb,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKtB,QAAzB,EAAmCsB,CAAC,EAApC,EAAwC;AACtC,YAAMC,KAAK,GAAG,IAAIxC,gBAAJ,CAAqB,QAArB,EAA+B,KAAKwB,cAApC,CAAd;AACAgB,MAAAA,KAAK,CAACC,UAAN,GAAmB,IAAnB;AACAD,MAAAA,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBC,KAArB,GAA6B,KAAKxB,aAAlC;AACAoB,MAAAA,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBE,MAArB,GAA8B,KAAKzB,aAAnC;AACAoB,MAAAA,KAAK,CAACE,MAAN,CAAa3B,MAAb,CAAoB+B,IAApB,GAA2B,KAAKrB,SAAhC;AACAe,MAAAA,KAAK,CAACE,MAAN,CAAa3B,MAAb,CAAoBgC,GAApB,GAA0B,KAAKrB,QAA/B;AACAc,MAAAA,KAAK,CAACE,MAAN,CAAaM,IAAb,GAAoB,KAAK3B,UAAzB;AACA,WAAKL,MAAL,CAAYiC,GAAZ,CAAgBT,KAAhB;AACA,WAAKxB,MAAL,CAAYiC,GAAZ,CAAgBT,KAAK,CAACU,MAAtB;AACA,WAAKjB,MAAL,CAAYkB,IAAZ,CAAiBX,KAAjB;AACD;AACF;;AACDY,EAAAA,YAAY,GAAG;AACb,UAAMrC,MAAM,GAAG,KAAKA,MAApB;AACAA,IAAAA,MAAM,CAACsC,sBAAP;AACA,SAAKvB,WAAL,CAAiBwB,uBAAjB,CAAyCvC,MAAM,CAACwC,gBAAhD,EAAkE,KAAKrC,MAAvE;AACA,SAAKY,WAAL,CAAiB0B,KAAjB,CAAuB,KAAKxB,MAA5B,EAAoC,KAAKD,QAAzC;AACD;;AACD0B,EAAAA,kBAAkB,GAAG;AACnB,UAAM1B,QAAQ,GAAG,KAAKA,QAAtB;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAAC2B,MAA7B,EAAqCnB,CAAC,EAAtC,EAA0C;AACxC,YAAMC,KAAK,GAAG,KAAKP,MAAL,CAAYM,CAAZ,CAAd;AACA,YAAMoB,SAAS,GAAGnB,KAAK,CAACE,MAAN,CAAa3B,MAA/B;AACA,YAAM6C,OAAO,GAAG,KAAK7B,QAAL,CAAcQ,CAAd,CAAhB;AACA,YAAMsB,SAAS,GAAGD,OAAO,CAACE,QAAR,CAAiBhB,IAAnC;AACA,YAAMiB,QAAQ,GAAGH,OAAO,CAACE,QAAR,CAAiBf,GAAlC;AACA,YAAMiB,MAAM,GAAGD,QAAQ,CAAC,CAAD,CAAvB;AACA,UAAIE,MAAJ;;AACA,UAAID,MAAM,CAACE,UAAP,CAAkBH,QAAQ,CAAC,CAAD,CAA1B,IAAiCC,MAAM,CAACE,UAAP,CAAkBL,SAAS,CAAC,CAAD,CAA3B,CAArC,EAAsE;AACpEI,QAAAA,MAAM,GAAGF,QAAQ,CAAC,CAAD,CAAjB;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,GAAGJ,SAAS,CAAC,CAAD,CAAlB;AACD;;AACD,UAAIM,cAAc,GAAGH,MAAM,CAACE,UAAP,CAAkBD,MAAlB,CAArB;;AACA,UAAI,KAAKpC,IAAT,EAAe;AACb,cAAMd,MAAM,GAAG,KAAKA,MAApB;AACA,cAAMgC,GAAG,GAAGqB,IAAI,CAACC,GAAL,CAAStD,MAAM,CAACgC,GAAhB,EAAqB,KAAK7B,MAA1B,CAAZ;AACA,cAAMoD,WAAW,GAAGV,OAAO,CAACE,QAAR,CAAiBf,GAAjB,CAAqB,CAArB,EAAwBwB,CAAxB,IAA6BxB,GAAG,GAAGhC,MAAM,CAAC+B,IAA1C,CAApB;AACA,cAAM0B,MAAM,GAAG,OAAOJ,IAAI,CAACK,GAAL,CAASH,WAAT,EAAsB,CAAtB,CAAP,IAAmCvB,GAAG,GAAGhC,MAAM,CAAC+B,IAAhD,CAAf;AACAqB,QAAAA,cAAc,IAAIK,MAAlB;AACD;;AACDb,MAAAA,SAAS,CAACe,IAAV,GAAiB,CAACP,cAAD,GAAkB,CAAnC;AACAR,MAAAA,SAAS,CAACgB,KAAV,GAAkBR,cAAc,GAAG,CAAnC;AACAR,MAAAA,SAAS,CAACiB,GAAV,GAAgBT,cAAc,GAAG,CAAjC;AACAR,MAAAA,SAAS,CAACkB,MAAV,GAAmB,CAACV,cAAD,GAAkB,CAArC;AACAR,MAAAA,SAAS,CAACN,sBAAV;AACD;AACF;;AACDyB,EAAAA,SAAS,GAAG;AACV,UAAM/D,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgC,GAAG,GAAGqB,IAAI,CAACW,GAAL,CAAShE,MAAM,CAACgC,GAAhB,EAAqB,KAAK7B,MAA1B,CAAZ;AACA,SAAKc,MAAL,CAAY0B,MAAZ,GAAqB,CAArB;;AACA,YAAQ,KAAKvC,IAAb;AACE,WAAK,SAAL;AACE6D,QAAAA,YAAY,CAAC,KAAK/D,QAAN,EAAgBF,MAAM,CAAC+B,IAAvB,EAA6BC,GAA7B,EAAkC,KAAKf,MAAvC,CAAZ;AACA;;AACF,WAAK,aAAL;AACEiD,QAAAA,gBAAgB,CAAC,KAAKhE,QAAN,EAAgBF,MAAM,CAAC+B,IAAvB,EAA6BC,GAA7B,EAAkC,KAAKf,MAAvC,CAAhB;AACA;;AACF,WAAK,WAAL;AACEkD,QAAAA,cAAc,CAAC,KAAKjE,QAAN,EAAgBF,MAAM,CAAC+B,IAAvB,EAA6BC,GAA7B,EAAkC,GAAlC,EAAuC,KAAKf,MAA5C,CAAd;AACA;;AACF,WAAK,QAAL;AACE,YAAI,KAAKJ,oBAAL,KAA8B,KAAK,CAAvC,EACEuD,OAAO,CAACC,KAAR,CAAc,gDAAd;AACF,aAAKxD,oBAAL,CAA0B,KAAKX,QAA/B,EAAyCF,MAAM,CAAC+B,IAAhD,EAAsDC,GAAtD,EAA2D,KAAKf,MAAhE;AACA;AAdJ;;AAgBA,aAASgD,YAAT,CAAsBK,MAAtB,EAA8BvC,IAA9B,EAAoCwC,IAApC,EAA0CpC,MAA1C,EAAkD;AAChD,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8C,MAApB,EAA4B9C,CAAC,EAA7B,EAAiC;AAC/BW,QAAAA,MAAM,CAACC,IAAP,CAAY,CAACL,IAAI,GAAG,CAACwC,IAAI,GAAGxC,IAAR,IAAgBP,CAAhB,GAAoB8C,MAA5B,IAAsCC,IAAlD;AACD;;AACDpC,MAAAA,MAAM,CAACC,IAAP,CAAY,CAAZ;AACD;;AACD,aAAS8B,gBAAT,CAA0BI,MAA1B,EAAkCvC,IAAlC,EAAwCwC,IAAxC,EAA8CpC,MAA9C,EAAsD;AACpD,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8C,MAApB,EAA4B9C,CAAC,EAA7B,EAAiC;AAC/BW,QAAAA,MAAM,CAACC,IAAP,CAAYL,IAAI,GAAG,CAACwC,IAAI,GAAGxC,IAAR,MAAkBP,CAAC,GAAG8C,MAAtB,CAAP,GAAuCC,IAAnD;AACD;;AACDpC,MAAAA,MAAM,CAACC,IAAP,CAAY,CAAZ;AACD;;AACD,aAAS+B,cAAT,CAAwBG,MAAxB,EAAgCvC,IAAhC,EAAsCwC,IAAtC,EAA4CC,MAA5C,EAAoDrC,MAApD,EAA4D;AAC1DxC,MAAAA,aAAa,CAACgD,MAAd,GAAuB,CAAvB;AACA/C,MAAAA,SAAS,CAAC+C,MAAV,GAAmB,CAAnB;AACAuB,MAAAA,gBAAgB,CAACI,MAAD,EAASvC,IAAT,EAAewC,IAAf,EAAqB3E,SAArB,CAAhB;AACAqE,MAAAA,YAAY,CAACK,MAAD,EAASvC,IAAT,EAAewC,IAAf,EAAqB5E,aAArB,CAAZ;;AACA,WAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8C,MAApB,EAA4B9C,CAAC,EAA7B,EAAiC;AAC/BW,QAAAA,MAAM,CAACC,IAAP,CAAYlD,SAAS,CAACuF,IAAV,CAAe9E,aAAa,CAAC6B,CAAC,GAAG,CAAL,CAA5B,EAAqC5B,SAAS,CAAC4B,CAAC,GAAG,CAAL,CAA9C,EAAuDgD,MAAvD,CAAZ;AACD;;AACDrC,MAAAA,MAAM,CAACC,IAAP,CAAY,CAAZ;AACD;AACF;;AACDsC,EAAAA,MAAM,GAAG;AACP,UAAM1E,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMgB,QAAQ,GAAG,KAAKA,QAAtB;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAAC2B,MAA7B,EAAqCnB,CAAC,EAAtC,EAA0C;AACxC,YAAMC,KAAK,GAAG,KAAKP,MAAL,CAAYM,CAAZ,CAAd;AACA,YAAMoB,SAAS,GAAGnB,KAAK,CAACE,MAAN,CAAa3B,MAA/B;AACA,YAAM2E,UAAU,GAAG,CAAC/B,SAAS,CAACgB,KAAV,GAAkBhB,SAAS,CAACe,IAA7B,IAAqC,KAAKtD,aAA7D;AACA,YAAMuE,WAAW,GAAG,CAAChC,SAAS,CAACiB,GAAV,GAAgBjB,SAAS,CAACkB,MAA3B,IAAqC,KAAKzD,aAA9D;AACAoB,MAAAA,KAAK,CAACE,MAAN,CAAa3B,MAAb,CAAoB6E,iBAApB,CAAsC,IAAtC;;AACAtF,MAAAA,oBAAoB,CAACuF,gBAArB,CAAsCrD,KAAK,CAACE,MAAN,CAAa3B,MAAb,CAAoB+E,kBAA1D,EAA8E/E,MAAM,CAACgF,WAArF;;AACAhE,MAAAA,QAAQ,CAACQ,CAAD,CAAR,CAAYyD,OAAZ,CAAoB1F,oBAApB,EAA0CC,kBAA1C;AACA,YAAMsD,SAAS,GAAGtD,kBAAkB,CAACuD,QAAnB,CAA4BhB,IAA9C;AACA,YAAMiB,QAAQ,GAAGxD,kBAAkB,CAACuD,QAAnB,CAA4Bf,GAA7C;;AACAtC,MAAAA,KAAK,CAACwF,SAAN;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BzF,QAAAA,KAAK,CAAC0F,aAAN,CAAoBtC,SAAS,CAACqC,CAAD,CAA7B;;AACAzF,QAAAA,KAAK,CAAC0F,aAAN,CAAoBpC,QAAQ,CAACmC,CAAD,CAA5B;AACD;;AACDzF,MAAAA,KAAK,CAAC2F,SAAN,CAAgB5F,OAAhB;;AACAA,MAAAA,OAAO,CAAC+D,CAAR,GAAY9D,KAAK,CAAC4D,GAAN,CAAUE,CAAV,GAAc,KAAK5C,WAA/B;AACAnB,MAAAA,OAAO,CAAC6F,CAAR,GAAYjC,IAAI,CAACkC,KAAL,CAAW9F,OAAO,CAAC6F,CAAR,GAAYX,UAAvB,IAAqCA,UAAjD;AACAlF,MAAAA,OAAO,CAAC+F,CAAR,GAAYnC,IAAI,CAACkC,KAAL,CAAW9F,OAAO,CAAC+F,CAAR,GAAYZ,WAAvB,IAAsCA,WAAlD;;AACAnF,MAAAA,OAAO,CAACgG,YAAR,CAAqBhE,KAAK,CAACE,MAAN,CAAa3B,MAAb,CAAoBgF,WAAzC;;AACAvD,MAAAA,KAAK,CAACiE,QAAN,CAAeC,IAAf,CAAoBlG,OAApB;AACAgC,MAAAA,KAAK,CAACU,MAAN,CAAauD,QAAb,CAAsBC,IAAtB,CAA2BlG,OAA3B;AACAgC,MAAAA,KAAK,CAACU,MAAN,CAAauD,QAAb,CAAsBJ,CAAtB,IAA2B,KAAK/E,cAAL,CAAoB+E,CAA/C;AACA7D,MAAAA,KAAK,CAACU,MAAN,CAAauD,QAAb,CAAsBF,CAAtB,IAA2B,KAAKjF,cAAL,CAAoBiF,CAA/C;AACA/D,MAAAA,KAAK,CAACU,MAAN,CAAauD,QAAb,CAAsBlC,CAAtB,IAA2B,KAAKjD,cAAL,CAAoBiD,CAA/C;AACD;AACF;;AACDjC,EAAAA,aAAa,GAAG;AACdpC,IAAAA,WAAW,CAACyG,qBAAZ,GAAoCtG,SAAS,CAACsG,qBAA9C;AACAzG,IAAAA,WAAW,CAAC0G,iBAAZ,GAAgCvG,SAAS,CAACuG,iBAA1C;AACD;;AACDC,EAAAA,aAAa,CAACC,QAAD,EAAW;AACtBA,IAAAA,QAAQ,CAACC,OAAT,GAAmBD,QAAQ,CAACC,OAAT,IAAoB,EAAvC;AACAD,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,OAAjB,GAA2B,CAA3B;AACAF,IAAAA,QAAQ,CAACC,OAAT,CAAiBE,YAAjB,GAAgC,KAAKhG,QAArC;;AACA,QAAI,KAAKY,IAAT,EAAe;AACbiF,MAAAA,QAAQ,CAACC,OAAT,CAAiBG,QAAjB,GAA4B,EAA5B;AACD;;AACD,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAMC,KAAK,GAAG,IAAd;AACA,UAAMlF,OAAO,GAAG,KAAKA,OAArB;;AACA4E,IAAAA,QAAQ,CAACO,eAAT,GAA2B,UAASC,MAAT,EAAiB;AAC1C,YAAMvE,GAAG,GAAGqB,IAAI,CAACW,GAAL,CAASqC,KAAK,CAACrG,MAAN,CAAagC,GAAtB,EAA2BqE,KAAK,CAAClG,MAAjC,CAAZ;AACAkG,MAAAA,KAAK,CAACG,iBAAN,CAAwBJ,UAAxB;AACAG,MAAAA,MAAM,CAACE,QAAP,CAAgBC,YAAhB,GAA+B;AAAEC,QAAAA,KAAK,EAAEP;AAAT,OAA/B;AACAG,MAAAA,MAAM,CAACE,QAAP,CAAgBG,UAAhB,GAA6B;AAAED,QAAAA,KAAK,EAAEN,KAAK,CAACrG,MAAN,CAAa+B;AAAtB,OAA7B;AACAwE,MAAAA,MAAM,CAACE,QAAP,CAAgBI,SAAhB,GAA4B;AAAEF,QAAAA,KAAK,EAAE3E;AAAT,OAA5B;AACAb,MAAAA,OAAO,CAAC2F,GAAR,CAAYf,QAAZ,EAAsBQ,MAAtB;AACD,KAPD;;AAQApF,IAAAA,OAAO,CAAC2F,GAAR,CAAYf,QAAZ,EAAsB,IAAtB;AACD;;AACDgB,EAAAA,cAAc,GAAG;AACf,UAAM/E,GAAG,GAAGqB,IAAI,CAACW,GAAL,CAAS,KAAKhE,MAAL,CAAYgC,GAArB,EAA0B,KAAK7B,MAA/B,CAAZ;AACA,UAAMgB,OAAO,GAAG,KAAKA,OAArB;AACAA,IAAAA,OAAO,CAAC6F,OAAR,CAAgB,UAAST,MAAT,EAAiBR,QAAjB,EAA2B;AACzC,UAAIQ,MAAM,KAAK,IAAf,EAAqB;AACnB,cAAME,QAAQ,GAAGF,MAAM,CAACE,QAAxB;AACA,aAAKD,iBAAL,CAAuBC,QAAQ,CAACC,YAAT,CAAsBC,KAA7C;AACAF,QAAAA,QAAQ,CAACG,UAAT,CAAoBD,KAApB,GAA4B,KAAK3G,MAAL,CAAY+B,IAAxC;AACA0E,QAAAA,QAAQ,CAACI,SAAT,CAAmBF,KAAnB,GAA2B3E,GAA3B;AACD;;AACD,UAAI,CAAC,KAAKlB,IAAN,IAAc,cAAciF,QAAQ,CAACC,OAAzC,EAAkD;AAChD,eAAOD,QAAQ,CAACC,OAAT,CAAiBG,QAAxB;AACAJ,QAAAA,QAAQ,CAACkB,WAAT,GAAuB,IAAvB;AACD,OAHD,MAGO,IAAI,KAAKnG,IAAL,IAAa,EAAE,cAAciF,QAAQ,CAACC,OAAzB,CAAjB,EAAoD;AACzDD,QAAAA,QAAQ,CAACC,OAAT,CAAiBG,QAAjB,GAA4B,EAA5B;AACAJ,QAAAA,QAAQ,CAACkB,WAAT,GAAuB,IAAvB;AACD;AACF,KAdD,EAcG,IAdH;AAeD;;AACDT,EAAAA,iBAAiB,CAACrE,MAAD,EAAS;AACxB,WAAOA,MAAM,CAACQ,MAAP,GAAgB,KAAK1B,MAAL,CAAY0B,MAAnC,EAA2C;AACzCR,MAAAA,MAAM,CAACC,IAAP,CAAY,IAAIhD,OAAJ,EAAZ;AACD;;AACD+C,IAAAA,MAAM,CAACQ,MAAP,GAAgB,KAAK1B,MAAL,CAAY0B,MAA5B;;AACA,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKtB,QAAzB,EAAmCsB,CAAC,EAApC,EAAwC;AACtC,YAAM8C,MAAM,GAAG,KAAKrD,MAAL,CAAYO,CAAZ,CAAf;AACA,YAAM0F,IAAI,GAAG,KAAKjG,MAAL,CAAYO,CAAC,GAAG,CAAhB,KAAsB,CAAnC;AACAW,MAAAA,MAAM,CAACX,CAAD,CAAN,CAAU8D,CAAV,GAAc4B,IAAd;AACA/E,MAAAA,MAAM,CAACX,CAAD,CAAN,CAAUgE,CAAV,GAAclB,MAAd;AACD;AACF;;AACDhD,EAAAA,cAAc,GAAG;AACf,SAAKyC,SAAL;AACA,SAAK1B,YAAL;AACA,SAAKK,kBAAL;AACA,SAAKqE,cAAL;AACD;;AACDI,EAAAA,MAAM,GAAG;AACP,SAAK,IAAI3F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,MAAL,CAAYyB,MAAhC,EAAwCnB,CAAC,EAAzC,EAA6C;AAC3C,WAAKvB,MAAL,CAAYkH,MAAZ,CAAmB,KAAKjG,MAAL,CAAYM,CAAZ,CAAnB;AACD;AACF;;AACD4F,EAAAA,OAAO,GAAG;AACR,UAAMjG,OAAO,GAAG,KAAKA,OAArB;AACAA,IAAAA,OAAO,CAAC6F,OAAR,CAAgB,UAAST,MAAT,EAAiBR,QAAjB,EAA2B;AACzC,aAAOA,QAAQ,CAACO,eAAhB;AACA,aAAOP,QAAQ,CAACC,OAAT,CAAiBC,OAAxB;AACA,aAAOF,QAAQ,CAACC,OAAT,CAAiBE,YAAxB;AACA,aAAOH,QAAQ,CAACC,OAAT,CAAiBG,QAAxB;;AACA,UAAII,MAAM,KAAK,IAAf,EAAqB;AACnB,eAAOA,MAAM,CAACE,QAAP,CAAgBC,YAAvB;AACA,eAAOH,MAAM,CAACE,QAAP,CAAgBG,UAAvB;AACA,eAAOL,MAAM,CAACE,QAAP,CAAgBI,SAAvB;AACD;;AACDd,MAAAA,QAAQ,CAACkB,WAAT,GAAuB,IAAvB;AACD,KAXD;AAYA9F,IAAAA,OAAO,CAACkG,KAAR;AACD;;AAtOO;;AAwOV,SACExH,GADF","sourcesContent":["import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from \"three\";\nimport { CSMFrustum } from \"./CSMFrustum.js\";\nimport { CSMShader } from \"./CSMShader.js\";\nconst _cameraToLightMatrix = /* @__PURE__ */ new Matrix4();\nconst _lightSpaceFrustum = /* @__PURE__ */ new CSMFrustum();\nconst _center = /* @__PURE__ */ new Vector3();\nconst _bbox = /* @__PURE__ */ new Box3();\nconst _uniformArray = [];\nconst _logArray = [];\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 1e5;\n    this.mode = data.mode || \"practical\";\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 1e-6;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2e3;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = /* @__PURE__ */ new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(16777215, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n  updateShadowBounds() {\n    const frustums = this.frustums;\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i];\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n      let squaredBBWidth = point1.distanceTo(point2);\n      if (this.fade) {\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n    switch (this.mode) {\n      case \"uniform\":\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n      case \"logarithmic\":\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n      case \"practical\":\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n      case \"custom\":\n        if (this.customSplitsCallback === void 0)\n          console.error(\"CSM: Custom split scheme callback not defined.\");\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n    function uniformSplit(amount, near, far2, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far2 - near) * i / amount) / far2);\n      }\n      target.push(1);\n    }\n    function logarithmicSplit(amount, near, far2, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far2 / near) ** (i / amount) / far2);\n      }\n      target.push(1);\n    }\n    function practicalSplit(amount, near, far2, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far2, _logArray);\n      uniformSplit(amount, near, far2, _uniformArray);\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n      target.push(1);\n    }\n  }\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n      _bbox.makeEmpty();\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n        _bbox.expandByPoint(farVerts[j]);\n      }\n      _bbox.getCenter(_center);\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n  }\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n    if (this.fade) {\n      material.defines.CSM_FADE = \"\";\n    }\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n    material.onBeforeCompile = function(shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = { value: breaksVec2 };\n      shader.uniforms.cameraNear = { value: scope.camera.near };\n      shader.uniforms.shadowFar = { value: far };\n      shaders.set(material, shader);\n    };\n    shaders.set(material, null);\n  }\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function(shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n      if (!this.fade && \"CSM_FADE\" in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !(\"CSM_FADE\" in material.defines)) {\n        material.defines.CSM_FADE = \"\";\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n    target.length = this.breaks.length;\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach(function(shader, material) {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n}\nexport {\n  CSM\n};\n"]},"metadata":{},"sourceType":"module"}