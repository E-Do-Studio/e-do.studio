{"ast":null,"code":"import { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\n\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0) this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n\n\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n\n    let parent;\n\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null) mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n\n    this._updateRigidBodies();\n\n    this._stepSimulation(delta);\n\n    this._updateBones();\n\n    if (isNonDefaultScale) {\n      if (parent !== null) mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n\n\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n\n    return this;\n  }\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n\n\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n\n    return this;\n  }\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n\n\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n\n\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  } // private methods\n\n\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n    const parent = mesh.parent;\n    if (parent !== null) mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n\n    this._initRigidBodies(rigidBodyParams);\n\n    this._initConstraints(constraintParams);\n\n    if (parent !== null) mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n\n}\n\nclass ResourceManager {\n  constructor() {\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n\n  setIdentity(t) {\n    t.setIdentity();\n  }\n\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n\n    if (t > 0) {\n      s = Math.sqrt(t + 1) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n\n}\n\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n\n\n  reset() {\n    this._setTransformFromBone();\n\n    return this;\n  }\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n\n\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n\n    return this;\n  }\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n\n\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n\n    this._updateBoneRotation();\n\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n\n    this.bone.updateMatrixWorld(true);\n\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n\n    return this;\n  } // private methods\n\n\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n\n        default:\n          throw new Error(\"unknown shape type \" + p.shapeType);\n      }\n    }\n\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n      body.setActivationState(4);\n    }\n\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n\n  _setTransformFromBone() {\n    const manager = this.manager;\n\n    const form = this._getBoneTransform();\n\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n\n  _setPositionFromBone() {\n    const manager = this.manager;\n\n    const form = this._getBoneTransform();\n\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n\n  _updateBoneRotation() {\n    const manager = this.manager;\n\n    const tr = this._getWorldTransformForBone();\n\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n\n  _updateBonePosition() {\n    const manager = this.manager;\n\n    const tr = this._getWorldTransformForBone();\n\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n\n}\n\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n\n    this._init();\n  } // private method\n\n\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n\n    if (constraint.setParam !== void 0) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n\n}\n\nconst _position = /* @__PURE__ */new Vector3();\n\nconst _quaternion = /* @__PURE__ */new Quaternion();\n\nconst _scale = /* @__PURE__ */new Vector3();\n\nconst _matrixWorldInv = /* @__PURE__ */new Matrix4();\n\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(16746632),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(8978312),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(8947967),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    this._init();\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n\n\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh) child.geometry.dispose();\n    }\n  }\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n\n\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  } // private method\n\n\n  _init() {\n    var bodies = this.physics.bodies;\n\n    function createGeometry(param2) {\n      switch (param2.shapeType) {\n        case 0:\n          return new SphereGeometry(param2.width, 16, 8);\n\n        case 1:\n          return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n\n        case 2:\n          return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n\n        default:\n          return null;\n      }\n    }\n\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n\n}\n\nexport { MMDPhysics };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/animation/MMDPhysics.js"],"names":["Vector3","Matrix4","Quaternion","Euler","Bone","Object3D","MeshBasicMaterial","Color","BoxGeometry","SphereGeometry","Mesh","CapsuleGeometry","MMDPhysics","constructor","mesh","rigidBodyParams","constraintParams","params","Ammo","Error","manager","ResourceManager","unitStep","maxStepNum","gravity","copy","world","bodies","constraints","_init","update","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","length","warmup","cycles","setGravity","btVector3","createHelper","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","allocThreeMatrix4","freeThreeMatrix4","m","q","allocThreeEuler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","shape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","_position","_quaternion","_scale","_matrixWorldInv","physics","root","matrixAutoUpdate","materials","color","wireframe","depthTest","depthWrite","opacity","transparent","dispose","children","child","isMesh","geometry","force","visible","compose","invert","origin","applyMatrix4","createGeometry","param2","param","add"],"mappings":"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","sourcesContent":["import { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0)\n      this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n    let parent;\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null)\n        mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n    this._updateRigidBodies();\n    this._stepSimulation(delta);\n    this._updateBones();\n    if (isNonDefaultScale) {\n      if (parent !== null)\n        mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n    return this;\n  }\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n    return this;\n  }\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  }\n  // private methods\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n    const parent = mesh.parent;\n    if (parent !== null)\n      mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n    this._initRigidBodies(rigidBodyParams);\n    this._initConstraints(constraintParams);\n    if (parent !== null)\n      mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n}\nclass ResourceManager {\n  constructor() {\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n  setIdentity(t) {\n    t.setIdentity();\n  }\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n    if (t > 0) {\n      s = Math.sqrt(t + 1) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n}\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone();\n    return this;\n  }\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n    return this;\n  }\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n    this._updateBoneRotation();\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n    this.bone.updateMatrixWorld(true);\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n    return this;\n  }\n  // private methods\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n        default:\n          throw new Error(\"unknown shape type \" + p.shapeType);\n      }\n    }\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n      body.setActivationState(4);\n    }\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n  _setTransformFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n  _setPositionFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n  _updateBoneRotation() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n  _updateBonePosition() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n}\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n    if (constraint.setParam !== void 0) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n}\nconst _position = /* @__PURE__ */ new Vector3();\nconst _quaternion = /* @__PURE__ */ new Quaternion();\nconst _scale = /* @__PURE__ */ new Vector3();\nconst _matrixWorldInv = /* @__PURE__ */ new Matrix4();\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(16746632),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8978312),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8947967),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this._init();\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh)\n        child.geometry.dispose();\n    }\n  }\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  }\n  // private method\n  _init() {\n    var bodies = this.physics.bodies;\n    function createGeometry(param2) {\n      switch (param2.shapeType) {\n        case 0:\n          return new SphereGeometry(param2.width, 16, 8);\n        case 1:\n          return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n        case 2:\n          return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n        default:\n          return null;\n      }\n    }\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n}\nexport {\n  MMDPhysics\n};\n"]},"metadata":{},"sourceType":"module"}