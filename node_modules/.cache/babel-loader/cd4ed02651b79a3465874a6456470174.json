{"ast":null,"code":"import { Vector2 } from \"three\";\nconst FXAAShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: /* @__PURE__ */new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"precision highp float;\", \"\", \"uniform sampler2D tDiffuse;\", \"\", \"uniform vec2 resolution;\", \"\", \"varying vec2 vUv;\", \"\", \"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\", \"\", \"//----------------------------------------------------------------------------------\", \"// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag\", \"// SDK Version: v3.00\", \"// Email:       gameworks@nvidia.com\", \"// Site:        http://developer.nvidia.com/\", \"//\", \"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\", \"//\", \"// Redistribution and use in source and binary forms, with or without\", \"// modification, are permitted provided that the following conditions\", \"// are met:\", \"//  * Redistributions of source code must retain the above copyright\", \"//    notice, this list of conditions and the following disclaimer.\", \"//  * Redistributions in binary form must reproduce the above copyright\", \"//    notice, this list of conditions and the following disclaimer in the\", \"//    documentation and/or other materials provided with the distribution.\", \"//  * Neither the name of NVIDIA CORPORATION nor the names of its\", \"//    contributors may be used to endorse or promote products derived\", \"//    from this software without specific prior written permission.\", \"//\", \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\", \"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\", \"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\", \"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\", \"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\", \"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\", \"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\", \"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\", \"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\", \"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\", \"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\", \"//\", \"//----------------------------------------------------------------------------------\", \"\", \"#define FXAA_PC 1\", \"#define FXAA_GLSL_100 1\", \"#define FXAA_QUALITY_PRESET 12\", \"\", \"#define FXAA_GREEN_AS_LUMA 1\", \"\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_PC_CONSOLE\", \"    //\", \"    // The console algorithm for PC is included\", \"    // for developers targeting really low spec machines.\", \"    // Likely better to just run FXAA_PC, and use a really low preset.\", \"    //\", \"    #define FXAA_PC_CONSOLE 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_120\", \"    #define FXAA_GLSL_120 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GLSL_130\", \"    #define FXAA_GLSL_130 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_3\", \"    #define FXAA_HLSL_3 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_4\", \"    #define FXAA_HLSL_4 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_HLSL_5\", \"    #define FXAA_HLSL_5 0\", \"#endif\", \"/*==========================================================================*/\", \"#ifndef FXAA_GREEN_AS_LUMA\", \"    //\", \"    // For those using non-linear color,\", \"    // and either not able to get luma in alpha, or not wanting to,\", \"    // this enables FXAA to run using green as a proxy for luma.\", \"    // So with this enabled, no need to pack luma in alpha.\", \"    //\", \"    // This will turn off AA on anything which lacks some amount of green.\", \"    // Pure red and blue or combination of only R and B, will get no AA.\", \"    //\", \"    // Might want to lower the settings for both,\", \"    //    fxaaConsoleEdgeThresholdMin\", \"    //    fxaaQualityEdgeThresholdMin\", \"    // In order to insure AA does not get turned off on colors\", \"    // which contain a minor amount of green.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_GREEN_AS_LUMA 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_EARLY_EXIT\", \"    //\", \"    // Controls algorithm's early exit path.\", \"    // On PS3 turning this ON adds 2 cycles to the shader.\", \"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\", \"    // Turning this off on console will result in a more blurry image.\", \"    // So this defaults to on.\", \"    //\", \"    // 1 = On.\", \"    // 0 = Off.\", \"    //\", \"    #define FXAA_EARLY_EXIT 1\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_DISCARD\", \"    //\", \"    // Only valid for PC OpenGL currently.\", \"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\", \"    //\", \"    // 1 = Use discard on pixels which don't need AA.\", \"    //     For APIs which enable concurrent TEX+ROP from same surface.\", \"    // 0 = Return unchanged color on pixels which don't need AA.\", \"    //\", \"    #define FXAA_DISCARD 0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_FAST_PIXEL_OFFSET\", \"    //\", \"    // Used for GLSL 120 only.\", \"    //\", \"    // 1 = GL API supports fast pixel offsets\", \"    // 0 = do not use fast pixel offsets\", \"    //\", \"    #ifdef GL_EXT_gpu_shader4\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_FAST_PIXEL_OFFSET 1\", \"    #endif\", \"    #ifndef FXAA_FAST_PIXEL_OFFSET\", \"        #define FXAA_FAST_PIXEL_OFFSET 0\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#ifndef FXAA_GATHER4_ALPHA\", \"    //\", \"    // 1 = API supports gather4 on alpha channel.\", \"    // 0 = API does not support gather4 on alpha channel.\", \"    //\", \"    #if (FXAA_HLSL_5 == 1)\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_ARB_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifdef GL_NV_gpu_shader5\", \"        #define FXAA_GATHER4_ALPHA 1\", \"    #endif\", \"    #ifndef FXAA_GATHER4_ALPHA\", \"        #define FXAA_GATHER4_ALPHA 0\", \"    #endif\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                        FXAA QUALITY - TUNING KNOBS\", \"------------------------------------------------------------------------------\", \"NOTE the other tuning knobs are now in the shader function inputs!\", \"============================================================================*/\", \"#ifndef FXAA_QUALITY_PRESET\", \"    //\", \"    // Choose the quality preset.\", \"    // This needs to be compiled into the shader as it effects code.\", \"    // Best option to include multiple presets is to\", \"    // in each shader define the preset, then include this file.\", \"    //\", \"    // OPTIONS\", \"    // -----------------------------------------------------------------------\", \"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\", \"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\", \"    // 39       - no dither, very expensive\", \"    //\", \"    // NOTES\", \"    // -----------------------------------------------------------------------\", \"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\", \"    // 13 = about same speed as FXAA 3.9 and better than 12\", \"    // 23 = closest to FXAA 3.9 visually and performance wise\", \"    //  _ = the lowest digit is directly related to performance\", \"    // _  = the highest digit is directly related to style\", \"    //\", \"    #define FXAA_QUALITY_PRESET 12\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"\", \"                           FXAA QUALITY - PRESETS\", \"\", \"============================================================================*/\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - MEDIUM DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 10)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 3.0\", \"    #define FXAA_QUALITY_P2 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 11)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 3.0\", \"    #define FXAA_QUALITY_P3 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 12)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 4.0\", \"    #define FXAA_QUALITY_P4 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 13)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 4.0\", \"    #define FXAA_QUALITY_P5 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 14)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 4.0\", \"    #define FXAA_QUALITY_P6 12.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 15)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 12.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - LOW DITHER PRESETS\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 20)\", \"    #define FXAA_QUALITY_PS 3\", \"    #define FXAA_QUALITY_P0 1.5\", \"    #define FXAA_QUALITY_P1 2.0\", \"    #define FXAA_QUALITY_P2 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 21)\", \"    #define FXAA_QUALITY_PS 4\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 22)\", \"    #define FXAA_QUALITY_PS 5\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 23)\", \"    #define FXAA_QUALITY_PS 6\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 24)\", \"    #define FXAA_QUALITY_PS 7\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 3.0\", \"    #define FXAA_QUALITY_P6 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 25)\", \"    #define FXAA_QUALITY_PS 8\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 4.0\", \"    #define FXAA_QUALITY_P7 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 26)\", \"    #define FXAA_QUALITY_PS 9\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 4.0\", \"    #define FXAA_QUALITY_P8 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 27)\", \"    #define FXAA_QUALITY_PS 10\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 4.0\", \"    #define FXAA_QUALITY_P9 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 28)\", \"    #define FXAA_QUALITY_PS 11\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 4.0\", \"    #define FXAA_QUALITY_P10 8.0\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_QUALITY_PRESET == 29)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.5\", \"    #define FXAA_QUALITY_P2 2.0\", \"    #define FXAA_QUALITY_P3 2.0\", \"    #define FXAA_QUALITY_P4 2.0\", \"    #define FXAA_QUALITY_P5 2.0\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"/*============================================================================\", \"                     FXAA QUALITY - EXTREME QUALITY\", \"============================================================================*/\", \"#if (FXAA_QUALITY_PRESET == 39)\", \"    #define FXAA_QUALITY_PS 12\", \"    #define FXAA_QUALITY_P0 1.0\", \"    #define FXAA_QUALITY_P1 1.0\", \"    #define FXAA_QUALITY_P2 1.0\", \"    #define FXAA_QUALITY_P3 1.0\", \"    #define FXAA_QUALITY_P4 1.0\", \"    #define FXAA_QUALITY_P5 1.5\", \"    #define FXAA_QUALITY_P6 2.0\", \"    #define FXAA_QUALITY_P7 2.0\", \"    #define FXAA_QUALITY_P8 2.0\", \"    #define FXAA_QUALITY_P9 2.0\", \"    #define FXAA_QUALITY_P10 4.0\", \"    #define FXAA_QUALITY_P11 8.0\", \"#endif\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                                API PORTING\", \"\", \"============================================================================*/\", \"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard discard\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 vec2\", \"    #define FxaaFloat3 vec3\", \"    #define FxaaFloat4 vec4\", \"    #define FxaaHalf float\", \"    #define FxaaHalf2 vec2\", \"    #define FxaaHalf3 vec3\", \"    #define FxaaHalf4 vec4\", \"    #define FxaaInt2 ivec2\", \"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\", \"    #define FxaaTex sampler2D\", \"#else\", \"    #define FxaaBool bool\", \"    #define FxaaDiscard clip(-1)\", \"    #define FxaaFloat float\", \"    #define FxaaFloat2 float2\", \"    #define FxaaFloat3 float3\", \"    #define FxaaFloat4 float4\", \"    #define FxaaHalf half\", \"    #define FxaaHalf2 half2\", \"    #define FxaaHalf3 half3\", \"    #define FxaaHalf4 half4\", \"    #define FxaaSat(x) saturate(x)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_100 == 1)\", \"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\", \"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_120 == 1)\", \"    // Requires,\", \"    //  #version 120\", \"    // And at least,\", \"    //  #extension GL_EXT_gpu_shader4 : enable\", \"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\", \"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\", \"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\", \"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\", \"    #else\", \"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\", \"    #endif\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_GLSL_130 == 1)\", '    // Requires \"#version 130\" or better', \"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        // use #extension GL_ARB_gpu_shader5 : enable\", \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\", \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\", \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\", \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\", \"    #endif\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_3 == 1)\", \"    #define FxaaInt2 float2\", \"    #define FxaaTex sampler2D\", \"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\", \"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_4 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"#endif\", \"/*--------------------------------------------------------------------------*/\", \"#if (FXAA_HLSL_5 == 1)\", \"    #define FxaaInt2 int2\", \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\", \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\", \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\", \"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\", \"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\", \"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\", \"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\", \"#endif\", \"\", \"\", \"/*============================================================================\", \"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\", \"============================================================================*/\", \"#if (FXAA_GREEN_AS_LUMA == 0)\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\", \"#else\", \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\", \"#endif\", \"\", \"\", \"\", \"\", \"/*============================================================================\", \"\", \"                             FXAA3 QUALITY - PC\", \"\", \"============================================================================*/\", \"#if (FXAA_PC == 1)\", \"/*--------------------------------------------------------------------------*/\", \"FxaaFloat4 FxaaPixelShader(\", \"    //\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy} = center of pixel\", \"    FxaaFloat2 pos,\", \"    //\", \"    // Used only for FXAA Console, and not used on the 360 version.\", \"    // Use noperspective interpolation here (turn off perspective interpolation).\", \"    // {xy_} = upper left of pixel\", \"    // {_zw} = lower right of pixel\", \"    FxaaFloat4 fxaaConsolePosPos,\", \"    //\", \"    // Input color texture.\", \"    // {rgb_} = color in linear or perceptual color space\", \"    // if (FXAA_GREEN_AS_LUMA == 0)\", \"    //     {__a} = luma in perceptual color space (not linear)\", \"    FxaaTex tex,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", '    // For everything but 360, just use the same input here as for \"tex\".', \"    // For 360, same texture, just alias with a 2nd sampler.\", \"    // This sampler needs to have an exponent bias of -1.\", \"    FxaaTex fxaaConsole360TexExpBiasNegOne,\", \"    //\", \"    // Only used on the optimized 360 version of FXAA Console.\", '    // For everything but 360, just use the same input here as for \"tex\".', \"    // For 360, same texture, just alias with a 3nd sampler.\", \"    // This sampler needs to have an exponent bias of -2.\", \"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This must be from a constant/uniform.\", \"    // {x_} = 1.0/screenWidthInPixels\", \"    // {_y} = 1.0/screenHeightInPixels\", \"    FxaaFloat2 fxaaQualityRcpFrame,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This must be from a constant/uniform.\", \"    // This effects sub-pixel AA quality and inversely sharpness.\", \"    //   Where N ranges between,\", \"    //     N = 0.50 (default)\", \"    //     N = 0.33 (sharper)\", \"    // {x__} = -N/screenWidthInPixels\", \"    // {_y_} = -N/screenHeightInPixels\", \"    // {_z_} =  N/screenWidthInPixels\", \"    // {__w} =  N/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Not used on 360, but used on PS3 and PC.\", \"    // This must be from a constant/uniform.\", \"    // {x__} = -2.0/screenWidthInPixels\", \"    // {_y_} = -2.0/screenHeightInPixels\", \"    // {_z_} =  2.0/screenWidthInPixels\", \"    // {__w} =  2.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\", \"    // This must be from a constant/uniform.\", \"    // {x__} =  8.0/screenWidthInPixels\", \"    // {_y_} =  8.0/screenHeightInPixels\", \"    // {_z_} = -4.0/screenWidthInPixels\", \"    // {__w} = -4.0/screenHeightInPixels\", \"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_SUBPIX define.\", \"    // It is here now to allow easier tuning.\", \"    // Choose the amount of sub-pixel aliasing removal.\", \"    // This can effect sharpness.\", \"    //   1.00 - upper limit (softer)\", \"    //   0.75 - default amount of filtering\", \"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\", \"    //   0.25 - almost off\", \"    //   0.00 - completely off\", \"    FxaaFloat fxaaQualitySubpix,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // The minimum amount of local contrast required to apply algorithm.\", \"    //   0.333 - too little (faster)\", \"    //   0.250 - low quality\", \"    //   0.166 - default\", \"    //   0.125 - high quality\", \"    //   0.063 - overkill (slower)\", \"    FxaaFloat fxaaQualityEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Quality.\", \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\", \"    //   0.0625 - high quality (faster)\", \"    //   0.0312 - visible limit (slower)\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaQualityEdgeThresholdMin,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only three safe values here: 2 and 4 and 8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // For all other platforms can be a non-power of two.\", \"    //   8.0 is sharper (default!!!)\", \"    //   4.0 is softer\", \"    //   2.0 is really soft (good only for vector graphics inputs)\", \"    FxaaFloat fxaaConsoleEdgeSharpness,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\", \"    // It is here now to allow easier tuning.\", \"    // This does not effect PS3, as this needs to be compiled in.\", \"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\", \"    //   Due to the PS3 being ALU bound,\", \"    //   there are only two safe values here: 1/4 and 1/8.\", \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // Other platforms can use other values.\", \"    //   0.125 leaves less aliasing, but is softer (default!!!)\", \"    //   0.25 leaves more aliasing, and is sharper\", \"    FxaaFloat fxaaConsoleEdgeThreshold,\", \"    //\", \"    // Only used on FXAA Console.\", \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\", \"    // It is here now to allow easier tuning.\", \"    // Trims the algorithm from processing darks.\", \"    // The console setting has a different mapping than the quality setting.\", \"    // This only applies when FXAA_EARLY_EXIT is 1.\", \"    // This does not apply to PS3,\", \"    // PS3 was simplified to avoid more shader instructions.\", \"    //   0.06 - faster but more aliasing in darks\", \"    //   0.05 - default\", \"    //   0.04 - slower and less aliasing in darks\", \"    // Special notes when using FXAA_GREEN_AS_LUMA,\", \"    //   Likely want to set this to zero.\", \"    //   As colors that are mostly not-green\", \"    //   will appear very dark in the green channel!\", \"    //   Tune by looking at mostly non-green content,\", \"    //   then start at zero and increase until aliasing is a problem.\", \"    FxaaFloat fxaaConsoleEdgeThresholdMin,\", \"    //\", \"    // Extra constants for 360 FXAA Console only.\", \"    // Use zeros or anything else for other platforms.\", \"    // These must be in physical constant registers and NOT immediates.\", \"    // Immediates will result in compiler un-optimizing.\", \"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\", \"    FxaaFloat4 fxaaConsole360ConstDir\", \") {\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posM;\", \"    posM.x = pos.x;\", \"    posM.y = pos.y;\", \"    #if (FXAA_GATHER4_ALPHA == 1)\", \"        #if (FXAA_DISCARD == 0)\", \"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"            #if (FXAA_GREEN_AS_LUMA == 0)\", \"                #define lumaM rgbyM.w\", \"            #else\", \"                #define lumaM rgbyM.y\", \"            #endif\", \"        #endif\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\", \"        #else\", \"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\", \"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\", \"        #endif\", \"        #if (FXAA_DISCARD == 1)\", \"            #define lumaM luma4A.w\", \"        #endif\", \"        #define lumaE luma4A.z\", \"        #define lumaS luma4A.x\", \"        #define lumaSE luma4A.y\", \"        #define lumaNW luma4B.w\", \"        #define lumaN luma4B.z\", \"        #define lumaW luma4B.x\", \"    #else\", \"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\", \"        #if (FXAA_GREEN_AS_LUMA == 0)\", \"            #define lumaM rgbyM.w\", \"        #else\", \"            #define lumaM rgbyM.y\", \"        #endif\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat maxSM = max(lumaS, lumaM);\", \"    FxaaFloat minSM = min(lumaS, lumaM);\", \"    FxaaFloat maxESM = max(lumaE, maxSM);\", \"    FxaaFloat minESM = min(lumaE, minSM);\", \"    FxaaFloat maxWN = max(lumaN, lumaW);\", \"    FxaaFloat minWN = min(lumaN, lumaW);\", \"    FxaaFloat rangeMax = max(maxWN, maxESM);\", \"    FxaaFloat rangeMin = min(minWN, minESM);\", \"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\", \"    FxaaFloat range = rangeMax - rangeMin;\", \"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\", \"    FxaaBool earlyExit = range < rangeMaxClamped;\", \"/*--------------------------------------------------------------------------*/\", \"    if(earlyExit)\", \"        #if (FXAA_DISCARD == 1)\", \"            FxaaDiscard;\", \"        #else\", \"            return rgbyM;\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_GATHER4_ALPHA == 0)\", \"        #if (FXAA_GLSL_100 == 1)\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\", \"        #else\", \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\", \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"        #endif\", \"    #else\", \"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\", \"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNS = lumaN + lumaS;\", \"    FxaaFloat lumaWE = lumaW + lumaE;\", \"    FxaaFloat subpixRcpRange = 1.0/range;\", \"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\", \"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\", \"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNESE = lumaNE + lumaSE;\", \"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\", \"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\", \"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\", \"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\", \"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\", \"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\", \"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\", \"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\", \"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\", \"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\", \"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\", \"    FxaaBool horzSpan = edgeHorz >= edgeVert;\", \"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\", \"/*--------------------------------------------------------------------------*/\", \"    if(!horzSpan) lumaN = lumaW;\", \"    if(!horzSpan) lumaS = lumaE;\", \"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\", \"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat gradientN = lumaN - lumaM;\", \"    FxaaFloat gradientS = lumaS - lumaM;\", \"    FxaaFloat lumaNN = lumaN + lumaM;\", \"    FxaaFloat lumaSS = lumaS + lumaM;\", \"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\", \"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\", \"    if(pairN) lengthSign = -lengthSign;\", \"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posB;\", \"    posB.x = posM.x;\", \"    posB.y = posM.y;\", \"    FxaaFloat2 offNP;\", \"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\", \"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\", \"    if(!horzSpan) posB.x += lengthSign * 0.5;\", \"    if( horzSpan) posB.y += lengthSign * 0.5;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat2 posN;\", \"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\", \"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat2 posP;\", \"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\", \"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\", \"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\", \"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\", \"    FxaaFloat subpixE = subpixC * subpixC;\", \"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\", \"/*--------------------------------------------------------------------------*/\", \"    if(!pairN) lumaNN = lumaSS;\", \"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\", \"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\", \"    FxaaFloat subpixF = subpixD * subpixE;\", \"    FxaaBool lumaMLTZero = lumaMM < 0.0;\", \"/*--------------------------------------------------------------------------*/\", \"    lumaEndN -= lumaNN * 0.5;\", \"    lumaEndP -= lumaNN * 0.5;\", \"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\", \"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\", \"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\", \"    FxaaBool doneNP = (!doneN) || (!doneP);\", \"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\", \"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\", \"/*--------------------------------------------------------------------------*/\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 3)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 4)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 5)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 6)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\", \"/*--------------------------------------------------------------------------*/\", \"                        #if (FXAA_QUALITY_PS > 7)\", \"                        if(doneNP) {\", \"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                            doneN = abs(lumaEndN) >= gradientScaled;\", \"                            doneP = abs(lumaEndP) >= gradientScaled;\", \"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\", \"                            doneNP = (!doneN) || (!doneP);\", \"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\", \"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\", \"/*--------------------------------------------------------------------------*/\", \"    #if (FXAA_QUALITY_PS > 8)\", \"    if(doneNP) {\", \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"        doneN = abs(lumaEndN) >= gradientScaled;\", \"        doneP = abs(lumaEndP) >= gradientScaled;\", \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\", \"        doneNP = (!doneN) || (!doneP);\", \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\", \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\", \"/*--------------------------------------------------------------------------*/\", \"        #if (FXAA_QUALITY_PS > 9)\", \"        if(doneNP) {\", \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"            doneN = abs(lumaEndN) >= gradientScaled;\", \"            doneP = abs(lumaEndP) >= gradientScaled;\", \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\", \"            doneNP = (!doneN) || (!doneP);\", \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\", \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\", \"/*--------------------------------------------------------------------------*/\", \"            #if (FXAA_QUALITY_PS > 10)\", \"            if(doneNP) {\", \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                doneN = abs(lumaEndN) >= gradientScaled;\", \"                doneP = abs(lumaEndP) >= gradientScaled;\", \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\", \"                doneNP = (!doneN) || (!doneP);\", \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\", \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\", \"/*--------------------------------------------------------------------------*/\", \"                #if (FXAA_QUALITY_PS > 11)\", \"                if(doneNP) {\", \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                    doneN = abs(lumaEndN) >= gradientScaled;\", \"                    doneP = abs(lumaEndP) >= gradientScaled;\", \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\", \"                    doneNP = (!doneN) || (!doneP);\", \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\", \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\", \"/*--------------------------------------------------------------------------*/\", \"                    #if (FXAA_QUALITY_PS > 12)\", \"                    if(doneNP) {\", \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\", \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\", \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\", \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\", \"                        doneN = abs(lumaEndN) >= gradientScaled;\", \"                        doneP = abs(lumaEndP) >= gradientScaled;\", \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\", \"                        doneNP = (!doneN) || (!doneP);\", \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\", \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                        }\", \"                        #endif\", \"/*--------------------------------------------------------------------------*/\", \"                    }\", \"                    #endif\", \"/*--------------------------------------------------------------------------*/\", \"                }\", \"                #endif\", \"/*--------------------------------------------------------------------------*/\", \"            }\", \"            #endif\", \"/*--------------------------------------------------------------------------*/\", \"        }\", \"        #endif\", \"/*--------------------------------------------------------------------------*/\", \"    }\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat dstN = posM.x - posN.x;\", \"    FxaaFloat dstP = posP.x - posM.x;\", \"    if(!horzSpan) dstN = posM.y - posN.y;\", \"    if(!horzSpan) dstP = posP.y - posM.y;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLength = (dstP + dstN);\", \"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\", \"    FxaaFloat spanLengthRcp = 1.0/spanLength;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaBool directionN = dstN < dstP;\", \"    FxaaFloat dst = min(dstN, dstP);\", \"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\", \"    FxaaFloat subpixG = subpixF * subpixF;\", \"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\", \"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\", \"/*--------------------------------------------------------------------------*/\", \"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\", \"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\", \"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\", \"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\", \"    #if (FXAA_DISCARD == 1)\", \"        return FxaaTexTop(tex, posM);\", \"    #else\", \"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\", \"    #endif\", \"}\", \"/*==========================================================================*/\", \"#endif\", \"\", \"void main() {\", \"  gl_FragColor = FxaaPixelShader(\", \"    vUv,\", \"    vec4(0.0),\", \"    tDiffuse,\", \"    tDiffuse,\", \"    tDiffuse,\", \"    resolution,\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    vec4(0.0),\", \"    0.75,\", \"    0.166,\", \"    0.0833,\", \"    0.0,\", \"    0.0,\", \"    0.0,\", \"    vec4(0.0)\", \"  );\", \"\", \"  // TODO avoid querying texture twice for same texel\", \"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\", \"}\"].join(\"\\n\")\n};\nexport { FXAAShader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/shaders/FXAAShader.js"],"names":["Vector2","FXAAShader","uniforms","tDiffuse","value","resolution","vertexShader","join","fragmentShader"],"mappings":"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","sourcesContent":["import { Vector2 } from \"three\";\nconst FXAAShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    resolution: { value: /* @__PURE__ */ new Vector2(1 / 1024, 1 / 512) }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"precision highp float;\",\n    \"\",\n    \"uniform sampler2D tDiffuse;\",\n    \"\",\n    \"uniform vec2 resolution;\",\n    \"\",\n    \"varying vec2 vUv;\",\n    \"\",\n    \"// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\",\n    \"\",\n    \"//----------------------------------------------------------------------------------\",\n    \"// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag\",\n    \"// SDK Version: v3.00\",\n    \"// Email:       gameworks@nvidia.com\",\n    \"// Site:        http://developer.nvidia.com/\",\n    \"//\",\n    \"// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\",\n    \"//\",\n    \"// Redistribution and use in source and binary forms, with or without\",\n    \"// modification, are permitted provided that the following conditions\",\n    \"// are met:\",\n    \"//  * Redistributions of source code must retain the above copyright\",\n    \"//    notice, this list of conditions and the following disclaimer.\",\n    \"//  * Redistributions in binary form must reproduce the above copyright\",\n    \"//    notice, this list of conditions and the following disclaimer in the\",\n    \"//    documentation and/or other materials provided with the distribution.\",\n    \"//  * Neither the name of NVIDIA CORPORATION nor the names of its\",\n    \"//    contributors may be used to endorse or promote products derived\",\n    \"//    from this software without specific prior written permission.\",\n    \"//\",\n    \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\",\n    \"// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\",\n    \"// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\",\n    \"// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\",\n    \"// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\",\n    \"// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\",\n    \"// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\",\n    \"// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\",\n    \"// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\",\n    \"// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\",\n    \"// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\",\n    \"//\",\n    \"//----------------------------------------------------------------------------------\",\n    \"\",\n    \"#define FXAA_PC 1\",\n    \"#define FXAA_GLSL_100 1\",\n    \"#define FXAA_QUALITY_PRESET 12\",\n    \"\",\n    \"#define FXAA_GREEN_AS_LUMA 1\",\n    \"\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_PC_CONSOLE\",\n    \"    //\",\n    \"    // The console algorithm for PC is included\",\n    \"    // for developers targeting really low spec machines.\",\n    \"    // Likely better to just run FXAA_PC, and use a really low preset.\",\n    \"    //\",\n    \"    #define FXAA_PC_CONSOLE 0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_GLSL_120\",\n    \"    #define FXAA_GLSL_120 0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_GLSL_130\",\n    \"    #define FXAA_GLSL_130 0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_HLSL_3\",\n    \"    #define FXAA_HLSL_3 0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_HLSL_4\",\n    \"    #define FXAA_HLSL_4 0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_HLSL_5\",\n    \"    #define FXAA_HLSL_5 0\",\n    \"#endif\",\n    \"/*==========================================================================*/\",\n    \"#ifndef FXAA_GREEN_AS_LUMA\",\n    \"    //\",\n    \"    // For those using non-linear color,\",\n    \"    // and either not able to get luma in alpha, or not wanting to,\",\n    \"    // this enables FXAA to run using green as a proxy for luma.\",\n    \"    // So with this enabled, no need to pack luma in alpha.\",\n    \"    //\",\n    \"    // This will turn off AA on anything which lacks some amount of green.\",\n    \"    // Pure red and blue or combination of only R and B, will get no AA.\",\n    \"    //\",\n    \"    // Might want to lower the settings for both,\",\n    \"    //    fxaaConsoleEdgeThresholdMin\",\n    \"    //    fxaaQualityEdgeThresholdMin\",\n    \"    // In order to insure AA does not get turned off on colors\",\n    \"    // which contain a minor amount of green.\",\n    \"    //\",\n    \"    // 1 = On.\",\n    \"    // 0 = Off.\",\n    \"    //\",\n    \"    #define FXAA_GREEN_AS_LUMA 0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_EARLY_EXIT\",\n    \"    //\",\n    \"    // Controls algorithm's early exit path.\",\n    \"    // On PS3 turning this ON adds 2 cycles to the shader.\",\n    \"    // On 360 turning this OFF adds 10ths of a millisecond to the shader.\",\n    \"    // Turning this off on console will result in a more blurry image.\",\n    \"    // So this defaults to on.\",\n    \"    //\",\n    \"    // 1 = On.\",\n    \"    // 0 = Off.\",\n    \"    //\",\n    \"    #define FXAA_EARLY_EXIT 1\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_DISCARD\",\n    \"    //\",\n    \"    // Only valid for PC OpenGL currently.\",\n    \"    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.\",\n    \"    //\",\n    \"    // 1 = Use discard on pixels which don't need AA.\",\n    \"    //     For APIs which enable concurrent TEX+ROP from same surface.\",\n    \"    // 0 = Return unchanged color on pixels which don't need AA.\",\n    \"    //\",\n    \"    #define FXAA_DISCARD 0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_FAST_PIXEL_OFFSET\",\n    \"    //\",\n    \"    // Used for GLSL 120 only.\",\n    \"    //\",\n    \"    // 1 = GL API supports fast pixel offsets\",\n    \"    // 0 = do not use fast pixel offsets\",\n    \"    //\",\n    \"    #ifdef GL_EXT_gpu_shader4\",\n    \"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n    \"    #endif\",\n    \"    #ifdef GL_NV_gpu_shader5\",\n    \"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n    \"    #endif\",\n    \"    #ifdef GL_ARB_gpu_shader5\",\n    \"        #define FXAA_FAST_PIXEL_OFFSET 1\",\n    \"    #endif\",\n    \"    #ifndef FXAA_FAST_PIXEL_OFFSET\",\n    \"        #define FXAA_FAST_PIXEL_OFFSET 0\",\n    \"    #endif\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#ifndef FXAA_GATHER4_ALPHA\",\n    \"    //\",\n    \"    // 1 = API supports gather4 on alpha channel.\",\n    \"    // 0 = API does not support gather4 on alpha channel.\",\n    \"    //\",\n    \"    #if (FXAA_HLSL_5 == 1)\",\n    \"        #define FXAA_GATHER4_ALPHA 1\",\n    \"    #endif\",\n    \"    #ifdef GL_ARB_gpu_shader5\",\n    \"        #define FXAA_GATHER4_ALPHA 1\",\n    \"    #endif\",\n    \"    #ifdef GL_NV_gpu_shader5\",\n    \"        #define FXAA_GATHER4_ALPHA 1\",\n    \"    #endif\",\n    \"    #ifndef FXAA_GATHER4_ALPHA\",\n    \"        #define FXAA_GATHER4_ALPHA 0\",\n    \"    #endif\",\n    \"#endif\",\n    \"\",\n    \"\",\n    \"/*============================================================================\",\n    \"                        FXAA QUALITY - TUNING KNOBS\",\n    \"------------------------------------------------------------------------------\",\n    \"NOTE the other tuning knobs are now in the shader function inputs!\",\n    \"============================================================================*/\",\n    \"#ifndef FXAA_QUALITY_PRESET\",\n    \"    //\",\n    \"    // Choose the quality preset.\",\n    \"    // This needs to be compiled into the shader as it effects code.\",\n    \"    // Best option to include multiple presets is to\",\n    \"    // in each shader define the preset, then include this file.\",\n    \"    //\",\n    \"    // OPTIONS\",\n    \"    // -----------------------------------------------------------------------\",\n    \"    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)\",\n    \"    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\",\n    \"    // 39       - no dither, very expensive\",\n    \"    //\",\n    \"    // NOTES\",\n    \"    // -----------------------------------------------------------------------\",\n    \"    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\",\n    \"    // 13 = about same speed as FXAA 3.9 and better than 12\",\n    \"    // 23 = closest to FXAA 3.9 visually and performance wise\",\n    \"    //  _ = the lowest digit is directly related to performance\",\n    \"    // _  = the highest digit is directly related to style\",\n    \"    //\",\n    \"    #define FXAA_QUALITY_PRESET 12\",\n    \"#endif\",\n    \"\",\n    \"\",\n    \"/*============================================================================\",\n    \"\",\n    \"                           FXAA QUALITY - PRESETS\",\n    \"\",\n    \"============================================================================*/\",\n    \"\",\n    \"/*============================================================================\",\n    \"                     FXAA QUALITY - MEDIUM DITHER PRESETS\",\n    \"============================================================================*/\",\n    \"#if (FXAA_QUALITY_PRESET == 10)\",\n    \"    #define FXAA_QUALITY_PS 3\",\n    \"    #define FXAA_QUALITY_P0 1.5\",\n    \"    #define FXAA_QUALITY_P1 3.0\",\n    \"    #define FXAA_QUALITY_P2 12.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 11)\",\n    \"    #define FXAA_QUALITY_PS 4\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 3.0\",\n    \"    #define FXAA_QUALITY_P3 12.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 12)\",\n    \"    #define FXAA_QUALITY_PS 5\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 4.0\",\n    \"    #define FXAA_QUALITY_P4 12.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 13)\",\n    \"    #define FXAA_QUALITY_PS 6\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 4.0\",\n    \"    #define FXAA_QUALITY_P5 12.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 14)\",\n    \"    #define FXAA_QUALITY_PS 7\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 4.0\",\n    \"    #define FXAA_QUALITY_P6 12.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 15)\",\n    \"    #define FXAA_QUALITY_PS 8\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 2.0\",\n    \"    #define FXAA_QUALITY_P6 4.0\",\n    \"    #define FXAA_QUALITY_P7 12.0\",\n    \"#endif\",\n    \"\",\n    \"/*============================================================================\",\n    \"                     FXAA QUALITY - LOW DITHER PRESETS\",\n    \"============================================================================*/\",\n    \"#if (FXAA_QUALITY_PRESET == 20)\",\n    \"    #define FXAA_QUALITY_PS 3\",\n    \"    #define FXAA_QUALITY_P0 1.5\",\n    \"    #define FXAA_QUALITY_P1 2.0\",\n    \"    #define FXAA_QUALITY_P2 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 21)\",\n    \"    #define FXAA_QUALITY_PS 4\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 22)\",\n    \"    #define FXAA_QUALITY_PS 5\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 23)\",\n    \"    #define FXAA_QUALITY_PS 6\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 24)\",\n    \"    #define FXAA_QUALITY_PS 7\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 3.0\",\n    \"    #define FXAA_QUALITY_P6 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 25)\",\n    \"    #define FXAA_QUALITY_PS 8\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 2.0\",\n    \"    #define FXAA_QUALITY_P6 4.0\",\n    \"    #define FXAA_QUALITY_P7 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 26)\",\n    \"    #define FXAA_QUALITY_PS 9\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 2.0\",\n    \"    #define FXAA_QUALITY_P6 2.0\",\n    \"    #define FXAA_QUALITY_P7 4.0\",\n    \"    #define FXAA_QUALITY_P8 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 27)\",\n    \"    #define FXAA_QUALITY_PS 10\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 2.0\",\n    \"    #define FXAA_QUALITY_P6 2.0\",\n    \"    #define FXAA_QUALITY_P7 2.0\",\n    \"    #define FXAA_QUALITY_P8 4.0\",\n    \"    #define FXAA_QUALITY_P9 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 28)\",\n    \"    #define FXAA_QUALITY_PS 11\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 2.0\",\n    \"    #define FXAA_QUALITY_P6 2.0\",\n    \"    #define FXAA_QUALITY_P7 2.0\",\n    \"    #define FXAA_QUALITY_P8 2.0\",\n    \"    #define FXAA_QUALITY_P9 4.0\",\n    \"    #define FXAA_QUALITY_P10 8.0\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_QUALITY_PRESET == 29)\",\n    \"    #define FXAA_QUALITY_PS 12\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.5\",\n    \"    #define FXAA_QUALITY_P2 2.0\",\n    \"    #define FXAA_QUALITY_P3 2.0\",\n    \"    #define FXAA_QUALITY_P4 2.0\",\n    \"    #define FXAA_QUALITY_P5 2.0\",\n    \"    #define FXAA_QUALITY_P6 2.0\",\n    \"    #define FXAA_QUALITY_P7 2.0\",\n    \"    #define FXAA_QUALITY_P8 2.0\",\n    \"    #define FXAA_QUALITY_P9 2.0\",\n    \"    #define FXAA_QUALITY_P10 4.0\",\n    \"    #define FXAA_QUALITY_P11 8.0\",\n    \"#endif\",\n    \"\",\n    \"/*============================================================================\",\n    \"                     FXAA QUALITY - EXTREME QUALITY\",\n    \"============================================================================*/\",\n    \"#if (FXAA_QUALITY_PRESET == 39)\",\n    \"    #define FXAA_QUALITY_PS 12\",\n    \"    #define FXAA_QUALITY_P0 1.0\",\n    \"    #define FXAA_QUALITY_P1 1.0\",\n    \"    #define FXAA_QUALITY_P2 1.0\",\n    \"    #define FXAA_QUALITY_P3 1.0\",\n    \"    #define FXAA_QUALITY_P4 1.0\",\n    \"    #define FXAA_QUALITY_P5 1.5\",\n    \"    #define FXAA_QUALITY_P6 2.0\",\n    \"    #define FXAA_QUALITY_P7 2.0\",\n    \"    #define FXAA_QUALITY_P8 2.0\",\n    \"    #define FXAA_QUALITY_P9 2.0\",\n    \"    #define FXAA_QUALITY_P10 4.0\",\n    \"    #define FXAA_QUALITY_P11 8.0\",\n    \"#endif\",\n    \"\",\n    \"\",\n    \"\",\n    \"/*============================================================================\",\n    \"\",\n    \"                                API PORTING\",\n    \"\",\n    \"============================================================================*/\",\n    \"#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\",\n    \"    #define FxaaBool bool\",\n    \"    #define FxaaDiscard discard\",\n    \"    #define FxaaFloat float\",\n    \"    #define FxaaFloat2 vec2\",\n    \"    #define FxaaFloat3 vec3\",\n    \"    #define FxaaFloat4 vec4\",\n    \"    #define FxaaHalf float\",\n    \"    #define FxaaHalf2 vec2\",\n    \"    #define FxaaHalf3 vec3\",\n    \"    #define FxaaHalf4 vec4\",\n    \"    #define FxaaInt2 ivec2\",\n    \"    #define FxaaSat(x) clamp(x, 0.0, 1.0)\",\n    \"    #define FxaaTex sampler2D\",\n    \"#else\",\n    \"    #define FxaaBool bool\",\n    \"    #define FxaaDiscard clip(-1)\",\n    \"    #define FxaaFloat float\",\n    \"    #define FxaaFloat2 float2\",\n    \"    #define FxaaFloat3 float3\",\n    \"    #define FxaaFloat4 float4\",\n    \"    #define FxaaHalf half\",\n    \"    #define FxaaHalf2 half2\",\n    \"    #define FxaaHalf3 half3\",\n    \"    #define FxaaHalf4 half4\",\n    \"    #define FxaaSat(x) saturate(x)\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_GLSL_100 == 1)\",\n    \"  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)\",\n    \"  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_GLSL_120 == 1)\",\n    \"    // Requires,\",\n    \"    //  #version 120\",\n    \"    // And at least,\",\n    \"    //  #extension GL_EXT_gpu_shader4 : enable\",\n    \"    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\",\n    \"    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\",\n    \"    #if (FXAA_FAST_PIXEL_OFFSET == 1)\",\n    \"        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\",\n    \"    #else\",\n    \"        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\",\n    \"    #endif\",\n    \"    #if (FXAA_GATHER4_ALPHA == 1)\",\n    \"        // use #extension GL_ARB_gpu_shader5 : enable\",\n    \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n    \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n    \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n    \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n    \"    #endif\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_GLSL_130 == 1)\",\n    '    // Requires \"#version 130\" or better',\n    \"    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)\",\n    \"    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\",\n    \"    #if (FXAA_GATHER4_ALPHA == 1)\",\n    \"        // use #extension GL_ARB_gpu_shader5 : enable\",\n    \"        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\",\n    \"        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\",\n    \"        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)\",\n    \"        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\",\n    \"    #endif\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_HLSL_3 == 1)\",\n    \"    #define FxaaInt2 float2\",\n    \"    #define FxaaTex sampler2D\",\n    \"    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\",\n    \"    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_HLSL_4 == 1)\",\n    \"    #define FxaaInt2 int2\",\n    \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n    \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n    \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n    \"#endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"#if (FXAA_HLSL_5 == 1)\",\n    \"    #define FxaaInt2 int2\",\n    \"    struct FxaaTex { SamplerState smpl; Texture2D tex; };\",\n    \"    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\",\n    \"    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\",\n    \"    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\",\n    \"    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\",\n    \"    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\",\n    \"    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\",\n    \"#endif\",\n    \"\",\n    \"\",\n    \"/*============================================================================\",\n    \"                   GREEN AS LUMA OPTION SUPPORT FUNCTION\",\n    \"============================================================================*/\",\n    \"#if (FXAA_GREEN_AS_LUMA == 0)\",\n    \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\",\n    \"#else\",\n    \"    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\",\n    \"#endif\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"/*============================================================================\",\n    \"\",\n    \"                             FXAA3 QUALITY - PC\",\n    \"\",\n    \"============================================================================*/\",\n    \"#if (FXAA_PC == 1)\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"FxaaFloat4 FxaaPixelShader(\",\n    \"    //\",\n    \"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n    \"    // {xy} = center of pixel\",\n    \"    FxaaFloat2 pos,\",\n    \"    //\",\n    \"    // Used only for FXAA Console, and not used on the 360 version.\",\n    \"    // Use noperspective interpolation here (turn off perspective interpolation).\",\n    \"    // {xy_} = upper left of pixel\",\n    \"    // {_zw} = lower right of pixel\",\n    \"    FxaaFloat4 fxaaConsolePosPos,\",\n    \"    //\",\n    \"    // Input color texture.\",\n    \"    // {rgb_} = color in linear or perceptual color space\",\n    \"    // if (FXAA_GREEN_AS_LUMA == 0)\",\n    \"    //     {__a} = luma in perceptual color space (not linear)\",\n    \"    FxaaTex tex,\",\n    \"    //\",\n    \"    // Only used on the optimized 360 version of FXAA Console.\",\n    '    // For everything but 360, just use the same input here as for \"tex\".',\n    \"    // For 360, same texture, just alias with a 2nd sampler.\",\n    \"    // This sampler needs to have an exponent bias of -1.\",\n    \"    FxaaTex fxaaConsole360TexExpBiasNegOne,\",\n    \"    //\",\n    \"    // Only used on the optimized 360 version of FXAA Console.\",\n    '    // For everything but 360, just use the same input here as for \"tex\".',\n    \"    // For 360, same texture, just alias with a 3nd sampler.\",\n    \"    // This sampler needs to have an exponent bias of -2.\",\n    \"    FxaaTex fxaaConsole360TexExpBiasNegTwo,\",\n    \"    //\",\n    \"    // Only used on FXAA Quality.\",\n    \"    // This must be from a constant/uniform.\",\n    \"    // {x_} = 1.0/screenWidthInPixels\",\n    \"    // {_y} = 1.0/screenHeightInPixels\",\n    \"    FxaaFloat2 fxaaQualityRcpFrame,\",\n    \"    //\",\n    \"    // Only used on FXAA Console.\",\n    \"    // This must be from a constant/uniform.\",\n    \"    // This effects sub-pixel AA quality and inversely sharpness.\",\n    \"    //   Where N ranges between,\",\n    \"    //     N = 0.50 (default)\",\n    \"    //     N = 0.33 (sharper)\",\n    \"    // {x__} = -N/screenWidthInPixels\",\n    \"    // {_y_} = -N/screenHeightInPixels\",\n    \"    // {_z_} =  N/screenWidthInPixels\",\n    \"    // {__w} =  N/screenHeightInPixels\",\n    \"    FxaaFloat4 fxaaConsoleRcpFrameOpt,\",\n    \"    //\",\n    \"    // Only used on FXAA Console.\",\n    \"    // Not used on 360, but used on PS3 and PC.\",\n    \"    // This must be from a constant/uniform.\",\n    \"    // {x__} = -2.0/screenWidthInPixels\",\n    \"    // {_y_} = -2.0/screenHeightInPixels\",\n    \"    // {_z_} =  2.0/screenWidthInPixels\",\n    \"    // {__w} =  2.0/screenHeightInPixels\",\n    \"    FxaaFloat4 fxaaConsoleRcpFrameOpt2,\",\n    \"    //\",\n    \"    // Only used on FXAA Console.\",\n    \"    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\",\n    \"    // This must be from a constant/uniform.\",\n    \"    // {x__} =  8.0/screenWidthInPixels\",\n    \"    // {_y_} =  8.0/screenHeightInPixels\",\n    \"    // {_z_} = -4.0/screenWidthInPixels\",\n    \"    // {__w} = -4.0/screenHeightInPixels\",\n    \"    FxaaFloat4 fxaaConsole360RcpFrameOpt2,\",\n    \"    //\",\n    \"    // Only used on FXAA Quality.\",\n    \"    // This used to be the FXAA_QUALITY_SUBPIX define.\",\n    \"    // It is here now to allow easier tuning.\",\n    \"    // Choose the amount of sub-pixel aliasing removal.\",\n    \"    // This can effect sharpness.\",\n    \"    //   1.00 - upper limit (softer)\",\n    \"    //   0.75 - default amount of filtering\",\n    \"    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\",\n    \"    //   0.25 - almost off\",\n    \"    //   0.00 - completely off\",\n    \"    FxaaFloat fxaaQualitySubpix,\",\n    \"    //\",\n    \"    // Only used on FXAA Quality.\",\n    \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\",\n    \"    // It is here now to allow easier tuning.\",\n    \"    // The minimum amount of local contrast required to apply algorithm.\",\n    \"    //   0.333 - too little (faster)\",\n    \"    //   0.250 - low quality\",\n    \"    //   0.166 - default\",\n    \"    //   0.125 - high quality\",\n    \"    //   0.063 - overkill (slower)\",\n    \"    FxaaFloat fxaaQualityEdgeThreshold,\",\n    \"    //\",\n    \"    // Only used on FXAA Quality.\",\n    \"    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\",\n    \"    // It is here now to allow easier tuning.\",\n    \"    // Trims the algorithm from processing darks.\",\n    \"    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\",\n    \"    //   0.0625 - high quality (faster)\",\n    \"    //   0.0312 - visible limit (slower)\",\n    \"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n    \"    //   Likely want to set this to zero.\",\n    \"    //   As colors that are mostly not-green\",\n    \"    //   will appear very dark in the green channel!\",\n    \"    //   Tune by looking at mostly non-green content,\",\n    \"    //   then start at zero and increase until aliasing is a problem.\",\n    \"    FxaaFloat fxaaQualityEdgeThresholdMin,\",\n    \"    //\",\n    \"    // Only used on FXAA Console.\",\n    \"    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\",\n    \"    // It is here now to allow easier tuning.\",\n    \"    // This does not effect PS3, as this needs to be compiled in.\",\n    \"    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\",\n    \"    //   Due to the PS3 being ALU bound,\",\n    \"    //   there are only three safe values here: 2 and 4 and 8.\",\n    \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n    \"    // For all other platforms can be a non-power of two.\",\n    \"    //   8.0 is sharper (default!!!)\",\n    \"    //   4.0 is softer\",\n    \"    //   2.0 is really soft (good only for vector graphics inputs)\",\n    \"    FxaaFloat fxaaConsoleEdgeSharpness,\",\n    \"    //\",\n    \"    // Only used on FXAA Console.\",\n    \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\",\n    \"    // It is here now to allow easier tuning.\",\n    \"    // This does not effect PS3, as this needs to be compiled in.\",\n    \"    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\",\n    \"    //   Due to the PS3 being ALU bound,\",\n    \"    //   there are only two safe values here: 1/4 and 1/8.\",\n    \"    //   These options use the shaders ability to a free *|/ by 2|4|8.\",\n    \"    // The console setting has a different mapping than the quality setting.\",\n    \"    // Other platforms can use other values.\",\n    \"    //   0.125 leaves less aliasing, but is softer (default!!!)\",\n    \"    //   0.25 leaves more aliasing, and is sharper\",\n    \"    FxaaFloat fxaaConsoleEdgeThreshold,\",\n    \"    //\",\n    \"    // Only used on FXAA Console.\",\n    \"    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\",\n    \"    // It is here now to allow easier tuning.\",\n    \"    // Trims the algorithm from processing darks.\",\n    \"    // The console setting has a different mapping than the quality setting.\",\n    \"    // This only applies when FXAA_EARLY_EXIT is 1.\",\n    \"    // This does not apply to PS3,\",\n    \"    // PS3 was simplified to avoid more shader instructions.\",\n    \"    //   0.06 - faster but more aliasing in darks\",\n    \"    //   0.05 - default\",\n    \"    //   0.04 - slower and less aliasing in darks\",\n    \"    // Special notes when using FXAA_GREEN_AS_LUMA,\",\n    \"    //   Likely want to set this to zero.\",\n    \"    //   As colors that are mostly not-green\",\n    \"    //   will appear very dark in the green channel!\",\n    \"    //   Tune by looking at mostly non-green content,\",\n    \"    //   then start at zero and increase until aliasing is a problem.\",\n    \"    FxaaFloat fxaaConsoleEdgeThresholdMin,\",\n    \"    //\",\n    \"    // Extra constants for 360 FXAA Console only.\",\n    \"    // Use zeros or anything else for other platforms.\",\n    \"    // These must be in physical constant registers and NOT immediates.\",\n    \"    // Immediates will result in compiler un-optimizing.\",\n    \"    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\",\n    \"    FxaaFloat4 fxaaConsole360ConstDir\",\n    \") {\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat2 posM;\",\n    \"    posM.x = pos.x;\",\n    \"    posM.y = pos.y;\",\n    \"    #if (FXAA_GATHER4_ALPHA == 1)\",\n    \"        #if (FXAA_DISCARD == 0)\",\n    \"            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n    \"            #if (FXAA_GREEN_AS_LUMA == 0)\",\n    \"                #define lumaM rgbyM.w\",\n    \"            #else\",\n    \"                #define lumaM rgbyM.y\",\n    \"            #endif\",\n    \"        #endif\",\n    \"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n    \"            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\",\n    \"            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\",\n    \"        #else\",\n    \"            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\",\n    \"            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\",\n    \"        #endif\",\n    \"        #if (FXAA_DISCARD == 1)\",\n    \"            #define lumaM luma4A.w\",\n    \"        #endif\",\n    \"        #define lumaE luma4A.z\",\n    \"        #define lumaS luma4A.x\",\n    \"        #define lumaSE luma4A.y\",\n    \"        #define lumaNW luma4B.w\",\n    \"        #define lumaN luma4B.z\",\n    \"        #define lumaW luma4B.x\",\n    \"    #else\",\n    \"        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\",\n    \"        #if (FXAA_GREEN_AS_LUMA == 0)\",\n    \"            #define lumaM rgbyM.w\",\n    \"        #else\",\n    \"            #define lumaM rgbyM.y\",\n    \"        #endif\",\n    \"        #if (FXAA_GLSL_100 == 1)\",\n    \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\",\n    \"        #else\",\n    \"          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\",\n    \"        #endif\",\n    \"    #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat maxSM = max(lumaS, lumaM);\",\n    \"    FxaaFloat minSM = min(lumaS, lumaM);\",\n    \"    FxaaFloat maxESM = max(lumaE, maxSM);\",\n    \"    FxaaFloat minESM = min(lumaE, minSM);\",\n    \"    FxaaFloat maxWN = max(lumaN, lumaW);\",\n    \"    FxaaFloat minWN = min(lumaN, lumaW);\",\n    \"    FxaaFloat rangeMax = max(maxWN, maxESM);\",\n    \"    FxaaFloat rangeMin = min(minWN, minESM);\",\n    \"    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\",\n    \"    FxaaFloat range = rangeMax - rangeMin;\",\n    \"    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\",\n    \"    FxaaBool earlyExit = range < rangeMaxClamped;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    if(earlyExit)\",\n    \"        #if (FXAA_DISCARD == 1)\",\n    \"            FxaaDiscard;\",\n    \"        #else\",\n    \"            return rgbyM;\",\n    \"        #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    #if (FXAA_GATHER4_ALPHA == 0)\",\n    \"        #if (FXAA_GLSL_100 == 1)\",\n    \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\",\n    \"        #else\",\n    \"          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\",\n    \"          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n    \"        #endif\",\n    \"    #else\",\n    \"        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\",\n    \"        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\",\n    \"    #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat lumaNS = lumaN + lumaS;\",\n    \"    FxaaFloat lumaWE = lumaW + lumaE;\",\n    \"    FxaaFloat subpixRcpRange = 1.0/range;\",\n    \"    FxaaFloat subpixNSWE = lumaNS + lumaWE;\",\n    \"    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\",\n    \"    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat lumaNESE = lumaNE + lumaSE;\",\n    \"    FxaaFloat lumaNWNE = lumaNW + lumaNE;\",\n    \"    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\",\n    \"    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat lumaNWSW = lumaNW + lumaSW;\",\n    \"    FxaaFloat lumaSWSE = lumaSW + lumaSE;\",\n    \"    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\",\n    \"    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\",\n    \"    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\",\n    \"    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\",\n    \"    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\",\n    \"    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\",\n    \"    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\",\n    \"    FxaaBool horzSpan = edgeHorz >= edgeVert;\",\n    \"    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    if(!horzSpan) lumaN = lumaW;\",\n    \"    if(!horzSpan) lumaS = lumaE;\",\n    \"    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\",\n    \"    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat gradientN = lumaN - lumaM;\",\n    \"    FxaaFloat gradientS = lumaS - lumaM;\",\n    \"    FxaaFloat lumaNN = lumaN + lumaM;\",\n    \"    FxaaFloat lumaSS = lumaS + lumaM;\",\n    \"    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\",\n    \"    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\",\n    \"    if(pairN) lengthSign = -lengthSign;\",\n    \"    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat2 posB;\",\n    \"    posB.x = posM.x;\",\n    \"    posB.y = posM.y;\",\n    \"    FxaaFloat2 offNP;\",\n    \"    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\",\n    \"    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\",\n    \"    if(!horzSpan) posB.x += lengthSign * 0.5;\",\n    \"    if( horzSpan) posB.y += lengthSign * 0.5;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat2 posN;\",\n    \"    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\",\n    \"    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\",\n    \"    FxaaFloat2 posP;\",\n    \"    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\",\n    \"    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\",\n    \"    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\",\n    \"    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\",\n    \"    FxaaFloat subpixE = subpixC * subpixC;\",\n    \"    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    if(!pairN) lumaNN = lumaSS;\",\n    \"    FxaaFloat gradientScaled = gradient * 1.0/4.0;\",\n    \"    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\",\n    \"    FxaaFloat subpixF = subpixD * subpixE;\",\n    \"    FxaaBool lumaMLTZero = lumaMM < 0.0;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    lumaEndN -= lumaNN * 0.5;\",\n    \"    lumaEndP -= lumaNN * 0.5;\",\n    \"    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\",\n    \"    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\",\n    \"    FxaaBool doneNP = (!doneN) || (!doneP);\",\n    \"    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\",\n    \"    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    if(doneNP) {\",\n    \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"        doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"        doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\",\n    \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\",\n    \"        doneNP = (!doneN) || (!doneP);\",\n    \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\",\n    \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"        #if (FXAA_QUALITY_PS > 3)\",\n    \"        if(doneNP) {\",\n    \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"            doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"            doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\",\n    \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\",\n    \"            doneNP = (!doneN) || (!doneP);\",\n    \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\",\n    \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"            #if (FXAA_QUALITY_PS > 4)\",\n    \"            if(doneNP) {\",\n    \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"                doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"                doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\",\n    \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\",\n    \"                doneNP = (!doneN) || (!doneP);\",\n    \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\",\n    \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                #if (FXAA_QUALITY_PS > 5)\",\n    \"                if(doneNP) {\",\n    \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\",\n    \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\",\n    \"                    doneNP = (!doneN) || (!doneP);\",\n    \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\",\n    \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                    #if (FXAA_QUALITY_PS > 6)\",\n    \"                    if(doneNP) {\",\n    \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\",\n    \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\",\n    \"                        doneNP = (!doneN) || (!doneP);\",\n    \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\",\n    \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                        #if (FXAA_QUALITY_PS > 7)\",\n    \"                        if(doneNP) {\",\n    \"                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"                            doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"                            doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\",\n    \"                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\",\n    \"                            doneNP = (!doneN) || (!doneP);\",\n    \"                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\",\n    \"                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    #if (FXAA_QUALITY_PS > 8)\",\n    \"    if(doneNP) {\",\n    \"        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"        doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"        doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\",\n    \"        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\",\n    \"        doneNP = (!doneN) || (!doneP);\",\n    \"        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\",\n    \"        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"        #if (FXAA_QUALITY_PS > 9)\",\n    \"        if(doneNP) {\",\n    \"            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"            doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"            doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\",\n    \"            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\",\n    \"            doneNP = (!doneN) || (!doneP);\",\n    \"            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\",\n    \"            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"            #if (FXAA_QUALITY_PS > 10)\",\n    \"            if(doneNP) {\",\n    \"                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"                doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"                doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\",\n    \"                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\",\n    \"                doneNP = (!doneN) || (!doneP);\",\n    \"                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\",\n    \"                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                #if (FXAA_QUALITY_PS > 11)\",\n    \"                if(doneNP) {\",\n    \"                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"                    doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"                    doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\",\n    \"                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\",\n    \"                    doneNP = (!doneN) || (!doneP);\",\n    \"                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\",\n    \"                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                    #if (FXAA_QUALITY_PS > 12)\",\n    \"                    if(doneNP) {\",\n    \"                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\",\n    \"                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\",\n    \"                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\",\n    \"                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\",\n    \"                        doneN = abs(lumaEndN) >= gradientScaled;\",\n    \"                        doneP = abs(lumaEndP) >= gradientScaled;\",\n    \"                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\",\n    \"                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\",\n    \"                        doneNP = (!doneN) || (!doneP);\",\n    \"                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\",\n    \"                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                    }\",\n    \"                    #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                }\",\n    \"                #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"            }\",\n    \"            #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"        }\",\n    \"        #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    }\",\n    \"    #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                        }\",\n    \"                        #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                    }\",\n    \"                    #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"                }\",\n    \"                #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"            }\",\n    \"            #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"        }\",\n    \"        #endif\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    }\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat dstN = posM.x - posN.x;\",\n    \"    FxaaFloat dstP = posP.x - posM.x;\",\n    \"    if(!horzSpan) dstN = posM.y - posN.y;\",\n    \"    if(!horzSpan) dstP = posP.y - posM.y;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\",\n    \"    FxaaFloat spanLength = (dstP + dstN);\",\n    \"    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\",\n    \"    FxaaFloat spanLengthRcp = 1.0/spanLength;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaBool directionN = dstN < dstP;\",\n    \"    FxaaFloat dst = min(dstN, dstP);\",\n    \"    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\",\n    \"    FxaaFloat subpixG = subpixF * subpixF;\",\n    \"    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\",\n    \"    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\",\n    \"/*--------------------------------------------------------------------------*/\",\n    \"    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\",\n    \"    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\",\n    \"    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\",\n    \"    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\",\n    \"    #if (FXAA_DISCARD == 1)\",\n    \"        return FxaaTexTop(tex, posM);\",\n    \"    #else\",\n    \"        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\",\n    \"    #endif\",\n    \"}\",\n    \"/*==========================================================================*/\",\n    \"#endif\",\n    \"\",\n    \"void main() {\",\n    \"  gl_FragColor = FxaaPixelShader(\",\n    \"    vUv,\",\n    \"    vec4(0.0),\",\n    \"    tDiffuse,\",\n    \"    tDiffuse,\",\n    \"    tDiffuse,\",\n    \"    resolution,\",\n    \"    vec4(0.0),\",\n    \"    vec4(0.0),\",\n    \"    vec4(0.0),\",\n    \"    0.75,\",\n    \"    0.166,\",\n    \"    0.0833,\",\n    \"    0.0,\",\n    \"    0.0,\",\n    \"    0.0,\",\n    \"    vec4(0.0)\",\n    \"  );\",\n    \"\",\n    \"  // TODO avoid querying texture twice for same texel\",\n    \"  gl_FragColor.a = texture2D(tDiffuse, vUv).a;\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  FXAAShader\n};\n"]},"metadata":{},"sourceType":"module"}