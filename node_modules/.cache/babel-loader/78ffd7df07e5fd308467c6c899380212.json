{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping } from \"three\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\n\nvar LUT3dlLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUT3dlLoader, _Loader);\n\n  var _super = _createSuper(LUT3dlLoader);\n\n  function LUT3dlLoader() {\n    _classCallCheck(this, LUT3dlLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LUT3dlLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"text\");\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      str = str.replace(/^#.*?(\\n|\\r)/gm, \"\").replace(/^\\s*?(\\n|\\r)/gm, \"\").trim();\n      var lines = str.split(/[\\n\\r]+/g);\n      var gridLines = lines[0].trim().split(/\\s+/g).map(function (e) {\n        return parseFloat(e);\n      });\n      var gridStep = gridLines[1] - gridLines[0];\n      var size = gridLines.length;\n\n      for (var i = 1, l = gridLines.length; i < l; i++) {\n        if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n          throw new Error(\"LUT3dlLoader: Inconsistent grid size not supported.\");\n        }\n      }\n\n      var dataArray = new Array(size * size * size * 4);\n      var index = 0;\n      var maxOutputValue = 0;\n\n      for (var _i = 1, _l = lines.length; _i < _l; _i++) {\n        var line = lines[_i].trim();\n\n        var split = line.split(/\\s/g);\n        var r = parseFloat(split[0]);\n        var g = parseFloat(split[1]);\n        var b = parseFloat(split[2]);\n        maxOutputValue = Math.max(maxOutputValue, r, g, b);\n        var bLayer = index % size;\n        var gLayer = Math.floor(index / size) % size;\n        var rLayer = Math.floor(index / (size * size)) % size;\n        var pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n        dataArray[4 * pixelIndex + 0] = r;\n        dataArray[4 * pixelIndex + 1] = g;\n        dataArray[4 * pixelIndex + 2] = b;\n        dataArray[4 * pixelIndex + 3] = 1;\n        index += 1;\n      }\n\n      var bits = Math.ceil(Math.log2(maxOutputValue));\n      var maxBitValue = Math.pow(2, bits);\n\n      for (var _i2 = 0, _l2 = dataArray.length; _i2 < _l2; _i2 += 4) {\n        var _r = dataArray[_i2 + 0];\n        var _g = dataArray[_i2 + 1];\n        var _b = dataArray[_i2 + 2];\n        dataArray[_i2 + 0] = 255 * _r / maxBitValue;\n        dataArray[_i2 + 1] = 255 * _g / maxBitValue;\n        dataArray[_i2 + 2] = 255 * _b / maxBitValue;\n      }\n\n      var data = new Uint8Array(dataArray);\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.format = RGBAFormat;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      var texture3D = new Data3DTexture();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.format = RGBAFormat;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      texture3D.needsUpdate = true;\n      return {\n        size: size,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n\n  return LUT3dlLoader;\n}(Loader);\n\nexport { LUT3dlLoader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/LUT3dlLoader.js"],"names":["Loader","FileLoader","DataTexture","RGBAFormat","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","Data3DTexture","LUT3dlLoader","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","load","text","parse","e","console","error","itemError","str","replace","trim","lines","split","gridLines","map","parseFloat","gridStep","size","length","i","l","Error","dataArray","Array","index","maxOutputValue","line","r","g","b","Math","max","bLayer","gLayer","floor","rLayer","pixelIndex","bits","ceil","log2","maxBitValue","pow","data","Uint8Array","texture","image","width","height","format","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","needsUpdate","texture3D","depth","wrapR"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping } from \"three\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nclass LUT3dlLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"text\");\n    loader.load(\n      url,\n      (text) => {\n        try {\n          onLoad(this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          this.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(str) {\n    str = str.replace(/^#.*?(\\n|\\r)/gm, \"\").replace(/^\\s*?(\\n|\\r)/gm, \"\").trim();\n    const lines = str.split(/[\\n\\r]+/g);\n    const gridLines = lines[0].trim().split(/\\s+/g).map((e) => parseFloat(e));\n    const gridStep = gridLines[1] - gridLines[0];\n    const size = gridLines.length;\n    for (let i = 1, l = gridLines.length; i < l; i++) {\n      if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n        throw new Error(\"LUT3dlLoader: Inconsistent grid size not supported.\");\n      }\n    }\n    const dataArray = new Array(size * size * size * 4);\n    let index = 0;\n    let maxOutputValue = 0;\n    for (let i = 1, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n      const r = parseFloat(split[0]);\n      const g = parseFloat(split[1]);\n      const b = parseFloat(split[2]);\n      maxOutputValue = Math.max(maxOutputValue, r, g, b);\n      const bLayer = index % size;\n      const gLayer = Math.floor(index / size) % size;\n      const rLayer = Math.floor(index / (size * size)) % size;\n      const pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n      dataArray[4 * pixelIndex + 0] = r;\n      dataArray[4 * pixelIndex + 1] = g;\n      dataArray[4 * pixelIndex + 2] = b;\n      dataArray[4 * pixelIndex + 3] = 1;\n      index += 1;\n    }\n    const bits = Math.ceil(Math.log2(maxOutputValue));\n    const maxBitValue = Math.pow(2, bits);\n    for (let i = 0, l = dataArray.length; i < l; i += 4) {\n      const r = dataArray[i + 0];\n      const g = dataArray[i + 1];\n      const b = dataArray[i + 2];\n      dataArray[i + 0] = 255 * r / maxBitValue;\n      dataArray[i + 1] = 255 * g / maxBitValue;\n      dataArray[i + 2] = 255 * b / maxBitValue;\n    }\n    const data = new Uint8Array(dataArray);\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.format = RGBAFormat;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    const texture3D = new Data3DTexture();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBAFormat;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    texture3D.needsUpdate = true;\n    return {\n      size,\n      texture,\n      texture3D\n    };\n  }\n}\nexport {\n  LUT3dlLoader\n};\n"]},"metadata":{},"sourceType":"module"}