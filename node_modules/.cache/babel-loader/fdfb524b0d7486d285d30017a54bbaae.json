{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\n\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      type: HalfFloatType\n    });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n\n    if (this.params.output === 1) {\n      return;\n    }\n\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n    this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n    this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n\n    renderer.setClearColor(0);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n\n    if (!this.supportsDepthTextureExtension) {\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n    }\n\n    if (this.supportsNormalTexture) {\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    }\n\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n    }\n\n    let outputMaterial = this.materialCopy;\n\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n\n}\n\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\n\nexport { SAOPass };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/SAOPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","Vector2","WebGLRenderTarget","HalfFloatType","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Pass","FullScreenQuad","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","constructor","scene","camera","useDepthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","depthRenderTarget","depthTexture","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","saoMaterial","defines","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height","dispose","Beauty","Default","SAO","Depth","Normal"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n    this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n    this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(\n        this.vBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(0, 1)\n      );\n      BlurShaderUtils.configure(\n        this.hBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(1, 0)\n      );\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n    renderer.setClearColor(0);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    if (!this.supportsDepthTextureExtension) {\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n    }\n    if (this.supportsNormalTexture) {\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    }\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n    }\n    let outputMaterial = this.materialCopy;\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n}\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport {\n  SAOPass\n};\n"]},"metadata":{},"sourceType":"module"}