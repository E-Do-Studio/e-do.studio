{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial, LuminanceFormat, MathUtils, DataTexture, RedFormat, FloatType } from \"three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\n\nclass GlitchPass extends Pass {\n  constructor(dt_size = 64) {\n    super();\n\n    __publicField(this, \"material\");\n\n    __publicField(this, \"fsQuad\");\n\n    __publicField(this, \"goWild\");\n\n    __publicField(this, \"curF\");\n\n    __publicField(this, \"randX\");\n\n    __publicField(this, \"uniforms\");\n\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    if (renderer.capabilities.isWebGL2 === false) this.uniforms[\"tDisp\"].value.format = LuminanceFormat;\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"seed\"].value = Math.random();\n    this.uniforms[\"byp\"].value = 0;\n\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms[\"amount\"].value = Math.random() / 30;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms[\"amount\"].value = Math.random() / 90;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms[\"byp\"].value = 1;\n    }\n\n    this.curF++;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n}\n\nexport { GlitchPass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/GlitchPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","UniformsUtils","ShaderMaterial","LuminanceFormat","MathUtils","DataTexture","RedFormat","FloatType","DigitalGlitch","GlitchPass","constructor","dt_size","uniforms","clone","generateHeightmap","material","vertexShader","fragmentShader","fsQuad","goWild","curF","generateTrigger","render","renderer","writeBuffer","readBuffer","capabilities","isWebGL2","format","texture","Math","random","randX","randFloat","PI","renderToScreen","setRenderTarget","clear","randInt","data_arr","Float32Array","length","i","val","needsUpdate"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial, LuminanceFormat, MathUtils, DataTexture, RedFormat, FloatType } from \"three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nclass GlitchPass extends Pass {\n  constructor(dt_size = 64) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"goWild\");\n    __publicField(this, \"curF\");\n    __publicField(this, \"randX\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (renderer.capabilities.isWebGL2 === false)\n      this.uniforms[\"tDisp\"].value.format = LuminanceFormat;\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"seed\"].value = Math.random();\n    this.uniforms[\"byp\"].value = 0;\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms[\"amount\"].value = Math.random() / 30;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms[\"amount\"].value = Math.random() / 90;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms[\"byp\"].value = 1;\n    }\n    this.curF++;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n}\nexport {\n  GlitchPass\n};\n"]},"metadata":{},"sourceType":"module"}