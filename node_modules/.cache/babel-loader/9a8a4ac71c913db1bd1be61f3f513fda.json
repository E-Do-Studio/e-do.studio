{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { BufferGeometry, Mesh, Points } from \"three\";\n\nvar _DRACOExporter = /*#__PURE__*/function () {\n  function _DRACOExporter() {\n    _classCallCheck(this, _DRACOExporter);\n  }\n\n  _createClass(_DRACOExporter, [{\n    key: \"parse\",\n    value: function parse(object) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        decodeSpeed: 5,\n        encodeSpeed: 5,\n        encoderMethod: _DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n        quantization: [16, 8, 8, 8, 8],\n        exportUvs: true,\n        exportNormals: true,\n        exportColor: false\n      };\n\n      if (object instanceof BufferGeometry && object.isBufferGeometry) {\n        throw new Error(\"DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.\");\n      }\n\n      if (DracoEncoderModule === void 0) {\n        throw new Error(\"THREE.DRACOExporter: required the draco_encoder to work.\");\n      }\n\n      var geometry = object.geometry;\n      var dracoEncoder = DracoEncoderModule();\n      var encoder = new dracoEncoder.Encoder();\n      var builder;\n      var dracoObject;\n\n      if (!geometry.isBufferGeometry) {\n        throw new Error(\"THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.\");\n      }\n\n      if (object instanceof Mesh && object.isMesh) {\n        builder = new dracoEncoder.MeshBuilder();\n        dracoObject = new dracoEncoder.Mesh();\n        var vertices = geometry.getAttribute(\"position\");\n        builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n        var faces = geometry.getIndex();\n\n        if (faces !== null) {\n          builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n        } else {\n          var faces2 = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n\n          for (var i = 0; i < faces2.length; i++) {\n            faces2[i] = i;\n          }\n\n          builder.AddFacesToMesh(dracoObject, vertices.count, faces2);\n        }\n\n        if (options.exportNormals) {\n          var normals = geometry.getAttribute(\"normal\");\n\n          if (normals !== void 0) {\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n          }\n        }\n\n        if (options.exportUvs) {\n          var uvs = geometry.getAttribute(\"uv\");\n\n          if (uvs !== void 0) {\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n          }\n        }\n\n        if (options.exportColor) {\n          var colors = geometry.getAttribute(\"color\");\n\n          if (colors !== void 0) {\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n          }\n        }\n      } else if (object instanceof Points && object.isPoints) {\n        builder = new dracoEncoder.PointCloudBuilder();\n        dracoObject = new dracoEncoder.PointCloud();\n\n        var _vertices = geometry.getAttribute(\"position\");\n\n        builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, _vertices.count, _vertices.itemSize, _vertices.array);\n\n        if (options.exportColor) {\n          var _colors = geometry.getAttribute(\"color\");\n\n          if (_colors !== void 0) {\n            builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, _colors.count, _colors.itemSize, _colors.array);\n          }\n        }\n      } else {\n        throw new Error(\"DRACOExporter: Unsupported object type.\");\n      }\n\n      var encodedData = new dracoEncoder.DracoInt8Array();\n      var encodeSpeed = options.encodeSpeed !== void 0 ? options.encodeSpeed : 5;\n      var decodeSpeed = options.decodeSpeed !== void 0 ? options.decodeSpeed : 5;\n      encoder.SetSpeedOptions(encodeSpeed, decodeSpeed);\n\n      if (options.encoderMethod !== void 0) {\n        encoder.SetEncodingMethod(options.encoderMethod);\n      }\n\n      if (options.quantization !== void 0) {\n        for (var _i = 0; _i < 5; _i++) {\n          if (options.quantization[_i] !== void 0) {\n            encoder.SetAttributeQuantization(_i, options.quantization[_i]);\n          }\n        }\n      }\n\n      var length;\n\n      if (object instanceof Mesh && object.isMesh) {\n        length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n      } else {\n        length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n      }\n\n      dracoEncoder.destroy(dracoObject);\n\n      if (length === 0) {\n        throw new Error(\"THREE.DRACOExporter: Draco encoding failed.\");\n      }\n\n      var outputData = new Int8Array(new ArrayBuffer(length));\n\n      for (var _i2 = 0; _i2 < length; _i2++) {\n        outputData[_i2] = encodedData.GetValue(_i2);\n      }\n\n      dracoEncoder.destroy(encodedData);\n      dracoEncoder.destroy(encoder);\n      dracoEncoder.destroy(builder);\n      return outputData;\n    }\n  }]);\n\n  return _DRACOExporter;\n}();\n\nvar DRACOExporter = _DRACOExporter; // Encoder methods\n\n__publicField(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n\n__publicField(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0); // Geometry type\n\n\n__publicField(DRACOExporter, \"POINT_CLOUD\", 0);\n\n__publicField(DRACOExporter, \"TRIANGULAR_MESH\", 1); // Attribute type\n\n\n__publicField(DRACOExporter, \"INVALID\", -1);\n\n__publicField(DRACOExporter, \"POSITION\", 0);\n\n__publicField(DRACOExporter, \"NORMAL\", 1);\n\n__publicField(DRACOExporter, \"COLOR\", 2);\n\n__publicField(DRACOExporter, \"TEX_COORD\", 3);\n\n__publicField(DRACOExporter, \"GENERIC\", 4);\n\nexport { DRACOExporter };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/exporters/DRACOExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","Mesh","Points","_DRACOExporter","object","options","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","isBufferGeometry","Error","DracoEncoderModule","geometry","dracoEncoder","encoder","Encoder","builder","dracoObject","isMesh","MeshBuilder","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","faces2","Uint32Array","Uint16Array","i","length","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","isPoints","PointCloudBuilder","PointCloud","AddFloatAttribute","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","EncodePointCloudToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue","DRACOExporter"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX;AAAA,SAAqBD,GAAG,IAAID,GAAP,GAAaJ,SAAS,CAACI,GAAD,EAAMC,GAAN,EAAW;AAAEE,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,YAAY,EAAE,IAAlC;AAAwCC,IAAAA,QAAQ,EAAE,IAAlD;AAAwDH,IAAAA,KAAK,EAALA;AAAxD,GAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAApI;AAAA,CAAtB;;AACA,IAAII,aAAa,GAAG,SAAhBA,aAAgB,CAACN,GAAD,EAAMC,GAAN,EAAWC,KAAX,EAAqB;AACvCH,EAAAA,eAAe,CAACC,GAAD,EAAM,OAAOC,GAAP,KAAe,QAAf,GAA0BA,GAAG,GAAG,EAAhC,GAAqCA,GAA3C,EAAgDC,KAAhD,CAAf;;AACA,SAAOA,KAAP;AACD,CAHD;;AAIA,SAASK,cAAT,EAAyBC,IAAzB,EAA+BC,MAA/B,QAA6C,OAA7C;;AACA,IAAMC,cAAc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WAClB,eAAMC,MAAN,EAQG;AAAA,UARWC,OAQX,uEARqB;AACtBC,QAAAA,WAAW,EAAE,CADS;AAEtBC,QAAAA,WAAW,EAAE,CAFS;AAGtBC,QAAAA,aAAa,EAAEL,cAAc,CAACM,yBAHR;AAItBC,QAAAA,YAAY,EAAE,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAJQ;AAKtBC,QAAAA,SAAS,EAAE,IALW;AAMtBC,QAAAA,aAAa,EAAE,IANO;AAOtBC,QAAAA,WAAW,EAAE;AAPS,OAQrB;;AACD,UAAIT,MAAM,YAAYJ,cAAlB,IAAoCI,MAAM,CAACU,gBAA/C,EAAiE;AAC/D,cAAM,IAAIC,KAAJ,CAAU,qFAAV,CAAN;AACD;;AACD,UAAIC,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AACjC,cAAM,IAAID,KAAJ,CAAU,0DAAV,CAAN;AACD;;AACD,UAAME,QAAQ,GAAGb,MAAM,CAACa,QAAxB;AACA,UAAMC,YAAY,GAAGF,kBAAkB,EAAvC;AACA,UAAMG,OAAO,GAAG,IAAID,YAAY,CAACE,OAAjB,EAAhB;AACA,UAAIC,OAAJ;AACA,UAAIC,WAAJ;;AACA,UAAI,CAACL,QAAQ,CAACH,gBAAd,EAAgC;AAC9B,cAAM,IAAIC,KAAJ,CAAU,gGAAV,CAAN;AACD;;AACD,UAAIX,MAAM,YAAYH,IAAlB,IAA0BG,MAAM,CAACmB,MAArC,EAA6C;AAC3CF,QAAAA,OAAO,GAAG,IAAIH,YAAY,CAACM,WAAjB,EAAV;AACAF,QAAAA,WAAW,GAAG,IAAIJ,YAAY,CAACjB,IAAjB,EAAd;AACA,YAAMwB,QAAQ,GAAGR,QAAQ,CAACS,YAAT,CAAsB,UAAtB,CAAjB;AACAL,QAAAA,OAAO,CAACM,uBAAR,CACEL,WADF,EAEEJ,YAAY,CAACU,QAFf,EAGEH,QAAQ,CAACI,KAHX,EAIEJ,QAAQ,CAACK,QAJX,EAKEL,QAAQ,CAACM,KALX;AAOA,YAAMC,KAAK,GAAGf,QAAQ,CAACgB,QAAT,EAAd;;AACA,YAAID,KAAK,KAAK,IAAd,EAAoB;AAClBX,UAAAA,OAAO,CAACa,cAAR,CAAuBZ,WAAvB,EAAoCU,KAAK,CAACH,KAAN,GAAc,CAAlD,EAAqDG,KAAK,CAACD,KAA3D;AACD,SAFD,MAEO;AACL,cAAMI,MAAM,GAAG,KAAKV,QAAQ,CAACI,KAAT,GAAiB,KAAjB,GAAyBO,WAAzB,GAAuCC,WAA5C,EAAyDZ,QAAQ,CAACI,KAAlE,CAAf;;AACA,eAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCH,YAAAA,MAAM,CAACG,CAAD,CAAN,GAAYA,CAAZ;AACD;;AACDjB,UAAAA,OAAO,CAACa,cAAR,CAAuBZ,WAAvB,EAAoCG,QAAQ,CAACI,KAA7C,EAAoDM,MAApD;AACD;;AACD,YAAI9B,OAAO,CAACO,aAAZ,EAA2B;AACzB,cAAM4B,OAAO,GAAGvB,QAAQ,CAACS,YAAT,CAAsB,QAAtB,CAAhB;;AACA,cAAIc,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBnB,YAAAA,OAAO,CAACM,uBAAR,CACEL,WADF,EAEEJ,YAAY,CAACuB,MAFf,EAGED,OAAO,CAACX,KAHV,EAIEW,OAAO,CAACV,QAJV,EAKEU,OAAO,CAACT,KALV;AAOD;AACF;;AACD,YAAI1B,OAAO,CAACM,SAAZ,EAAuB;AACrB,cAAM+B,GAAG,GAAGzB,QAAQ,CAACS,YAAT,CAAsB,IAAtB,CAAZ;;AACA,cAAIgB,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClBrB,YAAAA,OAAO,CAACM,uBAAR,CAAgCL,WAAhC,EAA6CJ,YAAY,CAACyB,SAA1D,EAAqED,GAAG,CAACb,KAAzE,EAAgFa,GAAG,CAACZ,QAApF,EAA8FY,GAAG,CAACX,KAAlG;AACD;AACF;;AACD,YAAI1B,OAAO,CAACQ,WAAZ,EAAyB;AACvB,cAAM+B,MAAM,GAAG3B,QAAQ,CAACS,YAAT,CAAsB,OAAtB,CAAf;;AACA,cAAIkB,MAAM,KAAK,KAAK,CAApB,EAAuB;AACrBvB,YAAAA,OAAO,CAACM,uBAAR,CAAgCL,WAAhC,EAA6CJ,YAAY,CAAC2B,KAA1D,EAAiED,MAAM,CAACf,KAAxE,EAA+Ee,MAAM,CAACd,QAAtF,EAAgGc,MAAM,CAACb,KAAvG;AACD;AACF;AACF,OA7CD,MA6CO,IAAI3B,MAAM,YAAYF,MAAlB,IAA4BE,MAAM,CAAC0C,QAAvC,EAAiD;AACtDzB,QAAAA,OAAO,GAAG,IAAIH,YAAY,CAAC6B,iBAAjB,EAAV;AACAzB,QAAAA,WAAW,GAAG,IAAIJ,YAAY,CAAC8B,UAAjB,EAAd;;AACA,YAAMvB,SAAQ,GAAGR,QAAQ,CAACS,YAAT,CAAsB,UAAtB,CAAjB;;AACAL,QAAAA,OAAO,CAAC4B,iBAAR,CAA0B3B,WAA1B,EAAuCJ,YAAY,CAACU,QAApD,EAA8DH,SAAQ,CAACI,KAAvE,EAA8EJ,SAAQ,CAACK,QAAvF,EAAiGL,SAAQ,CAACM,KAA1G;;AACA,YAAI1B,OAAO,CAACQ,WAAZ,EAAyB;AACvB,cAAM+B,OAAM,GAAG3B,QAAQ,CAACS,YAAT,CAAsB,OAAtB,CAAf;;AACA,cAAIkB,OAAM,KAAK,KAAK,CAApB,EAAuB;AACrBvB,YAAAA,OAAO,CAAC4B,iBAAR,CAA0B3B,WAA1B,EAAuCJ,YAAY,CAAC2B,KAApD,EAA2DD,OAAM,CAACf,KAAlE,EAAyEe,OAAM,CAACd,QAAhF,EAA0Fc,OAAM,CAACb,KAAjG;AACD;AACF;AACF,OAXM,MAWA;AACL,cAAM,IAAIhB,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,UAAMmC,WAAW,GAAG,IAAIhC,YAAY,CAACiC,cAAjB,EAApB;AACA,UAAM5C,WAAW,GAAGF,OAAO,CAACE,WAAR,KAAwB,KAAK,CAA7B,GAAiCF,OAAO,CAACE,WAAzC,GAAuD,CAA3E;AACA,UAAMD,WAAW,GAAGD,OAAO,CAACC,WAAR,KAAwB,KAAK,CAA7B,GAAiCD,OAAO,CAACC,WAAzC,GAAuD,CAA3E;AACAa,MAAAA,OAAO,CAACiC,eAAR,CAAwB7C,WAAxB,EAAqCD,WAArC;;AACA,UAAID,OAAO,CAACG,aAAR,KAA0B,KAAK,CAAnC,EAAsC;AACpCW,QAAAA,OAAO,CAACkC,iBAAR,CAA0BhD,OAAO,CAACG,aAAlC;AACD;;AACD,UAAIH,OAAO,CAACK,YAAR,KAAyB,KAAK,CAAlC,EAAqC;AACnC,aAAK,IAAI4B,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,CAApB,EAAuBA,EAAC,EAAxB,EAA4B;AAC1B,cAAIjC,OAAO,CAACK,YAAR,CAAqB4B,EAArB,MAA4B,KAAK,CAArC,EAAwC;AACtCnB,YAAAA,OAAO,CAACmC,wBAAR,CAAiChB,EAAjC,EAAoCjC,OAAO,CAACK,YAAR,CAAqB4B,EAArB,CAApC;AACD;AACF;AACF;;AACD,UAAIC,MAAJ;;AACA,UAAInC,MAAM,YAAYH,IAAlB,IAA0BG,MAAM,CAACmB,MAArC,EAA6C;AAC3CgB,QAAAA,MAAM,GAAGpB,OAAO,CAACoC,uBAAR,CAAgCjC,WAAhC,EAA6C4B,WAA7C,CAAT;AACD,OAFD,MAEO;AACLX,QAAAA,MAAM,GAAGpB,OAAO,CAACqC,6BAAR,CAAsClC,WAAtC,EAAmD,IAAnD,EAAyD4B,WAAzD,CAAT;AACD;;AACDhC,MAAAA,YAAY,CAACuC,OAAb,CAAqBnC,WAArB;;AACA,UAAIiB,MAAM,KAAK,CAAf,EAAkB;AAChB,cAAM,IAAIxB,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,UAAM2C,UAAU,GAAG,IAAIC,SAAJ,CAAc,IAAIC,WAAJ,CAAgBrB,MAAhB,CAAd,CAAnB;;AACA,WAAK,IAAID,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGC,MAApB,EAA4BD,GAAC,EAA7B,EAAiC;AAC/BoB,QAAAA,UAAU,CAACpB,GAAD,CAAV,GAAgBY,WAAW,CAACW,QAAZ,CAAqBvB,GAArB,CAAhB;AACD;;AACDpB,MAAAA,YAAY,CAACuC,OAAb,CAAqBP,WAArB;AACAhC,MAAAA,YAAY,CAACuC,OAAb,CAAqBtC,OAArB;AACAD,MAAAA,YAAY,CAACuC,OAAb,CAAqBpC,OAArB;AACA,aAAOqC,UAAP;AACD;AAnHiB;;AAAA;AAAA,GAApB;;AAqHA,IAAII,aAAa,GAAG3D,cAApB,C,CACA;;AACAJ,aAAa,CAAC+D,aAAD,EAAgB,2BAAhB,EAA6C,CAA7C,CAAb;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,0BAAhB,EAA4C,CAA5C,CAAb,C,CACA;;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,aAAhB,EAA+B,CAA/B,CAAb;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,iBAAhB,EAAmC,CAAnC,CAAb,C,CACA;;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,SAAhB,EAA2B,CAAC,CAA5B,CAAb;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,UAAhB,EAA4B,CAA5B,CAAb;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,QAAhB,EAA0B,CAA1B,CAAb;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,OAAhB,EAAyB,CAAzB,CAAb;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,WAAhB,EAA6B,CAA7B,CAAb;;AACA/D,aAAa,CAAC+D,aAAD,EAAgB,SAAhB,EAA2B,CAA3B,CAAb;;AACA,SACEA,aADF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Mesh, Points } from \"three\";\nconst _DRACOExporter = class {\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: _DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error(\"DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.\");\n    }\n    if (DracoEncoderModule === void 0) {\n      throw new Error(\"THREE.DRACOExporter: required the draco_encoder to work.\");\n    }\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.\");\n    }\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttributeToMesh(\n        dracoObject,\n        dracoEncoder.POSITION,\n        vertices.count,\n        vertices.itemSize,\n        vertices.array\n      );\n      const faces = geometry.getIndex();\n      if (faces !== null) {\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces2 = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n        for (let i = 0; i < faces2.length; i++) {\n          faces2[i] = i;\n        }\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces2);\n      }\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute(\"normal\");\n        if (normals !== void 0) {\n          builder.AddFloatAttributeToMesh(\n            dracoObject,\n            dracoEncoder.NORMAL,\n            normals.count,\n            normals.itemSize,\n            normals.array\n          );\n        }\n      }\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute(\"uv\");\n        if (uvs !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      builder = new dracoEncoder.PointCloudBuilder();\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error(\"DRACOExporter: Unsupported object type.\");\n    }\n    const encodedData = new dracoEncoder.DracoInt8Array();\n    const encodeSpeed = options.encodeSpeed !== void 0 ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== void 0 ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed);\n    if (options.encoderMethod !== void 0) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    }\n    if (options.quantization !== void 0) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== void 0) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n    let length;\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n    dracoEncoder.destroy(dracoObject);\n    if (length === 0) {\n      throw new Error(\"THREE.DRACOExporter: Draco encoding failed.\");\n    }\n    const outputData = new Int8Array(new ArrayBuffer(length));\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n};\nlet DRACOExporter = _DRACOExporter;\n// Encoder methods\n__publicField(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n__publicField(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n// Geometry type\n__publicField(DRACOExporter, \"POINT_CLOUD\", 0);\n__publicField(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n// Attribute type\n__publicField(DRACOExporter, \"INVALID\", -1);\n__publicField(DRACOExporter, \"POSITION\", 0);\n__publicField(DRACOExporter, \"NORMAL\", 1);\n__publicField(DRACOExporter, \"COLOR\", 2);\n__publicField(DRACOExporter, \"TEX_COORD\", 3);\n__publicField(DRACOExporter, \"GENERIC\", 4);\nexport {\n  DRACOExporter\n};\n"]},"metadata":{},"sourceType":"module"}