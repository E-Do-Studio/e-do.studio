{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\nimport image from \"./test.jpg\";\nimport image1 from \"./img/2023_BOTTLES_BOOK2102 copie.webp\";\nimport image2 from \"./img/ATTIRE_THE_STUDIO_MBACH_ATTIRE_010_FRANKLIN_BLACK_028 copie.webp\";\nimport image3 from \"./img/GIAMBATTISTA_23FWPVCA5091-09VIS-6750_26 copie.webp\";\nimport image4 from \"./img/GIAMBATTISTA_A2TIDY-TA07-08 copie.webp\";\nimport image5 from \"./img/JPG_23-12-U-PA061B-J033_Front copie.webp\";\nimport image6 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image7 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image8 from \"./img/MELISSA_JPG_F-CS002-X033-22-side-tiff-1 copie.webp\";\nimport image9 from \"./img/Parfum_x_Y_Project-back-tiff-1 copie.webp\";\nimport image10 from \"./img/SHANGXIA_FR1223S007QUARTZ-Fullbody-tiff-1 copie.webp\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const images = [image, image1, image2, image3, image4, image5, image6, image7, image8, image9, image10];\nexport const Photo = /*#__PURE__*/memo(_c = _s(({\n  x,\n  y,\n  images\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const {\n    viewport\n  } = useThree();\n  const texture = useTexture(images.find(image => image.index === index)); // Calculer les dimensions du plan en fonction de la taille de l'image\n\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n\n  const planeHeight = planeWidth / aspectRatio; // Utiliser PlaneGeometry avec les dimensions calculées\n\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n  const [t, setT] = useState(0);\n  const direction = useRef();\n  useFrame(({\n    mouse\n  }) => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (!direction.current) {\n      direction.current = x > viewport.width * mouse.x / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n    setT(t + 1);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    position: [x, y, 0],\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}, \"6evXA8AQinEbMoqpnTb6MnnCKA0=\", false, function () {\n  return [useThree, useTexture, useFrame];\n}));\n_c2 = Photo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["useTexture","memo","useRef","useState","PlaneGeometry","Mesh","MeshBasicMaterial","useThree","useFrame","appliedForces","image","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","images","Photo","x","y","ref","viewport","texture","find","index","imageWidth","width","imageHeight","height","aspectRatio","planeWidth","planeHeight","geometry","t","setT","direction","mouse","current","position","add"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,QAAuC,OAAvC;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,iBAA9B,QAAuD,OAAvD;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,wCAAnB;AACA,OAAOC,MAAP,MAAmB,wEAAnB;AACA,OAAOC,MAAP,MAAmB,0DAAnB;AACA,OAAOC,MAAP,MAAmB,8CAAnB;AACA,OAAOC,MAAP,MAAmB,gDAAnB;AACA,OAAOC,MAAP,MAAmB,oDAAnB;AACA,OAAOC,MAAP,MAAmB,oDAAnB;AACA,OAAOC,MAAP,MAAmB,0DAAnB;AACA,OAAOC,MAAP,MAAmB,iDAAnB;AACA,OAAOC,OAAP,MAAoB,4DAApB;;AAEA,OAAO,MAAMC,MAAM,GAAG,CACpBX,KADoB,EAEpBC,MAFoB,EAGpBC,MAHoB,EAIpBC,MAJoB,EAKpBC,MALoB,EAMpBC,MANoB,EAOpBC,MAPoB,EAQpBC,MARoB,EASpBC,MAToB,EAUpBC,MAVoB,EAWpBC,OAXoB,CAAf;AAcP,OAAO,MAAME,KAAK,gBAAGrB,IAAI,SAAC,CAAC;AAAEsB,EAAAA,CAAF;AAAKC,EAAAA,CAAL;AAAQH,EAAAA;AAAR,CAAD,KAAsB;AAAA;;AAC9C,QAAMI,GAAG,GAAGvB,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM;AAAEwB,IAAAA;AAAF,MAAenB,QAAQ,EAA7B;AAEA,QAAMoB,OAAO,GAAG3B,UAAU,CAACqB,MAAM,CAACO,IAAP,CAAalB,KAAD,IAAWA,KAAK,CAACmB,KAAN,KAAgBA,KAAvC,CAAD,CAA1B,CAJ8C,CAM9C;;AACA,QAAMC,UAAU,GAAGH,OAAO,CAACjB,KAAR,CAAcqB,KAAjC;AACA,QAAMC,WAAW,GAAGL,OAAO,CAACjB,KAAR,CAAcuB,MAAlC;AACA,QAAMC,WAAW,GAAGJ,UAAU,GAAGE,WAAjC;AACA,QAAMG,UAAU,GAAG,CAAnB,CAV8C,CAUxB;;AACtB,QAAMC,WAAW,GAAGD,UAAU,GAAGD,WAAjC,CAX8C,CAa9C;;AACA,QAAMG,QAAQ,GAAG,IAAIjC,aAAJ,CAAkB+B,UAAlB,EAA8BC,WAA9B,CAAjB;AAEA,QAAM,CAACE,CAAD,EAAIC,IAAJ,IAAYpC,QAAQ,CAAC,CAAD,CAA1B;AACA,QAAMqC,SAAS,GAAGtC,MAAM,EAAxB;AAEAM,EAAAA,QAAQ,CAAC,CAAC;AAAEiC,IAAAA;AAAF,GAAD,KAAe;AACtB,QAAI,CAAChB,GAAG,CAACiB,OAAT,EAAkB;AAChB;AACD;;AACD,QAAI,CAACF,SAAS,CAACE,OAAf,EAAwB;AACtBF,MAAAA,SAAS,CAACE,OAAV,GAAoBnB,CAAC,GAAIG,QAAQ,CAACK,KAAT,GAAiBU,KAAK,CAAClB,CAAxB,GAA6B,CAAjC,GAAqC,CAAC,CAAtC,GAA0C,CAA9D;AACD;;AAEDE,IAAAA,GAAG,CAACiB,OAAJ,CAAYC,QAAZ,CAAqBC,GAArB,CAAyBnC,aAAa,CAAC6B,CAAD,EAAIE,SAAS,CAACE,OAAd,CAAtC;AAEAH,IAAAA,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ;AACD,GAXO,CAAR;AAaA,sBACE;AAAM,IAAA,GAAG,EAAEb,GAAX;AAAgB,IAAA,QAAQ,EAAE,CAACF,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAA1B;AAAqC,IAAA,QAAQ,EAAEa,QAA/C;AAAA,2BACE;AAAmB,MAAA,GAAG,EAAEV;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArCwB;AAAA,UAEFpB,QAFE,EAIPP,UAJO,EAmBvBQ,QAnBuB;AAAA,GAAlB;MAAMc,K","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\n\nimport image from \"./test.jpg\";\nimport image1 from \"./img/2023_BOTTLES_BOOK2102 copie.webp\";\nimport image2 from \"./img/ATTIRE_THE_STUDIO_MBACH_ATTIRE_010_FRANKLIN_BLACK_028 copie.webp\";\nimport image3 from \"./img/GIAMBATTISTA_23FWPVCA5091-09VIS-6750_26 copie.webp\";\nimport image4 from \"./img/GIAMBATTISTA_A2TIDY-TA07-08 copie.webp\";\nimport image5 from \"./img/JPG_23-12-U-PA061B-J033_Front copie.webp\";\nimport image6 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image7 from \"./img/JPG_P220613151038_Fullbody_jpg_23 copie.webp\";\nimport image8 from \"./img/MELISSA_JPG_F-CS002-X033-22-side-tiff-1 copie.webp\";\nimport image9 from \"./img/Parfum_x_Y_Project-back-tiff-1 copie.webp\";\nimport image10 from \"./img/SHANGXIA_FR1223S007QUARTZ-Fullbody-tiff-1 copie.webp\";\n\nexport const images = [\n  image,\n  image1,\n  image2,\n  image3,\n  image4,\n  image5,\n  image6,\n  image7,\n  image8,\n  image9,\n  image10,\n];\n\nexport const Photo = memo(({ x, y, images }) => {\n  const ref = useRef(null);\n  const { viewport } = useThree();\n\n  const texture = useTexture(images.find((image) => image.index === index));\n\n  // Calculer les dimensions du plan en fonction de la taille de l'image\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n  const planeHeight = planeWidth / aspectRatio;\n\n  // Utiliser PlaneGeometry avec les dimensions calculées\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n\n  const [t, setT] = useState(0);\n  const direction = useRef();\n\n  useFrame(({ mouse }) => {\n    if (!ref.current) {\n      return;\n    }\n    if (!direction.current) {\n      direction.current = x > (viewport.width * mouse.x) / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n\n    setT(t + 1);\n  });\n\n  return (\n    <mesh ref={ref} position={[x, y, 0]} geometry={geometry}>\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}