{"ast":null,"code":"import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\n\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n    const color1 = [1, 1, 1];\n    const color2 = [1, 1, 0];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const right = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    const step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n    const PI2 = Math.PI * 2;\n    let sides = 5;\n    const tube1 = [];\n\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n\n    sides = 6;\n    const tube2 = [];\n\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n    }\n\n    const vector = new Vector3();\n    const normal = new Vector3();\n\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n\n    function extrudeShape(shape, offset2, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n\n    const offset = new Vector3();\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n\n      if (i % 2 === 0) {\n        drawShape(step, color2);\n      }\n\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n\n}\n\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const quaternion = new Quaternion();\n    const up = new Vector3(0, 1, 0);\n    const point = new Vector3();\n    const tangent = new Vector3();\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n\n    const fromPoint = new Vector3();\n    const toPoint = new Vector3();\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      const angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n  }\n\n}\n\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n\n}\n\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    const vertices = [];\n\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400;\n      const y = Math.random() * 50 + 50;\n      const z = Math.random() * 800 - 400;\n      const size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n\n}\n\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n\n    const _color = new Color();\n\n    for (let i = 0; i < 2e3; i++) {\n      const x = Math.random() * 500 - 250;\n      const z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      const intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0) continue;\n      const y = intersections[0].point.y;\n      const height = Math.random() * 5 + 0.5;\n      let angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      const random = Math.random() * 0.1;\n\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n\n}\n\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/misc/RollerCoaster.js"],"names":["BufferGeometry","Vector3","Quaternion","BufferAttribute","Raycaster","Color","RollerCoasterGeometry","constructor","curve","divisions","vertices","normals","colors","color1","color2","up","forward","right","quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset2","jl","point1","point2","normalize","offset","subVectors","crossVectors","atan2","setAttribute","Float32Array","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint2","toPoint2","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","ray","direction","_color","origin","intersections","intersectObject","height","setRGB","r","g","b"],"mappings":"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","sourcesContent":["import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n    const color1 = [1, 1, 1];\n    const color2 = [1, 1, 0];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const right = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    const step = [\n      new Vector3(-0.225, 0, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0, -0.175, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0.225, 0, 0),\n      new Vector3(0, -0.175, 0)\n    ];\n    const PI2 = Math.PI * 2;\n    let sides = 5;\n    const tube1 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    const tube2 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n    }\n    const vector = new Vector3();\n    const normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, offset2, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const offset = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (i % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const quaternion = new Quaternion();\n    const up = new Vector3(0, 1, 0);\n    const point = new Vector3();\n    const tangent = new Vector3();\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    const fromPoint = new Vector3();\n    const toPoint = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      const angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n  }\n}\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    const vertices = [];\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400;\n      const y = Math.random() * 50 + 50;\n      const z = Math.random() * 800 - 400;\n      const size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    const _color = new Color();\n    for (let i = 0; i < 2e3; i++) {\n      const x = Math.random() * 500 - 250;\n      const z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      const intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0)\n        continue;\n      const y = intersections[0].point.y;\n      const height = Math.random() * 5 + 0.5;\n      let angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      const random = Math.random() * 0.1;\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nexport {\n  RollerCoasterGeometry,\n  RollerCoasterLiftersGeometry,\n  RollerCoasterShadowGeometry,\n  SkyGeometry,\n  TreesGeometry\n};\n"]},"metadata":{},"sourceType":"module"}