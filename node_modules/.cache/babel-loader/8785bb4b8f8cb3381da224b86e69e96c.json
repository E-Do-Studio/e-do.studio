{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\nconst _UnrealBloomPass = class extends Pass {\n  constructor(resolution, strength, radius, threshold) {\n    super();\n    this.strength = strength !== void 0 ? strength : 1;\n    this.radius = radius;\n    this.threshold = threshold;\n    this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    this.clearColor = new Color(0, 0, 0);\n    this.renderTargetsHorizontal = [];\n    this.renderTargetsVertical = [];\n    this.nMips = 5;\n    let resx = Math.round(this.resolution.x / 2);\n    let resy = Math.round(this.resolution.y / 2);\n    this.renderTargetBright = new WebGLRenderTarget(resx, resy, {\n      type: HalfFloatType\n    });\n    this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n    this.renderTargetBright.texture.generateMipmaps = false;\n\n    for (let i = 0; i < this.nMips; i++) {\n      const renderTargetHorizonal = new WebGLRenderTarget(resx, resy, {\n        type: HalfFloatType\n      });\n      renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n      renderTargetHorizonal.texture.generateMipmaps = false;\n      this.renderTargetsHorizontal.push(renderTargetHorizonal);\n      const renderTargetVertical = new WebGLRenderTarget(resx, resy, {\n        type: HalfFloatType\n      });\n      renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n      renderTargetVertical.texture.generateMipmaps = false;\n      this.renderTargetsVertical.push(renderTargetVertical);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n\n    const highPassShader = LuminosityHighPassShader;\n    this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n    this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n    this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n    this.materialHighPassFilter = new ShaderMaterial({\n      uniforms: this.highPassUniforms,\n      vertexShader: highPassShader.vertexShader,\n      fragmentShader: highPassShader.fragmentShader,\n      defines: {}\n    });\n    this.separableBlurMaterials = [];\n    const kernelSizeArray = [3, 5, 7, 9, 11];\n    resx = Math.round(this.resolution.x / 2);\n    resy = Math.round(this.resolution.y / 2);\n\n    for (let i = 0; i < this.nMips; i++) {\n      this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n\n    this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n    this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n    this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n    this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n    this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n    this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n    this.compositeMaterial.needsUpdate = true;\n    const bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n    this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n    this.bloomTintColors = [new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1)];\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms[\"opacity\"].value = 1;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.basic = new MeshBasicMaterial();\n    this.fsQuad = new FullScreenQuad(null);\n  }\n\n  dispose() {\n    for (let i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n\n    for (let i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n\n    this.renderTargetBright.dispose();\n\n    for (let i = 0; i < this.separableBlurMaterials.length; i++) {\n      this.separableBlurMaterials[i].dispose();\n    }\n\n    this.compositeMaterial.dispose();\n    this.materialCopy.dispose();\n    this.basic.dispose();\n    this.fsQuad.dispose();\n  }\n\n  setSize(width, height) {\n    let resx = Math.round(width / 2);\n    let resy = Math.round(height / 2);\n    this.renderTargetBright.setSize(resx, resy);\n\n    for (let i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(this.clearColor, 0);\n    if (maskActive) renderer.state.buffers.stencil.setTest(false);\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n\n    this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n    renderer.setRenderTarget(this.renderTargetBright);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    let inputRenderTarget = this.renderTargetBright;\n\n    for (let i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i];\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetsVertical[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      inputRenderTarget = this.renderTargetsVertical[i];\n    }\n\n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n    }\n\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n\n  getSeperableBlurMaterial(kernelRadius) {\n    return new ShaderMaterial({\n      defines: {\n        KERNEL_RADIUS: kernelRadius,\n        SIGMA: kernelRadius\n      },\n      uniforms: {\n        colorTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        direction: {\n          value: new Vector2(0.5, 0.5)\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n    });\n  }\n\n  getCompositeMaterial(nMips) {\n    return new ShaderMaterial({\n      defines: {\n        NUM_MIPS: nMips\n      },\n      uniforms: {\n        blurTexture1: {\n          value: null\n        },\n        blurTexture2: {\n          value: null\n        },\n        blurTexture3: {\n          value: null\n        },\n        blurTexture4: {\n          value: null\n        },\n        blurTexture5: {\n          value: null\n        },\n        bloomStrength: {\n          value: 1\n        },\n        bloomFactors: {\n          value: null\n        },\n        bloomTintColors: {\n          value: null\n        },\n        bloomRadius: {\n          value: 0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n    });\n  }\n\n};\n\nlet UnrealBloomPass = _UnrealBloomPass;\n\n__publicField(UnrealBloomPass, \"BlurDirectionX\", /* @__PURE__ */new Vector2(1, 0));\n\n__publicField(UnrealBloomPass, \"BlurDirectionY\", /* @__PURE__ */new Vector2(0, 1));\n\nexport { UnrealBloomPass };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/UnrealBloomPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector2","Color","WebGLRenderTarget","HalfFloatType","UniformsUtils","ShaderMaterial","Vector3","AdditiveBlending","MeshBasicMaterial","Pass","FullScreenQuad","CopyShader","LuminosityHighPassShader","_UnrealBloomPass","constructor","resolution","strength","radius","threshold","x","y","clearColor","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","type","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","highPassShader","highPassUniforms","clone","uniforms","materialHighPassFilter","vertexShader","fragmentShader","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","copyShader","copyUniforms","materialCopy","blending","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","basic","fsQuad","dispose","length","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","bloomStrength","bloomRadius","UnrealBloomPass"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\nconst _UnrealBloomPass = class extends Pass {\n  constructor(resolution, strength, radius, threshold) {\n    super();\n    this.strength = strength !== void 0 ? strength : 1;\n    this.radius = radius;\n    this.threshold = threshold;\n    this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    this.clearColor = new Color(0, 0, 0);\n    this.renderTargetsHorizontal = [];\n    this.renderTargetsVertical = [];\n    this.nMips = 5;\n    let resx = Math.round(this.resolution.x / 2);\n    let resy = Math.round(this.resolution.y / 2);\n    this.renderTargetBright = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n    this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n    this.renderTargetBright.texture.generateMipmaps = false;\n    for (let i = 0; i < this.nMips; i++) {\n      const renderTargetHorizonal = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n      renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n      renderTargetHorizonal.texture.generateMipmaps = false;\n      this.renderTargetsHorizontal.push(renderTargetHorizonal);\n      const renderTargetVertical = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n      renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n      renderTargetVertical.texture.generateMipmaps = false;\n      this.renderTargetsVertical.push(renderTargetVertical);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    const highPassShader = LuminosityHighPassShader;\n    this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n    this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n    this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n    this.materialHighPassFilter = new ShaderMaterial({\n      uniforms: this.highPassUniforms,\n      vertexShader: highPassShader.vertexShader,\n      fragmentShader: highPassShader.fragmentShader,\n      defines: {}\n    });\n    this.separableBlurMaterials = [];\n    const kernelSizeArray = [3, 5, 7, 9, 11];\n    resx = Math.round(this.resolution.x / 2);\n    resy = Math.round(this.resolution.y / 2);\n    for (let i = 0; i < this.nMips; i++) {\n      this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n    this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n    this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n    this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n    this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n    this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n    this.compositeMaterial.needsUpdate = true;\n    const bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n    this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n    this.bloomTintColors = [\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1)\n    ];\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms[\"opacity\"].value = 1;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.basic = new MeshBasicMaterial();\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  dispose() {\n    for (let i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n    for (let i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n    this.renderTargetBright.dispose();\n    for (let i = 0; i < this.separableBlurMaterials.length; i++) {\n      this.separableBlurMaterials[i].dispose();\n    }\n    this.compositeMaterial.dispose();\n    this.materialCopy.dispose();\n    this.basic.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    let resx = Math.round(width / 2);\n    let resy = Math.round(height / 2);\n    this.renderTargetBright.setSize(resx, resy);\n    for (let i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(this.clearColor, 0);\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(false);\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n    renderer.setRenderTarget(this.renderTargetBright);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    let inputRenderTarget = this.renderTargetBright;\n    for (let i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i];\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetsVertical[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      inputRenderTarget = this.renderTargetsVertical[i];\n    }\n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(true);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n    }\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  getSeperableBlurMaterial(kernelRadius) {\n    return new ShaderMaterial({\n      defines: {\n        KERNEL_RADIUS: kernelRadius,\n        SIGMA: kernelRadius\n      },\n      uniforms: {\n        colorTexture: { value: null },\n        texSize: { value: new Vector2(0.5, 0.5) },\n        direction: { value: new Vector2(0.5, 0.5) }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n    });\n  }\n  getCompositeMaterial(nMips) {\n    return new ShaderMaterial({\n      defines: {\n        NUM_MIPS: nMips\n      },\n      uniforms: {\n        blurTexture1: { value: null },\n        blurTexture2: { value: null },\n        blurTexture3: { value: null },\n        blurTexture4: { value: null },\n        blurTexture5: { value: null },\n        bloomStrength: { value: 1 },\n        bloomFactors: { value: null },\n        bloomTintColors: { value: null },\n        bloomRadius: { value: 0 }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n    });\n  }\n};\nlet UnrealBloomPass = _UnrealBloomPass;\n__publicField(UnrealBloomPass, \"BlurDirectionX\", /* @__PURE__ */ new Vector2(1, 0));\n__publicField(UnrealBloomPass, \"BlurDirectionY\", /* @__PURE__ */ new Vector2(0, 1));\nexport {\n  UnrealBloomPass\n};\n"]},"metadata":{},"sourceType":"module"}