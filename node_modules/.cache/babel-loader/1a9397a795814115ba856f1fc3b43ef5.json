{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nconst DEFAULT_HAND_PROFILE_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/\";\n\nclass XRHandMeshModel {\n  constructor(handModel, controller, path = DEFAULT_HAND_PROFILE_PATH, handedness, customModelPath) {\n    __publicField(this, \"controller\");\n\n    __publicField(this, \"handModel\");\n\n    __publicField(this, \"bones\");\n\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new GLTFLoader();\n    if (!customModelPath) loader.setPath(path);\n    loader.load(customModelPath != null ? customModelPath : `${handedness}.glb`, gltf => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const joints = [\"wrist\", \"thumb-metacarpal\", \"thumb-phalanx-proximal\", \"thumb-phalanx-distal\", \"thumb-tip\", \"index-finger-metacarpal\", \"index-finger-phalanx-proximal\", \"index-finger-phalanx-intermediate\", \"index-finger-phalanx-distal\", \"index-finger-tip\", \"middle-finger-metacarpal\", \"middle-finger-phalanx-proximal\", \"middle-finger-phalanx-intermediate\", \"middle-finger-phalanx-distal\", \"middle-finger-tip\", \"ring-finger-metacarpal\", \"ring-finger-phalanx-proximal\", \"ring-finger-phalanx-intermediate\", \"ring-finger-phalanx-distal\", \"ring-finger-tip\", \"pinky-finger-metacarpal\", \"pinky-finger-phalanx-proximal\", \"pinky-finger-phalanx-intermediate\", \"pinky-finger-phalanx-distal\", \"pinky-finger-tip\"];\n      joints.forEach(jointName => {\n        const bone = object.getObjectByName(jointName);\n\n        if (bone !== void 0) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n\n        this.bones.push(bone);\n      });\n    });\n  }\n\n  updateMesh() {\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n          bone.position.copy(position);\n          bone.quaternion.copy(XRJoint.quaternion);\n        }\n      }\n    }\n  }\n\n}\n\nexport { XRHandMeshModel };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/webxr/XRHandMeshModel.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","GLTFLoader","DEFAULT_HAND_PROFILE_PATH","XRHandMeshModel","constructor","handModel","controller","path","handedness","customModelPath","bones","loader","setPath","load","gltf","object","scene","children","add","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","joints","forEach","jointName","bone","getObjectByName","console","warn","push","updateMesh","XRJoints","i","length","XRJoint","visible","position","copy","quaternion"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nconst DEFAULT_HAND_PROFILE_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/\";\nclass XRHandMeshModel {\n  constructor(handModel, controller, path = DEFAULT_HAND_PROFILE_PATH, handedness, customModelPath) {\n    __publicField(this, \"controller\");\n    __publicField(this, \"handModel\");\n    __publicField(this, \"bones\");\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new GLTFLoader();\n    if (!customModelPath)\n      loader.setPath(path);\n    loader.load(customModelPath != null ? customModelPath : `${handedness}.glb`, (gltf) => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const joints = [\n        \"wrist\",\n        \"thumb-metacarpal\",\n        \"thumb-phalanx-proximal\",\n        \"thumb-phalanx-distal\",\n        \"thumb-tip\",\n        \"index-finger-metacarpal\",\n        \"index-finger-phalanx-proximal\",\n        \"index-finger-phalanx-intermediate\",\n        \"index-finger-phalanx-distal\",\n        \"index-finger-tip\",\n        \"middle-finger-metacarpal\",\n        \"middle-finger-phalanx-proximal\",\n        \"middle-finger-phalanx-intermediate\",\n        \"middle-finger-phalanx-distal\",\n        \"middle-finger-tip\",\n        \"ring-finger-metacarpal\",\n        \"ring-finger-phalanx-proximal\",\n        \"ring-finger-phalanx-intermediate\",\n        \"ring-finger-phalanx-distal\",\n        \"ring-finger-tip\",\n        \"pinky-finger-metacarpal\",\n        \"pinky-finger-phalanx-proximal\",\n        \"pinky-finger-phalanx-intermediate\",\n        \"pinky-finger-phalanx-distal\",\n        \"pinky-finger-tip\"\n      ];\n      joints.forEach((jointName) => {\n        const bone = object.getObjectByName(jointName);\n        if (bone !== void 0) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n        this.bones.push(bone);\n      });\n    });\n  }\n  updateMesh() {\n    const XRJoints = this.controller.joints;\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n          bone.position.copy(position);\n          bone.quaternion.copy(XRJoint.quaternion);\n        }\n      }\n    }\n  }\n}\nexport {\n  XRHandMeshModel\n};\n"]},"metadata":{},"sourceType":"module"}