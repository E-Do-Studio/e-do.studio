{"ast":null,"code":"'use strict';\n\nvar libmime = require('libmime');\n\nvar libqp = require('libqp');\n\nvar libbase64 = require('libbase64');\n\nvar punycode = require('punycode');\n\nvar addressparser = require('addressparser');\n\nvar stream = require('stream');\n\nvar PassThrough = stream.PassThrough;\n\nvar fs = require('fs');\n\nvar fetch = require('nodemailer-fetch');\n\nmodule.exports = MimeNode;\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n */\n\nfunction MimeNode(contentType, options) {\n  this.nodeCounter = 0;\n  options = options || {};\n  /**\n   * shared part of the unique multipart boundary\n   */\n\n  this.baseBoundary = options.baseBoundary || Date.now().toString() + Math.random();\n  /**\n   * If date headers is missing and current node is the root, this value is used instead\n   */\n\n  this.date = new Date();\n  /**\n   * Root node for current mime tree\n   */\n\n  this.rootNode = options.rootNode || this;\n  /**\n   * If true include Bcc in generated headers (if available)\n   */\n\n  this.keepBcc = !!options.keepBcc;\n  /**\n   * If filename is specified but contentType is not (probably an attachment)\n   * detect the content type from filename extension\n   */\n\n  if (options.filename) {\n    /**\n     * Filename for this node. Useful with attachments\n     */\n    this.filename = options.filename;\n\n    if (!contentType) {\n      contentType = libmime.detectMimeType(this.filename.split('.').pop());\n    }\n  }\n  /**\n   * Immediate parent for this node (or undefined if not set)\n   */\n\n\n  this.parentNode = options.parentNode;\n  /**\n   * An array for possible child nodes\n   */\n\n  this.childNodes = [];\n  /**\n   * Used for generating unique boundaries (prepended to the shared base)\n   */\n\n  this._nodeId = ++this.rootNode.nodeCounter;\n  /**\n   * A list of header values for this node in the form of [{key:'', value:''}]\n   */\n\n  this._headers = [];\n  /**\n   * True if the content only uses ASCII printable characters\n   * @type {Boolean}\n   */\n\n  this._isPlainText = false;\n  /**\n   * True if the content is plain text but has longer lines than allowed\n   * @type {Boolean}\n   */\n\n  this._hasLongLines = false;\n  /**\n   * If set, use instead this value for envelopes instead of generating one\n   * @type {Boolean}\n   */\n\n  this._envelope = false;\n  /**\n   * Additional transform streams that the message will be piped before\n   * exposing by createReadStream\n   * @type {Array}\n   */\n\n  this._transforms = [];\n  /**\n   * If content type is set (or derived from the filename) add it to headers\n   */\n\n  if (contentType) {\n    this.setHeader('content-type', contentType);\n  }\n} /////// PUBLIC METHODS\n\n/**\n * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n *\n * @param {String} [contentType] Optional content type\n * @param {Object} [options] Optional options object\n * @return {Object} Created node object\n */\n\n\nMimeNode.prototype.createChild = function (contentType, options) {\n  if (!options && typeof contentType === 'object') {\n    options = contentType;\n    contentType = undefined;\n  }\n\n  var node = new MimeNode(contentType, options);\n  this.appendChild(node);\n  return node;\n};\n/**\n * Appends an existing node to the mime tree. Removes the node from an existing\n * tree if needed\n *\n * @param {Object} childNode node to be appended\n * @return {Object} Appended node object\n */\n\n\nMimeNode.prototype.appendChild = function (childNode) {\n  if (childNode.rootNode !== this.rootNode) {\n    childNode.rootNode = this.rootNode;\n    childNode._nodeId = ++this.rootNode.nodeCounter;\n  }\n\n  childNode.parentNode = this;\n  this.childNodes.push(childNode);\n  return childNode;\n};\n/**\n * Replaces current node with another node\n *\n * @param {Object} node Replacement node\n * @return {Object} Replacement node\n */\n\n\nMimeNode.prototype.replace = function (node) {\n  if (node === this) {\n    return this;\n  }\n\n  this.parentNode.childNodes.forEach(function (childNode, i) {\n    if (childNode === this) {\n      node.rootNode = this.rootNode;\n      node.parentNode = this.parentNode;\n      node._nodeId = this._nodeId;\n      this.rootNode = this;\n      this.parentNode = undefined;\n      node.parentNode.childNodes[i] = node;\n    }\n  }.bind(this));\n  return node;\n};\n/**\n * Removes current node from the mime tree\n *\n * @return {Object} removed node\n */\n\n\nMimeNode.prototype.remove = function () {\n  if (!this.parentNode) {\n    return this;\n  }\n\n  for (var i = this.parentNode.childNodes.length - 1; i >= 0; i--) {\n    if (this.parentNode.childNodes[i] === this) {\n      this.parentNode.childNodes.splice(i, 1);\n      this.parentNode = undefined;\n      this.rootNode = this;\n      return this;\n    }\n  }\n};\n/**\n * Sets a header value. If the value for selected key exists, it is overwritten.\n * You can set multiple values as well by using [{key:'', value:''}] or\n * {key: 'value'} as the first argument.\n *\n * @param {String|Array|Object} key Header key or a list of key value pairs\n * @param {String} value Header value\n * @return {Object} current node\n */\n\n\nMimeNode.prototype.setHeader = function (key, value) {\n  var added = false,\n      headerValue; // Allow setting multiple headers at once\n\n  if (!value && key && typeof key === 'object') {\n    // allow {key:'content-type', value: 'text/plain'}\n    if (key.key && key.value) {\n      this.setHeader(key.key, key.value);\n    } // allow [{key:'content-type', value: 'text/plain'}]\n    else if (Array.isArray(key)) {\n      key.forEach(function (i) {\n        this.setHeader(i.key, i.value);\n      }.bind(this));\n    } // allow {'content-type': 'text/plain'}\n    else {\n      Object.keys(key).forEach(function (i) {\n        this.setHeader(i, key[i]);\n      }.bind(this));\n    }\n\n    return this;\n  }\n\n  key = this._normalizeHeaderKey(key);\n  headerValue = {\n    key: key,\n    value: value\n  }; // Check if the value exists and overwrite\n\n  for (var i = 0, len = this._headers.length; i < len; i++) {\n    if (this._headers[i].key === key) {\n      if (!added) {\n        // replace the first match\n        this._headers[i] = headerValue;\n        added = true;\n      } else {\n        // remove following matches\n        this._headers.splice(i, 1);\n\n        i--;\n        len--;\n      }\n    }\n  } // match not found, append the value\n\n\n  if (!added) {\n    this._headers.push(headerValue);\n  }\n\n  return this;\n};\n/**\n * Adds a header value. If the value for selected key exists, the value is appended\n * as a new field and old one is not touched.\n * You can set multiple values as well by using [{key:'', value:''}] or\n * {key: 'value'} as the first argument.\n *\n * @param {String|Array|Object} key Header key or a list of key value pairs\n * @param {String} value Header value\n * @return {Object} current node\n */\n\n\nMimeNode.prototype.addHeader = function (key, value) {\n  // Allow setting multiple headers at once\n  if (!value && key && typeof key === 'object') {\n    // allow {key:'content-type', value: 'text/plain'}\n    if (key.key && key.value) {\n      this.addHeader(key.key, key.value);\n    } // allow [{key:'content-type', value: 'text/plain'}]\n    else if (Array.isArray(key)) {\n      key.forEach(function (i) {\n        this.addHeader(i.key, i.value);\n      }.bind(this));\n    } // allow {'content-type': 'text/plain'}\n    else {\n      Object.keys(key).forEach(function (i) {\n        this.addHeader(i, key[i]);\n      }.bind(this));\n    }\n\n    return this;\n  }\n\n  this._headers.push({\n    key: this._normalizeHeaderKey(key),\n    value: value\n  });\n\n  return this;\n};\n/**\n * Retrieves the first mathcing value of a selected key\n *\n * @param {String} key Key to search for\n * @retun {String} Value for the key\n */\n\n\nMimeNode.prototype.getHeader = function (key) {\n  key = this._normalizeHeaderKey(key);\n\n  for (var i = 0, len = this._headers.length; i < len; i++) {\n    if (this._headers[i].key === key) {\n      return this._headers[i].value;\n    }\n  }\n};\n/**\n * Sets body content for current node. If the value is a string, charset is added automatically\n * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n * the charset yourself\n *\n * @param (String|Buffer) content Body content\n * @return {Object} current node\n */\n\n\nMimeNode.prototype.setContent = function (content) {\n  var _self = this;\n\n  this.content = content;\n\n  if (typeof this.content.pipe === 'function') {\n    // pre-stream handler. might be triggered if a stream is set as content\n    // and 'error' fires before anything is done with this stream\n    this._contentErrorHandler = function (err) {\n      _self.content.removeListener('error', _self._contentErrorHandler);\n\n      _self.content = err;\n    };\n\n    this.content.once('error', this._contentErrorHandler);\n  } else if (typeof this.content === 'string') {\n    this._isPlainText = libmime.isPlainText(this.content);\n\n    if (this._isPlainText && libmime.hasLongerLines(this.content, 76)) {\n      // If there are lines longer than 76 symbols/bytes do not use 7bit\n      this._hasLongLines = true;\n    }\n  }\n\n  return this;\n};\n\nMimeNode.prototype.build = function (callback) {\n  var stream = this.createReadStream();\n  var buf = [];\n  var buflen = 0;\n  var returned = false;\n  stream.on('readable', function () {\n    var chunk;\n\n    while ((chunk = stream.read()) !== null) {\n      buf.push(chunk);\n      buflen += chunk.length;\n    }\n  });\n  stream.once('error', function (err) {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    return callback(err);\n  });\n  stream.once('end', function (chunk) {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n\n    if (chunk && chunk.length) {\n      buf.push(chunk);\n      buflen += chunk.length;\n    }\n\n    return callback(null, Buffer.concat(buf, buflen));\n  });\n};\n\nMimeNode.prototype.getTransferEncoding = function () {\n  var transferEncoding = false;\n  var contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();\n\n  if (this.content) {\n    transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();\n\n    if (!transferEncoding || ['base64', 'quoted-printable'].indexOf(transferEncoding) < 0) {\n      if (/^text\\//i.test(contentType)) {\n        // If there are no special symbols, no need to modify the text\n        if (this._isPlainText && !this._hasLongLines) {\n          transferEncoding = '7bit';\n        } else {\n          transferEncoding = 'quoted-printable';\n        }\n      } else if (!/^multipart\\//i.test(contentType)) {\n        transferEncoding = transferEncoding || 'base64';\n      }\n    }\n  }\n\n  return transferEncoding;\n};\n/**\n * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n *\n * @returns {String} Headers\n */\n\n\nMimeNode.prototype.buildHeaders = function () {\n  var _self = this;\n\n  var transferEncoding = this.getTransferEncoding();\n  var headers = [];\n\n  if (transferEncoding) {\n    this.setHeader('Content-Transfer-Encoding', transferEncoding);\n  }\n\n  if (this.filename && !this.getHeader('Content-Disposition')) {\n    this.setHeader('Content-Disposition', 'attachment');\n  } // Ensure mandatory header fields\n\n\n  if (this.rootNode === this) {\n    if (!this.getHeader('Date')) {\n      this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));\n    } // You really should define your own Message-Id field!\n\n\n    if (!this.getHeader('Message-Id')) {\n      this.setHeader('Message-Id', '<' + // crux to generate random strings like this:\n      // \"1401391905590-58aa8c32-d32a065c-c1a2aad2\"\n      [0, 0, 0].reduce(function (prev) {\n        return prev + '-' + Math.floor((1 + Math.random()) * 0x100000000).toString(16).substring(1);\n      }, Date.now()) + '@' + // try to use the domain of the FROM address or fallback localhost\n      (this.getEnvelope().from || 'localhost').split('@').pop() + '>');\n    }\n\n    if (!this.getHeader('MIME-Version')) {\n      this.setHeader('MIME-Version', '1.0');\n    }\n  }\n\n  this._headers.forEach(function (header) {\n    var key = header.key,\n        value = header.value,\n        structured,\n        param;\n\n    switch (header.key) {\n      case 'Content-Disposition':\n        structured = libmime.parseHeaderValue(value);\n\n        if (_self.filename) {\n          structured.params.filename = _self.filename;\n        }\n\n        value = libmime.buildHeaderValue(structured);\n        break;\n\n      case 'Content-Type':\n        structured = libmime.parseHeaderValue(value);\n\n        _self._handleContentType(structured);\n\n        if (structured.value.match(/^text\\/plain\\b/) && typeof _self.content === 'string' && /[\\u0080-\\uFFFF]/.test(_self.content)) {\n          structured.params.charset = 'utf-8';\n        }\n\n        value = libmime.buildHeaderValue(structured);\n\n        if (_self.filename) {\n          // add support for non-compliant clients like QQ webmail\n          // we can't build the value with buildHeaderValue as the value is non standard and\n          // would be converted to parameter continuation encoding that we do not want\n          param = libmime.encodeWords(_self.filename, 'Q', 52);\n\n          if (param !== _self.filename || /[\\s\"=;]/.test(param)) {\n            // include value in quotes if needed\n            param = '\"' + param + '\"';\n          }\n\n          value += '; name=' + param;\n        }\n\n        break;\n\n      case 'Bcc':\n        if (!_self.keepBcc) {\n          // skip BCC values\n          return;\n        }\n\n        break;\n    } // skip empty lines\n\n\n    value = _self._encodeHeaderValue(key, value);\n\n    if (!(value || '').toString().trim()) {\n      return;\n    }\n\n    headers.push(libmime.foldLines(key + ': ' + value, 76));\n  });\n\n  return headers.join('\\r\\n');\n};\n/**\n * Streams the rfc2822 message from the current node. If this is a root node,\n * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n *\n * @return {String} Compiled message\n */\n\n\nMimeNode.prototype.createReadStream = function (options) {\n  options = options || {};\n  var outputStream = new PassThrough(options);\n  var transform;\n  this.stream(outputStream, options, function (err) {\n    if (err) {\n      outputStream.emit('error', err);\n      return;\n    }\n\n    outputStream.end();\n  });\n\n  for (var i = 0, len = this._transforms.length; i < len; i++) {\n    transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];\n    outputStream.once('error', function (err) {\n      transform.emit('error', err);\n    });\n    outputStream = outputStream.pipe(transform);\n  }\n\n  return outputStream;\n};\n/**\n * Appends a transform stream object to the transforms list. Final output\n * is passed through this stream before exposing\n *\n * @param {Object} transform Read-Write stream\n */\n\n\nMimeNode.prototype.transform = function (transform) {\n  this._transforms.push(transform);\n};\n\nMimeNode.prototype.stream = function (outputStream, options, done) {\n  var _self = this;\n\n  var transferEncoding = this.getTransferEncoding();\n  var contentStream;\n  var localStream; // protect actual callback against multiple triggering\n\n  var returned = false;\n\n  var callback = function (err) {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    done(err);\n  }; // pushes node content\n\n\n  function sendContent() {\n    if (_self.content) {\n      if (Object.prototype.toString.call(_self.content) === '[object Error]') {\n        // content is already errored\n        return callback(_self.content);\n      }\n\n      if (typeof _self.content.pipe === 'function') {\n        _self.content.removeListener('error', _self._contentErrorHandler);\n\n        _self._contentErrorHandler = function (err) {\n          return callback(err);\n        };\n\n        _self.content.once('error', _self._contentErrorHandler);\n      }\n\n      if (['quoted-printable', 'base64'].indexOf(transferEncoding) >= 0) {\n        contentStream = new (transferEncoding === 'base64' ? libbase64 : libqp).Encoder(options);\n        contentStream.pipe(outputStream, {\n          end: false\n        });\n        contentStream.once('end', finalize);\n        contentStream.once('error', function (err) {\n          return callback(err);\n        });\n        localStream = _self._getStream(_self.content);\n        localStream.pipe(contentStream);\n      } else {\n        // anything that is not QP or Base54 passes as-is\n        localStream = _self._getStream(_self.content);\n        localStream.pipe(outputStream, {\n          end: false\n        });\n        localStream.once('end', finalize);\n      }\n\n      localStream.once('error', function (err) {\n        return callback(err);\n      });\n      return;\n    } else {\n      return setImmediate(finalize);\n    }\n  } // for multipart nodes, push child nodes\n  // for content nodes end the stream\n\n\n  function finalize() {\n    var childId = 0;\n\n    var processChildNode = function () {\n      if (childId >= _self.childNodes.length) {\n        outputStream.write('\\r\\n--' + _self.boundary + '--\\r\\n');\n        return callback();\n      }\n\n      var child = _self.childNodes[childId++];\n      outputStream.write((childId > 1 ? '\\r\\n' : '') + '--' + _self.boundary + '\\r\\n');\n      child.stream(outputStream, options, function (err) {\n        if (err) {\n          return callback(err);\n        }\n\n        setImmediate(processChildNode);\n      });\n    };\n\n    if (_self.multipart) {\n      setImmediate(processChildNode);\n    } else {\n      return callback();\n    }\n  }\n\n  outputStream.write(this.buildHeaders() + '\\r\\n\\r\\n');\n  setImmediate(sendContent);\n};\n/**\n * Sets envelope to be used instead of the generated one\n *\n * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n */\n\n\nMimeNode.prototype.setEnvelope = function (envelope) {\n  this._envelope = {\n    from: envelope.from || false,\n    to: [].concat(envelope.to || [])\n  };\n  return this;\n};\n/**\n * Generates and returns an object with parsed address fields\n *\n * @return {Object} Address object\n */\n\n\nMimeNode.prototype.getAddresses = function () {\n  var addresses = {};\n\n  this._headers.forEach(function (header) {\n    var key = header.key.toLowerCase();\n\n    if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].indexOf(key) >= 0) {\n      if (!Array.isArray(addresses[key])) {\n        addresses[key] = [];\n      }\n\n      this._convertAddresses(this._parseAddresses(header.value), addresses[key]);\n    }\n  }.bind(this));\n\n  return addresses;\n};\n/**\n * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n *\n * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n */\n\n\nMimeNode.prototype.getEnvelope = function () {\n  if (this._envelope) {\n    return this._envelope;\n  }\n\n  var envelope = {\n    from: false,\n    to: []\n  };\n\n  this._headers.forEach(function (header) {\n    var list = [];\n\n    if (header.key === 'From' || !envelope.from && ['Reply-To', 'Sender'].indexOf(header.key) >= 0) {\n      this._convertAddresses(this._parseAddresses(header.value), list);\n\n      if (list.length && list[0]) {\n        envelope.from = list[0].address;\n      }\n    } else if (['To', 'Cc', 'Bcc'].indexOf(header.key) >= 0) {\n      this._convertAddresses(this._parseAddresses(header.value), envelope.to);\n    }\n  }.bind(this));\n\n  envelope.to = envelope.to.map(function (to) {\n    return to.address;\n  });\n  return envelope;\n}; /////// PRIVATE METHODS\n\n/**\n * Detects and returns handle to a stream related with the content.\n *\n * @param {Mixed} content Node content\n * @returns {Object} Stream object\n */\n\n\nMimeNode.prototype._getStream = function (content) {\n  var contentStream;\n\n  if (typeof content.pipe === 'function') {\n    // assume as stream\n    return content;\n  } else if (content && typeof content.path === 'string' && !content.href) {\n    // read file\n    return fs.createReadStream(content.path);\n  } else if (content && typeof content.href === 'string') {\n    // fetch URL\n    return fetch(content.href);\n  } else {\n    // pass string or buffer content as a stream\n    contentStream = new PassThrough();\n    setImmediate(function () {\n      contentStream.end(content || '');\n    });\n    return contentStream;\n  }\n};\n/**\n * Parses addresses. Takes in a single address or an array or an\n * array of address arrays (eg. To: [[first group], [second group],...])\n *\n * @param {Mixed} addresses Addresses to be parsed\n * @return {Array} An array of address objects\n */\n\n\nMimeNode.prototype._parseAddresses = function (addresses) {\n  return [].concat.apply([], [].concat(addresses).map(function (address) {\n    if (address && address.address) {\n      address = this._convertAddresses(address);\n    }\n\n    return addressparser(address);\n  }.bind(this)));\n};\n/**\n * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n *\n * @param {String} key Key to be normalized\n * @return {String} key in Camel-Case form\n */\n\n\nMimeNode.prototype._normalizeHeaderKey = function (key) {\n  return (key || '').toString(). // no newlines in keys\n  replace(/\\r?\\n|\\r/g, ' ').trim().toLowerCase(). // use uppercase words, except MIME\n  replace(/^MIME\\b|^[a-z]|\\-[a-z]/ig, function (c) {\n    return c.toUpperCase();\n  });\n};\n/**\n * Checks if the content type is multipart and defines boundary if needed.\n * Doesn't return anything, modifies object argument instead.\n *\n * @param {Object} structured Parsed header value for 'Content-Type' key\n */\n\n\nMimeNode.prototype._handleContentType = function (structured) {\n  this.contentType = structured.value.trim().toLowerCase();\n  this.multipart = this.contentType.split('/').reduce(function (prev, value) {\n    return prev === 'multipart' ? value : false;\n  });\n\n  if (this.multipart) {\n    this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n  } else {\n    this.boundary = false;\n  }\n};\n/**\n * Generates a multipart boundary value\n *\n * @return {String} boundary value\n */\n\n\nMimeNode.prototype._generateBoundary = function () {\n  return '----sinikael-?=_' + this._nodeId + '-' + this.rootNode.baseBoundary;\n};\n/**\n * Encodes a header value for use in the generated rfc2822 email.\n *\n * @param {String} key Header key\n * @param {String} value Header value\n */\n\n\nMimeNode.prototype._encodeHeaderValue = function (key, value) {\n  key = this._normalizeHeaderKey(key);\n\n  switch (key) {\n    // Structured headers\n    case 'From':\n    case 'Sender':\n    case 'To':\n    case 'Cc':\n    case 'Bcc':\n    case 'Reply-To':\n      return this._convertAddresses(this._parseAddresses(value));\n    // values enclosed in <>\n\n    case 'Message-Id':\n    case 'In-Reply-To':\n    case 'Content-Id':\n      value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n      if (value.charAt(0) !== '<') {\n        value = '<' + value;\n      }\n\n      if (value.charAt(value.length - 1) !== '>') {\n        value = value + '>';\n      }\n\n      return value;\n    // space separated list of values enclosed in <>\n\n    case 'References':\n      value = [].concat.apply([], [].concat(value || '').map(function (elm) {\n        elm = (elm || '').toString().replace(/\\r?\\n|\\r/g, ' ').trim();\n        return elm.replace(/<[^>]*>/g, function (str) {\n          return str.replace(/\\s/g, '');\n        }).split(/\\s+/);\n      })).map(function (elm) {\n        if (elm.charAt(0) !== '<') {\n          elm = '<' + elm;\n        }\n\n        if (elm.charAt(elm.length - 1) !== '>') {\n          elm = elm + '>';\n        }\n\n        return elm;\n      });\n      return value.join(' ').trim();\n\n    case 'Date':\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return value.toUTCString().replace(/GMT/, '+0000');\n      }\n\n      value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n      return libmime.encodeWords(value, 'Q', 52);\n\n    default:\n      value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' '); // encodeWords only encodes if needed, otherwise the original string is returned\n\n      return libmime.encodeWords(value, 'Q', 52);\n  }\n};\n/**\n * Rebuilds address object using punycode and other adjustments\n *\n * @param {Array} addresses An array of address objects\n * @param {Array} [uniqueList] An array to be populated with addresses\n * @return {String} address string\n */\n\n\nMimeNode.prototype._convertAddresses = function (addresses, uniqueList) {\n  var values = [];\n  uniqueList = uniqueList || [];\n  [].concat(addresses || []).forEach(function (address) {\n    if (address.address) {\n      address.address = address.address.replace(/^.*?(?=\\@)/, function (user) {\n        // pretty bad solution but what you gonna do\n        // unicode usernames are converted to encoded words\n        // 'jõgeva@hot.ee' will be converted to '=?utf-8?Q?j=C3=B5geva?=@hot.ee'\n        return libmime.encodeWords(user, 'Q', 52);\n      }).replace(/@.+$/, function (domain) {\n        // domains are punycoded by default\n        // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n        // non-unicode domains are left as is\n        return '@' + punycode.toASCII(domain.substr(1));\n      });\n\n      if (!address.name) {\n        values.push(address.address);\n      } else if (address.name) {\n        values.push(this._encodeAddressName(address.name) + ' <' + address.address + '>');\n      }\n\n      if (address.address) {\n        if (!uniqueList.filter(function (a) {\n          return a.address === address.address;\n        }).length) {\n          uniqueList.push(address);\n        }\n      }\n    } else if (address.group) {\n      values.push(this._encodeAddressName(address.name) + ':' + (address.group.length ? this._convertAddresses(address.group, uniqueList) : '').trim() + ';');\n    }\n  }.bind(this));\n  return values.join(', ');\n};\n/**\n * If needed, mime encodes the name part\n *\n * @param {String} name Name part of an address\n * @returns {String} Mime word encoded string if needed\n */\n\n\nMimeNode.prototype._encodeAddressName = function (name) {\n  if (!/^[\\w ']*$/.test(name)) {\n    if (/^[\\x20-\\x7e]*$/.test(name)) {\n      return '\"' + name.replace(/([\\\\\"])/g, '\\\\$1') + '\"';\n    } else {\n      return libmime.encodeWord(name, 'Q', 52);\n    }\n  }\n\n  return name;\n};","map":{"version":3,"sources":["/Users/theodaguier/e-do/node_modules/buildmail/lib/buildmail.js"],"names":["libmime","require","libqp","libbase64","punycode","addressparser","stream","PassThrough","fs","fetch","module","exports","MimeNode","contentType","options","nodeCounter","baseBoundary","Date","now","toString","Math","random","date","rootNode","keepBcc","filename","detectMimeType","split","pop","parentNode","childNodes","_nodeId","_headers","_isPlainText","_hasLongLines","_envelope","_transforms","setHeader","prototype","createChild","undefined","node","appendChild","childNode","push","replace","forEach","i","bind","remove","length","splice","key","value","added","headerValue","Array","isArray","Object","keys","_normalizeHeaderKey","len","addHeader","getHeader","setContent","content","_self","pipe","_contentErrorHandler","err","removeListener","once","isPlainText","hasLongerLines","build","callback","createReadStream","buf","buflen","returned","on","chunk","read","Buffer","concat","getTransferEncoding","transferEncoding","toLowerCase","trim","indexOf","test","buildHeaders","headers","toUTCString","reduce","prev","floor","substring","getEnvelope","from","header","structured","param","parseHeaderValue","params","buildHeaderValue","_handleContentType","match","charset","encodeWords","_encodeHeaderValue","foldLines","join","outputStream","transform","emit","end","done","contentStream","localStream","sendContent","call","Encoder","finalize","_getStream","setImmediate","childId","processChildNode","write","boundary","child","multipart","setEnvelope","envelope","to","getAddresses","addresses","_convertAddresses","_parseAddresses","list","address","map","path","href","apply","c","toUpperCase","_generateBoundary","charAt","elm","str","uniqueList","values","user","domain","toASCII","substr","name","_encodeAddressName","filter","a","group","encodeWord"],"mappings":"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","sourcesContent":["'use strict';\n\nvar libmime = require('libmime');\nvar libqp = require('libqp');\nvar libbase64 = require('libbase64');\nvar punycode = require('punycode');\nvar addressparser = require('addressparser');\nvar stream = require('stream');\nvar PassThrough = stream.PassThrough;\nvar fs = require('fs');\nvar fetch = require('nodemailer-fetch');\n\nmodule.exports = MimeNode;\n\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n */\nfunction MimeNode(contentType, options) {\n    this.nodeCounter = 0;\n\n    options = options || {};\n\n    /**\n     * shared part of the unique multipart boundary\n     */\n    this.baseBoundary = options.baseBoundary || Date.now().toString() + Math.random();\n\n    /**\n     * If date headers is missing and current node is the root, this value is used instead\n     */\n    this.date = new Date();\n\n    /**\n     * Root node for current mime tree\n     */\n    this.rootNode = options.rootNode || this;\n\n    /**\n     * If true include Bcc in generated headers (if available)\n     */\n    this.keepBcc = !!options.keepBcc;\n\n    /**\n     * If filename is specified but contentType is not (probably an attachment)\n     * detect the content type from filename extension\n     */\n    if (options.filename) {\n        /**\n         * Filename for this node. Useful with attachments\n         */\n        this.filename = options.filename;\n        if (!contentType) {\n            contentType = libmime.detectMimeType(this.filename.split('.').pop());\n        }\n    }\n\n    /**\n     * Immediate parent for this node (or undefined if not set)\n     */\n    this.parentNode = options.parentNode;\n\n    /**\n     * An array for possible child nodes\n     */\n    this.childNodes = [];\n\n    /**\n     * Used for generating unique boundaries (prepended to the shared base)\n     */\n    this._nodeId = ++this.rootNode.nodeCounter;\n\n    /**\n     * A list of header values for this node in the form of [{key:'', value:''}]\n     */\n    this._headers = [];\n\n    /**\n     * True if the content only uses ASCII printable characters\n     * @type {Boolean}\n     */\n    this._isPlainText = false;\n\n    /**\n     * True if the content is plain text but has longer lines than allowed\n     * @type {Boolean}\n     */\n    this._hasLongLines = false;\n\n    /**\n     * If set, use instead this value for envelopes instead of generating one\n     * @type {Boolean}\n     */\n    this._envelope = false;\n\n    /**\n     * Additional transform streams that the message will be piped before\n     * exposing by createReadStream\n     * @type {Array}\n     */\n    this._transforms = [];\n\n    /**\n     * If content type is set (or derived from the filename) add it to headers\n     */\n    if (contentType) {\n        this.setHeader('content-type', contentType);\n    }\n}\n\n/////// PUBLIC METHODS\n\n/**\n * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n *\n * @param {String} [contentType] Optional content type\n * @param {Object} [options] Optional options object\n * @return {Object} Created node object\n */\nMimeNode.prototype.createChild = function (contentType, options) {\n    if (!options && typeof contentType === 'object') {\n        options = contentType;\n        contentType = undefined;\n    }\n    var node = new MimeNode(contentType, options);\n    this.appendChild(node);\n    return node;\n};\n\n/**\n * Appends an existing node to the mime tree. Removes the node from an existing\n * tree if needed\n *\n * @param {Object} childNode node to be appended\n * @return {Object} Appended node object\n */\nMimeNode.prototype.appendChild = function (childNode) {\n\n    if (childNode.rootNode !== this.rootNode) {\n        childNode.rootNode = this.rootNode;\n        childNode._nodeId = ++this.rootNode.nodeCounter;\n    }\n\n    childNode.parentNode = this;\n\n    this.childNodes.push(childNode);\n    return childNode;\n};\n\n/**\n * Replaces current node with another node\n *\n * @param {Object} node Replacement node\n * @return {Object} Replacement node\n */\nMimeNode.prototype.replace = function (node) {\n    if (node === this) {\n        return this;\n    }\n\n    this.parentNode.childNodes.forEach(function (childNode, i) {\n        if (childNode === this) {\n\n            node.rootNode = this.rootNode;\n            node.parentNode = this.parentNode;\n            node._nodeId = this._nodeId;\n\n            this.rootNode = this;\n            this.parentNode = undefined;\n\n            node.parentNode.childNodes[i] = node;\n        }\n    }.bind(this));\n\n    return node;\n};\n\n/**\n * Removes current node from the mime tree\n *\n * @return {Object} removed node\n */\nMimeNode.prototype.remove = function () {\n    if (!this.parentNode) {\n        return this;\n    }\n\n    for (var i = this.parentNode.childNodes.length - 1; i >= 0; i--) {\n        if (this.parentNode.childNodes[i] === this) {\n            this.parentNode.childNodes.splice(i, 1);\n            this.parentNode = undefined;\n            this.rootNode = this;\n            return this;\n        }\n    }\n};\n\n/**\n * Sets a header value. If the value for selected key exists, it is overwritten.\n * You can set multiple values as well by using [{key:'', value:''}] or\n * {key: 'value'} as the first argument.\n *\n * @param {String|Array|Object} key Header key or a list of key value pairs\n * @param {String} value Header value\n * @return {Object} current node\n */\nMimeNode.prototype.setHeader = function (key, value) {\n    var added = false,\n        headerValue;\n\n    // Allow setting multiple headers at once\n    if (!value && key && typeof key === 'object') {\n        // allow {key:'content-type', value: 'text/plain'}\n        if (key.key && key.value) {\n            this.setHeader(key.key, key.value);\n        }\n        // allow [{key:'content-type', value: 'text/plain'}]\n        else if (Array.isArray(key)) {\n            key.forEach(function (i) {\n                this.setHeader(i.key, i.value);\n            }.bind(this));\n        }\n        // allow {'content-type': 'text/plain'}\n        else {\n            Object.keys(key).forEach(function (i) {\n                this.setHeader(i, key[i]);\n            }.bind(this));\n        }\n        return this;\n    }\n\n    key = this._normalizeHeaderKey(key);\n\n    headerValue = {\n        key: key,\n        value: value\n    };\n\n    // Check if the value exists and overwrite\n    for (var i = 0, len = this._headers.length; i < len; i++) {\n        if (this._headers[i].key === key) {\n            if (!added) {\n                // replace the first match\n                this._headers[i] = headerValue;\n                added = true;\n            } else {\n                // remove following matches\n                this._headers.splice(i, 1);\n                i--;\n                len--;\n            }\n        }\n    }\n\n    // match not found, append the value\n    if (!added) {\n        this._headers.push(headerValue);\n    }\n\n    return this;\n};\n\n/**\n * Adds a header value. If the value for selected key exists, the value is appended\n * as a new field and old one is not touched.\n * You can set multiple values as well by using [{key:'', value:''}] or\n * {key: 'value'} as the first argument.\n *\n * @param {String|Array|Object} key Header key or a list of key value pairs\n * @param {String} value Header value\n * @return {Object} current node\n */\nMimeNode.prototype.addHeader = function (key, value) {\n\n    // Allow setting multiple headers at once\n    if (!value && key && typeof key === 'object') {\n        // allow {key:'content-type', value: 'text/plain'}\n        if (key.key && key.value) {\n            this.addHeader(key.key, key.value);\n        }\n        // allow [{key:'content-type', value: 'text/plain'}]\n        else if (Array.isArray(key)) {\n            key.forEach(function (i) {\n                this.addHeader(i.key, i.value);\n            }.bind(this));\n        }\n        // allow {'content-type': 'text/plain'}\n        else {\n            Object.keys(key).forEach(function (i) {\n                this.addHeader(i, key[i]);\n            }.bind(this));\n        }\n        return this;\n    }\n\n    this._headers.push({\n        key: this._normalizeHeaderKey(key),\n        value: value\n    });\n\n    return this;\n};\n\n/**\n * Retrieves the first mathcing value of a selected key\n *\n * @param {String} key Key to search for\n * @retun {String} Value for the key\n */\nMimeNode.prototype.getHeader = function (key) {\n    key = this._normalizeHeaderKey(key);\n    for (var i = 0, len = this._headers.length; i < len; i++) {\n        if (this._headers[i].key === key) {\n            return this._headers[i].value;\n        }\n    }\n};\n\n/**\n * Sets body content for current node. If the value is a string, charset is added automatically\n * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n * the charset yourself\n *\n * @param (String|Buffer) content Body content\n * @return {Object} current node\n */\nMimeNode.prototype.setContent = function (content) {\n    var _self = this;\n    this.content = content;\n    if (typeof this.content.pipe === 'function') {\n        // pre-stream handler. might be triggered if a stream is set as content\n        // and 'error' fires before anything is done with this stream\n        this._contentErrorHandler = function (err) {\n            _self.content.removeListener('error', _self._contentErrorHandler);\n            _self.content = err;\n        };\n        this.content.once('error', this._contentErrorHandler);\n    } else if (typeof this.content === 'string') {\n        this._isPlainText = libmime.isPlainText(this.content);\n        if (this._isPlainText && libmime.hasLongerLines(this.content, 76)) {\n            // If there are lines longer than 76 symbols/bytes do not use 7bit\n            this._hasLongLines = true;\n        }\n    }\n    return this;\n};\n\nMimeNode.prototype.build = function (callback) {\n    var stream = this.createReadStream();\n    var buf = [];\n    var buflen = 0;\n    var returned = false;\n\n    stream.on('readable', function () {\n        var chunk;\n\n        while ((chunk = stream.read()) !== null) {\n            buf.push(chunk);\n            buflen += chunk.length;\n        }\n    });\n\n    stream.once('error', function (err) {\n        if (returned) {\n            return;\n        }\n        returned = true;\n\n        return callback(err);\n    });\n\n    stream.once('end', function (chunk) {\n        if (returned) {\n            return;\n        }\n        returned = true;\n\n        if (chunk && chunk.length) {\n            buf.push(chunk);\n            buflen += chunk.length;\n        }\n        return callback(null, Buffer.concat(buf, buflen));\n    });\n};\n\nMimeNode.prototype.getTransferEncoding = function () {\n    var transferEncoding = false;\n    var contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();\n\n    if (this.content) {\n        transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();\n        if (!transferEncoding || ['base64', 'quoted-printable'].indexOf(transferEncoding) < 0) {\n            if (/^text\\//i.test(contentType)) {\n                // If there are no special symbols, no need to modify the text\n                if (this._isPlainText && !this._hasLongLines) {\n                    transferEncoding = '7bit';\n                } else {\n                    transferEncoding = 'quoted-printable';\n                }\n            } else if (!/^multipart\\//i.test(contentType)) {\n                transferEncoding = transferEncoding || 'base64';\n            }\n        }\n    }\n    return transferEncoding;\n};\n\n/**\n * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n *\n * @returns {String} Headers\n */\nMimeNode.prototype.buildHeaders = function () {\n    var _self = this;\n    var transferEncoding = this.getTransferEncoding();\n    var headers = [];\n\n    if (transferEncoding) {\n        this.setHeader('Content-Transfer-Encoding', transferEncoding);\n    }\n\n    if (this.filename && !this.getHeader('Content-Disposition')) {\n        this.setHeader('Content-Disposition', 'attachment');\n    }\n\n    // Ensure mandatory header fields\n    if (this.rootNode === this) {\n        if (!this.getHeader('Date')) {\n            this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));\n        }\n        // You really should define your own Message-Id field!\n        if (!this.getHeader('Message-Id')) {\n            this.setHeader('Message-Id', '<' +\n                // crux to generate random strings like this:\n                // \"1401391905590-58aa8c32-d32a065c-c1a2aad2\"\n                [0, 0, 0].reduce(function (prev) {\n                    return prev + '-' + Math.floor((1 + Math.random()) * 0x100000000).\n                    toString(16).\n                    substring(1);\n                }, Date.now()) +\n                '@' +\n                // try to use the domain of the FROM address or fallback localhost\n                (this.getEnvelope().from || 'localhost').split('@').pop() +\n                '>');\n        }\n        if (!this.getHeader('MIME-Version')) {\n            this.setHeader('MIME-Version', '1.0');\n        }\n    }\n\n    this._headers.forEach(function (header) {\n        var key = header.key,\n            value = header.value,\n            structured,\n            param;\n\n        switch (header.key) {\n            case 'Content-Disposition':\n                structured = libmime.parseHeaderValue(value);\n                if (_self.filename) {\n                    structured.params.filename = _self.filename;\n                }\n                value = libmime.buildHeaderValue(structured);\n                break;\n            case 'Content-Type':\n                structured = libmime.parseHeaderValue(value);\n\n                _self._handleContentType(structured);\n\n                if (structured.value.match(/^text\\/plain\\b/) && typeof _self.content === 'string' && /[\\u0080-\\uFFFF]/.test(_self.content)) {\n                    structured.params.charset = 'utf-8';\n                }\n\n                value = libmime.buildHeaderValue(structured);\n\n                if (_self.filename) {\n                    // add support for non-compliant clients like QQ webmail\n                    // we can't build the value with buildHeaderValue as the value is non standard and\n                    // would be converted to parameter continuation encoding that we do not want\n                    param = libmime.encodeWords(_self.filename, 'Q', 52);\n                    if (param !== _self.filename || /[\\s\"=;]/.test(param)) {\n                        // include value in quotes if needed\n                        param = '\"' + param + '\"';\n                    }\n                    value += '; name=' + param;\n                }\n                break;\n            case 'Bcc':\n                if (!_self.keepBcc) {\n                    // skip BCC values\n                    return;\n                }\n                break;\n        }\n\n        // skip empty lines\n        value = _self._encodeHeaderValue(key, value);\n        if (!(value || '').toString().trim()) {\n            return;\n        }\n\n        headers.push(libmime.foldLines(key + ': ' + value, 76));\n    });\n\n    return headers.join('\\r\\n');\n};\n\n/**\n * Streams the rfc2822 message from the current node. If this is a root node,\n * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n *\n * @return {String} Compiled message\n */\nMimeNode.prototype.createReadStream = function (options) {\n    options = options || {};\n\n    var outputStream = new PassThrough(options);\n    var transform;\n\n    this.stream(outputStream, options, function (err) {\n        if (err) {\n            outputStream.emit('error', err);\n            return;\n        }\n        outputStream.end();\n    });\n\n    for (var i = 0, len = this._transforms.length; i < len; i++) {\n        transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];\n        outputStream.once('error', function (err) {\n            transform.emit('error', err);\n        });\n        outputStream = outputStream.pipe(transform);\n    }\n\n    return outputStream;\n};\n\n/**\n * Appends a transform stream object to the transforms list. Final output\n * is passed through this stream before exposing\n *\n * @param {Object} transform Read-Write stream\n */\nMimeNode.prototype.transform = function (transform) {\n    this._transforms.push(transform);\n};\n\nMimeNode.prototype.stream = function (outputStream, options, done) {\n    var _self = this;\n    var transferEncoding = this.getTransferEncoding();\n    var contentStream;\n    var localStream;\n\n    // protect actual callback against multiple triggering\n    var returned = false;\n    var callback = function (err) {\n        if (returned) {\n            return;\n        }\n        returned = true;\n        done(err);\n    };\n\n    // pushes node content\n    function sendContent() {\n        if (_self.content) {\n\n            if (Object.prototype.toString.call(_self.content) === '[object Error]') {\n                // content is already errored\n                return callback(_self.content);\n            }\n\n            if (typeof _self.content.pipe === 'function') {\n                _self.content.removeListener('error', _self._contentErrorHandler);\n                _self._contentErrorHandler = function (err) {\n                    return callback(err);\n                };\n                _self.content.once('error', _self._contentErrorHandler);\n            }\n\n            if (['quoted-printable', 'base64'].indexOf(transferEncoding) >= 0) {\n                contentStream = new(transferEncoding === 'base64' ? libbase64 : libqp).Encoder(options);\n\n                contentStream.pipe(outputStream, {\n                    end: false\n                });\n                contentStream.once('end', finalize);\n                contentStream.once('error', function (err) {\n                    return callback(err);\n                });\n\n                localStream = _self._getStream(_self.content);\n                localStream.pipe(contentStream);\n            } else {\n                // anything that is not QP or Base54 passes as-is\n                localStream = _self._getStream(_self.content);\n                localStream.pipe(outputStream, {\n                    end: false\n                });\n                localStream.once('end', finalize);\n            }\n\n            localStream.once('error', function (err) {\n                return callback(err);\n            });\n\n            return;\n        } else {\n            return setImmediate(finalize);\n        }\n    }\n\n    // for multipart nodes, push child nodes\n    // for content nodes end the stream\n    function finalize() {\n        var childId = 0;\n        var processChildNode = function () {\n            if (childId >= _self.childNodes.length) {\n                outputStream.write('\\r\\n--' + _self.boundary + '--\\r\\n');\n                return callback();\n            }\n            var child = _self.childNodes[childId++];\n            outputStream.write((childId > 1 ? '\\r\\n' : '') + '--' + _self.boundary + '\\r\\n');\n            child.stream(outputStream, options, function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                setImmediate(processChildNode);\n            });\n        };\n\n        if (_self.multipart) {\n            setImmediate(processChildNode);\n        } else {\n            return callback();\n        }\n    }\n\n\n    outputStream.write(this.buildHeaders() + '\\r\\n\\r\\n');\n    setImmediate(sendContent);\n};\n\n/**\n * Sets envelope to be used instead of the generated one\n *\n * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n */\nMimeNode.prototype.setEnvelope = function (envelope) {\n    this._envelope = {\n        from: envelope.from || false,\n        to: [].concat(envelope.to || [])\n    };\n    return this;\n};\n\n/**\n * Generates and returns an object with parsed address fields\n *\n * @return {Object} Address object\n */\nMimeNode.prototype.getAddresses = function () {\n    var addresses = {};\n\n    this._headers.forEach(function (header) {\n        var key = header.key.toLowerCase();\n        if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].indexOf(key) >= 0) {\n            if (!Array.isArray(addresses[key])) {\n                addresses[key] = [];\n            }\n\n            this._convertAddresses(this._parseAddresses(header.value), addresses[key]);\n        }\n    }.bind(this));\n\n    return addresses;\n};\n\n/**\n * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n *\n * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n */\nMimeNode.prototype.getEnvelope = function () {\n    if (this._envelope) {\n        return this._envelope;\n    }\n\n    var envelope = {\n        from: false,\n        to: []\n    };\n    this._headers.forEach(function (header) {\n        var list = [];\n        if (header.key === 'From' || (!envelope.from && ['Reply-To', 'Sender'].indexOf(header.key) >= 0)) {\n            this._convertAddresses(this._parseAddresses(header.value), list);\n            if (list.length && list[0]) {\n                envelope.from = list[0].address;\n            }\n        } else if (['To', 'Cc', 'Bcc'].indexOf(header.key) >= 0) {\n            this._convertAddresses(this._parseAddresses(header.value), envelope.to);\n        }\n    }.bind(this));\n\n    envelope.to = envelope.to.map(function (to) {\n        return to.address;\n    });\n\n    return envelope;\n};\n\n/////// PRIVATE METHODS\n\n/**\n * Detects and returns handle to a stream related with the content.\n *\n * @param {Mixed} content Node content\n * @returns {Object} Stream object\n */\nMimeNode.prototype._getStream = function (content) {\n    var contentStream;\n\n    if (typeof content.pipe === 'function') {\n        // assume as stream\n        return content;\n    } else if (content && typeof content.path === 'string' && !content.href) {\n        // read file\n        return fs.createReadStream(content.path);\n    } else if (content && typeof content.href === 'string') {\n        // fetch URL\n        return fetch(content.href);\n    } else {\n        // pass string or buffer content as a stream\n        contentStream = new PassThrough();\n        setImmediate(function () {\n            contentStream.end(content || '');\n        });\n        return contentStream;\n    }\n};\n\n/**\n * Parses addresses. Takes in a single address or an array or an\n * array of address arrays (eg. To: [[first group], [second group],...])\n *\n * @param {Mixed} addresses Addresses to be parsed\n * @return {Array} An array of address objects\n */\nMimeNode.prototype._parseAddresses = function (addresses) {\n    return [].concat.apply([], [].concat(addresses).map(function (address) {\n        if (address && address.address) {\n            address = this._convertAddresses(address);\n        }\n        return addressparser(address);\n    }.bind(this)));\n};\n\n/**\n * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n *\n * @param {String} key Key to be normalized\n * @return {String} key in Camel-Case form\n */\nMimeNode.prototype._normalizeHeaderKey = function (key) {\n    return (key || '').toString().\n        // no newlines in keys\n    replace(/\\r?\\n|\\r/g, ' ').\n    trim().toLowerCase().\n        // use uppercase words, except MIME\n    replace(/^MIME\\b|^[a-z]|\\-[a-z]/ig, function (c) {\n        return c.toUpperCase();\n    });\n};\n\n/**\n * Checks if the content type is multipart and defines boundary if needed.\n * Doesn't return anything, modifies object argument instead.\n *\n * @param {Object} structured Parsed header value for 'Content-Type' key\n */\nMimeNode.prototype._handleContentType = function (structured) {\n    this.contentType = structured.value.trim().toLowerCase();\n\n    this.multipart = this.contentType.split('/').reduce(function (prev, value) {\n        return prev === 'multipart' ? value : false;\n    });\n\n    if (this.multipart) {\n        this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n    } else {\n        this.boundary = false;\n    }\n};\n\n/**\n * Generates a multipart boundary value\n *\n * @return {String} boundary value\n */\nMimeNode.prototype._generateBoundary = function () {\n    return '----sinikael-?=_' + this._nodeId + '-' + this.rootNode.baseBoundary;\n};\n\n/**\n * Encodes a header value for use in the generated rfc2822 email.\n *\n * @param {String} key Header key\n * @param {String} value Header value\n */\nMimeNode.prototype._encodeHeaderValue = function (key, value) {\n    key = this._normalizeHeaderKey(key);\n\n    switch (key) {\n\n        // Structured headers\n        case 'From':\n        case 'Sender':\n        case 'To':\n        case 'Cc':\n        case 'Bcc':\n        case 'Reply-To':\n            return this._convertAddresses(this._parseAddresses(value));\n\n            // values enclosed in <>\n        case 'Message-Id':\n        case 'In-Reply-To':\n        case 'Content-Id':\n            value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n\n            if (value.charAt(0) !== '<') {\n                value = '<' + value;\n            }\n\n            if (value.charAt(value.length - 1) !== '>') {\n                value = value + '>';\n            }\n            return value;\n\n            // space separated list of values enclosed in <>\n        case 'References':\n            value = [].concat.apply([], [].concat(value || '').map(function (elm) {\n                elm = (elm || '').toString().replace(/\\r?\\n|\\r/g, ' ').trim();\n                return elm.replace(/<[^>]*>/g, function (str) {\n                    return str.replace(/\\s/g, '');\n                }).split(/\\s+/);\n            })).map(function (elm) {\n                if (elm.charAt(0) !== '<') {\n                    elm = '<' + elm;\n                }\n                if (elm.charAt(elm.length - 1) !== '>') {\n                    elm = elm + '>';\n                }\n                return elm;\n            });\n\n            return value.join(' ').trim();\n\n        case 'Date':\n            if (Object.prototype.toString.call(value) === '[object Date]') {\n                return value.toUTCString().replace(/GMT/, '+0000');\n            }\n\n            value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n            return libmime.encodeWords(value, 'Q', 52);\n\n        default:\n            value = (value || '').toString().replace(/\\r?\\n|\\r/g, ' ');\n            // encodeWords only encodes if needed, otherwise the original string is returned\n            return libmime.encodeWords(value, 'Q', 52);\n    }\n};\n\n/**\n * Rebuilds address object using punycode and other adjustments\n *\n * @param {Array} addresses An array of address objects\n * @param {Array} [uniqueList] An array to be populated with addresses\n * @return {String} address string\n */\nMimeNode.prototype._convertAddresses = function (addresses, uniqueList) {\n    var values = [];\n\n    uniqueList = uniqueList || [];\n\n    [].concat(addresses || []).forEach(function (address) {\n        if (address.address) {\n            address.address = address.address.replace(/^.*?(?=\\@)/, function (user) {\n                // pretty bad solution but what you gonna do\n                // unicode usernames are converted to encoded words\n                // 'jõgeva@hot.ee' will be converted to '=?utf-8?Q?j=C3=B5geva?=@hot.ee'\n                return libmime.encodeWords(user, 'Q', 52);\n            }).replace(/@.+$/, function (domain) {\n                // domains are punycoded by default\n                // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n                // non-unicode domains are left as is\n                return '@' + punycode.toASCII(domain.substr(1));\n            });\n\n            if (!address.name) {\n                values.push(address.address);\n            } else if (address.name) {\n                values.push(this._encodeAddressName(address.name) + ' <' + address.address + '>');\n            }\n\n            if (address.address) {\n                if (!uniqueList.filter(\n                        function (a) {\n                            return a.address === address.address;\n                        }).length) {\n                    uniqueList.push(address);\n                }\n            }\n        } else if (address.group) {\n            values.push(this._encodeAddressName(address.name) + ':' + (address.group.length ? this._convertAddresses(address.group, uniqueList) : '').trim() + ';');\n        }\n    }.bind(this));\n\n    return values.join(', ');\n};\n\n/**\n * If needed, mime encodes the name part\n *\n * @param {String} name Name part of an address\n * @returns {String} Mime word encoded string if needed\n */\nMimeNode.prototype._encodeAddressName = function (name) {\n    if (!/^[\\w ']*$/.test(name)) {\n        if (/^[\\x20-\\x7e]*$/.test(name)) {\n            return '\"' + name.replace(/([\\\\\"])/g, '\\\\$1') + '\"';\n        } else {\n            return libmime.encodeWord(name, 'Q', 52);\n        }\n    }\n    return name;\n};\n"]},"metadata":{},"sourceType":"script"}