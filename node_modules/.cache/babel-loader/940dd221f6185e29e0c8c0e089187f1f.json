{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Photo = /*#__PURE__*/memo(_c = _s(({\n  x,\n  y,\n  images\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const {\n    viewport\n  } = useThree();\n  const index = (x + y) % images.length; // Calculate the index\n\n  const texture = useTexture(images[index].src); // Calculer les dimensions du plan en fonction de la taille de l'image\n\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n\n  const planeHeight = planeWidth / aspectRatio; // Utiliser PlaneGeometry avec les dimensions calculées\n\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n  const [t, setT] = useState(0);\n  const direction = useRef();\n  useFrame(({\n    mouse\n  }) => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (!direction.current) {\n      direction.current = x > viewport.width * mouse.x / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n    setT(t + 1);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: ref,\n    position: [x, y, 0],\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      attach: \"material\",\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}, \"6evXA8AQinEbMoqpnTb6MnnCKA0=\", false, function () {\n  return [useThree, useTexture, useFrame];\n}));\n_c2 = Photo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["useTexture","memo","useRef","useState","PlaneGeometry","Mesh","MeshBasicMaterial","useThree","useFrame","appliedForces","Photo","x","y","images","ref","viewport","index","length","texture","src","imageWidth","image","width","imageHeight","height","aspectRatio","planeWidth","planeHeight","geometry","t","setT","direction","mouse","current","position","add"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,QAAuC,OAAvC;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,iBAA9B,QAAuD,OAAvD;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;AACA,SAASC,aAAT,QAA8B,WAA9B;;AAEA,OAAO,MAAMC,KAAK,gBAAGT,IAAI,SAAC,CAAC;AAAEU,EAAAA,CAAF;AAAKC,EAAAA,CAAL;AAAQC,EAAAA;AAAR,CAAD,KAAsB;AAAA;;AAC9C,QAAMC,GAAG,GAAGZ,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAeR,QAAQ,EAA7B;AAEA,QAAMS,KAAK,GAAG,CAACL,CAAC,GAAGC,CAAL,IAAUC,MAAM,CAACI,MAA/B,CAJ8C,CAIP;;AAEvC,QAAMC,OAAO,GAAGlB,UAAU,CAACa,MAAM,CAACG,KAAD,CAAN,CAAcG,GAAf,CAA1B,CAN8C,CAQ9C;;AACA,QAAMC,UAAU,GAAGF,OAAO,CAACG,KAAR,CAAcC,KAAjC;AACA,QAAMC,WAAW,GAAGL,OAAO,CAACG,KAAR,CAAcG,MAAlC;AACA,QAAMC,WAAW,GAAGL,UAAU,GAAGG,WAAjC;AACA,QAAMG,UAAU,GAAG,CAAnB,CAZ8C,CAYxB;;AACtB,QAAMC,WAAW,GAAGD,UAAU,GAAGD,WAAjC,CAb8C,CAe9C;;AACA,QAAMG,QAAQ,GAAG,IAAIxB,aAAJ,CAAkBsB,UAAlB,EAA8BC,WAA9B,CAAjB;AAEA,QAAM,CAACE,CAAD,EAAIC,IAAJ,IAAY3B,QAAQ,CAAC,CAAD,CAA1B;AACA,QAAM4B,SAAS,GAAG7B,MAAM,EAAxB;AAEAM,EAAAA,QAAQ,CAAC,CAAC;AAAEwB,IAAAA;AAAF,GAAD,KAAe;AACtB,QAAI,CAAClB,GAAG,CAACmB,OAAT,EAAkB;AAChB;AACD;;AACD,QAAI,CAACF,SAAS,CAACE,OAAf,EAAwB;AACtBF,MAAAA,SAAS,CAACE,OAAV,GAAoBtB,CAAC,GAAII,QAAQ,CAACO,KAAT,GAAiBU,KAAK,CAACrB,CAAxB,GAA6B,CAAjC,GAAqC,CAAC,CAAtC,GAA0C,CAA9D;AACD;;AAEDG,IAAAA,GAAG,CAACmB,OAAJ,CAAYC,QAAZ,CAAqBC,GAArB,CAAyB1B,aAAa,CAACoB,CAAD,EAAIE,SAAS,CAACE,OAAd,CAAtC;AAEAH,IAAAA,IAAI,CAACD,CAAC,GAAG,CAAL,CAAJ;AACD,GAXO,CAAR;AAaA,sBACE;AAAM,IAAA,GAAG,EAAEf,GAAX;AAAgB,IAAA,QAAQ,EAAE,CAACH,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAA1B;AAAqC,IAAA,QAAQ,EAAEgB,QAA/C;AAAA,2BACE;AAAmB,MAAA,MAAM,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAEV;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvCwB;AAAA,UAEFX,QAFE,EAMPP,UANO,EAqBvBQ,QArBuB;AAAA,GAAlB;MAAME,K","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useState } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport { useThree, useFrame } from \"@react-three/fiber\";\nimport { appliedForces } from \"./helpers\";\n\nexport const Photo = memo(({ x, y, images }) => {\n  const ref = useRef(null);\n  const { viewport } = useThree();\n\n  const index = (x + y) % images.length; // Calculate the index\n\n  const texture = useTexture(images[index].src);\n\n  // Calculer les dimensions du plan en fonction de la taille de l'image\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n  const planeWidth = 2; // Largeur du plan (peut être ajustée selon vos besoins)\n  const planeHeight = planeWidth / aspectRatio;\n\n  // Utiliser PlaneGeometry avec les dimensions calculées\n  const geometry = new PlaneGeometry(planeWidth, planeHeight);\n\n  const [t, setT] = useState(0);\n  const direction = useRef();\n\n  useFrame(({ mouse }) => {\n    if (!ref.current) {\n      return;\n    }\n    if (!direction.current) {\n      direction.current = x > (viewport.width * mouse.x) / 2 ? -1 : 1;\n    }\n\n    ref.current.position.add(appliedForces(t, direction.current));\n\n    setT(t + 1);\n  });\n\n  return (\n    <mesh ref={ref} position={[x, y, 0]} geometry={geometry}>\n      <meshBasicMaterial attach=\"material\" map={texture} />\n    </mesh>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}