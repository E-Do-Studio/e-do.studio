{"ast":null,"code":"import _slicedToArray from\"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var viewportContext=/*#__PURE__*/React.createContext({});var ViewportProvider=function ViewportProvider(_ref){var children=_ref.children;// This is the exact same logic that we previously had in our hook\nvar _React$useState=React.useState(window.innerWidth),_React$useState2=_slicedToArray(_React$useState,2),width=_React$useState2[0],setWidth=_React$useState2[1];var _React$useState3=React.useState(window.innerHeight),_React$useState4=_slicedToArray(_React$useState3,2),height=_React$useState4[0],setHeight=_React$useState4[1];var handleWindowResize=function handleWindowResize(){setWidth(window.innerWidth);setHeight(window.innerHeight);};React.useEffect(function(){window.addEventListener(\"resize\",handleWindowResize);return function(){return window.removeEventListener(\"resize\",handleWindowResize);};},[]);/* Now we are dealing with a context instead of a Hook, so instead\n     of returning the width and height we store the values in the\n     value of the Provider */return/*#__PURE__*/_jsx(viewportContext.Provider,{value:{width:width,height:height},children:children});};/* Rewrite the \"useViewport\" hook to pull the width and height values\n   out of the context instead of calculating them itself */export var useViewport=function useViewport(){/* We can use the \"useContext\" Hook to acccess a context from within\n     another Hook, remember, Hooks are composable! */var _React$useContext=React.useContext(viewportContext),width=_React$useContext.width,height=_React$useContext.height;return{width:width,height:height};};export default ViewportProvider;","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/src/Hooks/viewportProvider.js"],"names":["React","viewportContext","createContext","ViewportProvider","children","useState","window","innerWidth","width","setWidth","innerHeight","height","setHeight","handleWindowResize","useEffect","addEventListener","removeEventListener","useViewport","useContext"],"mappings":"2KAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,2CAEA,GAAMC,CAAAA,eAAe,cAAGD,KAAK,CAACE,aAAN,CAAoB,EAApB,CAAxB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CACzC;AAEA,oBAA0BJ,KAAK,CAACK,QAAN,CAAeC,MAAM,CAACC,UAAtB,CAA1B,oDAAOC,KAAP,qBAAcC,QAAd,qBACA,qBAA4BT,KAAK,CAACK,QAAN,CAAeC,MAAM,CAACI,WAAtB,CAA5B,qDAAOC,MAAP,qBAAeC,SAAf,qBAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC/BJ,QAAQ,CAACH,MAAM,CAACC,UAAR,CAAR,CACAK,SAAS,CAACN,MAAM,CAACI,WAAR,CAAT,CACD,CAHD,CAKAV,KAAK,CAACc,SAAN,CAAgB,UAAM,CACpBR,MAAM,CAACS,gBAAP,CAAwB,QAAxB,CAAkCF,kBAAlC,EACA,MAAO,kBAAMP,CAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,CAAqCH,kBAArC,CAAN,EAAP,CACD,CAHD,CAGG,EAHH,EAKA;AACF;AACA,6BAIE,mBACE,KAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAE,CAACL,KAAK,CAALA,KAAD,CAAQG,MAAM,CAANA,MAAR,CAAjC,UACGP,QADH,EADF,CAKD,CA3BD,CA+BA;AACA,2DACA,MAAO,IAAMa,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CAC/B;AACF,qDACE,sBAA0BjB,KAAK,CAACkB,UAAN,CAAiBjB,eAAjB,CAA1B,CAAQO,KAAR,mBAAQA,KAAR,CAAeG,MAAf,mBAAeA,MAAf,CACA,MAAO,CAAEH,KAAK,CAALA,KAAF,CAASG,MAAM,CAANA,MAAT,CAAP,CACD,CALM,CAQP,cAAeR,CAAAA,gBAAf","sourcesContent":["import React from 'react'\n\nconst viewportContext = React.createContext({});\n\nconst ViewportProvider = ({ children }) => {\n  // This is the exact same logic that we previously had in our hook\n\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const [height, setHeight] = React.useState(window.innerHeight);\n\n  const handleWindowResize = () => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  }\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  /* Now we are dealing with a context instead of a Hook, so instead\n     of returning the width and height we store the values in the\n     value of the Provider */\n  \n  \n  \n  return (\n    <viewportContext.Provider value={{width, height}}>\n      {children}\n    </viewportContext.Provider>\n  );\n};\n\n\n\n/* Rewrite the \"useViewport\" hook to pull the width and height values\n   out of the context instead of calculating them itself */\nexport const useViewport = () => {\n  /* We can use the \"useContext\" Hook to acccess a context from within\n     another Hook, remember, Hooks are composable! */\n  const { width, height } = React.useContext(viewportContext);\n  return { width, height };\n}\n\n\nexport default ViewportProvider\n\n"]},"metadata":{},"sourceType":"module"}