{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\nvar _UnrealBloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_UnrealBloomPass, _Pass);\n\n  var _super = _createSuper(_UnrealBloomPass);\n\n  function _UnrealBloomPass(resolution, strength, radius, threshold) {\n    var _this;\n\n    _classCallCheck(this, _UnrealBloomPass);\n\n    _this = _super.call(this);\n    _this.strength = strength !== void 0 ? strength : 1;\n    _this.radius = radius;\n    _this.threshold = threshold;\n    _this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    _this.clearColor = new Color(0, 0, 0);\n    _this.renderTargetsHorizontal = [];\n    _this.renderTargetsVertical = [];\n    _this.nMips = 5;\n    var resx = Math.round(_this.resolution.x / 2);\n    var resy = Math.round(_this.resolution.y / 2);\n    _this.renderTargetBright = new WebGLRenderTarget(resx, resy, {\n      type: HalfFloatType\n    });\n    _this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n    _this.renderTargetBright.texture.generateMipmaps = false;\n\n    for (var i = 0; i < _this.nMips; i++) {\n      var renderTargetHorizonal = new WebGLRenderTarget(resx, resy, {\n        type: HalfFloatType\n      });\n      renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n      renderTargetHorizonal.texture.generateMipmaps = false;\n\n      _this.renderTargetsHorizontal.push(renderTargetHorizonal);\n\n      var renderTargetVertical = new WebGLRenderTarget(resx, resy, {\n        type: HalfFloatType\n      });\n      renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n      renderTargetVertical.texture.generateMipmaps = false;\n\n      _this.renderTargetsVertical.push(renderTargetVertical);\n\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n\n    var highPassShader = LuminosityHighPassShader;\n    _this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n    _this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n    _this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n    _this.materialHighPassFilter = new ShaderMaterial({\n      uniforms: _this.highPassUniforms,\n      vertexShader: highPassShader.vertexShader,\n      fragmentShader: highPassShader.fragmentShader,\n      defines: {}\n    });\n    _this.separableBlurMaterials = [];\n    var kernelSizeArray = [3, 5, 7, 9, 11];\n    resx = Math.round(_this.resolution.x / 2);\n    resy = Math.round(_this.resolution.y / 2);\n\n    for (var _i = 0; _i < _this.nMips; _i++) {\n      _this.separableBlurMaterials.push(_this.getSeperableBlurMaterial(kernelSizeArray[_i]));\n\n      _this.separableBlurMaterials[_i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n\n    _this.compositeMaterial = _this.getCompositeMaterial(_this.nMips);\n    _this.compositeMaterial.uniforms[\"blurTexture1\"].value = _this.renderTargetsVertical[0].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture2\"].value = _this.renderTargetsVertical[1].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture3\"].value = _this.renderTargetsVertical[2].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture4\"].value = _this.renderTargetsVertical[3].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture5\"].value = _this.renderTargetsVertical[4].texture;\n    _this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n    _this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n    _this.compositeMaterial.needsUpdate = true;\n    var bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n    _this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n    _this.bloomTintColors = [new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1)];\n    _this.compositeMaterial.uniforms[\"bloomTintColors\"].value = _this.bloomTintColors;\n    var copyShader = CopyShader;\n    _this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    _this.copyUniforms[\"opacity\"].value = 1;\n    _this.materialCopy = new ShaderMaterial({\n      uniforms: _this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.enabled = true;\n    _this.needsSwap = false;\n    _this._oldClearColor = new Color();\n    _this.oldClearAlpha = 1;\n    _this.basic = new MeshBasicMaterial();\n    _this.fsQuad = new FullScreenQuad(null);\n    return _this;\n  }\n\n  _createClass(_UnrealBloomPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n        this.renderTargetsHorizontal[i].dispose();\n      }\n\n      for (var _i2 = 0; _i2 < this.renderTargetsVertical.length; _i2++) {\n        this.renderTargetsVertical[_i2].dispose();\n      }\n\n      this.renderTargetBright.dispose();\n\n      for (var _i3 = 0; _i3 < this.separableBlurMaterials.length; _i3++) {\n        this.separableBlurMaterials[_i3].dispose();\n      }\n\n      this.compositeMaterial.dispose();\n      this.materialCopy.dispose();\n      this.basic.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      var resx = Math.round(width / 2);\n      var resy = Math.round(height / 2);\n      this.renderTargetBright.setSize(resx, resy);\n\n      for (var i = 0; i < this.nMips; i++) {\n        this.renderTargetsHorizontal[i].setSize(resx, resy);\n        this.renderTargetsVertical[i].setSize(resx, resy);\n        this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setClearColor(this.clearColor, 0);\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n\n      if (this.renderToScreen) {\n        this.fsQuad.material = this.basic;\n        this.basic.map = readBuffer.texture;\n        renderer.setRenderTarget(null);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n\n      this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n      this.fsQuad.material = this.materialHighPassFilter;\n      renderer.setRenderTarget(this.renderTargetBright);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      var inputRenderTarget = this.renderTargetBright;\n\n      for (var i = 0; i < this.nMips; i++) {\n        this.fsQuad.material = this.separableBlurMaterials[i];\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n        renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n        renderer.setRenderTarget(this.renderTargetsVertical[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        inputRenderTarget = this.renderTargetsVertical[i];\n      }\n\n      this.fsQuad.material = this.compositeMaterial;\n      this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n      this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n      this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(readBuffer);\n        this.fsQuad.render(renderer);\n      }\n\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"getSeperableBlurMaterial\",\n    value: function getSeperableBlurMaterial(kernelRadius) {\n      return new ShaderMaterial({\n        defines: {\n          KERNEL_RADIUS: kernelRadius,\n          SIGMA: kernelRadius\n        },\n        uniforms: {\n          colorTexture: {\n            value: null\n          },\n          texSize: {\n            value: new Vector2(0.5, 0.5)\n          },\n          direction: {\n            value: new Vector2(0.5, 0.5)\n          }\n        },\n        vertexShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"#include <common>\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D colorTexture;\\n\\t\\t\\t\\tuniform vec2 texSize;\\n\\t\\t\\t\\tuniform vec2 direction;\\n\\n\\t\\t\\t\\tfloat gaussianPdf(in float x, in float sigma) {\\n\\t\\t\\t\\t\\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvec2 invSize = 1.0 / texSize;\\n\\t\\t\\t\\t\\tfloat fSigma = float(SIGMA);\\n\\t\\t\\t\\t\\tfloat weightSum = gaussianPdf(0.0, fSigma);\\n\\t\\t\\t\\t\\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\n\\t\\t\\t\\t\\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\n\\t\\t\\t\\t\\t\\tfloat x = float(i);\\n\\t\\t\\t\\t\\t\\tfloat w = gaussianPdf(x, fSigma);\\n\\t\\t\\t\\t\\t\\tvec2 uvOffset = direction * invSize * x;\\n\\t\\t\\t\\t\\t\\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\n\\t\\t\\t\\t\\t\\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\n\\t\\t\\t\\t\\t\\tdiffuseSum += (sample1 + sample2) * w;\\n\\t\\t\\t\\t\\t\\tweightSum += 2.0 * w;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\t\\t\\t\\t}\"\n      });\n    }\n  }, {\n    key: \"getCompositeMaterial\",\n    value: function getCompositeMaterial(nMips) {\n      return new ShaderMaterial({\n        defines: {\n          NUM_MIPS: nMips\n        },\n        uniforms: {\n          blurTexture1: {\n            value: null\n          },\n          blurTexture2: {\n            value: null\n          },\n          blurTexture3: {\n            value: null\n          },\n          blurTexture4: {\n            value: null\n          },\n          blurTexture5: {\n            value: null\n          },\n          bloomStrength: {\n            value: 1\n          },\n          bloomFactors: {\n            value: null\n          },\n          bloomTintColors: {\n            value: null\n          },\n          bloomRadius: {\n            value: 0\n          }\n        },\n        vertexShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D blurTexture1;\\n\\t\\t\\t\\tuniform sampler2D blurTexture2;\\n\\t\\t\\t\\tuniform sampler2D blurTexture3;\\n\\t\\t\\t\\tuniform sampler2D blurTexture4;\\n\\t\\t\\t\\tuniform sampler2D blurTexture5;\\n\\t\\t\\t\\tuniform float bloomStrength;\\n\\t\\t\\t\\tuniform float bloomRadius;\\n\\t\\t\\t\\tuniform float bloomFactors[NUM_MIPS];\\n\\t\\t\\t\\tuniform vec3 bloomTintColors[NUM_MIPS];\\n\\n\\t\\t\\t\\tfloat lerpBloomFactor(const in float factor) {\\n\\t\\t\\t\\t\\tfloat mirrorFactor = 1.2 - factor;\\n\\t\\t\\t\\t\\treturn mix(factor, mirrorFactor, bloomRadius);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\n\\t\\t\\t\\t}\"\n      });\n    }\n  }]);\n\n  return _UnrealBloomPass;\n}(Pass);\n\nvar UnrealBloomPass = _UnrealBloomPass;\n\n__publicField(UnrealBloomPass, \"BlurDirectionX\", /* @__PURE__ */new Vector2(1, 0));\n\n__publicField(UnrealBloomPass, \"BlurDirectionY\", /* @__PURE__ */new Vector2(0, 1));\n\nexport { UnrealBloomPass };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/UnrealBloomPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector2","Color","WebGLRenderTarget","HalfFloatType","UniformsUtils","ShaderMaterial","Vector3","AdditiveBlending","MeshBasicMaterial","Pass","FullScreenQuad","CopyShader","LuminosityHighPassShader","_UnrealBloomPass","resolution","strength","radius","threshold","x","y","clearColor","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","type","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","highPassShader","highPassUniforms","clone","uniforms","materialHighPassFilter","vertexShader","fragmentShader","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","copyShader","copyUniforms","materialCopy","blending","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","basic","fsQuad","length","dispose","width","height","setSize","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","render","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","bloomStrength","bloomRadius","UnrealBloomPass"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\nconst _UnrealBloomPass = class extends Pass {\n  constructor(resolution, strength, radius, threshold) {\n    super();\n    this.strength = strength !== void 0 ? strength : 1;\n    this.radius = radius;\n    this.threshold = threshold;\n    this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    this.clearColor = new Color(0, 0, 0);\n    this.renderTargetsHorizontal = [];\n    this.renderTargetsVertical = [];\n    this.nMips = 5;\n    let resx = Math.round(this.resolution.x / 2);\n    let resy = Math.round(this.resolution.y / 2);\n    this.renderTargetBright = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n    this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n    this.renderTargetBright.texture.generateMipmaps = false;\n    for (let i = 0; i < this.nMips; i++) {\n      const renderTargetHorizonal = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n      renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n      renderTargetHorizonal.texture.generateMipmaps = false;\n      this.renderTargetsHorizontal.push(renderTargetHorizonal);\n      const renderTargetVertical = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n      renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n      renderTargetVertical.texture.generateMipmaps = false;\n      this.renderTargetsVertical.push(renderTargetVertical);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    const highPassShader = LuminosityHighPassShader;\n    this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n    this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n    this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n    this.materialHighPassFilter = new ShaderMaterial({\n      uniforms: this.highPassUniforms,\n      vertexShader: highPassShader.vertexShader,\n      fragmentShader: highPassShader.fragmentShader,\n      defines: {}\n    });\n    this.separableBlurMaterials = [];\n    const kernelSizeArray = [3, 5, 7, 9, 11];\n    resx = Math.round(this.resolution.x / 2);\n    resy = Math.round(this.resolution.y / 2);\n    for (let i = 0; i < this.nMips; i++) {\n      this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n    this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n    this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n    this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n    this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n    this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n    this.compositeMaterial.needsUpdate = true;\n    const bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n    this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n    this.bloomTintColors = [\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1)\n    ];\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms[\"opacity\"].value = 1;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.basic = new MeshBasicMaterial();\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  dispose() {\n    for (let i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n    for (let i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n    this.renderTargetBright.dispose();\n    for (let i = 0; i < this.separableBlurMaterials.length; i++) {\n      this.separableBlurMaterials[i].dispose();\n    }\n    this.compositeMaterial.dispose();\n    this.materialCopy.dispose();\n    this.basic.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    let resx = Math.round(width / 2);\n    let resy = Math.round(height / 2);\n    this.renderTargetBright.setSize(resx, resy);\n    for (let i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(this.clearColor, 0);\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(false);\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n    renderer.setRenderTarget(this.renderTargetBright);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    let inputRenderTarget = this.renderTargetBright;\n    for (let i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i];\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetsVertical[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      inputRenderTarget = this.renderTargetsVertical[i];\n    }\n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(true);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n    }\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  getSeperableBlurMaterial(kernelRadius) {\n    return new ShaderMaterial({\n      defines: {\n        KERNEL_RADIUS: kernelRadius,\n        SIGMA: kernelRadius\n      },\n      uniforms: {\n        colorTexture: { value: null },\n        texSize: { value: new Vector2(0.5, 0.5) },\n        direction: { value: new Vector2(0.5, 0.5) }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n    });\n  }\n  getCompositeMaterial(nMips) {\n    return new ShaderMaterial({\n      defines: {\n        NUM_MIPS: nMips\n      },\n      uniforms: {\n        blurTexture1: { value: null },\n        blurTexture2: { value: null },\n        blurTexture3: { value: null },\n        blurTexture4: { value: null },\n        blurTexture5: { value: null },\n        bloomStrength: { value: 1 },\n        bloomFactors: { value: null },\n        bloomTintColors: { value: null },\n        bloomRadius: { value: 0 }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n    });\n  }\n};\nlet UnrealBloomPass = _UnrealBloomPass;\n__publicField(UnrealBloomPass, \"BlurDirectionX\", /* @__PURE__ */ new Vector2(1, 0));\n__publicField(UnrealBloomPass, \"BlurDirectionY\", /* @__PURE__ */ new Vector2(0, 1));\nexport {\n  UnrealBloomPass\n};\n"]},"metadata":{},"sourceType":"module"}