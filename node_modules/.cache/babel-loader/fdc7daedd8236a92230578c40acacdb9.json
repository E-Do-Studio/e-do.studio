{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from \"three\";\n\nvar _mipmapMaterial = /* @__PURE__ */_getMipmapMaterial();\n\nvar _mesh = /* @__PURE__ */new Mesh( /* @__PURE__ */new PlaneGeometry(2, 2), _mipmapMaterial);\n\nvar _flatCamera = /* @__PURE__ */new OrthographicCamera(0, 1, 0, 1, 0, 1);\n\nvar _tempTarget = null;\n\nvar RoughnessMipmapper = function RoughnessMipmapper(renderer) {\n  _classCallCheck(this, RoughnessMipmapper);\n\n  __publicField(this, \"generateMipmaps\", function (material) {\n    if (\"roughnessMap\" in material === false) return;\n    var roughnessMap = material.roughnessMap,\n        normalMap = material.normalMap;\n\n    if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n      return;\n    }\n\n    material.userData.roughnessUpdated = true;\n    var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n    var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n\n    var oldTarget = this._renderer.getRenderTarget();\n\n    var autoClear = this._renderer.autoClear;\n    this._renderer.autoClear = false;\n\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose();\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false\n      });\n      _tempTarget.scissorTest = true;\n    }\n\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      var params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false\n      };\n      var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n      newRoughnessTarget.texture.generateMipmaps = true;\n\n      this._renderer.setRenderTarget(newRoughnessTarget);\n\n      material.roughnessMap = newRoughnessTarget.texture;\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap;\n    }\n\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n    _mipmapMaterial.uniforms.normalMap.value = normalMap;\n    var position = new Vector2(0, 0);\n    var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n\n    for (var mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      texelSize.set(1 / width, 1 / height);\n      if (mip == 0) texelSize.set(0, 0);\n\n      _tempTarget.viewport.set(position.x, position.y, width, height);\n\n      _tempTarget.scissor.set(position.x, position.y, width, height);\n\n      this._renderer.setRenderTarget(_tempTarget);\n\n      this._renderer.render(_mesh, _flatCamera);\n\n      this._renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n\n    this._renderer.setRenderTarget(oldTarget);\n\n    this._renderer.autoClear = autoClear;\n  });\n\n  __publicField(this, \"dispose\", function () {\n    _mipmapMaterial.dispose();\n\n    _mesh.geometry.dispose();\n\n    if (_tempTarget != null) _tempTarget.dispose();\n  });\n\n  this._renderer = renderer;\n\n  this._renderer.compile(_mesh, _flatCamera);\n};\n\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader:\n    /* glsl */\n    \"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tattribute vec3 position;\\n\\t\\t\\tattribute vec2 uv;\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n    fragmentShader:\n    /* glsl */\n    \"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\tuniform sampler2D roughnessMap;\\n\\t\\t\\tuniform sampler2D normalMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\n\\t\\t\\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\\n\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tfloat roughnessToVariance( float roughness ) {\\n\\n\\t\\t\\t\\tfloat variance = 0.0;\\n\\n\\t\\t\\t\\tif ( roughness >= r1 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\\n\\n\\t\\t\\t\\t} else if ( roughness >= r4 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\\n\\n\\t\\t\\t\\t} else if ( roughness >= r5 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tfloat roughness2 = roughness * roughness;\\n\\n\\t\\t\\t\\t\\tvariance = 1.79 * roughness2 * roughness2;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn variance;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat varianceToRoughness( float variance ) {\\n\\n\\t\\t\\t\\tfloat roughness = 0.0;\\n\\n\\t\\t\\t\\tif ( variance >= v1 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\\n\\n\\t\\t\\t\\t} else if ( variance >= v4 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\\n\\n\\t\\t\\t\\t} else if ( variance >= v5 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn roughness;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\\n\\n\\t\\t\\t\\tif ( texelSize.x == 0.0 ) return;\\n\\n\\t\\t\\t\\tfloat roughness = gl_FragColor.g;\\n\\n\\t\\t\\t\\tfloat variance = roughnessToVariance( roughness );\\n\\n\\t\\t\\t\\tvec3 avgNormal;\\n\\n\\t\\t\\t\\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\\n\\n\\t\\t\\t\\t\\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\\n\\n\\t\\t\\t\\t\\t\\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\\n\\n\\t\\t\\t\\t\\t\\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvariance += 1.0 - 0.25 * length( avgNormal );\\n\\n\\t\\t\\t\\tgl_FragColor.g = varianceToRoughness( variance );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = \"RoughnessMipmapper\";\n  return shaderMaterial;\n}\n\nexport { RoughnessMipmapper };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/utils/RoughnessMipmapper.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","PlaneGeometry","OrthographicCamera","MathUtils","WebGLRenderTarget","Vector2","RawShaderMaterial","NoBlending","_mipmapMaterial","_getMipmapMaterial","_mesh","_flatCamera","_tempTarget","RoughnessMipmapper","renderer","material","roughnessMap","normalMap","generateMipmaps","userData","roughnessUpdated","width","Math","max","image","height","isPowerOfTwo","oldTarget","_renderer","getRenderTarget","autoClear","dispose","depthBuffer","scissorTest","params","wrapS","wrapT","magFilter","minFilter","newRoughnessTarget","texture","setRenderTarget","metalnessMap","aoMap","uniforms","position","texelSize","mip","set","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","compile","shaderMaterial","vertexShader","fragmentShader","blending","depthTest","depthWrite","type"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from \"three\";\nvar _mipmapMaterial = /* @__PURE__ */ _getMipmapMaterial();\nvar _mesh = /* @__PURE__ */ new Mesh(/* @__PURE__ */ new PlaneGeometry(2, 2), _mipmapMaterial);\nvar _flatCamera = /* @__PURE__ */ new OrthographicCamera(0, 1, 0, 1, 0, 1);\nvar _tempTarget = null;\nclass RoughnessMipmapper {\n  constructor(renderer) {\n    __publicField(this, \"generateMipmaps\", function(material) {\n      if (\"roughnessMap\" in material === false)\n        return;\n      var { roughnessMap, normalMap } = material;\n      if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n        return;\n      }\n      material.userData.roughnessUpdated = true;\n      var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n      var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n      if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height))\n        return;\n      var oldTarget = this._renderer.getRenderTarget();\n      var autoClear = this._renderer.autoClear;\n      this._renderer.autoClear = false;\n      if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n        if (_tempTarget !== null)\n          _tempTarget.dispose();\n        _tempTarget = new WebGLRenderTarget(width, height, {\n          depthBuffer: false\n        });\n        _tempTarget.scissorTest = true;\n      }\n      if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n        var params = {\n          wrapS: roughnessMap.wrapS,\n          wrapT: roughnessMap.wrapT,\n          magFilter: roughnessMap.magFilter,\n          minFilter: roughnessMap.minFilter,\n          depthBuffer: false\n        };\n        var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n        newRoughnessTarget.texture.generateMipmaps = true;\n        this._renderer.setRenderTarget(newRoughnessTarget);\n        material.roughnessMap = newRoughnessTarget.texture;\n        if (material.metalnessMap == roughnessMap)\n          material.metalnessMap = material.roughnessMap;\n        if (material.aoMap == roughnessMap)\n          material.aoMap = material.roughnessMap;\n      }\n      _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n      _mipmapMaterial.uniforms.normalMap.value = normalMap;\n      var position = new Vector2(0, 0);\n      var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n      for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n        texelSize.set(1 / width, 1 / height);\n        if (mip == 0)\n          texelSize.set(0, 0);\n        _tempTarget.viewport.set(position.x, position.y, width, height);\n        _tempTarget.scissor.set(position.x, position.y, width, height);\n        this._renderer.setRenderTarget(_tempTarget);\n        this._renderer.render(_mesh, _flatCamera);\n        this._renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n        _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n      }\n      if (roughnessMap !== material.roughnessMap)\n        roughnessMap.dispose();\n      this._renderer.setRenderTarget(oldTarget);\n      this._renderer.autoClear = autoClear;\n    });\n    __publicField(this, \"dispose\", function() {\n      _mipmapMaterial.dispose();\n      _mesh.geometry.dispose();\n      if (_tempTarget != null)\n        _tempTarget.dispose();\n    });\n    this._renderer = renderer;\n    this._renderer.compile(_mesh, _flatCamera);\n  }\n}\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: { value: null },\n      normalMap: { value: null },\n      texelSize: { value: new Vector2(1, 1) }\n    },\n    vertexShader: (\n      /* glsl */\n      `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`\n    ),\n    fragmentShader: (\n      /* glsl */\n      `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`\n    ),\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = \"RoughnessMipmapper\";\n  return shaderMaterial;\n}\nexport {\n  RoughnessMipmapper\n};\n"]},"metadata":{},"sourceType":"module"}