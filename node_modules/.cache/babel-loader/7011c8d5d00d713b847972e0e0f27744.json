{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nvar fbxTree;\nvar connections;\nvar sceneGraph;\n\nvar FBXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FBXLoader, _Loader);\n\n  var _super = _createSuper(FBXLoader);\n\n  function FBXLoader(manager) {\n    _classCallCheck(this, FBXLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(FBXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error(\"THREE.FBXLoader: Unknown format.\");\n        }\n\n        if (getFbxVersion(FBXText) < 7e3) {\n          throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      }\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }]);\n\n  return FBXLoader;\n}(Loader);\n\nvar FBXTreeParser = /*#__PURE__*/function () {\n  function FBXTreeParser(textureLoader, manager) {\n    _classCallCheck(this, FBXTreeParser);\n\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  _createClass(FBXTreeParser, [{\n    key: \"parse\",\n    value: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    } // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections() {\n      var connectionMap = /* @__PURE__ */new Map();\n\n      if (\"Connections\" in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    } // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n\n  }, {\n    key: \"parseImages\",\n    value: function parseImages() {\n      var images = {};\n      var blobs = {};\n\n      if (\"Video\" in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename;\n\n          if (\"Content\" in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== void 0) images[_id] = blobs[filename];else images[_id] = images[_id].split(\"\\\\\").pop();\n      }\n\n      return images;\n    } // Parse embedded image data in FBXTree.Video.Content\n\n  }, {\n    key: \"parseImage\",\n    value: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case \"bmp\":\n          type = \"image/bmp\";\n          break;\n\n        case \"jpg\":\n        case \"jpeg\":\n          type = \"image/jpeg\";\n          break;\n\n        case \"png\":\n          type = \"image/png\";\n          break;\n\n        case \"tif\":\n          type = \"image/tiff\";\n          break;\n\n        case \"tga\":\n          if (this.manager.getHandler(\".tga\") === null) {\n            console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n          }\n\n          type = \"image/tga\";\n          break;\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === \"string\") {\n        return \"data:\" + type + \";base64,\" + content;\n      } else {\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    } // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n\n  }, {\n    key: \"parseTextures\",\n    value: function parseTextures(images) {\n      var textureMap = /* @__PURE__ */new Map();\n\n      if (\"Texture\" in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    } // Parse individual node in FBXTree.Objects.Texture\n\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n      if (\"Scaling\" in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      return texture;\n    } // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n          this.textureLoader.setPath(void 0);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === \"tga\") {\n        var loader = this.manager.getHandler(\".tga\");\n\n        if (loader === null) {\n          console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          loader.setPath(this.textureLoader.path);\n          texture = loader.load(fileName);\n        }\n      } else if (extension === \"psd\") {\n        console.warn(\"FBXLoader: PSD textures are not supported, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    } // Parse nodes in FBXTree.Objects.Material\n\n  }, {\n    key: \"parseMaterials\",\n    value: function parseMaterials(textureMap) {\n      var materialMap = /* @__PURE__ */new Map();\n\n      if (\"Material\" in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    } // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel;\n\n      if (typeof type === \"object\") {\n        type = type.value;\n      }\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case \"phong\":\n          material = new MeshPhongMaterial();\n          break;\n\n        case \"lambert\":\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    } // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case \"Bump\":\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case \"Maya|TEX_ao_map\":\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case \"DiffuseColor\":\n          case \"Maya|TEX_color_map\":\n            parameters.map = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.map !== void 0) {\n              if (\"colorSpace\" in parameters.map) parameters.map.colorSpace = \"srgb\";else parameters.map.encoding = 3001;\n            }\n\n            break;\n\n          case \"DisplacementColor\":\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case \"EmissiveColor\":\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.emissiveMap !== void 0) {\n              if (\"colorSpace\" in parameters.emissiveMap) parameters.emissiveMap.colorSpace = \"srgb\";else parameters.emissiveMap.encoding = 3001;\n            }\n\n            break;\n\n          case \"NormalMap\":\n          case \"Maya|TEX_normal_map\":\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case \"ReflectionColor\":\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.envMap !== void 0) {\n              parameters.envMap.mapping = EquirectangularReflectionMapping;\n              if (\"colorSpace\" in parameters.envMap) parameters.envMap.colorSpace = \"srgb\";else parameters.envMap.encoding = 3001;\n            }\n\n            break;\n\n          case \"SpecularColor\":\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n\n            if (parameters.specularMap !== void 0) {\n              if (\"colorSpace\" in parameters.specularMap) parameters.specularMap.colorSpace = \"srgb\";else parameters.specularMap.encoding = 3001;\n            }\n\n            break;\n\n          case \"TransparentColor\":\n          case \"TransparencyFactor\":\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case \"AmbientColor\":\n          case \"ShininessExponent\":\n          case \"SpecularFactor\":\n          case \"VectorDisplacementColor\":\n          default:\n            console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n            break;\n        }\n      });\n      return parameters;\n    } // get a texture from the textureMap for use by a material.\n\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(textureMap, id) {\n      if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    } // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\n  }, {\n    key: \"parseDeformers\",\n    value: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if (\"Deformer\" in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === \"Skin\") {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n\n            if (relationships.parents.length > 1) {\n              console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n            }\n\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === \"BlendShape\") {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n\n            if (relationships.parents.length > 1) {\n              console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n            }\n\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    } // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n\n  }, {\n    key: \"parseSkeleton\",\n    value: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== \"Cluster\") return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n\n        };\n\n        if (\"Indexes\" in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    } // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== \"BlendShapeChannel\") return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child2) {\n          return child2.relationship === void 0;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    } // create the main Group() to be returned by the loader\n\n  }, {\n    key: \"parseScene\",\n    value: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== void 0) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse();\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    } // parse nodes in FBXTree.Objects.Model\n\n  }, {\n    key: \"parseModels\",\n    value: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = /* @__PURE__ */new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case \"Camera\":\n              model = this.createCamera(relationships);\n              break;\n\n            case \"Light\":\n              model = this.createLight(relationships);\n              break;\n\n            case \"Mesh\":\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case \"NurbsCurve\":\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case \"LimbNode\":\n            case \"Root\":\n              model = new Bone();\n              break;\n\n            case \"Null\":\n            default:\n              model = new Group();\n              break;\n          }\n\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n          model.ID = id;\n        }\n\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    }\n  }, {\n    key: \"buildSkeleton\",\n    value: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        var _loop = function _loop(ID) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink);\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n              bone.ID = id;\n              skeleton.bones[i] = bone;\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        };\n\n        for (var ID in skeletons) {\n          _loop(ID);\n        }\n      });\n      return bone;\n    } // create a PerspectiveCamera or OrthographicCamera\n\n  }, {\n    key: \"createCamera\",\n    value: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== void 0) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === void 0) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== void 0) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n        }\n\n        var farClippingPlane = 1e3;\n\n        if (cameraAttribute.FarPlane !== void 0) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== void 0) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n            model = new Object3D();\n            break;\n        }\n      }\n\n      return model;\n    } // Create a DirectionalLight, PointLight or SpotLight\n\n  }, {\n    key: \"createLight\",\n    value: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== void 0) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === void 0) {\n        model = new Object3D();\n      } else {\n        var type;\n\n        if (lightAttribute.LightType === void 0) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 16777215;\n\n        if (lightAttribute.Color !== void 0) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n\n        if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== void 0) {\n          if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        }\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            model = new DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== void 0) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== void 0) {\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn(\"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\");\n            model = new PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = [];\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 13421772\n        });\n        materials.push(material);\n      }\n\n      if (\"color\" in geometry.attributes) {\n        materials.forEach(function (material2) {\n          material2.vertexColors = true;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n\n      return model;\n    }\n  }, {\n    key: \"createCurve\",\n    value: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null);\n      var material = new LineBasicMaterial({\n        color: 3342591,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    } // parse the model node for transform data\n\n  }, {\n    key: \"getTransformData\",\n    value: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = \"ZYX\";\n      if (\"Lcl_Translation\" in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if (\"PreRotation\" in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if (\"Lcl_Rotation\" in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if (\"PostRotation\" in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if (\"Lcl_Scaling\" in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if (\"ScalingOffset\" in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if (\"ScalingPivot\" in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if (\"RotationOffset\" in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if (\"RotationPivot\" in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n  }, {\n    key: \"setLookAtProperties\",\n    value: function setLookAtProperties(model, modelNode) {\n      if (\"LookAtProperty\" in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === \"LookAtProperty\") {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if (\"Lcl_Translation\" in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value;\n\n              if (model.target !== void 0) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"bindSkeleton\",\n    value: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      var _loop2 = function _loop2(ID) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      };\n\n      for (var ID in skeletons) {\n        _loop2(ID);\n      }\n    }\n  }, {\n    key: \"parsePoseNodes\",\n    value: function parsePoseNodes() {\n      var bindMatrices = {};\n\n      if (\"Pose\" in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    } // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\n  }, {\n    key: \"createAmbientLight\",\n    value: function createAmbientLight() {\n      if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    }\n  }]);\n\n  return FBXTreeParser;\n}();\n\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n  }\n\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value: // Parse nodes in FBXTree.Objects.Geometry\n    function parse(deformers) {\n      var geometryMap = /* @__PURE__ */new Map();\n\n      if (\"Geometry\" in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    } // Parse single node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseGeometry\",\n    value: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case \"Mesh\":\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n\n        case \"NurbsCurve\":\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    } // Parse single node mesh geometry in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseMeshGeometry\",\n    value: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      });\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton2, child) {\n        if (skeletons[child.ID] !== void 0) skeleton2 = skeletons[child.ID];\n        return skeleton2;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== void 0) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      });\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if (\"GeometricTranslation\" in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if (\"GeometricRotation\" in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if (\"GeometricScaling\" in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    } // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"genGeometry\",\n    value: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute(\"position\", positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute(\"normal\", normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        var name = \"uv\" + (i + 1).toString();\n\n        if (i === 0) {\n          name = \"uv\";\n        }\n\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        });\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        }\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n  }, {\n    key: \"parseGeoNode\",\n    value: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === void 0) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    }\n  }, {\n    key: \"genBuffers\",\n    value: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false;\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var materialIndex;\n        var endOfFace = false;\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1;\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== void 0) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn(\"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\");\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          }\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var _data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n\n          faceNormals.push(_data[0], _data[1], _data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === void 0) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0;\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    } // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\n  }, {\n    key: \"genFace\",\n    value: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop3 = function _loop3(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === void 0) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n\n      for (var i = 2; i < faceLength; i++) {\n        _loop3(i);\n      }\n    }\n  }, {\n    key: \"addMorphTargets\",\n    value: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = [];\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n          if (morphGeoNode !== void 0) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    } // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n\n  }, {\n    key: \"genMorphGeometry\",\n    value: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      }\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    } // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\n  }, {\n    key: \"parseNormals\",\n    value: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === \"IndexToDirect\") {\n        if (\"NormalIndex\" in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if (\"NormalsIndex\" in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === \"IndexToDirect\") {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\n  }, {\n    key: \"parseVertexColors\",\n    value: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === \"IndexToDirect\") {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\n  }, {\n    key: \"parseMaterialIndices\",\n    value: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === \"NoMappingInformation\") {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: \"AllSame\",\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a;\n      var materialIndices = [];\n\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    } // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\n  }, {\n    key: \"parseNurbsGeometry\",\n    value: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === void 0) {\n        console.error(\"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\");\n        return new BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === \"Closed\") {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === \"Periodic\") {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var points = curve.getPoints(controlPoints.length * 12);\n      return new BufferGeometry().setFromPoints(points);\n    }\n  }]);\n\n  return GeometryParser;\n}();\n\nvar AnimationParser = /*#__PURE__*/function () {\n  function AnimationParser() {\n    _classCallCheck(this, AnimationParser);\n  }\n\n  _createClass(AnimationParser, [{\n    key: \"parse\",\n    value: // take raw animation clips and turn them into three.js animation clips\n    function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n\n      if (rawClips !== void 0) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n\n      return animationClips;\n    }\n  }, {\n    key: \"parseClips\",\n    value: function parseClips() {\n      if (fbxTree.Objects.AnimationCurve === void 0) return void 0;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    } // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n\n  }, {\n    key: \"parseAnimationCurveNodes\",\n    value: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = /* @__PURE__ */new Map();\n\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    } // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n\n  }, {\n    key: \"parseAnimationCurves\",\n    value: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve;\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== void 0) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n          }\n        }\n      }\n    } // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\n  }, {\n    key: \"parseAnimationLayers\",\n    value: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = /* @__PURE__ */new Map();\n\n      var _loop4 = function _loop4(nodeID) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== void 0) {\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID);\n\n              if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n                if (layerCurveNodes[i] === void 0) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== void 0;\n                  })[0].ID;\n\n                  if (modelID !== void 0) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                    if (rawModel === void 0) {\n                      console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                      return;\n                    }\n\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child2) {\n                      if (child2.ID === rawModel.id) {\n                        node.transform = child2.matrix;\n                        if (child2.userData.transformData) node.eulerOrder = child2.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4();\n                    if (\"PreRotation\" in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if (\"PostRotation\" in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== void 0) {\n                if (layerCurveNodes[i] === void 0) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== void 0;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID;\n                  var _modelID = connections.get(geoID).parents[0].ID;\n                  var _rawModel = fbxTree.Objects.Model[_modelID];\n                  var _node = {\n                    modelName: _rawModel.attrName ? PropertyBinding.sanitizeNodeName(_rawModel.attrName) : \"\",\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = _node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      };\n\n      for (var nodeID in rawLayers) {\n        _loop4(nodeID);\n      }\n\n      return layersMap;\n    } // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n\n  }, {\n    key: \"parseAnimStacks\",\n    value: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack;\n      var rawClips = {};\n\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          console.warn(\"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\");\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    }\n  }, {\n    key: \"addClip\",\n    value: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    }\n  }, {\n    key: \"generateTracks\",\n    value: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, \"position\");\n        if (positionTrack !== void 0) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== void 0) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n        if (scaleTrack !== void 0) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== void 0) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== void 0) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    }\n  }, {\n    key: \"generateVectorTrack\",\n    value: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n    }\n  }, {\n    key: \"generateRotationTrack\",\n    value: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== void 0) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.y !== void 0) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.z !== void 0) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotation !== void 0) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n\n      if (postRotation !== void 0) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== void 0) quaternion.premultiply(preRotation);\n        if (postRotation !== void 0) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n    }\n  }, {\n    key: \"generateMorphTrack\",\n    value: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\", curves.times, values);\n    } // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n\n  }, {\n    key: \"getTimesForAllAxes\",\n    value: function getTimesForAllAxes(curves) {\n      var times = [];\n      if (curves.x !== void 0) times = times.concat(curves.x.times);\n      if (curves.y !== void 0) times = times.concat(curves.y.times);\n      if (curves.z !== void 0) times = times.concat(curves.z.times);\n      times = times.sort(function (a, b) {\n        return a - b;\n      });\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n\n        times = times.slice(0, targetIndex);\n      }\n\n      return times;\n    }\n  }, {\n    key: \"getKeyframeTrackValues\",\n    value: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time);\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    } // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n\n  }, {\n    key: \"interpolateRotations\",\n    value: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }]);\n\n  return AnimationParser;\n}();\n\nvar TextParser = /*#__PURE__*/function () {\n  function TextParser() {\n    _classCallCheck(this, TextParser);\n  }\n\n  _createClass(TextParser, [{\n    key: \"getPrevNode\",\n    value: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n  }, {\n    key: \"getCurrentProp\",\n    value: function getCurrentProp() {\n      return this.currentProp;\n    }\n  }, {\n    key: \"pushStack\",\n    value: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n  }, {\n    key: \"setCurrentProp\",\n    value: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = \"\";\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n        var matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n        var matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n  }, {\n    key: \"parseNodeBegin\",\n    value: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n      var nodeAttrs = property[2].split(\",\").map(function (attr) {\n        return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode();\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        if (nodeName in currentNode) {\n          if (nodeName === \"PoseNode\") {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== void 0) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== \"\") currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === \"number\") {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== \"Properties70\") {\n          if (nodeName === \"PoseNode\") currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === \"number\") node.id = attrs.id;\n      if (attrs.name !== \"\") node.attrName = attrs.name;\n      if (attrs.type !== \"\") node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n  }, {\n    key: \"parseNodeAttr\",\n    value: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== \"\") {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = \"\",\n          type = \"\";\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, \"\");\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n  }, {\n    key: \"parseNodeProperty\",\n    value: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n      var propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n\n      if (propName === \"Content\" && propValue === \",\") {\n        propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === \"Properties70\") {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      }\n\n      if (propName === \"C\") {\n        var connProps = propValue.split(\",\").slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(\",\").slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, \"\");\n        });\n        propName = \"connections\";\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === void 0) {\n          currentNode[propName] = [];\n        }\n      }\n\n      if (propName === \"Node\") currentNode.id = propValue;\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== \"a\") currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName);\n\n      if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n  }, {\n    key: \"parseNodePropertyContinued\",\n    value: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line;\n\n      if (line.slice(-1) !== \",\") {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    } // parse \"Property70\"\n\n  }, {\n    key: \"parseNodeSpecialProperty\",\n    value: function parseNodeSpecialProperty(line, propName, propValue) {\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4];\n\n      switch (innerPropType1) {\n        case \"int\":\n        case \"enum\":\n        case \"bool\":\n        case \"ULongLong\":\n        case \"double\":\n        case \"Number\":\n        case \"FieldOfView\":\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case \"Color\":\n        case \"ColorRGB\":\n        case \"Vector3D\":\n        case \"Lcl_Translation\":\n        case \"Lcl_Rotation\":\n        case \"Lcl_Scaling\":\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      }\n\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }]);\n\n  return TextParser;\n}();\n\nvar BinaryParser = /*#__PURE__*/function () {\n  function BinaryParser() {\n    _classCallCheck(this, BinaryParser);\n  }\n\n  _createClass(BinaryParser, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23);\n      var version = reader.getUint32();\n\n      if (version < 6400) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n      }\n\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    } // Check if reader has reached the end of content.\n\n  }, {\n    key: \"endOfContent\",\n    value: function endOfContent(reader) {\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    } // recursively parse nodes until the end of the file is reached\n\n  }, {\n    key: \"parseNode\",\n    value: function parseNode(reader, version) {\n      var node = {};\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen);\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      }\n\n      var id = propertyList.length > 0 ? propertyList[0] : \"\";\n      var attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n      var attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList;\n      if (typeof id === \"number\") node.id = id;\n      if (attrName !== \"\") node.attrName = attrName;\n      if (attrType !== \"\") node.attrType = attrType;\n      if (name !== \"\") node.name = name;\n      return node;\n    }\n  }, {\n    key: \"parseSubNode\",\n    value: function parseSubNode(name, node, subNode) {\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === \"Connections\" && subNode.name === \"C\") {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === void 0) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === \"Properties70\") {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === \"Properties70\" && subNode.name === \"P\") {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf(\"Lcl \") === 0) innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n        if (innerPropType1.indexOf(\"Lcl \") === 0) innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n\n        if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        }\n\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === void 0) {\n        if (typeof subNode.id === \"number\") {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === \"PoseNode\") {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === void 0) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n  }, {\n    key: \"parseProperty\",\n    value: function parseProperty(reader) {\n      var type = reader.getString(1);\n      var length;\n\n      switch (type) {\n        case \"C\":\n          return reader.getBoolean();\n\n        case \"D\":\n          return reader.getFloat64();\n\n        case \"F\":\n          return reader.getFloat32();\n\n        case \"I\":\n          return reader.getInt32();\n\n        case \"L\":\n          return reader.getInt64();\n\n        case \"R\":\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case \"S\":\n          length = reader.getUint32();\n          return reader.getString(length);\n\n        case \"Y\":\n          return reader.getInt16();\n\n        case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n        case \"i\":\n        case \"l\":\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32();\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case \"b\":\n              case \"c\":\n                return reader.getBooleanArray(arrayLength);\n\n              case \"d\":\n                return reader.getFloat64Array(arrayLength);\n\n              case \"f\":\n                return reader.getFloat32Array(arrayLength);\n\n              case \"i\":\n                return reader.getInt32Array(arrayLength);\n\n              case \"l\":\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n          var reader2 = new BinaryReader(data.buffer);\n\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader2.getBooleanArray(arrayLength);\n\n            case \"d\":\n              return reader2.getFloat64Array(arrayLength);\n\n            case \"f\":\n              return reader2.getFloat32Array(arrayLength);\n\n            case \"i\":\n              return reader2.getInt32Array(arrayLength);\n\n            case \"l\":\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n      }\n    }\n  }]);\n\n  return BinaryParser;\n}();\n\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buffer, littleEndian) {\n    _classCallCheck(this, BinaryReader);\n\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n\n  _createClass(BinaryReader, [{\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.offset;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.dv.buffer.byteLength;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(length) {\n      this.offset += length;\n    } // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n  }, {\n    key: \"getBooleanArray\",\n    value: function getBooleanArray(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getUint8\",\n    value: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"getInt16\",\n    value: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getInt32Array\",\n    value: function getInt32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    } // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n\n  }, {\n    key: \"getInt64\",\n    value: function getInt64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      if (high & 2147483648) {\n        high = ~high & 4294967295;\n        low = ~low & 4294967295;\n        if (low === 4294967295) high = high + 1 & 4294967295;\n        low = low + 1 & 4294967295;\n        return -(high * 4294967296 + low);\n      }\n\n      return high * 4294967296 + low;\n    }\n  }, {\n    key: \"getInt64Array\",\n    value: function getInt64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    } // Note: see getInt64() comment\n\n  }, {\n    key: \"getUint64\",\n    value: function getUint64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 4294967296 + low;\n    }\n  }, {\n    key: \"getFloat32\",\n    value: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getFloat32Array\",\n    value: function getFloat32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n  }, {\n    key: \"getFloat64Array\",\n    value: function getFloat64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }]);\n\n  return BinaryReader;\n}();\n\nvar FBXTree = /*#__PURE__*/function () {\n  function FBXTree() {\n    _classCallCheck(this, FBXTree);\n  }\n\n  _createClass(FBXTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      this[key] = val;\n    }\n  }]);\n\n  return FBXTree;\n}();\n\nfunction isFbxFormatBinary(buffer) {\n  var CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\n\nfunction isFbxFormatASCII(text) {\n  var CORRECT = [\"K\", \"a\", \"y\", \"d\", \"a\", \"r\", \"a\", \"\\\\\", \"F\", \"B\", \"X\", \"\\\\\", \"B\", \"i\", \"n\", \"a\", \"r\", \"y\", \"\\\\\", \"\\\\\"];\n  var cursor = 0;\n\n  function read(offset) {\n    var result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n\n  for (var i = 0; i < CORRECT.length; ++i) {\n    var num = read(1);\n\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getFbxVersion(text) {\n  var versionRegExp = /FBXVersion: (\\d+)/;\n  var match = text.match(versionRegExp);\n\n  if (match) {\n    var version = parseInt(match[1]);\n    return version;\n  }\n\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\n\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\n\nvar dataArray = [];\n\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  var index;\n\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n\n  if (infoObject.referenceType === \"IndexToDirect\") index = infoObject.indices[index];\n  var from = index * infoObject.dataSize;\n  var to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\n\nvar tempEuler = /* @__PURE__ */new Euler();\nvar tempVec = /* @__PURE__ */new Vector3();\n\nfunction generateTransform(transformData) {\n  var lTranslationM = new Matrix4();\n  var lPreRotationM = new Matrix4();\n  var lRotationM = new Matrix4();\n  var lPostRotationM = new Matrix4();\n  var lScalingM = new Matrix4();\n  var lScalingPivotM = new Matrix4();\n  var lScalingOffsetM = new Matrix4();\n  var lRotationOffsetM = new Matrix4();\n  var lRotationPivotM = new Matrix4();\n  var lParentGX = new Matrix4();\n  var lParentLX = new Matrix4();\n  var lGlobalT = new Matrix4();\n  var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n  if (transformData.preRotation) {\n    var array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n\n  if (transformData.rotation) {\n    var _array = transformData.rotation.map(MathUtils.degToRad);\n\n    _array.push(transformData.eulerOrder);\n\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(_array));\n  }\n\n  if (transformData.postRotation) {\n    var _array2 = transformData.postRotation.map(MathUtils.degToRad);\n\n    _array2.push(transformData.eulerOrder);\n\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(_array2));\n    lPostRotationM.invert();\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n\n  var lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  var lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  var lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  var lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  var lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  var lLSM = lScalingM;\n  var lGlobalRS = new Matrix4();\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    var lParentLSM_inv = lParentLSM.clone().invert();\n    var lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n\n  var lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  var lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  var lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  var lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\n\nfunction getEulerOrder(order) {\n  order = order || 0;\n  var enums = [\"ZYX\", // -> XYZ extrinsic\n  \"YZX\", // -> XZY extrinsic\n  \"XZY\", // -> YZX extrinsic\n  \"ZXY\", // -> YXZ extrinsic\n  \"YXZ\", // -> ZXY extrinsic\n  \"XYZ\" // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n\n  return enums[order];\n}\n\nfunction parseNumberArray(value) {\n  var array = value.split(\",\").map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0) from = 0;\n  if (to === void 0) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\n\nfunction append(a, b) {\n  for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (var i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n\n  return a;\n}\n\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\n\nexport { FBXLoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/FBXLoader.js"],"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","colorSpace","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","child2","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","material2","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","skeleton2","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","nodeStack","currentIndent","currentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","popStack","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","getCurrentNode","pushStack","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","setCurrentProp","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","getPrevNode","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error(\"THREE.FBXLoader: Unknown format.\");\n      }\n      if (getFbxVersion(FBXText) < 7e3) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    }\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n}\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  }\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = /* @__PURE__ */ new Map();\n    if (\"Connections\" in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function(rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = { ID: toID, relationship };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = { ID: fromID, relationship };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  }\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if (\"Video\" in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n        if (\"Content\" in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== void 0)\n        images[id] = blobs[filename];\n      else\n        images[id] = images[id].split(\"\\\\\").pop();\n    }\n    return images;\n  }\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case \"bmp\":\n        type = \"image/bmp\";\n        break;\n      case \"jpg\":\n      case \"jpeg\":\n        type = \"image/jpeg\";\n        break;\n      case \"png\":\n        type = \"image/png\";\n        break;\n      case \"tif\":\n        type = \"image/tiff\";\n        break;\n      case \"tga\":\n        if (this.manager.getHandler(\".tga\") === null) {\n          console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n        }\n        type = \"image/tga\";\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === \"string\") {\n      return \"data:\" + type + \";base64,\" + content;\n    } else {\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], { type }));\n    }\n  }\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = /* @__PURE__ */ new Map();\n    if (\"Texture\" in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  }\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if (\"Scaling\" in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    return texture;\n  }\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n        this.textureLoader.setPath(void 0);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === \"tga\") {\n      const loader = this.manager.getHandler(\".tga\");\n      if (loader === null) {\n        console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === \"psd\") {\n      console.warn(\n        \"FBXLoader: PSD textures are not supported, creating placeholder texture for\",\n        textureNode.RelativeFilename\n      );\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  }\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = /* @__PURE__ */ new Map();\n    if (\"Material\" in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null)\n          materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  }\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel;\n    if (typeof type === \"object\") {\n      type = type.value;\n    }\n    if (!connections.has(ID))\n      return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case \"phong\":\n        material = new MeshPhongMaterial();\n        break;\n      case \"lambert\":\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  }\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function(child) {\n      const type = child.relationship;\n      switch (type) {\n        case \"Bump\":\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"Maya|TEX_ao_map\":\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"DiffuseColor\":\n        case \"Maya|TEX_color_map\":\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== void 0) {\n            if (\"colorSpace\" in parameters.map)\n              parameters.map.colorSpace = \"srgb\";\n            else\n              parameters.map.encoding = 3001;\n          }\n          break;\n        case \"DisplacementColor\":\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"EmissiveColor\":\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== void 0) {\n            if (\"colorSpace\" in parameters.emissiveMap)\n              parameters.emissiveMap.colorSpace = \"srgb\";\n            else\n              parameters.emissiveMap.encoding = 3001;\n          }\n          break;\n        case \"NormalMap\":\n        case \"Maya|TEX_normal_map\":\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"ReflectionColor\":\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== void 0) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            if (\"colorSpace\" in parameters.envMap)\n              parameters.envMap.colorSpace = \"srgb\";\n            else\n              parameters.envMap.encoding = 3001;\n          }\n          break;\n        case \"SpecularColor\":\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== void 0) {\n            if (\"colorSpace\" in parameters.specularMap)\n              parameters.specularMap.colorSpace = \"srgb\";\n            else\n              parameters.specularMap.encoding = 3001;\n          }\n          break;\n        case \"TransparentColor\":\n        case \"TransparencyFactor\":\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case \"AmbientColor\":\n        case \"ShininessExponent\":\n        case \"SpecularFactor\":\n        case \"VectorDisplacementColor\":\n        default:\n          console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n          break;\n      }\n    });\n    return parameters;\n  }\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  }\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if (\"Deformer\" in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === \"Skin\") {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n          }\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === \"BlendShape\") {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n          }\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons,\n      morphTargets\n    };\n  }\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function(child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== \"Cluster\")\n        return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n      if (\"Indexes\" in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones,\n      bones: []\n    };\n  }\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== \"BlendShapeChannel\")\n        return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function(child2) {\n        return child2.relationship === void 0;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  }\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function(model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function(connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== void 0)\n          parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function(node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse();\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  }\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = /* @__PURE__ */ new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case \"Camera\":\n            model = this.createCamera(relationships);\n            break;\n          case \"Light\":\n            model = this.createLight(relationships);\n            break;\n          case \"Mesh\":\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case \"NurbsCurve\":\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case \"LimbNode\":\n          case \"Root\":\n            model = new Bone();\n            break;\n          case \"Null\":\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function(parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function(rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink);\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n            bone.ID = id;\n            skeleton.bones[i] = bone;\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  }\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function(child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== void 0) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n      }\n      let farClippingPlane = 1e3;\n      if (cameraAttribute.FarPlane !== void 0) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== void 0) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null)\n            model.setFocalLength(focalLength);\n          break;\n        case 1:\n          model = new OrthographicCamera(\n            -width / 2,\n            width / 2,\n            height / 2,\n            -height / 2,\n            nearClippingPlane,\n            farClippingPlane\n          );\n          break;\n        default:\n          console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  }\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function(child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type;\n      if (lightAttribute.LightType === void 0) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 16777215;\n      if (lightAttribute.Color !== void 0) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n      if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== void 0) {\n        if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      }\n      const decay = 1;\n      switch (type) {\n        case 0:\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== void 0) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== void 0) {\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn(\n            \"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\"\n          );\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = [];\n    relationships.children.forEach(function(child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({ color: 13421772 });\n      materials.push(material);\n    }\n    if (\"color\" in geometry.attributes) {\n      materials.forEach(function(material2) {\n        material2.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function(geo, child) {\n      if (geometryMap.has(child.ID))\n        geo = geometryMap.get(child.ID);\n      return geo;\n    }, null);\n    const material = new LineBasicMaterial({ color: 3342591, linewidth: 1 });\n    return new Line(geometry, material);\n  }\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if (\"InheritType\" in modelNode)\n      transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"RotationOrder\" in modelNode)\n      transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    else\n      transformData.eulerOrder = \"ZYX\";\n    if (\"Lcl_Translation\" in modelNode)\n      transformData.translation = modelNode.Lcl_Translation.value;\n    if (\"PreRotation\" in modelNode)\n      transformData.preRotation = modelNode.PreRotation.value;\n    if (\"Lcl_Rotation\" in modelNode)\n      transformData.rotation = modelNode.Lcl_Rotation.value;\n    if (\"PostRotation\" in modelNode)\n      transformData.postRotation = modelNode.PostRotation.value;\n    if (\"Lcl_Scaling\" in modelNode)\n      transformData.scale = modelNode.Lcl_Scaling.value;\n    if (\"ScalingOffset\" in modelNode)\n      transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if (\"ScalingPivot\" in modelNode)\n      transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if (\"RotationOffset\" in modelNode)\n      transformData.rotationOffset = modelNode.RotationOffset.value;\n    if (\"RotationPivot\" in modelNode)\n      transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if (\"LookAtProperty\" in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function(child) {\n        if (child.relationship === \"LookAtProperty\") {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if (\"Lcl_Translation\" in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value;\n            if (model.target !== void 0) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function(parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function(geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if (\"Pose\" in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function(poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  }\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n}\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = /* @__PURE__ */ new Map();\n    if (\"Geometry\" in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  }\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case \"Mesh\":\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n        break;\n      case \"NurbsCurve\":\n        return this.parseNurbsGeometry(geoNode);\n        break;\n    }\n  }\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function(parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    });\n    if (modelNodes.length === 0)\n      return;\n    const skeleton = relationships.children.reduce(function(skeleton2, child) {\n      if (skeletons[child.ID] !== void 0)\n        skeleton2 = skeletons[child.ID];\n      return skeleton2;\n    }, null);\n    relationships.children.forEach(function(child) {\n      if (deformers.morphTargets[child.ID] !== void 0) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    });\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if (\"RotationOrder\" in modelNode)\n      transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if (\"InheritType\" in modelNode)\n      transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"GeometricTranslation\" in modelNode)\n      transformData.translation = modelNode.GeometricTranslation.value;\n    if (\"GeometricRotation\" in modelNode)\n      transformData.rotation = modelNode.GeometricRotation.value;\n    if (\"GeometricScaling\" in modelNode)\n      transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  }\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName)\n      geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute(\"position\", positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute(\"normal\", normalAttribute);\n    }\n    buffers.uvs.forEach(function(uvBuffer, i) {\n      let name = \"uv\" + (i + 1).toString();\n      if (i === 0) {\n        name = \"uv\";\n      }\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function(currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      });\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      }\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function(rawBone, i) {\n        rawBone.indices.forEach(function(index, j) {\n          if (geoInfo.weightTable[index] === void 0)\n            geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false;\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function(vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false;\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1;\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== void 0) {\n          geoInfo.weightTable[vertexIndex].forEach(function(wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn(\n              \"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\"\n            );\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function(weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function(comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        }\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function(uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === void 0) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(\n          buffers,\n          geoInfo,\n          facePositionIndexes,\n          materialIndex,\n          faceNormals,\n          faceColors,\n          faceUVs,\n          faceWeights,\n          faceWeightIndices,\n          faceLength\n        );\n        polygonIndex++;\n        faceLength = 0;\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  }\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function(uv, j) {\n          if (buffers.uvs[j] === void 0)\n            buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0)\n      return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = [];\n    const scope = this;\n    morphTargets.forEach(function(morphTarget) {\n      morphTarget.rawTargets.forEach(function(rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== void 0) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  }\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    }\n    const morphGeoInfo = {\n      vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  }\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      if (\"NormalIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if (\"NormalsIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === \"NoMappingInformation\") {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: \"AllSame\",\n        referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a;\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType,\n      referenceType\n    };\n  }\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === void 0) {\n      console.error(\n        \"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\"\n      );\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === \"Closed\") {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === \"Periodic\") {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n}\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== void 0) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    if (fbxTree.Objects.AnimationCurve === void 0)\n      return void 0;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = /* @__PURE__ */ new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve;\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== void 0) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n        }\n      }\n    }\n  }\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = /* @__PURE__ */ new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== void 0) {\n        const children = connection.children;\n        children.forEach(function(child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID);\n            if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const modelID = connections.get(child.ID).parents.filter(function(parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                if (modelID !== void 0) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === void 0) {\n                    console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function(child2) {\n                    if (child2.ID === rawModel.id) {\n                      node.transform = child2.matrix;\n                      if (child2.userData.transformData)\n                        node.eulerOrder = child2.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform)\n                    node.transform = new Matrix4();\n                  if (\"PreRotation\" in rawModel)\n                    node.preRotation = rawModel.PreRotation.value;\n                  if (\"PostRotation\" in rawModel)\n                    node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i])\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const deformerID = connections.get(child.ID).parents.filter(function(parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID;\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack;\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        console.warn(\n          \"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\"\n        );\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function(rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform)\n      rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(\n        rawTracks.modelName,\n        rawTracks.T.curves,\n        initialPosition,\n        \"position\"\n      );\n      if (positionTrack !== void 0)\n        tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(\n        rawTracks.modelName,\n        rawTracks.R.curves,\n        initialRotation,\n        rawTracks.preRotation,\n        rawTracks.postRotation,\n        rawTracks.eulerOrder\n      );\n      if (rotationTrack !== void 0)\n        tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n      if (scaleTrack !== void 0)\n        tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== void 0) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== void 0)\n        tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== void 0) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== void 0) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== void 0) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== void 0) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== void 0) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== void 0)\n        quaternion.premultiply(preRotation);\n      if (postRotation !== void 0)\n        quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function(val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(\n      rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\",\n      curves.times,\n      values\n    );\n  }\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = [];\n    if (curves.x !== void 0)\n      times = times.concat(curves.x.times);\n    if (curves.y !== void 0)\n      times = times.concat(curves.y.times);\n    if (curves.z !== void 0)\n      times = times.concat(curves.z.times);\n    times = times.sort(function(a, b) {\n      return a - b;\n    });\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function(time) {\n      if (curves.x)\n        xIndex = curves.x.times.indexOf(time);\n      if (curves.y)\n        yIndex = curves.y.times.indexOf(time);\n      if (curves.z)\n        zIndex = curves.z.times.indexOf(time);\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  }\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n}\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = \"\";\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function(line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty)\n        return;\n      const matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n      const matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n      const matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    const nodeAttrs = property[2].split(\",\").map(function(attr) {\n      return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    });\n    const node = { name: nodeName };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode();\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      if (nodeName in currentNode) {\n        if (nodeName === \"PoseNode\") {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== void 0) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== \"\")\n          currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === \"number\") {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== \"Properties70\") {\n        if (nodeName === \"PoseNode\")\n          currentNode[nodeName] = [node];\n        else\n          currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === \"number\")\n      node.id = attrs.id;\n    if (attrs.name !== \"\")\n      node.attrName = attrs.name;\n    if (attrs.type !== \"\")\n      node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== \"\") {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = \"\", type = \"\";\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, \"\");\n      type = attrs[2];\n    }\n    return { id, name, type };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    let propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    if (propName === \"Content\" && propValue === \",\") {\n      propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === \"Properties70\") {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    }\n    if (propName === \"C\") {\n      const connProps = propValue.split(\",\").slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(\",\").slice(3);\n      rest = rest.map(function(elem) {\n        return elem.trim().replace(/^\"/, \"\");\n      });\n      propName = \"connections\";\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === void 0) {\n        currentNode[propName] = [];\n      }\n    }\n    if (propName === \"Node\")\n      currentNode.id = propValue;\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== \"a\")\n        currentNode[propName] = propValue;\n      else\n        currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName);\n    if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line;\n    if (line.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  }\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    const props = propValue.split('\",').map(function(prop) {\n      return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4];\n    switch (innerPropType1) {\n      case \"int\":\n      case \"enum\":\n      case \"bool\":\n      case \"ULongLong\":\n      case \"double\":\n      case \"Number\":\n      case \"FieldOfView\":\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case \"Color\":\n      case \"ColorRGB\":\n      case \"Vector3D\":\n      case \"Lcl_Translation\":\n      case \"Lcl_Rotation\":\n      case \"Lcl_Scaling\":\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    }\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n}\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23);\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null)\n        allNodes.add(node.name, node);\n    }\n    return allNodes;\n  }\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  }\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {};\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen);\n    if (endOffset === 0)\n      return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    }\n    const id = propertyList.length > 0 ? propertyList[0] : \"\";\n    const attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n    const attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null)\n        this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList;\n    if (typeof id === \"number\")\n      node.id = id;\n    if (attrName !== \"\")\n      node.attrName = attrName;\n    if (attrType !== \"\")\n      node.attrType = attrType;\n    if (name !== \"\")\n      node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === \"Connections\" && subNode.name === \"C\") {\n      const array = [];\n      subNode.propertyList.forEach(function(property, i) {\n        if (i !== 0)\n          array.push(property);\n      });\n      if (node.connections === void 0) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === \"Properties70\") {\n      const keys = Object.keys(subNode);\n      keys.forEach(function(key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === \"Properties70\" && subNode.name === \"P\") {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf(\"Lcl \") === 0)\n        innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1.indexOf(\"Lcl \") === 0)\n        innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      }\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === void 0) {\n      if (typeof subNode.id === \"number\") {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === \"PoseNode\") {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === void 0) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case \"C\":\n        return reader.getBoolean();\n      case \"D\":\n        return reader.getFloat64();\n      case \"F\":\n        return reader.getFloat32();\n      case \"I\":\n        return reader.getInt32();\n      case \"L\":\n        return reader.getInt64();\n      case \"R\":\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case \"S\":\n        length = reader.getUint32();\n        return reader.getString(length);\n      case \"Y\":\n        return reader.getInt16();\n      case \"b\":\n      case \"c\":\n      case \"d\":\n      case \"f\":\n      case \"i\":\n      case \"l\":\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32();\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader.getBooleanArray(arrayLength);\n            case \"d\":\n              return reader.getFloat64Array(arrayLength);\n            case \"f\":\n              return reader.getFloat32Array(arrayLength);\n            case \"i\":\n              return reader.getInt32Array(arrayLength);\n            case \"l\":\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case \"b\":\n          case \"c\":\n            return reader2.getBooleanArray(arrayLength);\n          case \"d\":\n            return reader2.getFloat64Array(arrayLength);\n          case \"f\":\n            return reader2.getFloat32Array(arrayLength);\n          case \"i\":\n            return reader2.getInt32Array(arrayLength);\n          case \"l\":\n            return reader2.getInt64Array(arrayLength);\n        }\n      default:\n        throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  }\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    if (high & 2147483648) {\n      high = ~high & 4294967295;\n      low = ~low & 4294967295;\n      if (low === 4294967295)\n        high = high + 1 & 4294967295;\n      low = low + 1 & 4294967295;\n      return -(high * 4294967296 + low);\n    }\n    return high * 4294967296 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  }\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 4294967296 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0)\n      a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n}\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n}\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = [\n    \"K\",\n    \"a\",\n    \"y\",\n    \"d\",\n    \"a\",\n    \"r\",\n    \"a\",\n    \"\\\\\",\n    \"F\",\n    \"B\",\n    \"X\",\n    \"\\\\\",\n    \"B\",\n    \"i\",\n    \"n\",\n    \"a\",\n    \"r\",\n    \"y\",\n    \"\\\\\",\n    \"\\\\\"\n  ];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\nconst dataArray = [];\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === \"IndexToDirect\")\n    index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = /* @__PURE__ */ new Euler();\nconst tempVec = /* @__PURE__ */ new Vector3();\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation)\n    lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale)\n    lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset)\n    lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot)\n    lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset)\n    lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot)\n    lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = [\n    \"ZYX\",\n    // -> XYZ extrinsic\n    \"YZX\",\n    // -> XZY extrinsic\n    \"XZY\",\n    // -> YZX extrinsic\n    \"ZXY\",\n    // -> YXZ extrinsic\n    \"YXZ\",\n    // -> ZXY extrinsic\n    \"XYZ\"\n    // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n  ];\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n  return enums[order];\n}\nfunction parseNumberArray(value) {\n  const array = value.split(\",\").map(function(val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0)\n    from = 0;\n  if (to === void 0)\n    to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport {\n  FBXLoader\n};\n"]},"metadata":{},"sourceType":"module"}