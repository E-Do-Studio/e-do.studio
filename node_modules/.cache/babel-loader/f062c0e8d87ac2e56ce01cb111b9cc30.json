{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\n\nvar BloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(BloomPass, _Pass);\n\n  var _super = _createSuper(BloomPass);\n\n  function BloomPass() {\n    var _this;\n\n    var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    var sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    var resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n\n    _classCallCheck(this, BloomPass);\n\n    _this = _super.call(this);\n\n    __publicField(_assertThisInitialized(_this), \"renderTargetX\");\n\n    __publicField(_assertThisInitialized(_this), \"renderTargetY\");\n\n    __publicField(_assertThisInitialized(_this), \"materialCombine\");\n\n    __publicField(_assertThisInitialized(_this), \"materialConvolution\");\n\n    __publicField(_assertThisInitialized(_this), \"fsQuad\");\n\n    __publicField(_assertThisInitialized(_this), \"combineUniforms\");\n\n    __publicField(_assertThisInitialized(_this), \"convolutionUniforms\");\n\n    __publicField(_assertThisInitialized(_this), \"blurX\", new Vector2(1953125e-9, 0));\n\n    __publicField(_assertThisInitialized(_this), \"blurY\", new Vector2(0, 1953125e-9));\n\n    _this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetX.texture.name = \"BloomPass.x\";\n    _this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetY.texture.name = \"BloomPass.y\";\n    _this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    _this.combineUniforms[\"strength\"].value = strength;\n    _this.materialCombine = new ShaderMaterial({\n      uniforms: _this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0) console.error(\"BloomPass relies on ConvolutionShader\");\n    var convolutionShader = ConvolutionShader;\n    _this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    _this.convolutionUniforms[\"uImageIncrement\"].value = _this.blurX;\n    _this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    _this.materialConvolution = new ShaderMaterial({\n      uniforms: _this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.materialConvolution);\n    return _this;\n  }\n\n  _createClass(BloomPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      this.fsQuad.material = this.materialConvolution;\n      this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n      renderer.setRenderTarget(this.renderTargetX);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n      this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n      renderer.setRenderTarget(this.renderTargetY);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCombine;\n      this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n\n  return BloomPass;\n}(Pass);\n\nvar CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n  varying vec2 vUv;\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\",\n  fragmentShader:\n  /* glsl */\n  \"\\n  uniform float strength;\\n  uniform sampler2D tDiffuse;\\n  varying vec2 vUv;\\n  void main() {\\n    vec4 texel = texture2D( tDiffuse, vUv );\\n    gl_FragColor = strength * texel;\\n  }\"\n};\nexport { BloomPass };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/BloomPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","strength","kernelSize","sigma","resolution","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","materialCombine","vertexShader","fragmentShader","blending","transparent","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","render","blurY","tDiffuse"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super();\n    __publicField(this, \"renderTargetX\");\n    __publicField(this, \"renderTargetY\");\n    __publicField(this, \"materialCombine\");\n    __publicField(this, \"materialConvolution\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"combineUniforms\");\n    __publicField(this, \"convolutionUniforms\");\n    __publicField(this, \"blurX\", new Vector2(1953125e-9, 0));\n    __publicField(this, \"blurY\", new Vector2(0, 1953125e-9));\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = \"BloomPass.x\";\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = \"BloomPass.y\";\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms[\"strength\"].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0)\n      console.error(\"BloomPass relies on ConvolutionShader\");\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(false);\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear)\n      renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n}\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n  )\n};\nexport {\n  BloomPass\n};\n"]},"metadata":{},"sourceType":"module"}