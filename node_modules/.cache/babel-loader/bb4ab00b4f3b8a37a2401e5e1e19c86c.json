{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, LoaderUtils, MeshPhongMaterial, Color, Group, Float32BufferAttribute, BufferGeometry, Mesh } from \"three\";\nimport { unzipSync } from \"fflate\";\n\nvar AMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(AMFLoader, _Loader);\n\n  var _super = _createSuper(AMFLoader);\n\n  function AMFLoader(manager) {\n    _classCallCheck(this, AMFLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(AMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function loadDocument(data2) {\n        var view = new DataView(data2);\n        var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n        if (magic === \"PK\") {\n          var zip = null;\n          var file = null;\n          console.log(\"THREE.AMFLoader: Loading Zip\");\n\n          try {\n            zip = unzipSync(new Uint8Array(data2));\n          } catch (e) {\n            if (e instanceof ReferenceError) {\n              console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\");\n              return null;\n            }\n          }\n\n          for (file in zip) {\n            if (file.toLowerCase().substr(-4) === \".amf\") {\n              break;\n            }\n          }\n\n          console.log(\"THREE.AMFLoader: Trying to load file asset: \" + file);\n          view = new DataView(zip[file].buffer);\n        }\n\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData2 = new DOMParser().parseFromString(fileText, \"application/xml\");\n\n        if (xmlData2.documentElement.nodeName.toLowerCase() !== \"amf\") {\n          console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\");\n          return null;\n        }\n\n        return xmlData2;\n      }\n\n      function loadDocumentScale(node) {\n        var scale = 1;\n        var unit = \"millimeter\";\n\n        if (node.documentElement.attributes.unit !== void 0) {\n          unit = node.documentElement.attributes.unit.value.toLowerCase();\n        }\n\n        var scaleUnits = {\n          millimeter: 1,\n          inch: 25.4,\n          feet: 304.8,\n          meter: 1e3,\n          micron: 1e-3\n        };\n\n        if (scaleUnits[unit] !== void 0) {\n          scale = scaleUnits[unit];\n        }\n\n        console.log(\"THREE.AMFLoader: Unit scale: \" + scale);\n        return scale;\n      }\n\n      function loadMaterials(node) {\n        var matName = \"AMF Material\";\n        var matId = node.attributes.id.textContent;\n        var color = {\n          r: 1,\n          g: 1,\n          b: 1,\n          a: 1\n        };\n        var loadedMaterial = null;\n\n        for (var i2 = 0; i2 < node.childNodes.length; i2++) {\n          var matChildEl = node.childNodes[i2];\n\n          if (matChildEl.nodeName === \"metadata\" && matChildEl.attributes.type !== void 0) {\n            if (matChildEl.attributes.type.value === \"name\") {\n              matName = matChildEl.textContent;\n            }\n          } else if (matChildEl.nodeName === \"color\") {\n            color = loadColor(matChildEl);\n          }\n        }\n\n        loadedMaterial = new MeshPhongMaterial({\n          flatShading: true,\n          color: new Color(color.r, color.g, color.b),\n          name: matName\n        });\n\n        if (color.a !== 1) {\n          loadedMaterial.transparent = true;\n          loadedMaterial.opacity = color.a;\n        }\n\n        return {\n          id: matId,\n          material: loadedMaterial\n        };\n      }\n\n      function loadColor(node) {\n        var color = {\n          r: 1,\n          g: 1,\n          b: 1,\n          a: 1\n        };\n\n        for (var i2 = 0; i2 < node.childNodes.length; i2++) {\n          var matColor = node.childNodes[i2];\n\n          if (matColor.nodeName === \"r\") {\n            color.r = matColor.textContent;\n          } else if (matColor.nodeName === \"g\") {\n            color.g = matColor.textContent;\n          } else if (matColor.nodeName === \"b\") {\n            color.b = matColor.textContent;\n          } else if (matColor.nodeName === \"a\") {\n            color.a = matColor.textContent;\n          }\n        }\n\n        return color;\n      }\n\n      function loadMeshVolume(node) {\n        var volume = {\n          name: \"\",\n          triangles: [],\n          materialid: null\n        };\n        var currVolumeNode = node.firstElementChild;\n\n        if (node.attributes.materialid !== void 0) {\n          volume.materialId = node.attributes.materialid.nodeValue;\n        }\n\n        while (currVolumeNode) {\n          if (currVolumeNode.nodeName === \"metadata\") {\n            if (currVolumeNode.attributes.type !== void 0) {\n              if (currVolumeNode.attributes.type.value === \"name\") {\n                volume.name = currVolumeNode.textContent;\n              }\n            }\n          } else if (currVolumeNode.nodeName === \"triangle\") {\n            var v1 = currVolumeNode.getElementsByTagName(\"v1\")[0].textContent;\n            var v2 = currVolumeNode.getElementsByTagName(\"v2\")[0].textContent;\n            var v3 = currVolumeNode.getElementsByTagName(\"v3\")[0].textContent;\n            volume.triangles.push(v1, v2, v3);\n          }\n\n          currVolumeNode = currVolumeNode.nextElementSibling;\n        }\n\n        return volume;\n      }\n\n      function loadMeshVertices(node) {\n        var vertArray = [];\n        var normalArray = [];\n        var currVerticesNode = node.firstElementChild;\n\n        while (currVerticesNode) {\n          if (currVerticesNode.nodeName === \"vertex\") {\n            var vNode = currVerticesNode.firstElementChild;\n\n            while (vNode) {\n              if (vNode.nodeName === \"coordinates\") {\n                var x = vNode.getElementsByTagName(\"x\")[0].textContent;\n                var y = vNode.getElementsByTagName(\"y\")[0].textContent;\n                var z = vNode.getElementsByTagName(\"z\")[0].textContent;\n                vertArray.push(x, y, z);\n              } else if (vNode.nodeName === \"normal\") {\n                var nx = vNode.getElementsByTagName(\"nx\")[0].textContent;\n                var ny = vNode.getElementsByTagName(\"ny\")[0].textContent;\n                var nz = vNode.getElementsByTagName(\"nz\")[0].textContent;\n                normalArray.push(nx, ny, nz);\n              }\n\n              vNode = vNode.nextElementSibling;\n            }\n          }\n\n          currVerticesNode = currVerticesNode.nextElementSibling;\n        }\n\n        return {\n          vertices: vertArray,\n          normals: normalArray\n        };\n      }\n\n      function loadObject(node) {\n        var objId = node.attributes.id.textContent;\n        var loadedObject = {\n          name: \"amfobject\",\n          meshes: []\n        };\n        var currColor = null;\n        var currObjNode = node.firstElementChild;\n\n        while (currObjNode) {\n          if (currObjNode.nodeName === \"metadata\") {\n            if (currObjNode.attributes.type !== void 0) {\n              if (currObjNode.attributes.type.value === \"name\") {\n                loadedObject.name = currObjNode.textContent;\n              }\n            }\n          } else if (currObjNode.nodeName === \"color\") {\n            currColor = loadColor(currObjNode);\n          } else if (currObjNode.nodeName === \"mesh\") {\n            var currMeshNode = currObjNode.firstElementChild;\n            var mesh = {\n              vertices: [],\n              normals: [],\n              volumes: [],\n              color: currColor\n            };\n\n            while (currMeshNode) {\n              if (currMeshNode.nodeName === \"vertices\") {\n                var loadedVertices = loadMeshVertices(currMeshNode);\n                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n              } else if (currMeshNode.nodeName === \"volume\") {\n                mesh.volumes.push(loadMeshVolume(currMeshNode));\n              }\n\n              currMeshNode = currMeshNode.nextElementSibling;\n            }\n\n            loadedObject.meshes.push(mesh);\n          }\n\n          currObjNode = currObjNode.nextElementSibling;\n        }\n\n        return {\n          id: objId,\n          obj: loadedObject\n        };\n      }\n\n      var xmlData = loadDocument(data);\n      var amfName = \"\";\n      var amfAuthor = \"\";\n      var amfScale = loadDocumentScale(xmlData);\n      var amfMaterials = {};\n      var amfObjects = {};\n      var childNodes = xmlData.documentElement.childNodes;\n      var i, j;\n\n      for (i = 0; i < childNodes.length; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === \"metadata\") {\n          if (child.attributes.type !== void 0) {\n            if (child.attributes.type.value === \"name\") {\n              amfName = child.textContent;\n            } else if (child.attributes.type.value === \"author\") {\n              amfAuthor = child.textContent;\n            }\n          }\n        } else if (child.nodeName === \"material\") {\n          var loadedMaterial = loadMaterials(child);\n          amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n        } else if (child.nodeName === \"object\") {\n          var loadedObject = loadObject(child);\n          amfObjects[loadedObject.id] = loadedObject.obj;\n        }\n      }\n\n      var sceneObject = new Group();\n      var defaultMaterial = new MeshPhongMaterial({\n        color: 11184895,\n        flatShading: true\n      });\n      sceneObject.name = amfName;\n      sceneObject.userData.author = amfAuthor;\n      sceneObject.userData.loader = \"AMF\";\n\n      for (var id in amfObjects) {\n        var part = amfObjects[id];\n        var meshes = part.meshes;\n        var newObject = new Group();\n        newObject.name = part.name || \"\";\n\n        for (i = 0; i < meshes.length; i++) {\n          var objDefaultMaterial = defaultMaterial;\n          var mesh = meshes[i];\n          var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n          var normals = null;\n\n          if (mesh.normals.length) {\n            normals = new Float32BufferAttribute(mesh.normals, 3);\n          }\n\n          if (mesh.color) {\n            var color = mesh.color;\n            objDefaultMaterial = defaultMaterial.clone();\n            objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n            if (color.a !== 1) {\n              objDefaultMaterial.transparent = true;\n              objDefaultMaterial.opacity = color.a;\n            }\n          }\n\n          var volumes = mesh.volumes;\n\n          for (j = 0; j < volumes.length; j++) {\n            var volume = volumes[j];\n            var newGeometry = new BufferGeometry();\n            var material = objDefaultMaterial;\n            newGeometry.setIndex(volume.triangles);\n            newGeometry.setAttribute(\"position\", vertices.clone());\n\n            if (normals) {\n              newGeometry.setAttribute(\"normal\", normals.clone());\n            }\n\n            if (amfMaterials[volume.materialId] !== void 0) {\n              material = amfMaterials[volume.materialId];\n            }\n\n            newGeometry.scale(amfScale, amfScale, amfScale);\n            newObject.add(new Mesh(newGeometry, material.clone()));\n          }\n        }\n\n        sceneObject.add(newObject);\n      }\n\n      return sceneObject;\n    }\n  }]);\n\n  return AMFLoader;\n}(Loader);\n\nexport { AMFLoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/AMFLoader.js"],"names":["Loader","FileLoader","LoaderUtils","MeshPhongMaterial","Color","Group","Float32BufferAttribute","BufferGeometry","Mesh","unzipSync","AMFLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","loadDocument","data2","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData2","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i2","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","xmlData","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","i","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, LoaderUtils, MeshPhongMaterial, Color, Group, Float32BufferAttribute, BufferGeometry, Mesh } from \"three\";\nimport { unzipSync } from \"fflate\";\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    function loadDocument(data2) {\n      let view = new DataView(data2);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n      if (magic === \"PK\") {\n        let zip = null;\n        let file = null;\n        console.log(\"THREE.AMFLoader: Loading Zip\");\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === \".amf\") {\n            break;\n          }\n        }\n        console.log(\"THREE.AMFLoader: Trying to load file asset: \" + file);\n        view = new DataView(zip[file].buffer);\n      }\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData2 = new DOMParser().parseFromString(fileText, \"application/xml\");\n      if (xmlData2.documentElement.nodeName.toLowerCase() !== \"amf\") {\n        console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\");\n        return null;\n      }\n      return xmlData2;\n    }\n    function loadDocumentScale(node) {\n      let scale = 1;\n      let unit = \"millimeter\";\n      if (node.documentElement.attributes.unit !== void 0) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n      const scaleUnits = {\n        millimeter: 1,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1e3,\n        micron: 1e-3\n      };\n      if (scaleUnits[unit] !== void 0) {\n        scale = scaleUnits[unit];\n      }\n      console.log(\"THREE.AMFLoader: Unit scale: \" + scale);\n      return scale;\n    }\n    function loadMaterials(node) {\n      let matName = \"AMF Material\";\n      const matId = node.attributes.id.textContent;\n      let color = { r: 1, g: 1, b: 1, a: 1 };\n      let loadedMaterial = null;\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matChildEl = node.childNodes[i2];\n        if (matChildEl.nodeName === \"metadata\" && matChildEl.attributes.type !== void 0) {\n          if (matChildEl.attributes.type.value === \"name\") {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === \"color\") {\n          color = loadColor(matChildEl);\n        }\n      }\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n      if (color.a !== 1) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n      return { id: matId, material: loadedMaterial };\n    }\n    function loadColor(node) {\n      const color = { r: 1, g: 1, b: 1, a: 1 };\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matColor = node.childNodes[i2];\n        if (matColor.nodeName === \"r\") {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === \"g\") {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === \"b\") {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === \"a\") {\n          color.a = matColor.textContent;\n        }\n      }\n      return color;\n    }\n    function loadMeshVolume(node) {\n      const volume = { name: \"\", triangles: [], materialid: null };\n      let currVolumeNode = node.firstElementChild;\n      if (node.attributes.materialid !== void 0) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === \"metadata\") {\n          if (currVolumeNode.attributes.type !== void 0) {\n            if (currVolumeNode.attributes.type.value === \"name\") {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === \"triangle\") {\n          const v1 = currVolumeNode.getElementsByTagName(\"v1\")[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName(\"v2\")[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName(\"v3\")[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n      return volume;\n    }\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === \"vertex\") {\n          let vNode = currVerticesNode.firstElementChild;\n          while (vNode) {\n            if (vNode.nodeName === \"coordinates\") {\n              const x = vNode.getElementsByTagName(\"x\")[0].textContent;\n              const y = vNode.getElementsByTagName(\"y\")[0].textContent;\n              const z = vNode.getElementsByTagName(\"z\")[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === \"normal\") {\n              const nx = vNode.getElementsByTagName(\"nx\")[0].textContent;\n              const ny = vNode.getElementsByTagName(\"ny\")[0].textContent;\n              const nz = vNode.getElementsByTagName(\"nz\")[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n            vNode = vNode.nextElementSibling;\n          }\n        }\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n      return { vertices: vertArray, normals: normalArray };\n    }\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = { name: \"amfobject\", meshes: [] };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n      while (currObjNode) {\n        if (currObjNode.nodeName === \"metadata\") {\n          if (currObjNode.attributes.type !== void 0) {\n            if (currObjNode.attributes.type.value === \"name\") {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === \"color\") {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === \"mesh\") {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === \"vertices\") {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === \"volume\") {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n          loadedObject.meshes.push(mesh);\n        }\n        currObjNode = currObjNode.nextElementSibling;\n      }\n      return { id: objId, obj: loadedObject };\n    }\n    const xmlData = loadDocument(data);\n    let amfName = \"\";\n    let amfAuthor = \"\";\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n      if (child.nodeName === \"metadata\") {\n        if (child.attributes.type !== void 0) {\n          if (child.attributes.type.value === \"name\") {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === \"author\") {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === \"material\") {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === \"object\") {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({ color: 11184895, flatShading: true });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = \"AMF\";\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || \"\";\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n          if (color.a !== 1) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n        const volumes = mesh.volumes;\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute(\"position\", vertices.clone());\n          if (normals) {\n            newGeometry.setAttribute(\"normal\", normals.clone());\n          }\n          if (amfMaterials[volume.materialId] !== void 0) {\n            material = amfMaterials[volume.materialId];\n          }\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n      sceneObject.add(newObject);\n    }\n    return sceneObject;\n  }\n}\nexport {\n  AMFLoader\n};\n"]},"metadata":{},"sourceType":"module"}