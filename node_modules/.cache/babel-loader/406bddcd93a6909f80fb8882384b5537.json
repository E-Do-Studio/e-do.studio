{"ast":null,"code":"import { Vector3, Vector4, Matrix4, Line3, Box3, Sphere, MathUtils, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from \"three\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\n\nconst _start = /* @__PURE__ */new Vector3();\n\nconst _end = /* @__PURE__ */new Vector3();\n\nconst _start4 = /* @__PURE__ */new Vector4();\n\nconst _end4 = /* @__PURE__ */new Vector4();\n\nconst _ssOrigin = /* @__PURE__ */new Vector4();\n\nconst _ssOrigin3 = /* @__PURE__ */new Vector3();\n\nconst _mvMatrix = /* @__PURE__ */new Matrix4();\n\nconst _line = /* @__PURE__ */new Line3();\n\nconst _closestPoint = /* @__PURE__ */new Vector3();\n\nconst _box = /* @__PURE__ */new Box3();\n\nconst _sphere = /* @__PURE__ */new Sphere();\n\nconst _clipToWorldVector = /* @__PURE__ */new Vector4();\n\nlet _ray, _instanceStart, _instanceEnd, _lineWidth;\n\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\n\nfunction raycastWorldUnits(lineSegments, intersects) {\n  for (let i = 0, l = _instanceStart.count; i < l; i++) {\n    _line.start.fromBufferAttribute(_instanceStart, i);\n\n    _line.end.fromBufferAttribute(_instanceEnd, i);\n\n    const pointOnLine = new Vector3();\n    const point = new Vector3();\n\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n\n    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n\n    if (isInside) {\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\n\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  const projectionMatrix = camera.projectionMatrix;\n  const material = lineSegments.material;\n  const resolution = material.resolution;\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const near = -camera.near;\n\n  _ray.at(1, _ssOrigin);\n\n  _ssOrigin.w = 1;\n\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n\n  _ssOrigin.applyMatrix4(projectionMatrix);\n\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n\n  _ssOrigin3.copy(_ssOrigin);\n\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n\n  for (let i = 0, l = instanceStart.count; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n\n    _end4.fromBufferAttribute(instanceEnd, i);\n\n    _start4.w = 1;\n    _end4.w = 1;\n\n    _start4.applyMatrix4(_mvMatrix);\n\n    _end4.applyMatrix4(_mvMatrix);\n\n    const isBehindCameraNear = _start4.z > near && _end4.z > near;\n\n    if (isBehindCameraNear) {\n      continue;\n    }\n\n    if (_start4.z > near) {\n      const deltaDist = _start4.z - _end4.z;\n      const t = (_start4.z - near) / deltaDist;\n\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      const deltaDist = _end4.z - _start4.z;\n      const t = (_end4.z - near) / deltaDist;\n\n      _end4.lerp(_start4, t);\n    }\n\n    _start4.applyMatrix4(projectionMatrix);\n\n    _end4.applyMatrix4(projectionMatrix);\n\n    _start4.multiplyScalar(1 / _start4.w);\n\n    _end4.multiplyScalar(1 / _end4.w);\n\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n\n    _line.start.copy(_start4);\n\n    _line.start.z = 0;\n\n    _line.end.copy(_end4);\n\n    _line.end.z = 0;\n\n    const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n\n    _line.at(param, _closestPoint);\n\n    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);\n    const isInClipSpace = zPos >= -1 && zPos <= 1;\n\n    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n\n      _line.end.fromBufferAttribute(instanceEnd, i);\n\n      _line.start.applyMatrix4(matrixWorld);\n\n      _line.end.applyMatrix4(matrixWorld);\n\n      const pointOnLine = new Vector3();\n      const point = new Vector3();\n\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\n\nclass LineSegments2 extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({\n    color: Math.random() * 16777215\n  })) {\n    super(geometry, material);\n    this.isLineSegments2 = true;\n    this.type = \"LineSegments2\";\n  } // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n\n      _end.fromBufferAttribute(instanceEnd, i);\n\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);\n    geometry.setAttribute(\"instanceDistanceStart\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n    geometry.setAttribute(\"instanceDistanceEnd\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n    return this;\n  }\n\n  raycast(raycaster, intersects) {\n    const worldUnits = this.material.worldUnits;\n    const camera = raycaster.camera;\n\n    if (camera === null && !worldUnits) {\n      console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');\n    }\n\n    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n    _ray = raycaster.ray;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    _lineWidth = material.linewidth + threshold;\n    _instanceStart = geometry.attributes.instanceStart;\n    _instanceEnd = geometry.attributes.instanceEnd;\n\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n\n    let sphereMargin;\n\n    if (worldUnits) {\n      sphereMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n    }\n\n    _sphere.radius += sphereMargin;\n\n    if (_ray.intersectsSphere(_sphere) === false) {\n      return;\n    }\n\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n\n    let boxMargin;\n\n    if (worldUnits) {\n      boxMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n    }\n\n    _box.expandByScalar(boxMargin);\n\n    if (_ray.intersectsBox(_box) === false) {\n      return;\n    }\n\n    if (worldUnits) {\n      raycastWorldUnits(this, intersects);\n    } else {\n      raycastScreenSpace(this, camera, intersects);\n    }\n  }\n\n}\n\nexport { LineSegments2 };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/lines/LineSegments2.js"],"names":["Vector3","Vector4","Matrix4","Line3","Box3","Sphere","MathUtils","Mesh","InstancedInterleavedBuffer","InterleavedBufferAttribute","LineSegmentsGeometry","LineMaterial","_start","_end","_start4","_end4","_ssOrigin","_ssOrigin3","_mvMatrix","_line","_closestPoint","_box","_sphere","_clipToWorldVector","_ray","_instanceStart","_instanceEnd","_lineWidth","getWorldSpaceHalfWidth","camera","distance","resolution","set","applyMatrix4","projectionMatrix","multiplyScalar","w","x","width","y","height","projectionMatrixInverse","Math","abs","max","raycastWorldUnits","lineSegments","intersects","i","l","count","start","fromBufferAttribute","end","pointOnLine","point","distanceSqToSegment","isInside","distanceTo","push","origin","object","face","faceIndex","uv","uv2","raycastScreenSpace","material","matrixWorld","geometry","instanceStart","attributes","instanceEnd","near","at","matrixWorldInverse","z","copy","multiplyMatrices","isBehindCameraNear","deltaDist","t","lerp","param","closestPointToPointParameter","zPos","isInClipSpace","LineSegments2","constructor","color","random","isLineSegments2","type","computeLineDistances","lineDistances","Float32Array","j","instanceDistanceBuffer","setAttribute","raycast","raycaster","worldUnits","console","error","threshold","params","Line2","ray","linewidth","boundingSphere","computeBoundingSphere","sphereMargin","distanceToSphere","distanceToPoint","radius","intersectsSphere","boundingBox","computeBoundingBox","boxMargin","distanceToBox","expandByScalar","intersectsBox"],"mappings":"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","sourcesContent":["import { Vector3, Vector4, Matrix4, Line3, Box3, Sphere, MathUtils, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from \"three\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\nconst _start = /* @__PURE__ */ new Vector3();\nconst _end = /* @__PURE__ */ new Vector3();\nconst _start4 = /* @__PURE__ */ new Vector4();\nconst _end4 = /* @__PURE__ */ new Vector4();\nconst _ssOrigin = /* @__PURE__ */ new Vector4();\nconst _ssOrigin3 = /* @__PURE__ */ new Vector3();\nconst _mvMatrix = /* @__PURE__ */ new Matrix4();\nconst _line = /* @__PURE__ */ new Line3();\nconst _closestPoint = /* @__PURE__ */ new Vector3();\nconst _box = /* @__PURE__ */ new Box3();\nconst _sphere = /* @__PURE__ */ new Sphere();\nconst _clipToWorldVector = /* @__PURE__ */ new Vector4();\nlet _ray, _instanceStart, _instanceEnd, _lineWidth;\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n  for (let i = 0, l = _instanceStart.count; i < l; i++) {\n    _line.start.fromBufferAttribute(_instanceStart, i);\n    _line.end.fromBufferAttribute(_instanceEnd, i);\n    const pointOnLine = new Vector3();\n    const point = new Vector3();\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n    if (isInside) {\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  const projectionMatrix = camera.projectionMatrix;\n  const material = lineSegments.material;\n  const resolution = material.resolution;\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const near = -camera.near;\n  _ray.at(1, _ssOrigin);\n  _ssOrigin.w = 1;\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n  _ssOrigin.applyMatrix4(projectionMatrix);\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n  _ssOrigin3.copy(_ssOrigin);\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n  for (let i = 0, l = instanceStart.count; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n    _end4.fromBufferAttribute(instanceEnd, i);\n    _start4.w = 1;\n    _end4.w = 1;\n    _start4.applyMatrix4(_mvMatrix);\n    _end4.applyMatrix4(_mvMatrix);\n    const isBehindCameraNear = _start4.z > near && _end4.z > near;\n    if (isBehindCameraNear) {\n      continue;\n    }\n    if (_start4.z > near) {\n      const deltaDist = _start4.z - _end4.z;\n      const t = (_start4.z - near) / deltaDist;\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      const deltaDist = _end4.z - _start4.z;\n      const t = (_end4.z - near) / deltaDist;\n      _end4.lerp(_start4, t);\n    }\n    _start4.applyMatrix4(projectionMatrix);\n    _end4.applyMatrix4(projectionMatrix);\n    _start4.multiplyScalar(1 / _start4.w);\n    _end4.multiplyScalar(1 / _end4.w);\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n    _line.start.copy(_start4);\n    _line.start.z = 0;\n    _line.end.copy(_end4);\n    _line.end.z = 0;\n    const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n    _line.at(param, _closestPoint);\n    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);\n    const isInClipSpace = zPos >= -1 && zPos <= 1;\n    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n      _line.end.fromBufferAttribute(instanceEnd, i);\n      _line.start.applyMatrix4(matrixWorld);\n      _line.end.applyMatrix4(matrixWorld);\n      const pointOnLine = new Vector3();\n      const point = new Vector3();\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nclass LineSegments2 extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {\n    super(geometry, material);\n    this.isLineSegments2 = true;\n    this.type = \"LineSegments2\";\n  }\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);\n    geometry.setAttribute(\"instanceDistanceStart\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n    geometry.setAttribute(\"instanceDistanceEnd\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const worldUnits = this.material.worldUnits;\n    const camera = raycaster.camera;\n    if (camera === null && !worldUnits) {\n      console.error(\n        'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.'\n      );\n    }\n    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n    _ray = raycaster.ray;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    _lineWidth = material.linewidth + threshold;\n    _instanceStart = geometry.attributes.instanceStart;\n    _instanceEnd = geometry.attributes.instanceEnd;\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n    let sphereMargin;\n    if (worldUnits) {\n      sphereMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n    }\n    _sphere.radius += sphereMargin;\n    if (_ray.intersectsSphere(_sphere) === false) {\n      return;\n    }\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n    let boxMargin;\n    if (worldUnits) {\n      boxMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n    }\n    _box.expandByScalar(boxMargin);\n    if (_ray.intersectsBox(_box) === false) {\n      return;\n    }\n    if (worldUnits) {\n      raycastWorldUnits(this, intersects);\n    } else {\n      raycastScreenSpace(this, camera, intersects);\n    }\n  }\n}\nexport {\n  LineSegments2\n};\n"]},"metadata":{},"sourceType":"module"}