{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { FilmShader } from \"../shaders/FilmShader.js\";\n\nclass FilmPass extends Pass {\n  constructor(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    super();\n\n    __publicField(this, \"material\");\n\n    __publicField(this, \"fsQuad\");\n\n    __publicField(this, \"uniforms\");\n\n    if (FilmShader === void 0) console.error(\"THREE.FilmPass relies on FilmShader\");\n    const shader = FilmShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== void 0) this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== void 0) this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== void 0) this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== void 0) this.uniforms.sCount.value = scanlinesCount;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value += deltaTime;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { FilmPass };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/FilmPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","UniformsUtils","ShaderMaterial","FilmShader","FilmPass","constructor","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","console","error","shader","uniforms","clone","material","vertexShader","fragmentShader","nIntensity","sIntensity","sCount","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { FilmShader } from \"../shaders/FilmShader.js\";\nclass FilmPass extends Pass {\n  constructor(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"uniforms\");\n    if (FilmShader === void 0)\n      console.error(\"THREE.FilmPass relies on FilmShader\");\n    const shader = FilmShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== void 0)\n      this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== void 0)\n      this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== void 0)\n      this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== void 0)\n      this.uniforms.sCount.value = scanlinesCount;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value += deltaTime;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport {\n  FilmPass\n};\n"]},"metadata":{},"sourceType":"module"}