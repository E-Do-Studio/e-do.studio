{"ast":null,"code":"import _regeneratorRuntime from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _asyncToGenerator from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nvar MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\n\nfunction fetchJsonFile(_x) {\n  return _fetchJsonFile.apply(this, arguments);\n}\n\nfunction _fetchJsonFile() {\n  _fetchJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(path);\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 7:\n            return _context.abrupt(\"return\", response.json());\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchJsonFile.apply(this, arguments);\n}\n\nfunction fetchProfilesList(_x2) {\n  return _fetchProfilesList.apply(this, arguments);\n}\n\nfunction _fetchProfilesList() {\n  _fetchProfilesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(basePath) {\n    var profileListFileName, profilesList;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (basePath) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error(\"No basePath supplied\");\n\n          case 2:\n            profileListFileName = \"profilesList.json\";\n            _context2.next = 5;\n            return fetchJsonFile(\"\".concat(basePath, \"/\").concat(profileListFileName));\n\n          case 5:\n            profilesList = _context2.sent;\n            return _context2.abrupt(\"return\", profilesList);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchProfilesList.apply(this, arguments);\n}\n\nfunction fetchProfile(_x3, _x4) {\n  return _fetchProfile.apply(this, arguments);\n}\n\nfunction _fetchProfile() {\n  _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(xrInputSource, basePath) {\n    var defaultProfile,\n        getAssetPath,\n        supportedProfilesList,\n        match,\n        supportedProfile,\n        profile,\n        assetPath,\n        layout,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            defaultProfile = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n            getAssetPath = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n\n            if (xrInputSource) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error(\"No xrInputSource supplied\");\n\n          case 4:\n            if (basePath) {\n              _context3.next = 6;\n              break;\n            }\n\n            throw new Error(\"No basePath supplied\");\n\n          case 6:\n            _context3.next = 8;\n            return fetchProfilesList(basePath);\n\n          case 8:\n            supportedProfilesList = _context3.sent;\n            match = void 0;\n            xrInputSource.profiles.some(function (profileId) {\n              var supportedProfile = supportedProfilesList[profileId];\n\n              if (supportedProfile) {\n                match = {\n                  profileId: profileId,\n                  profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n                  deprecated: !!supportedProfile.deprecated\n                };\n              }\n\n              return !!match;\n            });\n\n            if (match) {\n              _context3.next = 18;\n              break;\n            }\n\n            if (defaultProfile) {\n              _context3.next = 14;\n              break;\n            }\n\n            throw new Error(\"No matching profile name found\");\n\n          case 14:\n            supportedProfile = supportedProfilesList[defaultProfile];\n\n            if (supportedProfile) {\n              _context3.next = 17;\n              break;\n            }\n\n            throw new Error(\"No matching profile name found and default profile \\\"\".concat(defaultProfile, \"\\\" missing.\"));\n\n          case 17:\n            match = {\n              profileId: defaultProfile,\n              profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n              deprecated: !!supportedProfile.deprecated\n            };\n\n          case 18:\n            _context3.next = 20;\n            return fetchJsonFile(match.profilePath);\n\n          case 20:\n            profile = _context3.sent;\n            assetPath = void 0;\n\n            if (!getAssetPath) {\n              _context3.next = 27;\n              break;\n            }\n\n            if (xrInputSource.handedness === \"any\") {\n              layout = profile.layouts[Object.keys(profile.layouts)[0]];\n            } else {\n              layout = profile.layouts[xrInputSource.handedness];\n            }\n\n            if (layout) {\n              _context3.next = 26;\n              break;\n            }\n\n            throw new Error(\"No matching handedness, \".concat(xrInputSource.handedness, \", in profile \").concat(match.profileId));\n\n          case 26:\n            if (layout.assetPath) {\n              assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n            }\n\n          case 27:\n            return _context3.abrupt(\"return\", {\n              profile: profile,\n              assetPath: assetPath\n            });\n\n          case 28:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchProfile.apply(this, arguments);\n}\n\nvar defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n\nfunction normalizeAxes() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xAxis = x;\n  var yAxis = y;\n  var hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    var theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  var result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n\nvar VisualResponse = /*#__PURE__*/function () {\n  function VisualResponse(visualResponseDescription) {\n    _classCallCheck(this, VisualResponse);\n\n    __publicField(this, \"value\");\n\n    __publicField(this, \"componentProperty\");\n\n    __publicField(this, \"states\");\n\n    __publicField(this, \"valueNodeName\");\n\n    __publicField(this, \"valueNodeProperty\");\n\n    __publicField(this, \"minNodeName\");\n\n    __publicField(this, \"maxNodeName\");\n\n    __publicField(this, \"valueNode\");\n\n    __publicField(this, \"minNode\");\n\n    __publicField(this, \"maxNode\");\n\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  _createClass(VisualResponse, [{\n    key: \"updateFromComponent\",\n    value: function updateFromComponent(_ref) {\n      var xAxis = _ref.xAxis,\n          yAxis = _ref.yAxis,\n          button = _ref.button,\n          state = _ref.state;\n\n      var _normalizeAxes = normalizeAxes(xAxis, yAxis),\n          normalizedXAxis = _normalizeAxes.normalizedXAxis,\n          normalizedYAxis = _normalizeAxes.normalizedYAxis;\n\n      switch (this.componentProperty) {\n        case MotionControllerConstants.ComponentProperty.X_AXIS:\n          this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.Y_AXIS:\n          this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.BUTTON:\n          this.value = this.states.includes(state) && button ? button : 0;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.STATE:\n          if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            this.value = this.states.includes(state);\n          } else {\n            this.value = this.states.includes(state) ? 1 : 0;\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unexpected visualResponse componentProperty \".concat(this.componentProperty));\n      }\n    }\n  }]);\n\n  return VisualResponse;\n}();\n\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  function Component(componentId, componentDescription) {\n    var _this = this;\n\n    _classCallCheck(this, Component);\n\n    __publicField(this, \"id\");\n\n    __publicField(this, \"values\");\n\n    __publicField(this, \"type\");\n\n    __publicField(this, \"gamepadIndices\");\n\n    __publicField(this, \"rootNodeName\");\n\n    __publicField(this, \"visualResponses\");\n\n    __publicField(this, \"touchPointNodeName\");\n\n    __publicField(this, \"touchPointNode\");\n\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(function (responseName) {\n      var visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      _this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n\n  _createClass(Component, [{\n    key: \"data\",\n    get: function get() {\n      var data = _objectSpread({\n        id: this.id\n      }, this.values);\n\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     * @param {Object} gamepad - The gamepad object from which the component data should be polled\n     */\n\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad(gamepad) {\n      var _this2 = this;\n\n      this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n\n      if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n        var gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n        this.values.button = gamepadButton.value;\n        this.values.button = this.values.button < 0 ? 0 : this.values.button;\n        this.values.button = this.values.button > 1 ? 1 : this.values.button;\n\n        if (gamepadButton.pressed || this.values.button === 1) {\n          this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n        } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n\n      if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n        this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n        this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n        this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n\n      if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n        this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n        this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n        this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      }\n\n      Object.values(this.visualResponses).forEach(function (visualResponse) {\n        visualResponse.updateFromComponent(_this2.values);\n      });\n    }\n  }]);\n\n  return Component;\n}();\n\nvar MotionController = /*#__PURE__*/function () {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  function MotionController(xrInputSource, profile, assetUrl) {\n    var _this3 = this;\n\n    _classCallCheck(this, MotionController);\n\n    __publicField(this, \"xrInputSource\");\n\n    __publicField(this, \"assetUrl\");\n\n    __publicField(this, \"layoutDescription\");\n\n    __publicField(this, \"id\");\n\n    __publicField(this, \"components\");\n\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(function (componentId) {\n      var componentDescription = _this3.layoutDescription.components[componentId];\n      _this3.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n\n  _createClass(MotionController, [{\n    key: \"gripSpace\",\n    get: function get() {\n      return this.xrInputSource.gripSpace;\n    }\n  }, {\n    key: \"targetRaySpace\",\n    get: function get() {\n      return this.xrInputSource.targetRaySpace;\n    }\n    /**\n     * @description Returns a subset of component data for simplified debugging\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = [];\n      Object.values(this.components).forEach(function (component) {\n        data.push(component.data);\n      });\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     */\n\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad() {\n      var _this4 = this;\n\n      Object.values(this.components).forEach(function (component) {\n        component.updateFromGamepad(_this4.xrInputSource.gamepad);\n      });\n    }\n  }]);\n\n  return MotionController;\n}();\n\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/libs/MotionControllers.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","MotionControllerConstants","Handedness","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","path","fetch","response","ok","Error","statusText","json","fetchProfilesList","basePath","profileListFileName","profilesList","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","handedness","layout","layouts","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","visualResponseDescription","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","updateFromComponent","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","data","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","updateFromGamepad","gripSpace","targetRaySpace","component","push"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const profileListFileName = \"profilesList.json\";\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error(\"No xrInputSource supplied\");\n  }\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const supportedProfilesList = await fetchProfilesList(basePath);\n  let match = void 0;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error(\"No matching profile name found\");\n    }\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = void 0;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === \"any\") {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n    }\n  }\n  return { profile, assetPath };\n}\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n  const hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    __publicField(this, \"value\");\n    __publicField(this, \"componentProperty\");\n    __publicField(this, \"states\");\n    __publicField(this, \"valueNodeName\");\n    __publicField(this, \"valueNodeProperty\");\n    __publicField(this, \"minNodeName\");\n    __publicField(this, \"maxNodeName\");\n    __publicField(this, \"valueNode\");\n    __publicField(this, \"minNode\");\n    __publicField(this, \"maxNode\");\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1 : 0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    __publicField(this, \"id\");\n    __publicField(this, \"values\");\n    __publicField(this, \"type\");\n    __publicField(this, \"gamepadIndices\");\n    __publicField(this, \"rootNodeName\");\n    __publicField(this, \"visualResponses\");\n    __publicField(this, \"touchPointNodeName\");\n    __publicField(this, \"touchPointNode\");\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n    if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button;\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    __publicField(this, \"xrInputSource\");\n    __publicField(this, \"assetUrl\");\n    __publicField(this, \"layoutDescription\");\n    __publicField(this, \"id\");\n    __publicField(this, \"components\");\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\nexport {\n  MotionController,\n  MotionControllerConstants,\n  fetchProfile,\n  fetchProfilesList\n};\n"]},"metadata":{},"sourceType":"module"}