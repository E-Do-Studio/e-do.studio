{"ast":null,"code":"import { BufferAttribute, Matrix4, Vector3, Matrix3, MeshPhongMaterial, UniformsUtils, ShaderLib, ShaderChunk } from \"three\";\nvar GeometryCompressionUtils = {\n  /**\n   * Make the input mesh.geometry's normal attribute encoded and compressed by 3 different methods.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the normal data.\n   *\n   * @param {THREE.Mesh} mesh\n   * @param {String} encodeMethod\t\t\"DEFAULT\" || \"OCT1Byte\" || \"OCT2Byte\" || \"ANGLES\"\n   *\n   */\n  compressNormals: function (mesh, encodeMethod) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n\n    const normal = mesh.geometry.attributes.normal;\n\n    if (!normal) {\n      console.error(\"Geometry must contain normal attribute. \");\n    }\n\n    if (normal.isPacked) return;\n\n    if (normal.itemSize != 3) {\n      console.error(\"normal.itemSize is not 3, which cannot be encoded. \");\n    }\n\n    const array = normal.array;\n    const count = normal.count;\n    let result;\n\n    if (encodeMethod == \"DEFAULT\") {\n      result = new Uint8Array(count * 3);\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx + 0] = encoded[0];\n        result[idx + 1] = encoded[1];\n        result[idx + 2] = encoded[2];\n      }\n\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 3, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT1Byte\") {\n      result = new Int8Array(count * 2);\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT2Byte\") {\n      result = new Int16Array(count * 2);\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 2);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else if (encodeMethod == \"ANGLES\") {\n      result = new Uint16Array(count * 2);\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.anglesEncode(array[idx], array[idx + 1], array[idx + 2]);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else {\n      console.error(\"Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. \");\n    }\n\n    mesh.geometry.attributes.normal.needsUpdate = true;\n    mesh.geometry.attributes.normal.isPacked = true;\n    mesh.geometry.attributes.normal.packingMethod = encodeMethod;\n\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n\n    if (encodeMethod == \"ANGLES\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 0;\n    }\n\n    if (encodeMethod == \"OCT1Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n\n    if (encodeMethod == \"OCT2Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n\n    if (encodeMethod == \"DEFAULT\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 2;\n    }\n  },\n\n  /**\n   * Make the input mesh.geometry's position attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the position data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressPositions: function (mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n\n    const position = mesh.geometry.attributes.position;\n\n    if (!position) {\n      console.error(\"Geometry must contain position attribute. \");\n    }\n\n    if (position.isPacked) return;\n\n    if (position.itemSize != 3) {\n      console.error(\"position.itemSize is not 3, which cannot be packed. \");\n    }\n\n    const array = position.array;\n    const encodingBytes = 2;\n    const result = this.EncodingFuncs.quantizedEncode(array, encodingBytes);\n    const quantized = result.quantized;\n    const decodeMat = result.decodeMat;\n    if (mesh.geometry.boundingBox == null) mesh.geometry.computeBoundingBox();\n    if (mesh.geometry.boundingSphere == null) mesh.geometry.computeBoundingSphere();\n    mesh.geometry.setAttribute(\"position\", new BufferAttribute(quantized, 3));\n    mesh.geometry.attributes.position.isPacked = true;\n    mesh.geometry.attributes.position.needsUpdate = true;\n    mesh.geometry.attributes.position.bytes = quantized.length * encodingBytes;\n\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n\n    mesh.material.defines.USE_PACKED_POSITION = 0;\n    mesh.material.uniforms.quantizeMatPos.value = decodeMat;\n    mesh.material.uniforms.quantizeMatPos.needsUpdate = true;\n  },\n\n  /**\n   * Make the input mesh.geometry's uv attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the uv data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressUvs: function (mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry property. \");\n    }\n\n    const uvs = mesh.geometry.attributes.uv;\n\n    if (!uvs) {\n      console.error(\"Geometry must contain uv attribute. \");\n    }\n\n    if (uvs.isPacked) return;\n    const range = {\n      min: Infinity,\n      max: -Infinity\n    };\n    const array = uvs.array;\n\n    for (let i = 0; i < array.length; i++) {\n      range.min = Math.min(range.min, array[i]);\n      range.max = Math.max(range.max, array[i]);\n    }\n\n    let result;\n\n    if (range.min >= -1 && range.max <= 1) {\n      result = new Uint16Array(array.length);\n\n      for (let i = 0; i < array.length; i += 2) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[i], array[i + 1], 0, 2);\n        result[i] = encoded[0];\n        result[i + 1] = encoded[1];\n      }\n\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.length * 2;\n\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n\n      mesh.material.defines.USE_PACKED_UV = 0;\n    } else {\n      result = this.EncodingFuncs.quantizedEncodeUV(array, 2);\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result.quantized, 2));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.quantized.length * 2;\n\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n\n      mesh.material.defines.USE_PACKED_UV = 1;\n      mesh.material.uniforms.quantizeMatUV.value = result.decodeMat;\n      mesh.material.uniforms.quantizeMatUV.needsUpdate = true;\n    }\n  },\n  EncodingFuncs: {\n    defaultEncode: function (x, y, z, bytes) {\n      if (bytes == 1) {\n        const tmpx = Math.round((x + 1) * 0.5 * 255);\n        const tmpy = Math.round((y + 1) * 0.5 * 255);\n        const tmpz = Math.round((z + 1) * 0.5 * 255);\n        return new Uint8Array([tmpx, tmpy, tmpz]);\n      } else if (bytes == 2) {\n        const tmpx = Math.round((x + 1) * 0.5 * 65535);\n        const tmpy = Math.round((y + 1) * 0.5 * 65535);\n        const tmpz = Math.round((z + 1) * 0.5 * 65535);\n        return new Uint16Array([tmpx, tmpy, tmpz]);\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    defaultDecode: function (array, bytes) {\n      if (bytes == 1) {\n        return [array[0] / 255 * 2 - 1, array[1] / 255 * 2 - 1, array[2] / 255 * 2 - 1];\n      } else if (bytes == 2) {\n        return [array[0] / 65535 * 2 - 1, array[1] / 65535 * 2 - 1, array[2] / 65535 * 2 - 1];\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    // for `Angles` encoding\n    anglesEncode: function (x, y, z) {\n      const normal0 = parseInt(0.5 * (1 + Math.atan2(y, x) / Math.PI) * 65535);\n      const normal1 = parseInt(0.5 * (1 + z) * 65535);\n      return new Uint16Array([normal0, normal1]);\n    },\n    // for `Octahedron` encoding\n    octEncodeBest: function (x, y, z, bytes) {\n      var oct, dec, best, currentCos, bestCos;\n      best = oct = octEncodeVec3(x, y, z, \"floor\", \"floor\");\n      dec = octDecodeVec2(oct);\n      bestCos = dot(x, y, z, dec);\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"floor\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n\n      oct = octEncodeVec3(x, y, z, \"floor\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n\n      if (currentCos > bestCos) {\n        best = oct;\n      }\n\n      return best;\n\n      function octEncodeVec3(x0, y0, z0, xfunc, yfunc) {\n        var x2 = x0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        var y2 = y0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n\n        if (z < 0) {\n          var tempx = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          var tempy = (1 - Math.abs(x2)) * (y2 >= 0 ? 1 : -1);\n          x2 = tempx;\n          y2 = tempy;\n          var diff = 1 - Math.abs(x2) - Math.abs(y2);\n\n          if (diff > 0) {\n            diff += 1e-3;\n            x2 += x2 > 0 ? diff / 2 : -diff / 2;\n            y2 += y2 > 0 ? diff / 2 : -diff / 2;\n          }\n        }\n\n        if (bytes == 1) {\n          return new Int8Array([Math[xfunc](x2 * 127.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 127.5 + (y2 < 0 ? 1 : 0))]);\n        }\n\n        if (bytes == 2) {\n          return new Int16Array([Math[xfunc](x2 * 32767.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 32767.5 + (y2 < 0 ? 1 : 0))]);\n        }\n      }\n\n      function octDecodeVec2(oct2) {\n        var x2 = oct2[0];\n        var y2 = oct2[1];\n\n        if (bytes == 1) {\n          x2 /= x2 < 0 ? 127 : 128;\n          y2 /= y2 < 0 ? 127 : 128;\n        } else if (bytes == 2) {\n          x2 /= x2 < 0 ? 32767 : 32768;\n          y2 /= y2 < 0 ? 32767 : 32768;\n        }\n\n        var z2 = 1 - Math.abs(x2) - Math.abs(y2);\n\n        if (z2 < 0) {\n          var tmpx = x2;\n          x2 = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          y2 = (1 - Math.abs(tmpx)) * (y2 >= 0 ? 1 : -1);\n        }\n\n        var length = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);\n        return [x2 / length, y2 / length, z2 / length];\n      }\n\n      function dot(x2, y2, z2, vec3) {\n        return x2 * vec3[0] + y2 * vec3[1] + z2 * vec3[2];\n      }\n    },\n    quantizedEncode: function (array, bytes) {\n      let quantized, segments;\n\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n\n      const decodeMat = new Matrix4();\n      const min = new Float32Array(3);\n      const max = new Float32Array(3);\n      min[0] = min[1] = min[2] = Number.MAX_VALUE;\n      max[0] = max[1] = max[2] = -Number.MAX_VALUE;\n\n      for (let i = 0; i < array.length; i += 3) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        min[2] = Math.min(min[2], array[i + 2]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n        max[2] = Math.max(max[2], array[i + 2]);\n      }\n\n      decodeMat.scale(new Vector3((max[0] - min[0]) / segments, (max[1] - min[1]) / segments, (max[2] - min[2]) / segments));\n      decodeMat.elements[12] = min[0];\n      decodeMat.elements[13] = min[1];\n      decodeMat.elements[14] = min[2];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0, max[2] !== min[2] ? segments / (max[2] - min[2]) : 0]);\n\n      for (let i = 0; i < array.length; i += 3) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n      }\n\n      return {\n        quantized,\n        decodeMat\n      };\n    },\n    quantizedEncodeUV: function (array, bytes) {\n      let quantized, segments;\n\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n\n      const decodeMat = new Matrix3();\n      const min = new Float32Array(2);\n      const max = new Float32Array(2);\n      min[0] = min[1] = Number.MAX_VALUE;\n      max[0] = max[1] = -Number.MAX_VALUE;\n\n      for (let i = 0; i < array.length; i += 2) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n      }\n\n      decodeMat.scale((max[0] - min[0]) / segments, (max[1] - min[1]) / segments);\n      decodeMat.elements[6] = min[0];\n      decodeMat.elements[7] = min[1];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0]);\n\n      for (let i = 0; i < array.length; i += 2) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n      }\n\n      return {\n        quantized,\n        decodeMat\n      };\n    }\n  }\n};\n\nclass PackedPhongMaterial extends MeshPhongMaterial {\n  constructor(parameters) {\n    super();\n    this.defines = {};\n    this.type = \"PackedPhongMaterial\";\n    this.uniforms = UniformsUtils.merge([ShaderLib.phong.uniforms, {\n      quantizeMatPos: {\n        value: null\n      },\n      quantizeMatUV: {\n        value: null\n      }\n    }]);\n    this.vertexShader = [\"#define PHONG\", \"varying vec3 vViewPosition;\", \"#ifndef FLAT_SHADED\", \"varying vec3 vNormal;\", \"#endif\", ShaderChunk.common, ShaderChunk.uv_pars_vertex, ShaderChunk.uv2_pars_vertex, ShaderChunk.displacementmap_pars_vertex, ShaderChunk.envmap_pars_vertex, ShaderChunk.color_pars_vertex, ShaderChunk.fog_pars_vertex, ShaderChunk.morphtarget_pars_vertex, ShaderChunk.skinning_pars_vertex, ShaderChunk.shadowmap_pars_vertex, ShaderChunk.logdepthbuf_pars_vertex, ShaderChunk.clipping_planes_pars_vertex, `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\t#if USE_PACKED_NORMAL == 0\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat x = packedNormal.x * 2.0 - 1.0;\n\t\t\t\t\t\t\tfloat y = packedNormal.y * 2.0 - 1.0;\n\t\t\t\t\t\t\tvec2 scth = vec2(sin(x * PI), cos(x * PI));\n\t\t\t\t\t\t\tvec2 scphi = vec2(sqrt(1.0 - y * y), y);\n\t\t\t\t\t\t\treturn normalize( vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y) );\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 1\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = vec3(packedNormal.xy, 1.0 - abs(packedNormal.x) - abs(packedNormal.y));\n\t\t\t\t\t\t\tif (v.z < 0.0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tv.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 2\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = (packedNormal * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\tuniform mat4 quantizeMatPos;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tuniform mat3 quantizeMatUV;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 0\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = (packedUV * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = ( vec3(packedUV, 1.0) * quantizeMatUV ).xy;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, \"void main() {\", ShaderChunk.uv_vertex, `#ifdef USE_UV\n\t\t\t\t\t#ifdef USE_PACKED_UV\n\t\t\t\t\t\tvUv = decodeUV(vUv);\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, ShaderChunk.uv2_vertex, ShaderChunk.color_vertex, ShaderChunk.beginnormal_vertex, `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\tobjectNormal = decodeNormal(objectNormal);\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_TANGENT\n\t\t\t\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t\t\t\t#endif\n\t\t\t\t`, ShaderChunk.morphnormal_vertex, ShaderChunk.skinbase_vertex, ShaderChunk.skinnormal_vertex, ShaderChunk.defaultnormal_vertex, \"#ifndef FLAT_SHADED\", \"\tvNormal = normalize( transformedNormal );\", \"#endif\", ShaderChunk.begin_vertex, `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\ttransformed = ( vec4(transformed, 1.0) * quantizeMatPos ).xyz;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, ShaderChunk.morphtarget_vertex, ShaderChunk.skinning_vertex, ShaderChunk.displacementmap_vertex, ShaderChunk.project_vertex, ShaderChunk.logdepthbuf_vertex, ShaderChunk.clipping_planes_vertex, \"vViewPosition = - mvPosition.xyz;\", ShaderChunk.worldpos_vertex, ShaderChunk.envmap_vertex, ShaderChunk.shadowmap_vertex, ShaderChunk.fog_vertex, \"}\"].join(\"\\n\");\n    this.fragmentShader = [\"#define PHONG\", \"uniform vec3 diffuse;\", \"uniform vec3 emissive;\", \"uniform vec3 specular;\", \"uniform float shininess;\", \"uniform float opacity;\", ShaderChunk.common, ShaderChunk.packing, ShaderChunk.dithering_pars_fragment, ShaderChunk.color_pars_fragment, ShaderChunk.uv_pars_fragment, ShaderChunk.uv2_pars_fragment, ShaderChunk.map_pars_fragment, ShaderChunk.alphamap_pars_fragment, ShaderChunk.aomap_pars_fragment, ShaderChunk.lightmap_pars_fragment, ShaderChunk.emissivemap_pars_fragment, ShaderChunk.envmap_common_pars_fragment, ShaderChunk.envmap_pars_fragment, ShaderChunk.cube_uv_reflection_fragment, ShaderChunk.fog_pars_fragment, ShaderChunk.bsdfs, ShaderChunk.lights_pars_begin, ShaderChunk.lights_phong_pars_fragment, ShaderChunk.shadowmap_pars_fragment, ShaderChunk.bumpmap_pars_fragment, ShaderChunk.normalmap_pars_fragment, ShaderChunk.specularmap_pars_fragment, ShaderChunk.logdepthbuf_pars_fragment, ShaderChunk.clipping_planes_pars_fragment, \"void main() {\", ShaderChunk.clipping_planes_fragment, \"vec4 diffuseColor = vec4( diffuse, opacity );\", \"ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\", \"vec3 totalEmissiveRadiance = emissive;\", ShaderChunk.logdepthbuf_fragment, ShaderChunk.map_fragment, ShaderChunk.color_fragment, ShaderChunk.alphamap_fragment, ShaderChunk.alphatest_fragment, ShaderChunk.specularmap_fragment, ShaderChunk.normal_fragment_begin, ShaderChunk.normal_fragment_maps, ShaderChunk.emissivemap_fragment, // accumulation\n    ShaderChunk.lights_phong_fragment, ShaderChunk.lights_fragment_begin, ShaderChunk.lights_fragment_maps, ShaderChunk.lights_fragment_end, // modulation\n    ShaderChunk.aomap_fragment, \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\", ShaderChunk.envmap_fragment, \"gl_FragColor = vec4( outgoingLight, diffuseColor.a );\", ShaderChunk.tonemapping_fragment, ShaderChunk.encodings_fragment, ShaderChunk.fog_fragment, ShaderChunk.premultiplied_alpha_fragment, ShaderChunk.dithering_fragment, \"}\"].join(\"\\n\");\n    this.setValues(parameters);\n  }\n\n}\n\nexport { GeometryCompressionUtils, PackedPhongMaterial };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/utils/GeometryCompressionUtils.js"],"names":["BufferAttribute","Matrix4","Vector3","Matrix3","MeshPhongMaterial","UniformsUtils","ShaderLib","ShaderChunk","GeometryCompressionUtils","compressNormals","mesh","encodeMethod","geometry","console","error","normal","attributes","isPacked","itemSize","array","count","result","Uint8Array","idx","length","encoded","EncodingFuncs","defaultEncode","setAttribute","bytes","Int8Array","octEncodeBest","Int16Array","Uint16Array","anglesEncode","needsUpdate","packingMethod","material","PackedPhongMaterial","copy","defines","USE_PACKED_NORMAL","compressPositions","position","encodingBytes","quantizedEncode","quantized","decodeMat","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","USE_PACKED_POSITION","uniforms","quantizeMatPos","value","compressUvs","uvs","uv","range","min","Infinity","max","i","Math","USE_PACKED_UV","quantizedEncodeUV","quantizeMatUV","x","y","z","tmpx","round","tmpy","tmpz","defaultDecode","normal0","parseInt","atan2","PI","normal1","oct","dec","best","currentCos","bestCos","octEncodeVec3","octDecodeVec2","dot","x0","y0","z0","xfunc","yfunc","x2","abs","y2","tempx","tempy","diff","oct2","z2","sqrt","vec3","segments","Float32Array","Number","MAX_VALUE","scale","elements","transpose","multiplier","floor","constructor","parameters","type","merge","phong","vertexShader","common","uv_pars_vertex","uv2_pars_vertex","displacementmap_pars_vertex","envmap_pars_vertex","color_pars_vertex","fog_pars_vertex","morphtarget_pars_vertex","skinning_pars_vertex","shadowmap_pars_vertex","logdepthbuf_pars_vertex","clipping_planes_pars_vertex","uv_vertex","uv2_vertex","color_vertex","beginnormal_vertex","morphnormal_vertex","skinbase_vertex","skinnormal_vertex","defaultnormal_vertex","begin_vertex","morphtarget_vertex","skinning_vertex","displacementmap_vertex","project_vertex","logdepthbuf_vertex","clipping_planes_vertex","worldpos_vertex","envmap_vertex","shadowmap_vertex","fog_vertex","join","fragmentShader","packing","dithering_pars_fragment","color_pars_fragment","uv_pars_fragment","uv2_pars_fragment","map_pars_fragment","alphamap_pars_fragment","aomap_pars_fragment","lightmap_pars_fragment","emissivemap_pars_fragment","envmap_common_pars_fragment","envmap_pars_fragment","cube_uv_reflection_fragment","fog_pars_fragment","bsdfs","lights_pars_begin","lights_phong_pars_fragment","shadowmap_pars_fragment","bumpmap_pars_fragment","normalmap_pars_fragment","specularmap_pars_fragment","logdepthbuf_pars_fragment","clipping_planes_pars_fragment","clipping_planes_fragment","logdepthbuf_fragment","map_fragment","color_fragment","alphamap_fragment","alphatest_fragment","specularmap_fragment","normal_fragment_begin","normal_fragment_maps","emissivemap_fragment","lights_phong_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","aomap_fragment","envmap_fragment","tonemapping_fragment","encodings_fragment","fog_fragment","premultiplied_alpha_fragment","dithering_fragment","setValues"],"mappings":"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","sourcesContent":["import { BufferAttribute, Matrix4, Vector3, Matrix3, MeshPhongMaterial, UniformsUtils, ShaderLib, ShaderChunk } from \"three\";\nvar GeometryCompressionUtils = {\n  /**\n   * Make the input mesh.geometry's normal attribute encoded and compressed by 3 different methods.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the normal data.\n   *\n   * @param {THREE.Mesh} mesh\n   * @param {String} encodeMethod\t\t\"DEFAULT\" || \"OCT1Byte\" || \"OCT2Byte\" || \"ANGLES\"\n   *\n   */\n  compressNormals: function(mesh, encodeMethod) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    const normal = mesh.geometry.attributes.normal;\n    if (!normal) {\n      console.error(\"Geometry must contain normal attribute. \");\n    }\n    if (normal.isPacked)\n      return;\n    if (normal.itemSize != 3) {\n      console.error(\"normal.itemSize is not 3, which cannot be encoded. \");\n    }\n    const array = normal.array;\n    const count = normal.count;\n    let result;\n    if (encodeMethod == \"DEFAULT\") {\n      result = new Uint8Array(count * 3);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx + 0] = encoded[0];\n        result[idx + 1] = encoded[1];\n        result[idx + 2] = encoded[2];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 3, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT1Byte\") {\n      result = new Int8Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT2Byte\") {\n      result = new Int16Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 2);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else if (encodeMethod == \"ANGLES\") {\n      result = new Uint16Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.anglesEncode(array[idx], array[idx + 1], array[idx + 2]);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else {\n      console.error(\"Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. \");\n    }\n    mesh.geometry.attributes.normal.needsUpdate = true;\n    mesh.geometry.attributes.normal.isPacked = true;\n    mesh.geometry.attributes.normal.packingMethod = encodeMethod;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    if (encodeMethod == \"ANGLES\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 0;\n    }\n    if (encodeMethod == \"OCT1Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"OCT2Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"DEFAULT\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 2;\n    }\n  },\n  /**\n   * Make the input mesh.geometry's position attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the position data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressPositions: function(mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    const position = mesh.geometry.attributes.position;\n    if (!position) {\n      console.error(\"Geometry must contain position attribute. \");\n    }\n    if (position.isPacked)\n      return;\n    if (position.itemSize != 3) {\n      console.error(\"position.itemSize is not 3, which cannot be packed. \");\n    }\n    const array = position.array;\n    const encodingBytes = 2;\n    const result = this.EncodingFuncs.quantizedEncode(array, encodingBytes);\n    const quantized = result.quantized;\n    const decodeMat = result.decodeMat;\n    if (mesh.geometry.boundingBox == null)\n      mesh.geometry.computeBoundingBox();\n    if (mesh.geometry.boundingSphere == null)\n      mesh.geometry.computeBoundingSphere();\n    mesh.geometry.setAttribute(\"position\", new BufferAttribute(quantized, 3));\n    mesh.geometry.attributes.position.isPacked = true;\n    mesh.geometry.attributes.position.needsUpdate = true;\n    mesh.geometry.attributes.position.bytes = quantized.length * encodingBytes;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    mesh.material.defines.USE_PACKED_POSITION = 0;\n    mesh.material.uniforms.quantizeMatPos.value = decodeMat;\n    mesh.material.uniforms.quantizeMatPos.needsUpdate = true;\n  },\n  /**\n   * Make the input mesh.geometry's uv attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the uv data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressUvs: function(mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry property. \");\n    }\n    const uvs = mesh.geometry.attributes.uv;\n    if (!uvs) {\n      console.error(\"Geometry must contain uv attribute. \");\n    }\n    if (uvs.isPacked)\n      return;\n    const range = { min: Infinity, max: -Infinity };\n    const array = uvs.array;\n    for (let i = 0; i < array.length; i++) {\n      range.min = Math.min(range.min, array[i]);\n      range.max = Math.max(range.max, array[i]);\n    }\n    let result;\n    if (range.min >= -1 && range.max <= 1) {\n      result = new Uint16Array(array.length);\n      for (let i = 0; i < array.length; i += 2) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[i], array[i + 1], 0, 2);\n        result[i] = encoded[0];\n        result[i + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 0;\n    } else {\n      result = this.EncodingFuncs.quantizedEncodeUV(array, 2);\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result.quantized, 2));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.quantized.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 1;\n      mesh.material.uniforms.quantizeMatUV.value = result.decodeMat;\n      mesh.material.uniforms.quantizeMatUV.needsUpdate = true;\n    }\n  },\n  EncodingFuncs: {\n    defaultEncode: function(x, y, z, bytes) {\n      if (bytes == 1) {\n        const tmpx = Math.round((x + 1) * 0.5 * 255);\n        const tmpy = Math.round((y + 1) * 0.5 * 255);\n        const tmpz = Math.round((z + 1) * 0.5 * 255);\n        return new Uint8Array([tmpx, tmpy, tmpz]);\n      } else if (bytes == 2) {\n        const tmpx = Math.round((x + 1) * 0.5 * 65535);\n        const tmpy = Math.round((y + 1) * 0.5 * 65535);\n        const tmpz = Math.round((z + 1) * 0.5 * 65535);\n        return new Uint16Array([tmpx, tmpy, tmpz]);\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    defaultDecode: function(array, bytes) {\n      if (bytes == 1) {\n        return [array[0] / 255 * 2 - 1, array[1] / 255 * 2 - 1, array[2] / 255 * 2 - 1];\n      } else if (bytes == 2) {\n        return [array[0] / 65535 * 2 - 1, array[1] / 65535 * 2 - 1, array[2] / 65535 * 2 - 1];\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    // for `Angles` encoding\n    anglesEncode: function(x, y, z) {\n      const normal0 = parseInt(0.5 * (1 + Math.atan2(y, x) / Math.PI) * 65535);\n      const normal1 = parseInt(0.5 * (1 + z) * 65535);\n      return new Uint16Array([normal0, normal1]);\n    },\n    // for `Octahedron` encoding\n    octEncodeBest: function(x, y, z, bytes) {\n      var oct, dec, best, currentCos, bestCos;\n      best = oct = octEncodeVec3(x, y, z, \"floor\", \"floor\");\n      dec = octDecodeVec2(oct);\n      bestCos = dot(x, y, z, dec);\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"floor\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"floor\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n      }\n      return best;\n      function octEncodeVec3(x0, y0, z0, xfunc, yfunc) {\n        var x2 = x0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        var y2 = y0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        if (z < 0) {\n          var tempx = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          var tempy = (1 - Math.abs(x2)) * (y2 >= 0 ? 1 : -1);\n          x2 = tempx;\n          y2 = tempy;\n          var diff = 1 - Math.abs(x2) - Math.abs(y2);\n          if (diff > 0) {\n            diff += 1e-3;\n            x2 += x2 > 0 ? diff / 2 : -diff / 2;\n            y2 += y2 > 0 ? diff / 2 : -diff / 2;\n          }\n        }\n        if (bytes == 1) {\n          return new Int8Array([Math[xfunc](x2 * 127.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 127.5 + (y2 < 0 ? 1 : 0))]);\n        }\n        if (bytes == 2) {\n          return new Int16Array([\n            Math[xfunc](x2 * 32767.5 + (x2 < 0 ? 1 : 0)),\n            Math[yfunc](y2 * 32767.5 + (y2 < 0 ? 1 : 0))\n          ]);\n        }\n      }\n      function octDecodeVec2(oct2) {\n        var x2 = oct2[0];\n        var y2 = oct2[1];\n        if (bytes == 1) {\n          x2 /= x2 < 0 ? 127 : 128;\n          y2 /= y2 < 0 ? 127 : 128;\n        } else if (bytes == 2) {\n          x2 /= x2 < 0 ? 32767 : 32768;\n          y2 /= y2 < 0 ? 32767 : 32768;\n        }\n        var z2 = 1 - Math.abs(x2) - Math.abs(y2);\n        if (z2 < 0) {\n          var tmpx = x2;\n          x2 = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          y2 = (1 - Math.abs(tmpx)) * (y2 >= 0 ? 1 : -1);\n        }\n        var length = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);\n        return [x2 / length, y2 / length, z2 / length];\n      }\n      function dot(x2, y2, z2, vec3) {\n        return x2 * vec3[0] + y2 * vec3[1] + z2 * vec3[2];\n      }\n    },\n    quantizedEncode: function(array, bytes) {\n      let quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      const decodeMat = new Matrix4();\n      const min = new Float32Array(3);\n      const max = new Float32Array(3);\n      min[0] = min[1] = min[2] = Number.MAX_VALUE;\n      max[0] = max[1] = max[2] = -Number.MAX_VALUE;\n      for (let i = 0; i < array.length; i += 3) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        min[2] = Math.min(min[2], array[i + 2]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n        max[2] = Math.max(max[2], array[i + 2]);\n      }\n      decodeMat.scale(\n        new Vector3((max[0] - min[0]) / segments, (max[1] - min[1]) / segments, (max[2] - min[2]) / segments)\n      );\n      decodeMat.elements[12] = min[0];\n      decodeMat.elements[13] = min[1];\n      decodeMat.elements[14] = min[2];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([\n        max[0] !== min[0] ? segments / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? segments / (max[1] - min[1]) : 0,\n        max[2] !== min[2] ? segments / (max[2] - min[2]) : 0\n      ]);\n      for (let i = 0; i < array.length; i += 3) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n      }\n      return {\n        quantized,\n        decodeMat\n      };\n    },\n    quantizedEncodeUV: function(array, bytes) {\n      let quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      const decodeMat = new Matrix3();\n      const min = new Float32Array(2);\n      const max = new Float32Array(2);\n      min[0] = min[1] = Number.MAX_VALUE;\n      max[0] = max[1] = -Number.MAX_VALUE;\n      for (let i = 0; i < array.length; i += 2) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n      }\n      decodeMat.scale((max[0] - min[0]) / segments, (max[1] - min[1]) / segments);\n      decodeMat.elements[6] = min[0];\n      decodeMat.elements[7] = min[1];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([\n        max[0] !== min[0] ? segments / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? segments / (max[1] - min[1]) : 0\n      ]);\n      for (let i = 0; i < array.length; i += 2) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n      }\n      return {\n        quantized,\n        decodeMat\n      };\n    }\n  }\n};\nclass PackedPhongMaterial extends MeshPhongMaterial {\n  constructor(parameters) {\n    super();\n    this.defines = {};\n    this.type = \"PackedPhongMaterial\";\n    this.uniforms = UniformsUtils.merge([\n      ShaderLib.phong.uniforms,\n      {\n        quantizeMatPos: { value: null },\n        quantizeMatUV: { value: null }\n      }\n    ]);\n    this.vertexShader = [\n      \"#define PHONG\",\n      \"varying vec3 vViewPosition;\",\n      \"#ifndef FLAT_SHADED\",\n      \"varying vec3 vNormal;\",\n      \"#endif\",\n      ShaderChunk.common,\n      ShaderChunk.uv_pars_vertex,\n      ShaderChunk.uv2_pars_vertex,\n      ShaderChunk.displacementmap_pars_vertex,\n      ShaderChunk.envmap_pars_vertex,\n      ShaderChunk.color_pars_vertex,\n      ShaderChunk.fog_pars_vertex,\n      ShaderChunk.morphtarget_pars_vertex,\n      ShaderChunk.skinning_pars_vertex,\n      ShaderChunk.shadowmap_pars_vertex,\n      ShaderChunk.logdepthbuf_pars_vertex,\n      ShaderChunk.clipping_planes_pars_vertex,\n      `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\t#if USE_PACKED_NORMAL == 0\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat x = packedNormal.x * 2.0 - 1.0;\n\t\t\t\t\t\t\tfloat y = packedNormal.y * 2.0 - 1.0;\n\t\t\t\t\t\t\tvec2 scth = vec2(sin(x * PI), cos(x * PI));\n\t\t\t\t\t\t\tvec2 scphi = vec2(sqrt(1.0 - y * y), y);\n\t\t\t\t\t\t\treturn normalize( vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y) );\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 1\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = vec3(packedNormal.xy, 1.0 - abs(packedNormal.x) - abs(packedNormal.y));\n\t\t\t\t\t\t\tif (v.z < 0.0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tv.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 2\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = (packedNormal * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\tuniform mat4 quantizeMatPos;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tuniform mat3 quantizeMatUV;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 0\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = (packedUV * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = ( vec3(packedUV, 1.0) * quantizeMatUV ).xy;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      \"void main() {\",\n      ShaderChunk.uv_vertex,\n      `#ifdef USE_UV\n\t\t\t\t\t#ifdef USE_PACKED_UV\n\t\t\t\t\t\tvUv = decodeUV(vUv);\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      ShaderChunk.uv2_vertex,\n      ShaderChunk.color_vertex,\n      ShaderChunk.beginnormal_vertex,\n      `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\tobjectNormal = decodeNormal(objectNormal);\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_TANGENT\n\t\t\t\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t\t\t\t#endif\n\t\t\t\t`,\n      ShaderChunk.morphnormal_vertex,\n      ShaderChunk.skinbase_vertex,\n      ShaderChunk.skinnormal_vertex,\n      ShaderChunk.defaultnormal_vertex,\n      \"#ifndef FLAT_SHADED\",\n      \"\tvNormal = normalize( transformedNormal );\",\n      \"#endif\",\n      ShaderChunk.begin_vertex,\n      `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\ttransformed = ( vec4(transformed, 1.0) * quantizeMatPos ).xyz;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      ShaderChunk.morphtarget_vertex,\n      ShaderChunk.skinning_vertex,\n      ShaderChunk.displacementmap_vertex,\n      ShaderChunk.project_vertex,\n      ShaderChunk.logdepthbuf_vertex,\n      ShaderChunk.clipping_planes_vertex,\n      \"vViewPosition = - mvPosition.xyz;\",\n      ShaderChunk.worldpos_vertex,\n      ShaderChunk.envmap_vertex,\n      ShaderChunk.shadowmap_vertex,\n      ShaderChunk.fog_vertex,\n      \"}\"\n    ].join(\"\\n\");\n    this.fragmentShader = [\n      \"#define PHONG\",\n      \"uniform vec3 diffuse;\",\n      \"uniform vec3 emissive;\",\n      \"uniform vec3 specular;\",\n      \"uniform float shininess;\",\n      \"uniform float opacity;\",\n      ShaderChunk.common,\n      ShaderChunk.packing,\n      ShaderChunk.dithering_pars_fragment,\n      ShaderChunk.color_pars_fragment,\n      ShaderChunk.uv_pars_fragment,\n      ShaderChunk.uv2_pars_fragment,\n      ShaderChunk.map_pars_fragment,\n      ShaderChunk.alphamap_pars_fragment,\n      ShaderChunk.aomap_pars_fragment,\n      ShaderChunk.lightmap_pars_fragment,\n      ShaderChunk.emissivemap_pars_fragment,\n      ShaderChunk.envmap_common_pars_fragment,\n      ShaderChunk.envmap_pars_fragment,\n      ShaderChunk.cube_uv_reflection_fragment,\n      ShaderChunk.fog_pars_fragment,\n      ShaderChunk.bsdfs,\n      ShaderChunk.lights_pars_begin,\n      ShaderChunk.lights_phong_pars_fragment,\n      ShaderChunk.shadowmap_pars_fragment,\n      ShaderChunk.bumpmap_pars_fragment,\n      ShaderChunk.normalmap_pars_fragment,\n      ShaderChunk.specularmap_pars_fragment,\n      ShaderChunk.logdepthbuf_pars_fragment,\n      ShaderChunk.clipping_planes_pars_fragment,\n      \"void main() {\",\n      ShaderChunk.clipping_planes_fragment,\n      \"vec4 diffuseColor = vec4( diffuse, opacity );\",\n      \"ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\",\n      \"vec3 totalEmissiveRadiance = emissive;\",\n      ShaderChunk.logdepthbuf_fragment,\n      ShaderChunk.map_fragment,\n      ShaderChunk.color_fragment,\n      ShaderChunk.alphamap_fragment,\n      ShaderChunk.alphatest_fragment,\n      ShaderChunk.specularmap_fragment,\n      ShaderChunk.normal_fragment_begin,\n      ShaderChunk.normal_fragment_maps,\n      ShaderChunk.emissivemap_fragment,\n      // accumulation\n      ShaderChunk.lights_phong_fragment,\n      ShaderChunk.lights_fragment_begin,\n      ShaderChunk.lights_fragment_maps,\n      ShaderChunk.lights_fragment_end,\n      // modulation\n      ShaderChunk.aomap_fragment,\n      \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\",\n      ShaderChunk.envmap_fragment,\n      \"gl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\n      ShaderChunk.tonemapping_fragment,\n      ShaderChunk.encodings_fragment,\n      ShaderChunk.fog_fragment,\n      ShaderChunk.premultiplied_alpha_fragment,\n      ShaderChunk.dithering_fragment,\n      \"}\"\n    ].join(\"\\n\");\n    this.setValues(parameters);\n  }\n}\nexport {\n  GeometryCompressionUtils,\n  PackedPhongMaterial\n};\n"]},"metadata":{},"sourceType":"module"}