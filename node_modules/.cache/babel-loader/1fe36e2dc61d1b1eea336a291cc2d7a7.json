{"ast":null,"code":"'use strict';\n\nvar createQueue = require('./message-queue');\n\nvar SMTPConnection = require('smtp-connection');\n\nvar dns = require('dns');\n\nvar net = require('net');\n\nvar os = require('os');\n\nvar util = require('util');\n\nvar packageData = require('../package.json');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar shared = require('nodemailer-shared'); // Expose to the world\n\n\nmodule.exports = function (options) {\n  return new DirectMailer(options);\n};\n/**\n * Creates a new DirectMailer instance. Provides method 'send' to queue\n * outgoing e-mails. The queue is processed in the background.\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\n\n\nfunction DirectMailer(options) {\n  EventEmitter.call(this);\n  this.options = options || {};\n  this._queue = createQueue();\n  this._started = false;\n  this._lastId = 0;\n  this.logger = shared.getLogger(this.options); // temporary object\n\n  var connection = new SMTPConnection({});\n  this.name = 'SMTP (direct)';\n  this.version = packageData.version + '[client:' + connection.version + ']';\n}\n\nutil.inherits(DirectMailer, EventEmitter); // Adds a dynamic property 'length'\n\nObject.defineProperty(DirectMailer.prototype, 'length', {\n  get: function () {\n    return this._queue._instantQueue.length + this._queue._sortedQueue.length;\n  }\n});\n/**\n * Adds an outgoing message to the queue. Recipient addresses are sorted\n * by the receiving domain and for every domain, a copy of the message is queued.\n *\n * If input is deemed invalid, an error is thrown, so be ready to catch these\n * when calling directmail.send(...)\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\n\nDirectMailer.prototype.send = function (mail, callback) {\n  var envelope = mail.data.envelope || mail.message.getEnvelope();\n  var domainEnvelopes = {};\n\n  if (!envelope.from) {\n    return callback(new Error('\"From\" address missing'));\n  }\n\n  envelope.to = [].concat(envelope.to || []);\n\n  if (!envelope.to.length) {\n    return callback('\"Recipients\" addresses missing');\n  } // We cant't run existing streams more than once so we need to change these\n  // to buffers. Filenames, URLs etc are not affected â€“ for every\n  // message copy a new file stream will be created\n\n\n  this._clearStreams(mail, function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    this._formatMessage(mail.message);\n\n    envelope.to.forEach(function (recipient) {\n      recipient = (recipient || '').toString();\n      var domain = (recipient.split('@').pop() || '').toLowerCase().trim();\n\n      if (!domainEnvelopes[domain]) {\n        domainEnvelopes[domain] = {\n          from: envelope.from,\n          to: [recipient]\n        };\n      } else if (domainEnvelopes[domain].to.indexOf(recipient) < 0) {\n        domainEnvelopes[domain].to.push(recipient);\n      }\n    });\n    var returned = 0;\n    var domains = Object.keys(domainEnvelopes);\n    var combinedInfo = {\n      accepted: [],\n      rejected: [],\n      pending: [],\n      errors: [],\n      envelope: mail.data.envelope || mail.message.getEnvelope()\n    };\n    domains.forEach(function (domain) {\n      var called = false;\n      var id = ++this._lastId;\n      var item = {\n        envelope: domainEnvelopes[domain],\n        data: mail.data,\n        message: mail.message,\n        domain: domain,\n        id: id,\n        callback: function (err, info) {\n          if (called) {\n            this.logger.info('Callback for #%s already called. Updated values: %s', id, JSON.stringify(err || info));\n            return;\n          }\n\n          called = true;\n          returned++;\n\n          if (err) {\n            combinedInfo.errors.push(err);\n\n            if (err.recipients) {\n              combinedInfo.rejected = combinedInfo.rejected.concat(err.recipients || []);\n            }\n          } else if (info) {\n            combinedInfo.accepted = combinedInfo.accepted.concat(info.accepted || []);\n            combinedInfo.rejected = combinedInfo.rejected.concat(info.rejected || []);\n            combinedInfo.pending = combinedInfo.pending.concat(info.pending || []);\n            combinedInfo.messageId = info.messageId;\n          }\n\n          if (returned >= domains.length) {\n            if (combinedInfo.errors.length === domains.length) {\n              var error = new Error('Sending failed');\n              error.errors = combinedInfo.errors;\n              return callback(error);\n            } else {\n              return callback(null, combinedInfo);\n            }\n          }\n        }.bind(this)\n      };\n\n      this._queue.insert(item);\n    }.bind(this)); // start send loop if needed\n\n    if (!this._started) {\n      this._started = true; // do not start the loop before current execution context is finished\n\n      setImmediate(this._loop.bind(this));\n    }\n  }.bind(this));\n};\n/**\n * Looping function to fetch a message from the queue and send it.\n */\n\n\nDirectMailer.prototype._loop = function () {\n  // callback is fired when a message is added to the queue\n  this._queue.get(function (data) {\n    this.logger.info('Retrieved message #%s from the queue, resolving %s', data.id, data.domain); // Resolve destination MX server\n\n    this._resolveMx(data.domain, function (err, list) {\n      if (err) {\n        this.logger.info('Resolving %s for #%s failed', data.domain, data.id);\n        this.logger.info(err);\n      } else if (!list || !list.length) {\n        this.logger.info('Could not resolve any MX servers for %s', data.domain);\n      }\n\n      if (err || !list || !list.length) {\n        data.callback(err || new Error('Could not resolve MX for ' + data.domain));\n        return setImmediate(this._loop.bind(this));\n      } // Sort MX list by priority field\n\n\n      list.sort(function (a, b) {\n        return (a && a.priority || 0) - (b && b.priority || 0);\n      }); // Use the first server on the list\n\n      var exchange = list[0] && list[0].exchange;\n      this.logger.info('%s resolved to %s for #%s', data.domain, exchange, data.id); // Try to send the message\n\n      this._process(exchange, data, function (err, response) {\n        if (err) {\n          this.logger.info('Failed processing message #%s', data.id);\n        } else {\n          this.logger.info('Server responded for #%s: %s', data.id, JSON.stringify(response));\n        }\n\n        if (err) {\n          if (err.responseCode && err.responseCode >= 500) {\n            err.domain = data.domain;\n            err.exchange = exchange;\n            err.recipients = data.envelope.to;\n            data.callback(err);\n          } else {\n            data.replies = (data.replies || 0) + 1;\n\n            if (data.replies <= 5) {\n              this._queue.insert(data, this.options.retryDelay || data.replies * 15 * 60 * 1000);\n\n              this.logger.info('Message #%s requeued', data.id);\n              data.callback(null, {\n                pending: {\n                  domain: data.domain,\n                  exchange: exchange,\n                  recipients: data.envelope.to,\n                  response: err.response\n                }\n              });\n            } else {\n              err.domain = data.domain;\n              err.exchange = exchange;\n              err.recipients = data.envelope.to;\n              data.callback(err);\n            }\n          }\n        } else {\n          data.callback(null, response);\n        }\n\n        setImmediate(this._loop.bind(this));\n      }.bind(this));\n    }.bind(this));\n  }.bind(this));\n};\n/**\n * Sends a message to provided MX server\n *\n * @param {String} exchange MX server\n * @param {Object} data Message object\n * @param {Function} callback Callback to run once the message is either sent or sending fails\n */\n\n\nDirectMailer.prototype._process = function (exchange, data, callback) {\n  this.logger.info('Connecting to %s:%s for message #%s', exchange, this.options.port || 25, data.id);\n  var options = {\n    host: exchange,\n    port: this.options.port || 25,\n    ignoreTLS: true\n  }; // Add options from DirectMailer options to simplesmtp client\n\n  Object.keys(this.options).forEach(function (key) {\n    options[key] = this.options[key];\n  }.bind(this));\n  var connection = new SMTPConnection(options);\n  var returned = false;\n  connection.once('error', function (err) {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    return callback(err);\n  });\n\n  var sendMessage = function () {\n    var messageId = (data.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n    var recipients = [].concat(data.envelope.to || []);\n\n    if (recipients.length > 3) {\n      recipients.push('...and ' + recipients.splice(2).length + ' more');\n    }\n\n    this.logger.info('Sending message <%s> to <%s>', messageId, recipients.join(', '));\n    connection.send(data.envelope, data.message.createReadStream(), function (err, info) {\n      if (returned) {\n        return;\n      }\n\n      returned = true;\n      connection.close();\n\n      if (err) {\n        return callback(err);\n      }\n\n      info.messageId = (data.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n      return callback(null, info);\n    });\n  }.bind(this);\n\n  connection.connect(function () {\n    if (returned) {\n      return;\n    }\n\n    sendMessage();\n  }.bind(this));\n};\n/**\n * Adds additional headers to the outgoing message\n *\n * @param {Object} message BuildMail message object\n */\n\n\nDirectMailer.prototype._formatMessage = function (message) {\n  var hostname = this._resolveHostname(this.options.name); // set the first header as 'Received:'\n\n\n  message._headers.unshift({\n    key: 'Received',\n    value: 'from localhost (127.0.0.1) by ' + hostname + ' with SMTP; ' + Date()\n  });\n};\n/**\n * Detects stream objects and resolves these to buffers before sending. File paths,\n * urls etc. are not affected.\n *\n * @param {Object} message BuildMail message object\n * @param {Function} callback Callback to run\n */\n\n\nDirectMailer.prototype._clearStreams = function (mail, callback) {\n  var streamNodes = [];\n\n  function walkNode(node) {\n    if (node.content && typeof node.content.pipe === 'function') {\n      streamNodes.push(node);\n    }\n\n    if (node.childNodes && node.childNodes.length) {\n      node.childNodes.forEach(walkNode);\n    }\n  }\n\n  walkNode(mail.message);\n\n  function resolveNodes() {\n    if (!streamNodes.length) {\n      return callback();\n    }\n\n    var node = streamNodes.shift();\n    mail.resolveContent(node, 'content', function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      setImmediate(resolveNodes);\n    });\n  }\n\n  resolveNodes();\n};\n/**\n * Resolves MX server for a domain\n *\n * @param {String} domain Domain to resolve the MX to\n * @param {Function} callback Callback function to run\n */\n\n\nDirectMailer.prototype._resolveMx = function (domain, callback) {\n  domain = domain.replace(/^\\[(ipv6:)?|\\]$/gi, ''); // Do not try to resolve the domain name if it is an IP address\n\n  if (net.isIP(domain)) {\n    return callback(null, [{\n      priority: 0,\n      exchange: domain\n    }]);\n  }\n\n  dns.resolveMx(domain, function (err, list) {\n    if (err) {\n      if (err.code === 'ENODATA') {\n        // fallback to A\n        dns.resolve4(domain, function (err, list) {\n          if (err) {\n            if (err.code === 'ENODATA') {\n              // fallback to AAAA\n              dns.resolve6(domain, function (err, list) {\n                if (err) {\n                  return callback(err);\n                } // return the first resolved Ipv6 with priority 0\n\n\n                return callback(null, [].concat(list || []).map(function (entry) {\n                  return {\n                    priority: 0,\n                    exchange: entry\n                  };\n                }).slice(0, 1));\n              });\n            } else {\n              return callback(err);\n            }\n\n            return;\n          } // return the first resolved Ipv4 with priority 0\n\n\n          return callback(null, [].concat(list || []).map(function (entry) {\n            return {\n              priority: 0,\n              exchange: entry\n            };\n          }).slice(0, 1));\n        });\n      } else {\n        return callback(err);\n      }\n\n      return;\n    }\n\n    callback(null, list);\n  });\n};\n/**\n * Resolves current hostname. If resolved name is an IP address, uses 'localhost'.\n *\n * @param {String} [name] Preferred hostname\n * @return {String} Resolved hostname\n */\n\n\nDirectMailer.prototype._resolveHostname = function (name) {\n  if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n    name = os.hostname && os.hostname() || '';\n  }\n\n  if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n    name = 'localhost';\n  }\n\n  return name.toLowerCase();\n};","map":{"version":3,"sources":["/Users/theodaguier/e-do/node_modules/nodemailer-direct-transport/lib/direct-transport.js"],"names":["createQueue","require","SMTPConnection","dns","net","os","util","packageData","EventEmitter","shared","module","exports","options","DirectMailer","call","_queue","_started","_lastId","logger","getLogger","connection","name","version","inherits","Object","defineProperty","prototype","get","_instantQueue","length","_sortedQueue","send","mail","callback","envelope","data","message","getEnvelope","domainEnvelopes","from","Error","to","concat","_clearStreams","err","_formatMessage","forEach","recipient","toString","domain","split","pop","toLowerCase","trim","indexOf","push","returned","domains","keys","combinedInfo","accepted","rejected","pending","errors","called","id","item","info","JSON","stringify","recipients","messageId","error","bind","insert","setImmediate","_loop","_resolveMx","list","sort","a","b","priority","exchange","_process","response","responseCode","replies","retryDelay","port","host","ignoreTLS","key","once","sendMessage","getHeader","replace","splice","join","createReadStream","close","connect","hostname","_resolveHostname","_headers","unshift","value","Date","streamNodes","walkNode","node","content","pipe","childNodes","resolveNodes","shift","resolveContent","isIP","resolveMx","code","resolve4","resolve6","map","entry","slice"],"mappings":"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","sourcesContent":["'use strict';\n\nvar createQueue = require('./message-queue');\nvar SMTPConnection = require('smtp-connection');\nvar dns = require('dns');\nvar net = require('net');\nvar os = require('os');\nvar util = require('util');\nvar packageData = require('../package.json');\nvar EventEmitter = require('events').EventEmitter;\nvar shared = require('nodemailer-shared');\n\n// Expose to the world\nmodule.exports = function (options) {\n    return new DirectMailer(options);\n};\n\n/**\n * Creates a new DirectMailer instance. Provides method 'send' to queue\n * outgoing e-mails. The queue is processed in the background.\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */\nfunction DirectMailer(options) {\n    EventEmitter.call(this);\n    this.options = options || {};\n    this._queue = createQueue();\n    this._started = false;\n    this._lastId = 0;\n\n    this.logger = shared.getLogger(this.options);\n\n    // temporary object\n    var connection = new SMTPConnection({});\n\n    this.name = 'SMTP (direct)';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n}\nutil.inherits(DirectMailer, EventEmitter);\n\n// Adds a dynamic property 'length'\nObject.defineProperty(DirectMailer.prototype, 'length', {\n    get: function () {\n        return this._queue._instantQueue.length + this._queue._sortedQueue.length;\n    }\n});\n\n/**\n * Adds an outgoing message to the queue. Recipient addresses are sorted\n * by the receiving domain and for every domain, a copy of the message is queued.\n *\n * If input is deemed invalid, an error is thrown, so be ready to catch these\n * when calling directmail.send(...)\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\nDirectMailer.prototype.send = function (mail, callback) {\n\n    var envelope = mail.data.envelope || mail.message.getEnvelope();\n    var domainEnvelopes = {};\n\n    if (!envelope.from) {\n        return callback(new Error('\"From\" address missing'));\n    }\n\n    envelope.to = [].concat(envelope.to || []);\n\n    if (!envelope.to.length) {\n        return callback('\"Recipients\" addresses missing');\n    }\n\n    // We cant't run existing streams more than once so we need to change these\n    // to buffers. Filenames, URLs etc are not affected â€“ for every\n    // message copy a new file stream will be created\n    this._clearStreams(mail, function (err) {\n        if(err){\n            return callback(err);\n        }\n\n        this._formatMessage(mail.message);\n\n        envelope.to.forEach(function (recipient) {\n            recipient = (recipient || '').toString();\n\n            var domain = (recipient.split('@').pop() || '').toLowerCase().trim();\n\n            if (!domainEnvelopes[domain]) {\n                domainEnvelopes[domain] = {\n                    from: envelope.from,\n                    to: [recipient]\n                };\n            } else if (domainEnvelopes[domain].to.indexOf(recipient) < 0) {\n                domainEnvelopes[domain].to.push(recipient);\n            }\n        });\n\n        var returned = 0;\n        var domains = Object.keys(domainEnvelopes);\n        var combinedInfo = {\n            accepted: [],\n            rejected: [],\n            pending: [],\n            errors: [],\n            envelope: mail.data.envelope || mail.message.getEnvelope()\n        };\n\n        domains.forEach((function (domain) {\n            var called = false;\n            var id = ++this._lastId;\n            var item = {\n                envelope: domainEnvelopes[domain],\n                data: mail.data,\n                message: mail.message,\n                domain: domain,\n                id: id,\n                callback: function (err, info) {\n                    if (called) {\n                        this.logger.info('Callback for #%s already called. Updated values: %s', id, JSON.stringify(err || info));\n                        return;\n                    }\n\n                    called = true;\n                    returned++;\n\n                    if (err) {\n                        combinedInfo.errors.push(err);\n                        if (err.recipients) {\n                            combinedInfo.rejected = combinedInfo.rejected.concat(err.recipients || []);\n                        }\n                    } else if (info) {\n                        combinedInfo.accepted = combinedInfo.accepted.concat(info.accepted || []);\n                        combinedInfo.rejected = combinedInfo.rejected.concat(info.rejected || []);\n                        combinedInfo.pending = combinedInfo.pending.concat(info.pending || []);\n                        combinedInfo.messageId = info.messageId;\n                    }\n\n                    if (returned >= domains.length) {\n                        if (combinedInfo.errors.length === domains.length) {\n                            var error = new Error('Sending failed');\n                            error.errors = combinedInfo.errors;\n                            return callback(error);\n                        } else {\n                            return callback(null, combinedInfo);\n                        }\n                    }\n                }.bind(this)\n            };\n\n            this._queue.insert(item);\n        }).bind(this));\n\n        // start send loop if needed\n        if (!this._started) {\n            this._started = true;\n\n            // do not start the loop before current execution context is finished\n            setImmediate(this._loop.bind(this));\n        }\n\n    }.bind(this));\n};\n\n/**\n * Looping function to fetch a message from the queue and send it.\n */\nDirectMailer.prototype._loop = function () {\n\n    // callback is fired when a message is added to the queue\n    this._queue.get((function (data) {\n\n        this.logger.info('Retrieved message #%s from the queue, resolving %s', data.id, data.domain);\n\n        // Resolve destination MX server\n        this._resolveMx(data.domain, (function (err, list) {\n\n            if (err) {\n                this.logger.info('Resolving %s for #%s failed', data.domain, data.id);\n                this.logger.info(err);\n            } else if (!list || !list.length) {\n                this.logger.info('Could not resolve any MX servers for %s', data.domain);\n            }\n            if (err || !list || !list.length) {\n                data.callback(err || new Error('Could not resolve MX for ' + data.domain));\n                return setImmediate(this._loop.bind(this));\n            }\n\n            // Sort MX list by priority field\n            list.sort(function (a, b) {\n                return (a && a.priority || 0) - (b && b.priority || 0);\n            });\n\n            // Use the first server on the list\n            var exchange = list[0] && list[0].exchange;\n\n            this.logger.info('%s resolved to %s for #%s', data.domain, exchange, data.id);\n\n            // Try to send the message\n            this._process(exchange, data, (function (err, response) {\n                if (err) {\n                    this.logger.info('Failed processing message #%s', data.id);\n                } else {\n                    this.logger.info('Server responded for #%s: %s', data.id, JSON.stringify(response));\n                }\n\n                if (err) {\n                    if (err.responseCode && err.responseCode >= 500) {\n                        err.domain = data.domain;\n                        err.exchange = exchange;\n                        err.recipients = data.envelope.to;\n                        data.callback(err);\n                    } else {\n                        data.replies = (data.replies || 0) + 1;\n                        if (data.replies <= 5) {\n                            this._queue.insert(data, this.options.retryDelay || data.replies * 15 * 60 * 1000);\n                            this.logger.info('Message #%s requeued', data.id);\n                            data.callback(null, {\n                                pending: {\n                                    domain: data.domain,\n                                    exchange: exchange,\n                                    recipients: data.envelope.to,\n                                    response: err.response\n                                }\n                            });\n                        } else {\n                            err.domain = data.domain;\n                            err.exchange = exchange;\n                            err.recipients = data.envelope.to;\n                            data.callback(err);\n                        }\n                    }\n                } else {\n                    data.callback(null, response);\n                }\n\n                setImmediate(this._loop.bind(this));\n            }).bind(this));\n        }).bind(this));\n    }).bind(this));\n};\n\n/**\n * Sends a message to provided MX server\n *\n * @param {String} exchange MX server\n * @param {Object} data Message object\n * @param {Function} callback Callback to run once the message is either sent or sending fails\n */\nDirectMailer.prototype._process = function (exchange, data, callback) {\n    this.logger.info('Connecting to %s:%s for message #%s', exchange, this.options.port || 25, data.id);\n\n    var options = {\n        host: exchange,\n        port: this.options.port || 25,\n        ignoreTLS: true\n    };\n\n    // Add options from DirectMailer options to simplesmtp client\n    Object.keys(this.options).forEach((function (key) {\n        options[key] = this.options[key];\n    }).bind(this));\n\n    var connection = new SMTPConnection(options);\n    var returned = false;\n\n    connection.once('error', function (err) {\n        if (returned) {\n            return;\n        }\n        returned = true;\n        return callback(err);\n    });\n\n    var sendMessage = function () {\n        var messageId = (data.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n        var recipients = [].concat(data.envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push('...and ' + recipients.splice(2).length + ' more');\n        }\n\n        this.logger.info('Sending message <%s> to <%s>', messageId, recipients.join(', '));\n        connection.send(data.envelope, data.message.createReadStream(), function (err, info) {\n            if (returned) {\n                return;\n            }\n            returned = true;\n\n            connection.close();\n            if (err) {\n                return callback(err);\n            }\n\n            info.messageId = (data.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n            return callback(null, info);\n        });\n    }.bind(this);\n\n    connection.connect(function () {\n        if (returned) {\n            return;\n        }\n        sendMessage();\n    }.bind(this));\n};\n\n/**\n * Adds additional headers to the outgoing message\n *\n * @param {Object} message BuildMail message object\n */\nDirectMailer.prototype._formatMessage = function (message) {\n    var hostname = this._resolveHostname(this.options.name);\n\n    // set the first header as 'Received:'\n    message._headers.unshift({\n        key: 'Received',\n        value: 'from localhost (127.0.0.1) by ' + hostname + ' with SMTP; ' + Date()\n    });\n};\n\n/**\n * Detects stream objects and resolves these to buffers before sending. File paths,\n * urls etc. are not affected.\n *\n * @param {Object} message BuildMail message object\n * @param {Function} callback Callback to run\n */\nDirectMailer.prototype._clearStreams = function (mail, callback) {\n    var streamNodes = [];\n\n    function walkNode(node) {\n        if (node.content && typeof node.content.pipe === 'function') {\n            streamNodes.push(node);\n        }\n        if (node.childNodes && node.childNodes.length) {\n            node.childNodes.forEach(walkNode);\n        }\n    }\n    walkNode(mail.message);\n\n    function resolveNodes() {\n        if (!streamNodes.length) {\n            return callback();\n        }\n        var node = streamNodes.shift();\n\n        mail.resolveContent(node, 'content', function (err) {\n            if (err) {\n                return callback(err);\n            }\n            setImmediate(resolveNodes);\n        });\n    }\n\n    resolveNodes();\n};\n\n/**\n * Resolves MX server for a domain\n *\n * @param {String} domain Domain to resolve the MX to\n * @param {Function} callback Callback function to run\n */\nDirectMailer.prototype._resolveMx = function (domain, callback) {\n    domain = domain.replace(/^\\[(ipv6:)?|\\]$/gi, '');\n\n    // Do not try to resolve the domain name if it is an IP address\n    if (net.isIP(domain)) {\n        return callback(null, [{\n            priority: 0,\n            exchange: domain\n        }]);\n    }\n\n    dns.resolveMx(domain, function (err, list) {\n        if (err) {\n            if (err.code === 'ENODATA') {\n                // fallback to A\n                dns.resolve4(domain, function (err, list) {\n                    if (err) {\n                        if (err.code === 'ENODATA') {\n                            // fallback to AAAA\n                            dns.resolve6(domain, function (err, list) {\n                                if (err) {\n                                    return callback(err);\n                                }\n\n                                // return the first resolved Ipv6 with priority 0\n                                return callback(null, [].concat(list || []).map(function (entry) {\n                                    return {\n                                        priority: 0,\n                                        exchange: entry\n                                    };\n                                }).slice(0, 1));\n                            });\n                        } else {\n                            return callback(err);\n                        }\n                        return;\n                    }\n\n                    // return the first resolved Ipv4 with priority 0\n                    return callback(null, [].concat(list || []).map(function (entry) {\n                        return {\n                            priority: 0,\n                            exchange: entry\n                        };\n                    }).slice(0, 1));\n                });\n            } else {\n                return callback(err);\n            }\n            return;\n        }\n        callback(null, list);\n    });\n};\n\n/**\n * Resolves current hostname. If resolved name is an IP address, uses 'localhost'.\n *\n * @param {String} [name] Preferred hostname\n * @return {String} Resolved hostname\n */\nDirectMailer.prototype._resolveHostname = function (name) {\n    if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n        name = (os.hostname && os.hostname()) || '';\n    }\n\n    if (!name || net.isIP(name.replace(/[\\[\\]]/g, '').trim())) {\n        name = 'localhost';\n    }\n\n    return name.toLowerCase();\n};\n"]},"metadata":{},"sourceType":"script"}