{"ast":null,"code":"import { UniformsUtils, ShaderMaterial, WebGLRenderTarget } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nclass SavePass extends Pass {\n  constructor(renderTarget) {\n    super();\n    if (CopyShader === void 0) console.error(\"THREE.SavePass relies on CopyShader\");\n    const shader = CopyShader;\n    this.textureID = \"tDiffuse\";\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderTarget = renderTarget;\n\n    if (this.renderTarget === void 0) {\n      this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.renderTarget.texture.name = \"SavePass.rt\";\n    }\n\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nexport { SavePass };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/SavePass.js"],"names":["UniformsUtils","ShaderMaterial","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","SavePass","constructor","renderTarget","console","error","shader","textureID","uniforms","clone","material","vertexShader","fragmentShader","window","innerWidth","innerHeight","texture","name","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,EAAwCC,iBAAxC,QAAiE,OAAjE;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AACA,MAAMC,QAAN,SAAuBH,IAAvB,CAA4B;AAC1BI,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB;AACA,QAAIH,UAAU,KAAK,KAAK,CAAxB,EACEI,OAAO,CAACC,KAAR,CAAc,qCAAd;AACF,UAAMC,MAAM,GAAGN,UAAf;AACA,SAAKO,SAAL,GAAiB,UAAjB;AACA,SAAKC,QAAL,GAAgBb,aAAa,CAACc,KAAd,CAAoBH,MAAM,CAACE,QAA3B,CAAhB;AACA,SAAKE,QAAL,GAAgB,IAAId,cAAJ,CAAmB;AACjCY,MAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCG,MAAAA,YAAY,EAAEL,MAAM,CAACK,YAFY;AAGjCC,MAAAA,cAAc,EAAEN,MAAM,CAACM;AAHU,KAAnB,CAAhB;AAKA,SAAKT,YAAL,GAAoBA,YAApB;;AACA,QAAI,KAAKA,YAAL,KAAsB,KAAK,CAA/B,EAAkC;AAChC,WAAKA,YAAL,GAAoB,IAAIN,iBAAJ,CAAsBgB,MAAM,CAACC,UAA7B,EAAyCD,MAAM,CAACE,WAAhD,CAApB;AACA,WAAKZ,YAAL,CAAkBa,OAAlB,CAA0BC,IAA1B,GAAiC,aAAjC;AACD;;AACD,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,MAAL,GAAc,IAAIpB,cAAJ,CAAmB,KAAKW,QAAxB,CAAd;AACD;;AACDU,EAAAA,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoC;AACxC,QAAI,KAAKf,QAAL,CAAc,KAAKD,SAAnB,CAAJ,EAAmC;AACjC,WAAKC,QAAL,CAAc,KAAKD,SAAnB,EAA8BiB,KAA9B,GAAsCD,UAAU,CAACP,OAAjD;AACD;;AACDK,IAAAA,QAAQ,CAACI,eAAT,CAAyB,KAAKtB,YAA9B;AACA,QAAI,KAAKuB,KAAT,EACEL,QAAQ,CAACK,KAAT;AACF,SAAKP,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD;;AA7ByB;;AA+B5B,SACEpB,QADF","sourcesContent":["import { UniformsUtils, ShaderMaterial, WebGLRenderTarget } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nclass SavePass extends Pass {\n  constructor(renderTarget) {\n    super();\n    if (CopyShader === void 0)\n      console.error(\"THREE.SavePass relies on CopyShader\");\n    const shader = CopyShader;\n    this.textureID = \"tDiffuse\";\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderTarget = renderTarget;\n    if (this.renderTarget === void 0) {\n      this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.renderTarget.texture.name = \"SavePass.rt\";\n    }\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear)\n      renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n}\nexport {\n  SavePass\n};\n"]},"metadata":{},"sourceType":"module"}