{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from \"three\";\n\nvar STLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(STLLoader, _Loader);\n\n  var _super = _createSuper(STLLoader);\n\n  function STLLoader(manager) {\n    _classCallCheck(this, STLLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(STLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function isBinary(data2) {\n        var reader = new DataView(data2);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n\n        if (expect === reader.byteLength) {\n          return true;\n        }\n\n        var solid = [115, 111, 108, 105, 100];\n\n        for (var off = 0; off < 5; off++) {\n          if (matchDataViewAt(solid, reader, off)) return false;\n        }\n\n        return true;\n      }\n\n      function matchDataViewAt(query, reader, offset) {\n        for (var i = 0, il = query.length; i < il; i++) {\n          if (query[i] !== reader.getUint8(offset + i, false)) return false;\n        }\n\n        return true;\n      }\n\n      function parseBinary(data2) {\n        var reader = new DataView(data2);\n        var faces = reader.getUint32(80, true);\n        var r,\n            g,\n            b,\n            hasColors = false,\n            colors;\n        var defaultR, defaultG, defaultB, alpha;\n\n        for (var index = 0; index < 80 - 10; index++) {\n          if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {\n            hasColors = true;\n            colors = new Float32Array(faces * 3 * 3);\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n          }\n        }\n\n        var dataOffset = 84;\n        var faceLength = 12 * 4 + 2;\n        var geometry = new BufferGeometry();\n        var vertices = new Float32Array(faces * 3 * 3);\n        var normals = new Float32Array(faces * 3 * 3);\n\n        for (var face = 0; face < faces; face++) {\n          var start = dataOffset + face * faceLength;\n          var normalX = reader.getFloat32(start, true);\n          var normalY = reader.getFloat32(start + 4, true);\n          var normalZ = reader.getFloat32(start + 8, true);\n\n          if (hasColors) {\n            var packedColor = reader.getUint16(start + 48, true);\n\n            if ((packedColor & 32768) === 0) {\n              r = (packedColor & 31) / 31;\n              g = (packedColor >> 5 & 31) / 31;\n              b = (packedColor >> 10 & 31) / 31;\n            } else {\n              r = defaultR;\n              g = defaultG;\n              b = defaultB;\n            }\n          }\n\n          for (var i = 1; i <= 3; i++) {\n            var vertexstart = start + i * 12;\n            var componentIdx = face * 3 * 3 + (i - 1) * 3;\n            vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n            vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n            vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n            normals[componentIdx] = normalX;\n            normals[componentIdx + 1] = normalY;\n            normals[componentIdx + 2] = normalZ;\n\n            if (hasColors) {\n              colors[componentIdx] = r;\n              colors[componentIdx + 1] = g;\n              colors[componentIdx + 2] = b;\n            }\n          }\n        }\n\n        geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n        geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n\n        if (hasColors) {\n          geometry.setAttribute(\"color\", new BufferAttribute(colors, 3));\n          geometry.hasColors = true;\n          geometry.alpha = alpha;\n        }\n\n        return geometry;\n      }\n\n      function parseASCII(data2) {\n        var geometry = new BufferGeometry();\n        var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n        var patternFace = /facet([\\s\\S]*?)endfacet/g;\n        var faceCounter = 0;\n        var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n        var patternVertex = new RegExp(\"vertex\" + patternFloat + patternFloat + patternFloat, \"g\");\n        var patternNormal = new RegExp(\"normal\" + patternFloat + patternFloat + patternFloat, \"g\");\n        var vertices = [];\n        var normals = [];\n        var normal = new Vector3();\n        var result;\n        var groupCount = 0;\n        var startVertex = 0;\n        var endVertex = 0;\n\n        while ((result = patternSolid.exec(data2)) !== null) {\n          startVertex = endVertex;\n          var solid = result[0];\n\n          while ((result = patternFace.exec(solid)) !== null) {\n            var vertexCountPerFace = 0;\n            var normalCountPerFace = 0;\n            var text = result[0];\n\n            while ((result = patternNormal.exec(text)) !== null) {\n              normal.x = parseFloat(result[1]);\n              normal.y = parseFloat(result[2]);\n              normal.z = parseFloat(result[3]);\n              normalCountPerFace++;\n            }\n\n            while ((result = patternVertex.exec(text)) !== null) {\n              vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n              normals.push(normal.x, normal.y, normal.z);\n              vertexCountPerFace++;\n              endVertex++;\n            }\n\n            if (normalCountPerFace !== 1) {\n              console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n            }\n\n            if (vertexCountPerFace !== 3) {\n              console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n            }\n\n            faceCounter++;\n          }\n\n          var start = startVertex;\n          var count = endVertex - startVertex;\n          geometry.addGroup(start, count, groupCount);\n          groupCount++;\n        }\n\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        return geometry;\n      }\n\n      function ensureString(buffer) {\n        if (typeof buffer !== \"string\") {\n          return LoaderUtils.decodeText(new Uint8Array(buffer));\n        }\n\n        return buffer;\n      }\n\n      function ensureBinary(buffer) {\n        if (typeof buffer === \"string\") {\n          var array_buffer = new Uint8Array(buffer.length);\n\n          for (var i = 0; i < buffer.length; i++) {\n            array_buffer[i] = buffer.charCodeAt(i) & 255;\n          }\n\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buffer;\n        }\n      }\n\n      var binData = ensureBinary(data);\n      return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n    }\n  }]);\n\n  return STLLoader;\n}(Loader);\n\nexport { STLLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/STLLoader.js"],"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","Vector3","Float32BufferAttribute","LoaderUtils","STLLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","isBinary","data2","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from \"three\";\nclass STLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    function isBinary(data2) {\n      const reader = new DataView(data2);\n      const face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n      const n_faces = reader.getUint32(80, true);\n      const expect = 80 + 32 / 8 + n_faces * face_size;\n      if (expect === reader.byteLength) {\n        return true;\n      }\n      const solid = [115, 111, 108, 105, 100];\n      for (let off = 0; off < 5; off++) {\n        if (matchDataViewAt(solid, reader, off))\n          return false;\n      }\n      return true;\n    }\n    function matchDataViewAt(query, reader, offset) {\n      for (let i = 0, il = query.length; i < il; i++) {\n        if (query[i] !== reader.getUint8(offset + i, false))\n          return false;\n      }\n      return true;\n    }\n    function parseBinary(data2) {\n      const reader = new DataView(data2);\n      const faces = reader.getUint32(80, true);\n      let r, g, b, hasColors = false, colors;\n      let defaultR, defaultG, defaultB, alpha;\n      for (let index = 0; index < 80 - 10; index++) {\n        if (reader.getUint32(index, false) == 1129270351 && reader.getUint8(index + 4) == 82 && reader.getUint8(index + 5) == 61) {\n          hasColors = true;\n          colors = new Float32Array(faces * 3 * 3);\n          defaultR = reader.getUint8(index + 6) / 255;\n          defaultG = reader.getUint8(index + 7) / 255;\n          defaultB = reader.getUint8(index + 8) / 255;\n          alpha = reader.getUint8(index + 9) / 255;\n        }\n      }\n      const dataOffset = 84;\n      const faceLength = 12 * 4 + 2;\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array(faces * 3 * 3);\n      const normals = new Float32Array(faces * 3 * 3);\n      for (let face = 0; face < faces; face++) {\n        const start = dataOffset + face * faceLength;\n        const normalX = reader.getFloat32(start, true);\n        const normalY = reader.getFloat32(start + 4, true);\n        const normalZ = reader.getFloat32(start + 8, true);\n        if (hasColors) {\n          const packedColor = reader.getUint16(start + 48, true);\n          if ((packedColor & 32768) === 0) {\n            r = (packedColor & 31) / 31;\n            g = (packedColor >> 5 & 31) / 31;\n            b = (packedColor >> 10 & 31) / 31;\n          } else {\n            r = defaultR;\n            g = defaultG;\n            b = defaultB;\n          }\n        }\n        for (let i = 1; i <= 3; i++) {\n          const vertexstart = start + i * 12;\n          const componentIdx = face * 3 * 3 + (i - 1) * 3;\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[componentIdx] = normalX;\n          normals[componentIdx + 1] = normalY;\n          normals[componentIdx + 2] = normalZ;\n          if (hasColors) {\n            colors[componentIdx] = r;\n            colors[componentIdx + 1] = g;\n            colors[componentIdx + 2] = b;\n          }\n        }\n      }\n      geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n      geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n      if (hasColors) {\n        geometry.setAttribute(\"color\", new BufferAttribute(colors, 3));\n        geometry.hasColors = true;\n        geometry.alpha = alpha;\n      }\n      return geometry;\n    }\n    function parseASCII(data2) {\n      const geometry = new BufferGeometry();\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g;\n      const patternFace = /facet([\\s\\S]*?)endfacet/g;\n      let faceCounter = 0;\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n      const patternVertex = new RegExp(\"vertex\" + patternFloat + patternFloat + patternFloat, \"g\");\n      const patternNormal = new RegExp(\"normal\" + patternFloat + patternFloat + patternFloat, \"g\");\n      const vertices = [];\n      const normals = [];\n      const normal = new Vector3();\n      let result;\n      let groupCount = 0;\n      let startVertex = 0;\n      let endVertex = 0;\n      while ((result = patternSolid.exec(data2)) !== null) {\n        startVertex = endVertex;\n        const solid = result[0];\n        while ((result = patternFace.exec(solid)) !== null) {\n          let vertexCountPerFace = 0;\n          let normalCountPerFace = 0;\n          const text = result[0];\n          while ((result = patternNormal.exec(text)) !== null) {\n            normal.x = parseFloat(result[1]);\n            normal.y = parseFloat(result[2]);\n            normal.z = parseFloat(result[3]);\n            normalCountPerFace++;\n          }\n          while ((result = patternVertex.exec(text)) !== null) {\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normal.x, normal.y, normal.z);\n            vertexCountPerFace++;\n            endVertex++;\n          }\n          if (normalCountPerFace !== 1) {\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n          }\n          if (vertexCountPerFace !== 3) {\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n          }\n          faceCounter++;\n        }\n        const start = startVertex;\n        const count = endVertex - startVertex;\n        geometry.addGroup(start, count, groupCount);\n        groupCount++;\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n      return geometry;\n    }\n    function ensureString(buffer) {\n      if (typeof buffer !== \"string\") {\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\n      }\n      return buffer;\n    }\n    function ensureBinary(buffer) {\n      if (typeof buffer === \"string\") {\n        const array_buffer = new Uint8Array(buffer.length);\n        for (let i = 0; i < buffer.length; i++) {\n          array_buffer[i] = buffer.charCodeAt(i) & 255;\n        }\n        return array_buffer.buffer || array_buffer;\n      } else {\n        return buffer;\n      }\n    }\n    const binData = ensureBinary(data);\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n  }\n}\nexport {\n  STLLoader\n};\n"]},"metadata":{},"sourceType":"module"}