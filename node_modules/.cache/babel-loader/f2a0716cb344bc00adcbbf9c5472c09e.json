{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { OrthographicCamera, Scene, UniformsUtils, ShaderMaterial, PlaneGeometry, Mesh, Texture, LinearFilter, MeshBasicMaterial, DoubleSide } from \"three\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\n\nvar ShadowMapViewer = function ShadowMapViewer(light) {\n  _classCallCheck(this, ShadowMapViewer);\n\n  var scope = this;\n  var doRenderLabel = light.name !== void 0 && light.name !== \"\";\n  var userAutoClearSetting;\n  var frame = {\n    x: 10,\n    y: 10,\n    width: 256,\n    height: 256\n  };\n  var camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 10);\n  camera.position.set(0, 0, 2);\n  var scene = new Scene();\n  var shader = UnpackDepthRGBAShader;\n  var uniforms = UniformsUtils.clone(shader.uniforms);\n  var material = new ShaderMaterial({\n    uniforms: uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  var plane = new PlaneGeometry(frame.width, frame.height);\n  var mesh = new Mesh(plane, material);\n  scene.add(mesh);\n  var labelCanvas, labelMesh;\n\n  if (doRenderLabel) {\n    labelCanvas = document.createElement(\"canvas\");\n    var context = labelCanvas.getContext(\"2d\");\n    context.font = \"Bold 20px Arial\";\n    var labelWidth = context.measureText(light.name).width;\n    labelCanvas.width = labelWidth;\n    labelCanvas.height = 25;\n    context.font = \"Bold 20px Arial\";\n    context.fillStyle = \"rgba( 255, 0, 0, 1 )\";\n    context.fillText(light.name, 0, 20);\n    var labelTexture = new Texture(labelCanvas);\n    labelTexture.magFilter = LinearFilter;\n    labelTexture.minFilter = LinearFilter;\n    labelTexture.needsUpdate = true;\n    var labelMaterial = new MeshBasicMaterial({\n      map: labelTexture,\n      side: DoubleSide\n    });\n    labelMaterial.transparent = true;\n    var labelPlane = new PlaneGeometry(labelCanvas.width, labelCanvas.height);\n    labelMesh = new Mesh(labelPlane, labelMaterial);\n    scene.add(labelMesh);\n  }\n\n  function resetPosition() {\n    scope.position.set(scope.position.x, scope.position.y);\n  }\n\n  this.enabled = true;\n  this.size = {\n    width: frame.width,\n    height: frame.height,\n    set: function set(width, height) {\n      this.width = width;\n      this.height = height;\n      mesh.scale.set(this.width / frame.width, this.height / frame.height, 1);\n      resetPosition();\n    }\n  };\n  this.position = {\n    x: frame.x,\n    y: frame.y,\n    set: function set(x, y) {\n      this.x = x;\n      this.y = y;\n      var width = scope.size.width;\n      var height = scope.size.height;\n      mesh.position.set(-window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0);\n      if (doRenderLabel) labelMesh.position.set(mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0);\n    }\n  };\n\n  this.render = function (renderer) {\n    if (this.enabled) {\n      uniforms.tDiffuse.value = light.shadow.map.texture;\n      userAutoClearSetting = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.clearDepth();\n      renderer.render(scene, camera);\n      renderer.autoClear = userAutoClearSetting;\n    }\n  };\n\n  this.updateForWindowResize = function () {\n    if (this.enabled) {\n      camera.left = window.innerWidth / -2;\n      camera.right = window.innerWidth / 2;\n      camera.top = window.innerHeight / 2;\n      camera.bottom = window.innerHeight / -2;\n      camera.updateProjectionMatrix();\n      this.update();\n    }\n  };\n\n  this.update = function () {\n    this.position.set(this.position.x, this.position.y);\n    this.size.set(this.size.width, this.size.height);\n  };\n\n  this.update();\n};\n\nexport { ShadowMapViewer };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/utils/ShadowMapViewer.js"],"names":["OrthographicCamera","Scene","UniformsUtils","ShaderMaterial","PlaneGeometry","Mesh","Texture","LinearFilter","MeshBasicMaterial","DoubleSide","UnpackDepthRGBAShader","ShadowMapViewer","light","scope","doRenderLabel","name","userAutoClearSetting","frame","x","y","width","height","camera","window","innerWidth","innerHeight","position","set","scene","shader","uniforms","clone","material","vertexShader","fragmentShader","plane","mesh","add","labelCanvas","labelMesh","document","createElement","context","getContext","font","labelWidth","measureText","fillStyle","fillText","labelTexture","magFilter","minFilter","needsUpdate","labelMaterial","map","side","transparent","labelPlane","resetPosition","enabled","size","scale","render","renderer","tDiffuse","value","shadow","texture","autoClear","clearDepth","updateForWindowResize","left","right","top","bottom","updateProjectionMatrix","update"],"mappings":"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","sourcesContent":["import { OrthographicCamera, Scene, UniformsUtils, ShaderMaterial, PlaneGeometry, Mesh, Texture, LinearFilter, MeshBasicMaterial, DoubleSide } from \"three\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass ShadowMapViewer {\n  constructor(light) {\n    const scope = this;\n    const doRenderLabel = light.name !== void 0 && light.name !== \"\";\n    let userAutoClearSetting;\n    const frame = {\n      x: 10,\n      y: 10,\n      width: 256,\n      height: 256\n    };\n    const camera = new OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      10\n    );\n    camera.position.set(0, 0, 2);\n    const scene = new Scene();\n    const shader = UnpackDepthRGBAShader;\n    const uniforms = UniformsUtils.clone(shader.uniforms);\n    const material = new ShaderMaterial({\n      uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    const plane = new PlaneGeometry(frame.width, frame.height);\n    const mesh = new Mesh(plane, material);\n    scene.add(mesh);\n    let labelCanvas, labelMesh;\n    if (doRenderLabel) {\n      labelCanvas = document.createElement(\"canvas\");\n      const context = labelCanvas.getContext(\"2d\");\n      context.font = \"Bold 20px Arial\";\n      const labelWidth = context.measureText(light.name).width;\n      labelCanvas.width = labelWidth;\n      labelCanvas.height = 25;\n      context.font = \"Bold 20px Arial\";\n      context.fillStyle = \"rgba( 255, 0, 0, 1 )\";\n      context.fillText(light.name, 0, 20);\n      const labelTexture = new Texture(labelCanvas);\n      labelTexture.magFilter = LinearFilter;\n      labelTexture.minFilter = LinearFilter;\n      labelTexture.needsUpdate = true;\n      const labelMaterial = new MeshBasicMaterial({ map: labelTexture, side: DoubleSide });\n      labelMaterial.transparent = true;\n      const labelPlane = new PlaneGeometry(labelCanvas.width, labelCanvas.height);\n      labelMesh = new Mesh(labelPlane, labelMaterial);\n      scene.add(labelMesh);\n    }\n    function resetPosition() {\n      scope.position.set(scope.position.x, scope.position.y);\n    }\n    this.enabled = true;\n    this.size = {\n      width: frame.width,\n      height: frame.height,\n      set: function(width, height) {\n        this.width = width;\n        this.height = height;\n        mesh.scale.set(this.width / frame.width, this.height / frame.height, 1);\n        resetPosition();\n      }\n    };\n    this.position = {\n      x: frame.x,\n      y: frame.y,\n      set: function(x, y) {\n        this.x = x;\n        this.y = y;\n        const width = scope.size.width;\n        const height = scope.size.height;\n        mesh.position.set(-window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0);\n        if (doRenderLabel)\n          labelMesh.position.set(mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0);\n      }\n    };\n    this.render = function(renderer) {\n      if (this.enabled) {\n        uniforms.tDiffuse.value = light.shadow.map.texture;\n        userAutoClearSetting = renderer.autoClear;\n        renderer.autoClear = false;\n        renderer.clearDepth();\n        renderer.render(scene, camera);\n        renderer.autoClear = userAutoClearSetting;\n      }\n    };\n    this.updateForWindowResize = function() {\n      if (this.enabled) {\n        camera.left = window.innerWidth / -2;\n        camera.right = window.innerWidth / 2;\n        camera.top = window.innerHeight / 2;\n        camera.bottom = window.innerHeight / -2;\n        camera.updateProjectionMatrix();\n        this.update();\n      }\n    };\n    this.update = function() {\n      this.position.set(this.position.x, this.position.y);\n      this.size.set(this.size.width, this.size.height);\n    };\n    this.update();\n  }\n}\nexport {\n  ShadowMapViewer\n};\n"]},"metadata":{},"sourceType":"module"}