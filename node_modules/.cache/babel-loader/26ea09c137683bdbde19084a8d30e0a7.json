{"ast":null,"code":"import { Vector2 } from \"three\";\nvar TriangleBlurShader = {\n  uniforms: {\n    texture: {\n      value: null\n    },\n    delta: {\n      value: /* @__PURE__ */new Vector2(1, 1)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"#define ITERATIONS 10.0\", \"uniform sampler2D texture;\", \"uniform vec2 delta;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 color = vec4( 0.0 );\", \"\tfloat total = 0.0;\", // randomize the lookup values to hide the fixed number of samples\n  \"\tfloat offset = rand( vUv );\", \"\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\", \"\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\", \"\t\tfloat weight = 1.0 - abs( percent );\", \"\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\", \"\t\ttotal += weight;\", \"\t}\", \"\tgl_FragColor = color / total;\", \"}\"].join(\"\\n\")\n};\nexport { TriangleBlurShader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/shaders/TriangleBlurShader.js"],"names":["Vector2","TriangleBlurShader","uniforms","texture","value","delta","vertexShader","join","fragmentShader"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADD;AAERC,IAAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAE,eAAgB,IAAIJ,OAAJ,CAAY,CAAZ,EAAe,CAAf;AAAzB;AAFC,GADe;AAKzBM,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CALW;AAYzBC,EAAAA,cAAc,EAAE,CACd,mBADc,EAEd,yBAFc,EAGd,4BAHc,EAId,qBAJc,EAKd,mBALc,EAMd,eANc,EAOd,4BAPc,EAQd,qBARc,EASd;AACA,gCAVc,EAWd,yDAXc,EAYd,sDAZc,EAad,wCAbc,EAcd,kEAdc,EAed,oBAfc,EAgBd,IAhBc,EAiBd,gCAjBc,EAkBd,GAlBc,EAmBdD,IAnBc,CAmBT,IAnBS;AAZS,CAA3B;AAiCA,SACEN,kBADF","sourcesContent":["import { Vector2 } from \"three\";\nconst TriangleBlurShader = {\n  uniforms: {\n    texture: { value: null },\n    delta: { value: /* @__PURE__ */ new Vector2(1, 1) }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    \"#define ITERATIONS 10.0\",\n    \"uniform sampler2D texture;\",\n    \"uniform vec2 delta;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec4 color = vec4( 0.0 );\",\n    \"\tfloat total = 0.0;\",\n    // randomize the lookup values to hide the fixed number of samples\n    \"\tfloat offset = rand( vUv );\",\n    \"\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\",\n    \"\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\",\n    \"\t\tfloat weight = 1.0 - abs( percent );\",\n    \"\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\",\n    \"\t\ttotal += weight;\",\n    \"\t}\",\n    \"\tgl_FragColor = color / total;\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  TriangleBlurShader\n};\n"]},"metadata":{},"sourceType":"module"}