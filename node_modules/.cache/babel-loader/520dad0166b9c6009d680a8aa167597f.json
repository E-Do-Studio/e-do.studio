{"ast":null,"code":"import _slicedToArray from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\n\nvar _taskCache = /* @__PURE__ */new WeakMap();\n\nvar Rhino3dmLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(Rhino3dmLoader, _Loader);\n\n  var _super = _createSuper(Rhino3dmLoader);\n\n  function Rhino3dmLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, Rhino3dmLoader);\n\n    _this = _super.call(this, manager);\n    _this.libraryPath = \"\";\n    _this.libraryPending = null;\n    _this.libraryBinary = null;\n    _this.libraryConfig = {};\n    _this.url = \"\";\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = {};\n    _this.materials = [];\n    return _this;\n  }\n\n  _createClass(Rhino3dmLoader, [{\n    key: \"setLibraryPath\",\n    value: function setLibraryPath(path) {\n      this.libraryPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      this.url = url;\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n\n        _this2.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      console.log(\"Task load: \", this.workerPool.map(function (worker) {\n        return worker._taskLoad;\n      }));\n    }\n  }, {\n    key: \"decodeObjects\",\n    value: function decodeObjects(buffer, url) {\n      var _this3 = this;\n\n      var worker;\n      var taskID;\n      var taskCost = buffer.byteLength;\n\n      var objectPending = this._getWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: \"decode\",\n            id: taskID,\n            buffer: buffer\n          }, [buffer]);\n        });\n      }).then(function (message) {\n        return _this3._createGeometry(message.data);\n      });\n\n      objectPending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          _this3._releaseTask(worker, taskID);\n        }\n      });\n\n      _taskCache.set(buffer, {\n        url: url,\n        promise: objectPending\n      });\n\n      return objectPending;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, onLoad, onError) {\n      this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n    }\n  }, {\n    key: \"_compareMaterials\",\n    value: function _compareMaterials(material) {\n      var mat = {};\n      mat.name = material.name;\n      mat.color = {};\n      mat.color.r = material.color.r;\n      mat.color.g = material.color.g;\n      mat.color.b = material.color.b;\n      mat.type = material.type;\n\n      for (var i = 0; i < this.materials.length; i++) {\n        var m = this.materials[i];\n        var _mat = {};\n        _mat.name = m.name;\n        _mat.color = {};\n        _mat.color.r = m.color.r;\n        _mat.color.g = m.color.g;\n        _mat.color.b = m.color.b;\n        _mat.type = m.type;\n\n        if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n          return m;\n        }\n      }\n\n      this.materials.push(material);\n      return material;\n    }\n  }, {\n    key: \"_createMaterial\",\n    value: function _createMaterial(material) {\n      if (material === void 0) {\n        return new MeshStandardMaterial({\n          color: new Color(1, 1, 1),\n          metalness: 0.8,\n          name: \"default\",\n          side: 2\n        });\n      }\n\n      var _diffuseColor = material.diffuseColor;\n      var diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n\n      if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n        diffusecolor.r = 1;\n        diffusecolor.g = 1;\n        diffusecolor.b = 1;\n      }\n\n      var mat = new MeshStandardMaterial({\n        color: diffusecolor,\n        name: material.name,\n        side: 2,\n        transparent: material.transparency > 0 ? true : false,\n        opacity: 1 - material.transparency\n      });\n      var textureLoader = new TextureLoader();\n\n      for (var i = 0; i < material.textures.length; i++) {\n        var texture = material.textures[i];\n\n        if (texture.image !== null) {\n          var map = textureLoader.load(texture.image);\n\n          switch (texture.type) {\n            case \"Diffuse\":\n              mat.map = map;\n              break;\n\n            case \"Bump\":\n              mat.bumpMap = map;\n              break;\n\n            case \"Transparency\":\n              mat.alphaMap = map;\n              mat.transparent = true;\n              break;\n\n            case \"Emap\":\n              mat.envMap = map;\n              break;\n          }\n        }\n      }\n\n      return mat;\n    }\n  }, {\n    key: \"_createGeometry\",\n    value: function _createGeometry(data) {\n      var object = new Object3D();\n      var instanceDefinitionObjects = [];\n      var instanceDefinitions = [];\n      var instanceReferences = [];\n      object.userData[\"layers\"] = data.layers;\n      object.userData[\"groups\"] = data.groups;\n      object.userData[\"settings\"] = data.settings;\n      object.userData[\"objectType\"] = \"File3dm\";\n      object.userData[\"materials\"] = null;\n      object.name = this.url;\n      var objects = data.objects;\n      var materials = data.materials;\n\n      for (var i = 0; i < objects.length; i++) {\n        var obj = objects[i];\n        var attributes = obj.attributes;\n\n        switch (obj.objectType) {\n          case \"InstanceDefinition\":\n            instanceDefinitions.push(obj);\n            break;\n\n          case \"InstanceReference\":\n            instanceReferences.push(obj);\n            break;\n\n          default:\n            var _object = void 0;\n\n            if (attributes.materialIndex >= 0) {\n              var rMaterial = materials[attributes.materialIndex];\n\n              var material = this._createMaterial(rMaterial);\n\n              material = this._compareMaterials(material);\n              _object = this._createObject(obj, material);\n            } else {\n              var _material2 = this._createMaterial();\n\n              _object = this._createObject(obj, _material2);\n            }\n\n            if (_object === void 0) {\n              continue;\n            }\n\n            var layer = data.layers[attributes.layerIndex];\n            _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n\n            if (attributes.isInstanceDefinitionObject) {\n              instanceDefinitionObjects.push(_object);\n            } else {\n              object.add(_object);\n            }\n\n            break;\n        }\n      }\n\n      for (var _i = 0; _i < instanceDefinitions.length; _i++) {\n        var iDef = instanceDefinitions[_i];\n        objects = [];\n\n        for (var j = 0; j < iDef.attributes.objectIds.length; j++) {\n          var objId = iDef.attributes.objectIds[j];\n\n          for (var p = 0; p < instanceDefinitionObjects.length; p++) {\n            var idoId = instanceDefinitionObjects[p].userData.attributes.id;\n\n            if (objId === idoId) {\n              objects.push(instanceDefinitionObjects[p]);\n            }\n          }\n        }\n\n        for (var _j = 0; _j < instanceReferences.length; _j++) {\n          var iRef = instanceReferences[_j];\n\n          if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n            var iRefObject = new Object3D();\n            var xf = iRef.geometry.xform.array;\n            var matrix = new Matrix4();\n            matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n            iRefObject.applyMatrix4(matrix);\n\n            for (var _p = 0; _p < objects.length; _p++) {\n              iRefObject.add(objects[_p].clone(true));\n            }\n\n            object.add(iRefObject);\n          }\n        }\n      }\n\n      object.userData[\"materials\"] = this.materials;\n      return object;\n    }\n  }, {\n    key: \"_createObject\",\n    value: function _createObject(obj, mat) {\n      var loader = new BufferGeometryLoader();\n      var attributes = obj.attributes;\n\n      var geometry, material, _color, color;\n\n      switch (obj.objectType) {\n        case \"Point\":\n        case \"PointSet\":\n          geometry = loader.parse(obj.geometry);\n\n          if (geometry.attributes.hasOwnProperty(\"color\")) {\n            material = new PointsMaterial({\n              vertexColors: true,\n              sizeAttenuation: false,\n              size: 2\n            });\n          } else {\n            _color = attributes.drawColor;\n            color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n            material = new PointsMaterial({\n              color: color,\n              sizeAttenuation: false,\n              size: 2\n            });\n          }\n\n          material = this._compareMaterials(material);\n          var points = new Points(geometry, material);\n          points.userData[\"attributes\"] = attributes;\n          points.userData[\"objectType\"] = obj.objectType;\n\n          if (attributes.name) {\n            points.name = attributes.name;\n          }\n\n          return points;\n\n        case \"Mesh\":\n        case \"Extrusion\":\n        case \"SubD\":\n        case \"Brep\":\n          if (obj.geometry === null) return;\n          geometry = loader.parse(obj.geometry);\n\n          if (geometry.attributes.hasOwnProperty(\"color\")) {\n            mat.vertexColors = true;\n          }\n\n          if (mat === null) {\n            mat = this._createMaterial();\n            mat = this._compareMaterials(mat);\n          }\n\n          var mesh = new Mesh(geometry, mat);\n          mesh.castShadow = attributes.castsShadows;\n          mesh.receiveShadow = attributes.receivesShadows;\n          mesh.userData[\"attributes\"] = attributes;\n          mesh.userData[\"objectType\"] = obj.objectType;\n\n          if (attributes.name) {\n            mesh.name = attributes.name;\n          }\n\n          return mesh;\n\n        case \"Curve\":\n          geometry = loader.parse(obj.geometry);\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new LineBasicMaterial({\n            color: color\n          });\n          material = this._compareMaterials(material);\n          var lines = new Line(geometry, material);\n          lines.userData[\"attributes\"] = attributes;\n          lines.userData[\"objectType\"] = obj.objectType;\n\n          if (attributes.name) {\n            lines.name = attributes.name;\n          }\n\n          return lines;\n\n        case \"TextDot\":\n          geometry = obj.geometry;\n          var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n          var font = \"\".concat(geometry.fontHeight, \"px \").concat(geometry.fontFace);\n          ctx.font = font;\n          var width = ctx.measureText(geometry.text).width + 10;\n          var height = geometry.fontHeight + 10;\n          var r = window.devicePixelRatio;\n          ctx.canvas.width = width * r;\n          ctx.canvas.height = height * r;\n          ctx.canvas.style.width = width + \"px\";\n          ctx.canvas.style.height = height + \"px\";\n          ctx.setTransform(r, 0, 0, r, 0, 0);\n          ctx.font = font;\n          ctx.textBaseline = \"middle\";\n          ctx.textAlign = \"center\";\n          color = attributes.drawColor;\n          ctx.fillStyle = \"rgba(\".concat(color.r, \",\").concat(color.g, \",\").concat(color.b, \",\").concat(color.a, \")\");\n          ctx.fillRect(0, 0, width, height);\n          ctx.fillStyle = \"white\";\n          ctx.fillText(geometry.text, width / 2, height / 2);\n          var texture = new CanvasTexture(ctx.canvas);\n          texture.minFilter = LinearFilter;\n          texture.wrapS = ClampToEdgeWrapping;\n          texture.wrapT = ClampToEdgeWrapping;\n          material = new SpriteMaterial({\n            map: texture,\n            depthTest: false\n          });\n          var sprite = new Sprite(material);\n          sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n          sprite.scale.set(width / 10, height / 10, 1);\n          sprite.userData[\"attributes\"] = attributes;\n          sprite.userData[\"objectType\"] = obj.objectType;\n\n          if (attributes.name) {\n            sprite.name = attributes.name;\n          }\n\n          return sprite;\n\n        case \"Light\":\n          geometry = obj.geometry;\n          var light;\n\n          if (geometry.isDirectionalLight) {\n            light = new DirectionalLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isPointLight) {\n            light = new PointLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isRectangularLight) {\n            light = new RectAreaLight();\n            var width2 = Math.abs(geometry.width[2]);\n            var height2 = Math.abs(geometry.length[0]);\n            light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n            light.height = height2;\n            light.width = width2;\n            light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n          } else if (geometry.isSpotLight) {\n            light = new SpotLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.angle = geometry.spotAngleRadians;\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isLinearLight) {\n            console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n            return;\n          }\n\n          if (light) {\n            light.intensity = geometry.intensity;\n            _color = geometry.diffuse;\n            color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n            light.color = color;\n            light.userData[\"attributes\"] = attributes;\n            light.userData[\"objectType\"] = obj.objectType;\n          }\n\n          return light;\n      }\n    }\n  }, {\n    key: \"_initLibrary\",\n    value: function _initLibrary() {\n      var _this4 = this;\n\n      if (!this.libraryPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.libraryPath);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n        });\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.libraryPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n        });\n        this.libraryPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              jsContent2 = _ref2[0],\n              binaryContent2 = _ref2[1];\n\n          _this4.libraryConfig.wasmBinary = binaryContent2;\n          var fn = Rhino3dmWorker.toString();\n          var body = [\"/* rhino3dm.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        });\n      }\n\n      return this.libraryPending;\n    }\n  }, {\n    key: \"_getWorker\",\n    value: function _getWorker(taskCost) {\n      var _this5 = this;\n\n      return this._initLibrary().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var worker2 = new Worker(_this5.workerSourceURL);\n          worker2._callbacks = {};\n          worker2._taskCosts = {};\n          worker2._taskLoad = 0;\n          worker2.postMessage({\n            type: \"init\",\n            libraryConfig: _this5.libraryConfig\n          });\n\n          worker2.onmessage = function (e) {\n            var message = e.data;\n\n            switch (message.type) {\n              case \"decode\":\n                worker2._callbacks[message.id].resolve(message);\n\n                break;\n\n              case \"error\":\n                worker2._callbacks[message.id].reject(message);\n\n                break;\n\n              default:\n                console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n\n          _this5.workerPool.push(worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"_releaseTask\",\n    value: function _releaseTask(worker, taskID) {\n      worker._taskLoad -= worker._taskCosts[taskID];\n      delete worker._callbacks[taskID];\n      delete worker._taskCosts[taskID];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; ++i) {\n        this.workerPool[i].terminate();\n      }\n\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n\n  return Rhino3dmLoader;\n}(Loader);\n\nfunction Rhino3dmWorker() {\n  var libraryPending;\n  var libraryConfig;\n  var rhino;\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        var wasmBinary = libraryConfig.wasmBinary;\n        var RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          RhinoModule = {\n            wasmBinary: wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule);\n        }).then(function () {\n          rhino = RhinoModule;\n        });\n        break;\n\n      case \"decode\":\n        var buffer = message.buffer;\n        libraryPending.then(function () {\n          var data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: \"decode\",\n            id: message.id,\n            data: data\n          });\n        });\n        break;\n    }\n  };\n\n  function decodeObjects(rhino2, buffer) {\n    var arr = new Uint8Array(buffer);\n    var doc = rhino2.File3dm.fromByteArray(arr);\n    var objects = [];\n    var materials = [];\n    var layers = [];\n    var views = [];\n    var namedViews = [];\n    var groups = [];\n    var objs = doc.objects();\n    var cnt = objs.count;\n\n    for (var i = 0; i < cnt; i++) {\n      var _object = objs.get(i);\n\n      var object = extractObjectData(_object, doc);\n\n      _object.delete();\n\n      if (object) {\n        objects.push(object);\n      }\n    }\n\n    for (var _i2 = 0; _i2 < doc.instanceDefinitions().count(); _i2++) {\n      var idef = doc.instanceDefinitions().get(_i2);\n      var idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: \"InstanceDefinition\"\n      });\n    }\n\n    var textureTypes = [// rhino.TextureType.Bitmap,\n    rhino2.TextureType.Diffuse, rhino2.TextureType.Bump, rhino2.TextureType.Transparency, rhino2.TextureType.Opacity, rhino2.TextureType.Emap];\n    var pbrTextureTypes = [rhino2.TextureType.PBR_BaseColor, rhino2.TextureType.PBR_Subsurface, rhino2.TextureType.PBR_SubsurfaceScattering, rhino2.TextureType.PBR_SubsurfaceScatteringRadius, rhino2.TextureType.PBR_Metallic, rhino2.TextureType.PBR_Specular, rhino2.TextureType.PBR_SpecularTint, rhino2.TextureType.PBR_Roughness, rhino2.TextureType.PBR_Anisotropic, rhino2.TextureType.PBR_Anisotropic_Rotation, rhino2.TextureType.PBR_Sheen, rhino2.TextureType.PBR_SheenTint, rhino2.TextureType.PBR_Clearcoat, rhino2.TextureType.PBR_ClearcoatBump, rhino2.TextureType.PBR_ClearcoatRoughness, rhino2.TextureType.PBR_OpacityIor, rhino2.TextureType.PBR_OpacityRoughness, rhino2.TextureType.PBR_Emission, rhino2.TextureType.PBR_AmbientOcclusion, rhino2.TextureType.PBR_Displacement];\n\n    for (var _i3 = 0; _i3 < doc.materials().count(); _i3++) {\n      var _material = doc.materials().get(_i3);\n\n      var _pbrMaterial = _material.physicallyBased();\n\n      var material = extractProperties(_material);\n      var textures = [];\n\n      for (var j = 0; j < textureTypes.length; j++) {\n        var _texture = _material.getTexture(textureTypes[j]);\n\n        if (_texture) {\n          var textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          var texture = {\n            type: textureType\n          };\n          var image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(\"THREE.3DMLoader: Image for \".concat(textureType, \" texture not embedded in file.\"));\n            texture.image = null;\n          }\n\n          textures.push(texture);\n\n          _texture.delete();\n        }\n      }\n\n      material.textures = textures;\n\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n\n        for (var _j2 = 0; _j2 < pbrTextureTypes.length; _j2++) {\n          var _texture2 = _material.getTexture(textureTypes[_j2]);\n\n          if (_texture2) {\n            var _image = doc.getEmbeddedFileAsBase64(_texture2.fileName);\n\n            var _textureType = textureTypes[_j2].constructor.name;\n            _textureType = _textureType.substring(12, _textureType.length);\n            var _texture3 = {\n              type: _textureType,\n              image: \"data:image/png;base64,\" + _image\n            };\n            textures.push(_texture3);\n\n            _texture2.delete();\n          }\n        }\n\n        var pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n\n      materials.push(material);\n\n      _material.delete();\n\n      _pbrMaterial.delete();\n    }\n\n    for (var _i4 = 0; _i4 < doc.layers().count(); _i4++) {\n      var _layer = doc.layers().get(_i4);\n\n      var layer = extractProperties(_layer);\n      layers.push(layer);\n\n      _layer.delete();\n    }\n\n    for (var _i5 = 0; _i5 < doc.views().count(); _i5++) {\n      var _view = doc.views().get(_i5);\n\n      var view = extractProperties(_view);\n      views.push(view);\n\n      _view.delete();\n    }\n\n    for (var _i6 = 0; _i6 < doc.namedViews().count(); _i6++) {\n      var _namedView = doc.namedViews().get(_i6);\n\n      var namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n\n      _namedView.delete();\n    }\n\n    for (var _i7 = 0; _i7 < doc.groups().count(); _i7++) {\n      var _group = doc.groups().get(_i7);\n\n      var group = extractProperties(_group);\n      groups.push(group);\n\n      _group.delete();\n    }\n\n    var settings = extractProperties(doc.settings());\n    doc.delete();\n    return {\n      objects: objects,\n      materials: materials,\n      layers: layers,\n      views: views,\n      namedViews: namedViews,\n      groups: groups,\n      settings: settings\n    };\n  }\n\n  function extractObjectData(object, doc) {\n    var _geometry = object.geometry();\n\n    var _attributes = object.attributes();\n\n    var objectType = _geometry.objectType;\n    var geometry, attributes, position, data, mesh;\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        var pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n\n        for (var j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n\n      case rhino.ObjectType.Point:\n        var pt = _geometry.location;\n        position = {};\n        var color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n\n        var _color = _attributes.drawColor(doc);\n\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n\n      case rhino.ObjectType.Brep:\n        var faces = _geometry.faces();\n\n        mesh = new rhino.Mesh();\n\n        for (var faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          var face = faces.get(faceIndex);\n\n          var _mesh = face.getMesh(rhino.MeshType.Any);\n\n          if (_mesh) {\n            mesh.append(_mesh);\n\n            _mesh.delete();\n          }\n\n          face.delete();\n        }\n\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n\n        mesh.delete();\n        break;\n\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      default:\n        console.warn(\"THREE.3DMLoader: TODO: Implement \".concat(objectType.constructor.name));\n        break;\n    }\n\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry: geometry,\n        attributes: attributes,\n        objectType: objectType\n      };\n    } else {\n      console.warn(\"THREE.3DMLoader: \".concat(objectType.constructor.name, \" has no associated mesh geometry.\"));\n    }\n  }\n\n  function extractProperties(object) {\n    var result = {};\n\n    for (var property in object) {\n      var value = object[property];\n\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      } else {}\n    }\n\n    return result;\n  }\n\n  function curveToPoints(curve, pointLimit) {\n    var pointCount = pointLimit;\n    var rc = [];\n    var ts = [];\n\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n\n      for (var i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.PolyCurve) {\n      var segmentCount = curve.segmentCount;\n\n      for (var _i8 = 0; _i8 < segmentCount; _i8++) {\n        var segment = curve.segmentCurve(_i8);\n        var segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      var pLine = curve.tryGetPolyline();\n\n      for (var _i9 = 0; _i9 < pLine.count; _i9++) {\n        rc.push(pLine.get(_i9));\n      }\n\n      pLine.delete();\n      return rc;\n    }\n\n    var domain = curve.domain;\n    var divisions = pointCount - 1;\n\n    for (var j = 0; j < pointCount; j++) {\n      var t = domain[0] + j / divisions * (domain[1] - domain[0]);\n\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n\n      var tan = curve.tangentAt(t);\n      var prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      var tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      var ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      var denominator = Math.sqrt(tS * ptS);\n      var angle = void 0;\n\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        var theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n\n    rc = ts.map(function (t) {\n      return curve.pointAt(t);\n    });\n    return rc;\n  }\n}\n\nexport { Rhino3dmLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/3DMLoader.js"],"names":["Loader","FileLoader","MeshStandardMaterial","Color","TextureLoader","Object3D","Matrix4","BufferGeometryLoader","DirectionalLight","PointLight","RectAreaLight","Vector3","SpotLight","CanvasTexture","LinearFilter","ClampToEdgeWrapping","SpriteMaterial","Sprite","LineBasicMaterial","Line","Mesh","PointsMaterial","Points","_taskCache","WeakMap","Rhino3dmLoader","manager","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","path","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","load","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","console","log","map","worker","_taskLoad","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createMaterial","_compareMaterials","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","parse","hasOwnProperty","vertexColors","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","wrapS","wrapT","depthTest","sprite","position","point","scale","light","isDirectionalLight","location","target","direction","shadow","normalBias","isPointLight","isRectangularLight","width2","Math","abs","height2","lookAt","isSpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","jsLoader","jsContent","binaryLoader","binaryContent","all","jsContent2","binaryContent2","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_initLibrary","worker2","Worker","_taskCosts","onmessage","e","error","sort","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","rhino2","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","constructor","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","value","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","concat","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = \"\";\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = \"\";\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = {};\n    this.materials = [];\n  }\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  debug() {\n    console.log(\n      \"Task load: \",\n      this.workerPool.map((worker) => worker._taskLoad)\n    );\n  }\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n    const objectPending = this._getWorker(taskCost).then((_worker) => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"decode\", id: taskID, buffer }, [buffer]);\n      });\n    }).then((message) => this._createGeometry(message.data));\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n      }\n    });\n    _taskCache.set(buffer, {\n      url,\n      promise: objectPending\n    });\n    return objectPending;\n  }\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n  }\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n    this.materials.push(material);\n    return material;\n  }\n  _createMaterial(material) {\n    if (material === void 0) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: \"default\",\n        side: 2\n      });\n    }\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    }\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n        switch (texture.type) {\n          case \"Diffuse\":\n            mat.map = map;\n            break;\n          case \"Bump\":\n            mat.bumpMap = map;\n            break;\n          case \"Transparency\":\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case \"Emap\":\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n    return mat;\n  }\n  _createGeometry(data) {\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData[\"layers\"] = data.layers;\n    object.userData[\"groups\"] = data.groups;\n    object.userData[\"settings\"] = data.settings;\n    object.userData[\"objectType\"] = \"File3dm\";\n    object.userData[\"materials\"] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n      switch (obj.objectType) {\n        case \"InstanceDefinition\":\n          instanceDefinitions.push(obj);\n          break;\n        case \"InstanceReference\":\n          instanceReferences.push(obj);\n          break;\n        default:\n          let _object;\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n            let material = this._createMaterial(rMaterial);\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n            _object = this._createObject(obj, material);\n          }\n          if (_object === void 0) {\n            continue;\n          }\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n          break;\n      }\n    }\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      }\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(\n            xf[0],\n            xf[1],\n            xf[2],\n            xf[3],\n            xf[4],\n            xf[5],\n            xf[6],\n            xf[7],\n            xf[8],\n            xf[9],\n            xf[10],\n            xf[11],\n            xf[12],\n            xf[13],\n            xf[14],\n            xf[15]\n          );\n          iRefObject.applyMatrix4(matrix);\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n          object.add(iRefObject);\n        }\n      }\n    }\n    object.userData[\"materials\"] = this.materials;\n    return object;\n  }\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n    let geometry, material, _color, color;\n    switch (obj.objectType) {\n      case \"Point\":\n      case \"PointSet\":\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          material = new PointsMaterial({ vertexColors: true, sizeAttenuation: false, size: 2 });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new PointsMaterial({ color, sizeAttenuation: false, size: 2 });\n        }\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData[\"attributes\"] = attributes;\n        points.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n        return points;\n      case \"Mesh\":\n      case \"Extrusion\":\n      case \"SubD\":\n      case \"Brep\":\n        if (obj.geometry === null)\n          return;\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          mat.vertexColors = true;\n        }\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData[\"attributes\"] = attributes;\n        mesh.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n        return mesh;\n      case \"Curve\":\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n        material = new LineBasicMaterial({ color });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData[\"attributes\"] = attributes;\n        lines.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n        return lines;\n      case \"TextDot\":\n        geometry = obj.geometry;\n        const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + \"px\";\n        ctx.canvas.style.height = height + \"px\";\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = \"white\";\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({ map: texture, depthTest: false });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1);\n        sprite.userData[\"attributes\"] = attributes;\n        sprite.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n        return sprite;\n      case \"Light\":\n        geometry = obj.geometry;\n        let light;\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width2 = Math.abs(geometry.width[2]);\n          const height2 = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n          light.height = height2;\n          light.width = width2;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n          return;\n        }\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          light.color = color;\n          light.userData[\"attributes\"] = attributes;\n          light.userData[\"objectType\"] = obj.objectType;\n        }\n        return light;\n    }\n  }\n  _initLibrary() {\n    if (!this.libraryPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        this.libraryConfig.wasmBinary = binaryContent2;\n        const fn = Rhino3dmWorker.toString();\n        const body = [\n          \"/* rhino3dm.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n    return this.libraryPending;\n  }\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskCosts = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          libraryConfig: this.libraryConfig\n        });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"decode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function(resolve) {\n          RhinoModule = { wasmBinary, onRuntimeInitialized: resolve };\n          rhino3dm(RhinoModule);\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n      case \"decode\":\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({ type: \"decode\", id: message.id, data });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino2, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino2.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = [];\n    const objs = doc.objects();\n    const cnt = objs.count;\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n      const object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({ geometry: null, attributes: idefAttributes, objectType: \"InstanceDefinition\" });\n    }\n    const textureTypes = [\n      // rhino.TextureType.Bitmap,\n      rhino2.TextureType.Diffuse,\n      rhino2.TextureType.Bump,\n      rhino2.TextureType.Transparency,\n      rhino2.TextureType.Opacity,\n      rhino2.TextureType.Emap\n    ];\n    const pbrTextureTypes = [\n      rhino2.TextureType.PBR_BaseColor,\n      rhino2.TextureType.PBR_Subsurface,\n      rhino2.TextureType.PBR_SubsurfaceScattering,\n      rhino2.TextureType.PBR_SubsurfaceScatteringRadius,\n      rhino2.TextureType.PBR_Metallic,\n      rhino2.TextureType.PBR_Specular,\n      rhino2.TextureType.PBR_SpecularTint,\n      rhino2.TextureType.PBR_Roughness,\n      rhino2.TextureType.PBR_Anisotropic,\n      rhino2.TextureType.PBR_Anisotropic_Rotation,\n      rhino2.TextureType.PBR_Sheen,\n      rhino2.TextureType.PBR_SheenTint,\n      rhino2.TextureType.PBR_Clearcoat,\n      rhino2.TextureType.PBR_ClearcoatBump,\n      rhino2.TextureType.PBR_ClearcoatRoughness,\n      rhino2.TextureType.PBR_OpacityIor,\n      rhino2.TextureType.PBR_OpacityRoughness,\n      rhino2.TextureType.PBR_Emission,\n      rhino2.TextureType.PBR_AmbientOcclusion,\n      rhino2.TextureType.PBR_Displacement\n    ];\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n      const _pbrMaterial = _material.physicallyBased();\n      let material = extractProperties(_material);\n      const textures = [];\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = { type: textureType };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = { type: textureType, image: \"data:image/png;base64,\" + image };\n            textures.push(texture);\n            _texture.delete();\n          }\n        }\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    }\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n      const view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n      const group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n    const settings = extractProperties(doc.settings());\n    doc.delete();\n    return { objects, materials, layers, views, namedViews, groups, settings };\n  }\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n    const _attributes = object.attributes();\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh;\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n        const _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return { geometry, attributes, objectType };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n  function extractProperties(object) {\n    const result = {};\n    for (const property in object) {\n      const value = object[property];\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = { name: value.constructor.name, value: value.value };\n        } else {\n          result[property] = value;\n        }\n      } else {\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n      pLine.delete();\n      return rc;\n    }\n    const domain = curve.domain;\n    const divisions = pointCount - 1;\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1)\n        continue;\n      ts.push(t);\n    }\n    rc = ts.map((t) => curve.pointAt(t));\n    return rc;\n  }\n}\nexport {\n  Rhino3dmLoader\n};\n"]},"metadata":{},"sourceType":"module"}