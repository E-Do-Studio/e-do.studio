{"ast":null,"code":"import { Line, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Mesh, MeshBasicMaterial, BackSide } from \"three\";\n\nclass RectAreaLightHelper extends Line {\n  constructor(light, color) {\n    const positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    const material = new LineBasicMaterial({\n      fog: false\n    });\n    super(geometry, material);\n    this.light = light;\n    this.color = color;\n    this.type = \"RectAreaLightHelper\";\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute(\"position\", new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      side: BackSide,\n      fog: false\n    })));\n  }\n\n  updateMatrixWorld() {\n    this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\n\n    if (this.color !== void 0) {\n      this.material.color.set(this.color);\n      this.children[0].material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n      const c = this.material.color;\n      const max = Math.max(c.r, c.g, c.b);\n      if (max > 1) c.multiplyScalar(1 / max);\n      this.children[0].material.color.copy(this.material.color);\n    }\n\n    this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld);\n    this.children[0].matrixWorld.copy(this.matrixWorld);\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n\n}\n\nexport { RectAreaLightHelper };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/helpers/RectAreaLightHelper.js"],"names":["Line","BufferGeometry","Float32BufferAttribute","LineBasicMaterial","Mesh","MeshBasicMaterial","BackSide","RectAreaLightHelper","constructor","light","color","positions","geometry","setAttribute","computeBoundingSphere","material","fog","type","positions2","geometry2","add","side","updateMatrixWorld","scale","set","width","height","children","copy","multiplyScalar","intensity","c","max","Math","r","g","b","matrixWorld","extractRotation","copyPosition","dispose"],"mappings":"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","sourcesContent":["import { Line, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Mesh, MeshBasicMaterial, BackSide } from \"three\";\nclass RectAreaLightHelper extends Line {\n  constructor(light, color) {\n    const positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    const material = new LineBasicMaterial({ fog: false });\n    super(geometry, material);\n    this.light = light;\n    this.color = color;\n    this.type = \"RectAreaLightHelper\";\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute(\"position\", new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({ side: BackSide, fog: false })));\n  }\n  updateMatrixWorld() {\n    this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\n    if (this.color !== void 0) {\n      this.material.color.set(this.color);\n      this.children[0].material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n      const c = this.material.color;\n      const max = Math.max(c.r, c.g, c.b);\n      if (max > 1)\n        c.multiplyScalar(1 / max);\n      this.children[0].material.color.copy(this.material.color);\n    }\n    this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld);\n    this.children[0].matrixWorld.copy(this.matrixWorld);\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n}\nexport {\n  RectAreaLightHelper\n};\n"]},"metadata":{},"sourceType":"module"}