{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from \"three\";\n\nclass ColladaExporter {\n  constructor() {\n    __publicField(this, \"options\");\n\n    __publicField(this, \"geometryInfo\");\n\n    __publicField(this, \"materialMap\");\n\n    __publicField(this, \"imageMap\");\n\n    __publicField(this, \"textures\");\n\n    __publicField(this, \"libraryImages\");\n\n    __publicField(this, \"libraryGeometries\");\n\n    __publicField(this, \"libraryEffects\");\n\n    __publicField(this, \"libraryMaterials\");\n\n    __publicField(this, \"canvas\");\n\n    __publicField(this, \"ctx\");\n\n    __publicField(this, \"transMat\");\n\n    __publicField(this, \"getFuncs\", [\"getX\", \"getY\", \"getZ\", \"getW\"]);\n\n    this.options = {\n      version: \"1.4.1\",\n      author: null,\n      textureDirectory: \"\",\n      upAxis: \"Y_UP\",\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = /* @__PURE__ */new WeakMap();\n    this.materialMap = /* @__PURE__ */new WeakMap();\n    this.imageMap = /* @__PURE__ */new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n\n  parse(object, onDone, options = {}) {\n    this.options = { ...this.options,\n      ...options\n    };\n\n    if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n      console.error(\"ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.\");\n      return null;\n    }\n\n    if (this.options.unitName !== null && this.options.unitMeter === null) {\n      console.error(\"ColladaExporter: unitMeter needs to be specified if unitName is specified.\");\n      return null;\n    }\n\n    if (this.options.unitMeter !== null && this.options.unitName === null) {\n      console.error(\"ColladaExporter: unitName needs to be specified if unitMeter is specified.\");\n      return null;\n    }\n\n    if (this.options.textureDirectory !== \"\") {\n      this.options.textureDirectory = `${this.options.textureDirectory}/`.replace(/\\\\/g, \"/\").replace(/\\/+/g, \"/\");\n    }\n\n    if (this.options.version !== \"1.4.1\" && this.options.version !== \"1.5.0\") {\n      console.warn(`ColladaExporter : Version ${this.options.version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    }\n\n    const libraryVisualScenes = this.processObject(object);\n    const specLink = this.options.version === \"1.4.1\" ? \"http://www.collada.org/2005/11/COLLADASchema\" : \"https://www.khronos.org/collada/\";\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${this.options.version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${this.options.author !== null ? `<author>${this.options.author}</author>` : \"\"}</contributor>${`<created>${/* @__PURE__ */new Date().toISOString()}</created>`}${`<modified>${/* @__PURE__ */new Date().toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${this.libraryImages.join(\"\")}</library_images>`;\n    dae += `<library_effects>${this.libraryEffects.join(\"\")}</library_effects>`;\n    dae += `<library_materials>${this.libraryMaterials.join(\"\")}</library_materials>`;\n    dae += `<library_geometries>${this.libraryGeometries.join(\"\")}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += \"</COLLADA>\";\n    const res = {\n      data: this.format(dae),\n      textures: this.textures\n    };\n\n    if (typeof onDone === \"function\") {\n      requestAnimationFrame(() => onDone(res));\n    }\n\n    return res;\n  } // Convert the urdf xml into a well-formatted, indented format\n\n\n  format(urdf) {\n    var _a, _b;\n\n    const IS_END_TAG = /^<\\//;\n    const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n    const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n    const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : \"\";\n\n    let tagnum = 0;\n    return (_b = (_a = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) == null ? void 0 : _a.map(tag => {\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n        tagnum--;\n      }\n\n      const res = `${pad(\"  \", tagnum)}${tag}`;\n\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n        tagnum++;\n      }\n\n      return res;\n    }).join(\"\\n\")) != null ? _b : \"\";\n  } // Convert an image into a png format for saving\n\n\n  base64ToBuffer(str) {\n    const b = atob(str);\n    const buf = new Uint8Array(b.length);\n\n    for (let i = 0, l = buf.length; i < l; i++) {\n      buf[i] = b.charCodeAt(i);\n    }\n\n    return buf;\n  }\n\n  imageToData(image, ext) {\n    var _a;\n\n    this.canvas = this.canvas || document.createElement(\"canvas\");\n    this.ctx = this.ctx || this.canvas.getContext(\"2d\");\n    this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n    this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n    (_a = this.ctx) == null ? void 0 : _a.drawImage(image, 0, 0);\n    const base64data = this.canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, \"\");\n    return this.base64ToBuffer(base64data);\n  } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n\n  attrBufferToArray(attr) {\n    if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n      const TypedArrayConstructor = attr.array.constructor;\n      const arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n      const size = attr.itemSize;\n\n      for (let i = 0, l = attr.count; i < l; i++) {\n        for (let j = 0; j < size; j++) {\n          arr[i * size + j] = attr[this.getFuncs[j]](i);\n        }\n      }\n\n      return arr;\n    } else {\n      return attr.array;\n    }\n  } // Returns an array of the same type starting at the `st` index,\n  // and `ct` length\n\n\n  subArray(arr, st, ct) {\n    if (Array.isArray(arr)) {\n      return arr.slice(st, st + ct);\n    } else {\n      const TypedArrayConstructor = arr.constructor;\n      return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    }\n  } // Returns the string for a geometry's attribute\n\n\n  getAttribute(attr, name, params, type) {\n    const array = this.attrBufferToArray(attr);\n    const res = Array.isArray(array) ? `${`<source id=\"${name}\"><float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(\" \")}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(array.length / attr.itemSize)}\" stride=\"${attr.itemSize}\">`}${params.map(n => `<param name=\"${n}\" type=\"${type}\" />`).join(\"\")}</accessor></technique_common></source>` : \"\";\n    return res;\n  } // Returns the string for a node's transform information\n\n\n  getTransform(o) {\n    o.updateMatrix();\n    this.transMat = this.transMat || new Matrix4();\n    this.transMat.copy(o.matrix);\n    this.transMat.transpose();\n    return `<matrix>${this.transMat.toArray().join(\" \")}</matrix>`;\n  } // Process the given piece of geometry into the geometry library\n  // Returns the mesh id\n\n\n  processGeometry(g) {\n    let info = this.geometryInfo.get(g);\n\n    if (!info) {\n      const bufferGeometry = g;\n\n      if (!bufferGeometry.isBufferGeometry) {\n        throw new Error(\"THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.\");\n      }\n\n      const meshid = `Mesh${this.libraryGeometries.length + 1}`;\n      const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n      const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n        start: 0,\n        count: indexCount,\n        materialIndex: 0\n      }];\n      const gname = g.name ? ` name=\"${g.name}\"` : \"\";\n      let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`;\n      const posName = `${meshid}-position`;\n      const vertName = `${meshid}-vertices`;\n      gnode += this.getAttribute(bufferGeometry.attributes.position, posName, [\"X\", \"Y\", \"Z\"], \"float\");\n      gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`;\n      let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n\n      if (\"normal\" in bufferGeometry.attributes) {\n        const normName = `${meshid}-normal`;\n        gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, [\"X\", \"Y\", \"Z\"], \"float\");\n        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n      }\n\n      if (\"uv\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n      }\n\n      if (\"uv2\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord2`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv2, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n      }\n\n      if (\"color\" in bufferGeometry.attributes) {\n        const colName = `${meshid}-color`;\n        gnode += this.getAttribute(bufferGeometry.attributes.color, colName, [\"X\", \"Y\", \"Z\"], \"uint8\");\n        triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n      }\n\n      let indexArray = null;\n\n      if (bufferGeometry.index) {\n        indexArray = this.attrBufferToArray(bufferGeometry.index);\n      } else {\n        indexArray = new Array(indexCount);\n\n        for (let i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++) indexArray[i] = i;\n      }\n\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        const subarr = this.subArray(indexArray, group.start, group.count);\n        const polycount = subarr.length / 3;\n        gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n        gnode += triangleInputs;\n        gnode += `<p>${subarr.join(\" \")}</p>`;\n        gnode += \"</triangles>\";\n      }\n\n      gnode += \"</mesh></geometry>\";\n      this.libraryGeometries.push(gnode);\n      info = {\n        meshid,\n        bufferGeometry\n      };\n      this.geometryInfo.set(g, info);\n    }\n\n    return info;\n  } // Process the given texture into the image library\n  // Returns the image library\n\n\n  processTexture(tex) {\n    let texid = this.imageMap.get(tex);\n\n    if (texid == null) {\n      texid = `image-${this.libraryImages.length + 1}`;\n      const ext = \"png\";\n      const name = tex.name || texid;\n      let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n\n      if (this.options.version === \"1.5.0\") {\n        imageNode += `<init_from><ref>${this.options.textureDirectory}${name}.${ext}</ref></init_from>`;\n      } else {\n        imageNode += `<init_from>${this.options.textureDirectory}${name}.${ext}</init_from>`;\n      }\n\n      imageNode += \"</image>\";\n      this.libraryImages.push(imageNode);\n      this.imageMap.set(tex, texid);\n      this.textures.push({\n        directory: this.options.textureDirectory,\n        name,\n        ext,\n        data: this.imageToData(tex.image, ext),\n        original: tex\n      });\n    }\n\n    return texid;\n  } // Process the given material into the material and effect libraries\n  // Returns the material id\n\n\n  processMaterial(m) {\n    let matid = this.materialMap.get(m);\n\n    if (matid == null) {\n      matid = `Mat${this.libraryEffects.length + 1}`;\n      let type = \"phong\";\n\n      if (m instanceof MeshLambertMaterial) {\n        type = \"lambert\";\n      } else if (m instanceof MeshBasicMaterial) {\n        type = \"constant\";\n\n        if (m.map !== null) {\n          console.warn(\"ColladaExporter: Texture maps not supported with MeshBasicMaterial.\");\n        }\n      }\n\n      if (m instanceof MeshPhongMaterial) {\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0;\n        let transparencyNode = \"\";\n\n        if (m.transparent) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : \"<float>1</float>\"}</transparent>`;\n\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== \"constant\" ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : \"\"}${type !== \"constant\" ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : \"\"}</bump>` : \"\"}${type === \"phong\" ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : \"\"}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.map)}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : \"\"}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.specularMap)}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : \"\"}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.emissiveMap)}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : \"\"}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(m.normalMap)}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : \"\"}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : \"\"}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : \"\";\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        this.libraryMaterials.push(materialNode);\n        this.libraryEffects.push(effectnode);\n        this.materialMap.set(m, matid);\n      }\n    }\n\n    return matid;\n  } // Recursively process the object into a scene\n\n\n  processObject(o) {\n    let node = `<node name=\"${o.name}\">`;\n    node += this.getTransform(o);\n    const a = new Mesh();\n    a.geometry;\n\n    if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n      const geomInfo = this.processGeometry(o.geometry);\n      const meshid = geomInfo.meshid;\n      const geometry = geomInfo.bufferGeometry;\n      let matids = null;\n      let matidsArray;\n      const mat = o.material || new MeshBasicMaterial();\n      const materials = Array.isArray(mat) ? mat : [mat];\n\n      if (geometry.groups.length > materials.length) {\n        matidsArray = new Array(geometry.groups.length);\n      } else {\n        matidsArray = new Array(materials.length);\n      }\n\n      matids = matidsArray.fill(null).map((_, i) => this.processMaterial(materials[i % materials.length]));\n      node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map((id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`).join(\"\")}</technique_common></bind_material>` : \"\")}</instance_geometry>`;\n    }\n\n    o.children.forEach(c => node += this.processObject(c));\n    node += \"</node>\";\n    return node;\n  }\n\n}\n\nexport { ColladaExporter };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/exporters/ColladaExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","InterleavedBufferAttribute","Matrix4","MeshLambertMaterial","MeshBasicMaterial","MeshPhongMaterial","Color","DoubleSide","Mesh","ColladaExporter","constructor","options","version","author","textureDirectory","upAxis","unitName","unitMeter","geometryInfo","WeakMap","materialMap","imageMap","textures","libraryImages","libraryGeometries","libraryEffects","libraryMaterials","canvas","ctx","transMat","parse","object","onDone","match","console","error","replace","warn","libraryVisualScenes","processObject","specLink","dae","Date","toISOString","join","res","data","format","requestAnimationFrame","urdf","_a","_b","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","ch","num","tagnum","map","tag","test","base64ToBuffer","str","b","atob","buf","Uint8Array","length","i","l","charCodeAt","imageToData","image","ext","document","createElement","getContext","width","SVGAnimatedLength","height","drawImage","base64data","toDataURL","attrBufferToArray","attr","isInterleavedBufferAttribute","TypedArrayConstructor","array","arr","count","itemSize","size","j","getFuncs","subArray","st","ct","Array","isArray","slice","buffer","BYTES_PER_ELEMENT","getAttribute","name","params","type","Math","floor","n","getTransform","o","updateMatrix","copy","matrix","transpose","toArray","processGeometry","g","info","get","bufferGeometry","isBufferGeometry","Error","meshid","indexCount","index","attributes","position","groups","start","materialIndex","gname","gnode","posName","vertName","triangleInputs","normName","normal","uvName","uv","uv2","colName","color","indexArray","group","subarr","polycount","push","set","processTexture","tex","texid","imageNode","directory","original","processMaterial","m","matid","emissive","diffuse","specular","shininess","reflectivity","transparencyNode","transparent","opacity","techniqueNode","emissiveMap","r","normalMap","specularMap","effectnode","side","materialName","materialNode","node","a","geometry","isMesh","geomInfo","matids","matidsArray","mat","material","materials","fill","_","id","children","forEach","c"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;;AACA,IAAIC,eAAe,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqBD,GAAG,IAAID,GAAP,GAAaJ,SAAS,CAACI,GAAD,EAAMC,GAAN,EAAW;AAAEE,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,YAAY,EAAE,IAAlC;AAAwCC,EAAAA,QAAQ,EAAE,IAAlD;AAAwDH,EAAAA;AAAxD,CAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAA1J;;AACA,IAAII,aAAa,GAAG,CAACN,GAAD,EAAMC,GAAN,EAAWC,KAAX,KAAqB;AACvCH,EAAAA,eAAe,CAACC,GAAD,EAAM,OAAOC,GAAP,KAAe,QAAf,GAA0BA,GAAG,GAAG,EAAhC,GAAqCA,GAA3C,EAAgDC,KAAhD,CAAf;;AACA,SAAOA,KAAP;AACD,CAHD;;AAIA,SAASK,0BAAT,EAAqCC,OAArC,EAA8CC,mBAA9C,EAAmEC,iBAAnE,EAAsFC,iBAAtF,EAAyGC,KAAzG,EAAgHC,UAAhH,EAA4HC,IAA5H,QAAwI,OAAxI;;AACA,MAAMC,eAAN,CAAsB;AACpBC,EAAAA,WAAW,GAAG;AACZV,IAAAA,aAAa,CAAC,IAAD,EAAO,SAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,cAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,aAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,eAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,mBAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,gBAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,kBAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,KAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,EAAmB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAnB,CAAb;;AACA,SAAKW,OAAL,GAAe;AACbC,MAAAA,OAAO,EAAE,OADI;AAEbC,MAAAA,MAAM,EAAE,IAFK;AAGbC,MAAAA,gBAAgB,EAAE,EAHL;AAIbC,MAAAA,MAAM,EAAE,MAJK;AAKbC,MAAAA,QAAQ,EAAE,IALG;AAMbC,MAAAA,SAAS,EAAE;AANE,KAAf;AAQA,SAAKC,YAAL,GAAoB,eAAgB,IAAIC,OAAJ,EAApC;AACA,SAAKC,WAAL,GAAmB,eAAgB,IAAID,OAAJ,EAAnC;AACA,SAAKE,QAAL,GAAgB,eAAgB,IAAIF,OAAJ,EAAhC;AACA,SAAKG,QAAL,GAAgB,EAAhB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,GAAL,GAAW,IAAX;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACD;;AACDC,EAAAA,KAAK,CAACC,MAAD,EAASC,MAAT,EAAiBrB,OAAO,GAAG,EAA3B,EAA+B;AAClC,SAAKA,OAAL,GAAe,EAAE,GAAG,KAAKA,OAAV;AAAmB,SAAGA;AAAtB,KAAf;;AACA,QAAI,KAAKA,OAAL,CAAaI,MAAb,CAAoBkB,KAApB,CAA0B,YAA1B,MAA4C,IAAhD,EAAsD;AACpDC,MAAAA,OAAO,CAACC,KAAR,CAAc,uEAAd;AACA,aAAO,IAAP;AACD;;AACD,QAAI,KAAKxB,OAAL,CAAaK,QAAb,KAA0B,IAA1B,IAAkC,KAAKL,OAAL,CAAaM,SAAb,KAA2B,IAAjE,EAAuE;AACrEiB,MAAAA,OAAO,CAACC,KAAR,CAAc,4EAAd;AACA,aAAO,IAAP;AACD;;AACD,QAAI,KAAKxB,OAAL,CAAaM,SAAb,KAA2B,IAA3B,IAAmC,KAAKN,OAAL,CAAaK,QAAb,KAA0B,IAAjE,EAAuE;AACrEkB,MAAAA,OAAO,CAACC,KAAR,CAAc,4EAAd;AACA,aAAO,IAAP;AACD;;AACD,QAAI,KAAKxB,OAAL,CAAaG,gBAAb,KAAkC,EAAtC,EAA0C;AACxC,WAAKH,OAAL,CAAaG,gBAAb,GAAiC,GAAE,KAAKH,OAAL,CAAaG,gBAAiB,GAAjC,CAAoCsB,OAApC,CAA4C,KAA5C,EAAmD,GAAnD,EAAwDA,OAAxD,CAAgE,MAAhE,EAAwE,GAAxE,CAAhC;AACD;;AACD,QAAI,KAAKzB,OAAL,CAAaC,OAAb,KAAyB,OAAzB,IAAoC,KAAKD,OAAL,CAAaC,OAAb,KAAyB,OAAjE,EAA0E;AACxEsB,MAAAA,OAAO,CAACG,IAAR,CAAc,6BAA4B,KAAK1B,OAAL,CAAaC,OAAQ,kDAA/D;AACA,aAAO,IAAP;AACD;;AACD,UAAM0B,mBAAmB,GAAG,KAAKC,aAAL,CAAmBR,MAAnB,CAA5B;AACA,UAAMS,QAAQ,GAAG,KAAK7B,OAAL,CAAaC,OAAb,KAAyB,OAAzB,GAAmC,8CAAnC,GAAoF,kCAArG;AACA,QAAI6B,GAAG,GAAI,0DAA0D,mBAAkBD,QAAS,cAAa,KAAK7B,OAAL,CAAaC,OAAQ,IAAI,iFAAgF,KAAKD,OAAL,CAAaE,MAAb,KAAwB,IAAxB,GAAgC,WAAU,KAAKF,OAAL,CAAaE,MAAO,WAA9D,GAA2E,EAAG,iBAAiB,YAAY,eAAgB,IAAI6B,IAAJ,EAAjB,CAA6BC,WAA7B,EAA2C,YAAY,GAAG,aAAa,eAAgB,IAAID,IAAJ,EAAjB,CAA6BC,WAA7B,EAA2C,aAAa,iCAA9b;AACAF,IAAAA,GAAG,IAAK,mBAAkB,KAAKlB,aAAL,CAAmBqB,IAAnB,CAAwB,EAAxB,CAA4B,mBAAtD;AACAH,IAAAA,GAAG,IAAK,oBAAmB,KAAKhB,cAAL,CAAoBmB,IAApB,CAAyB,EAAzB,CAA6B,oBAAxD;AACAH,IAAAA,GAAG,IAAK,sBAAqB,KAAKf,gBAAL,CAAsBkB,IAAtB,CAA2B,EAA3B,CAA+B,sBAA5D;AACAH,IAAAA,GAAG,IAAK,uBAAsB,KAAKjB,iBAAL,CAAuBoB,IAAvB,CAA4B,EAA5B,CAAgC,uBAA9D;AACAH,IAAAA,GAAG,IAAK,gEAA+DH,mBAAoB,yCAA3F;AACAG,IAAAA,GAAG,IAAI,sDAAP;AACAA,IAAAA,GAAG,IAAI,YAAP;AACA,UAAMI,GAAG,GAAG;AACVC,MAAAA,IAAI,EAAE,KAAKC,MAAL,CAAYN,GAAZ,CADI;AAEVnB,MAAAA,QAAQ,EAAE,KAAKA;AAFL,KAAZ;;AAIA,QAAI,OAAOU,MAAP,KAAkB,UAAtB,EAAkC;AAChCgB,MAAAA,qBAAqB,CAAC,MAAMhB,MAAM,CAACa,GAAD,CAAb,CAArB;AACD;;AACD,WAAOA,GAAP;AACD,GA1EmB,CA2EpB;;;AACAE,EAAAA,MAAM,CAACE,IAAD,EAAO;AACX,QAAIC,EAAJ,EAAQC,EAAR;;AACA,UAAMC,UAAU,GAAG,MAAnB;AACA,UAAMC,eAAe,GAAG,eAAxB;AACA,UAAMC,QAAQ,GAAG,uBAAjB;;AACA,UAAMC,GAAG,GAAG,CAACC,EAAD,EAAKC,GAAL,KAAaA,GAAG,GAAG,CAAN,GAAUD,EAAE,GAAGD,GAAG,CAACC,EAAD,EAAKC,GAAG,GAAG,CAAX,CAAlB,GAAkC,EAA3D;;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,WAAO,CAACP,EAAE,GAAG,CAACD,EAAE,GAAGD,IAAI,CAAChB,KAAL,CAAW,oCAAX,CAAN,KAA2D,IAA3D,GAAkE,KAAK,CAAvE,GAA2EiB,EAAE,CAACS,GAAH,CAAQC,GAAD,IAAS;AACtG,UAAI,CAACN,QAAQ,CAACO,IAAT,CAAcD,GAAd,CAAD,IAAuB,CAACP,eAAe,CAACQ,IAAhB,CAAqBD,GAArB,CAAxB,IAAqDR,UAAU,CAACS,IAAX,CAAgBD,GAAhB,CAAzD,EAA+E;AAC7EF,QAAAA,MAAM;AACP;;AACD,YAAMb,GAAG,GAAI,GAAEU,GAAG,CAAC,IAAD,EAAOG,MAAP,CAAe,GAAEE,GAAI,EAAvC;;AACA,UAAI,CAACN,QAAQ,CAACO,IAAT,CAAcD,GAAd,CAAD,IAAuB,CAACP,eAAe,CAACQ,IAAhB,CAAqBD,GAArB,CAAxB,IAAqD,CAACR,UAAU,CAACS,IAAX,CAAgBD,GAAhB,CAA1D,EAAgF;AAC9EF,QAAAA,MAAM;AACP;;AACD,aAAOb,GAAP;AACD,KATuF,EASrFD,IATqF,CAShF,IATgF,CAAjF,KASW,IATX,GASkBO,EATlB,GASuB,EAT9B;AAUD,GA7FmB,CA8FpB;;;AACAW,EAAAA,cAAc,CAACC,GAAD,EAAM;AAClB,UAAMC,CAAC,GAAGC,IAAI,CAACF,GAAD,CAAd;AACA,UAAMG,GAAG,GAAG,IAAIC,UAAJ,CAAeH,CAAC,CAACI,MAAjB,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,GAAG,CAACE,MAAxB,EAAgCC,CAAC,GAAGC,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CH,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASL,CAAC,CAACO,UAAF,CAAaF,CAAb,CAAT;AACD;;AACD,WAAOH,GAAP;AACD;;AACDM,EAAAA,WAAW,CAACC,KAAD,EAAQC,GAAR,EAAa;AACtB,QAAIxB,EAAJ;;AACA,SAAKvB,MAAL,GAAc,KAAKA,MAAL,IAAegD,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA7B;AACA,SAAKhD,GAAL,GAAW,KAAKA,GAAL,IAAY,KAAKD,MAAL,CAAYkD,UAAZ,CAAuB,IAAvB,CAAvB;AACA,SAAKlD,MAAL,CAAYmD,KAAZ,GAAoBL,KAAK,CAACK,KAAN,YAAuBC,iBAAvB,GAA2C,CAA3C,GAA+CN,KAAK,CAACK,KAAzE;AACA,SAAKnD,MAAL,CAAYqD,MAAZ,GAAqBP,KAAK,CAACO,MAAN,YAAwBD,iBAAxB,GAA4C,CAA5C,GAAgDN,KAAK,CAACO,MAA3E;AACA,KAAC9B,EAAE,GAAG,KAAKtB,GAAX,KAAmB,IAAnB,GAA0B,KAAK,CAA/B,GAAmCsB,EAAE,CAAC+B,SAAH,CAAaR,KAAb,EAAoB,CAApB,EAAuB,CAAvB,CAAnC;AACA,UAAMS,UAAU,GAAG,KAAKvD,MAAL,CAAYwD,SAAZ,CAAuB,SAAQT,GAAI,EAAnC,EAAsC,CAAtC,EAAyCtC,OAAzC,CAAiD,gCAAjD,EAAmF,EAAnF,CAAnB;AACA,WAAO,KAAK0B,cAAL,CAAoBoB,UAApB,CAAP;AACD,GAhHmB,CAiHpB;;;AACAE,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACtB,QAAIA,IAAI,YAAYpF,0BAAhB,IAA8CoF,IAAI,CAACC,4BAAvD,EAAqF;AACnF,YAAMC,qBAAqB,GAAGF,IAAI,CAACG,KAAL,CAAW9E,WAAzC;AACA,YAAM+E,GAAG,GAAG,IAAIF,qBAAJ,CAA0BF,IAAI,CAACK,KAAL,GAAaL,IAAI,CAACM,QAA5C,CAAZ;AACA,YAAMC,IAAI,GAAGP,IAAI,CAACM,QAAlB;;AACA,WAAK,IAAItB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGe,IAAI,CAACK,KAAzB,EAAgCrB,CAAC,GAAGC,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,aAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7BJ,UAAAA,GAAG,CAACpB,CAAC,GAAGuB,IAAJ,GAAWC,CAAZ,CAAH,GAAoBR,IAAI,CAAC,KAAKS,QAAL,CAAcD,CAAd,CAAD,CAAJ,CAAuBxB,CAAvB,CAApB;AACD;AACF;;AACD,aAAOoB,GAAP;AACD,KAVD,MAUO;AACL,aAAOJ,IAAI,CAACG,KAAZ;AACD;AACF,GAhImB,CAiIpB;AACA;;;AACAO,EAAAA,QAAQ,CAACN,GAAD,EAAMO,EAAN,EAAUC,EAAV,EAAc;AACpB,QAAIC,KAAK,CAACC,OAAN,CAAcV,GAAd,CAAJ,EAAwB;AACtB,aAAOA,GAAG,CAACW,KAAJ,CAAUJ,EAAV,EAAcA,EAAE,GAAGC,EAAnB,CAAP;AACD,KAFD,MAEO;AACL,YAAMV,qBAAqB,GAAGE,GAAG,CAAC/E,WAAlC;AACA,aAAO,IAAI6E,qBAAJ,CAA0BE,GAAG,CAACY,MAA9B,EAAsCL,EAAE,GAAGP,GAAG,CAACa,iBAA/C,EAAkEL,EAAlE,CAAP;AACD;AACF,GA1ImB,CA2IpB;;;AACAM,EAAAA,YAAY,CAAClB,IAAD,EAAOmB,IAAP,EAAaC,MAAb,EAAqBC,IAArB,EAA2B;AACrC,UAAMlB,KAAK,GAAG,KAAKJ,iBAAL,CAAuBC,IAAvB,CAAd;AACA,UAAMxC,GAAG,GAAGqD,KAAK,CAACC,OAAN,CAAcX,KAAd,IAAwB,GAAG,eAAcgB,IAAK,sBAAqBA,IAAK,kBAAiBhB,KAAK,CAACpB,MAAO,IAA5E,GAAkFoB,KAAK,CAAC5C,IAAN,CAAW,GAAX,CAAgB,mCAAmC,sBAAqB4D,IAAK,kBAAiBG,IAAI,CAACC,KAAL,CACpNpB,KAAK,CAACpB,MAAN,GAAeiB,IAAI,CAACM,QADgM,CAEpN,aAAYN,IAAI,CAACM,QAAS,IAAI,GAAEc,MAAM,CAAC9C,GAAP,CAAYkD,CAAD,IAAQ,gBAAeA,CAAE,WAAUH,IAAK,MAAnD,EAA0D9D,IAA1D,CAA+D,EAA/D,CAAmE,yCAFzF,GAEoI,EAFhJ;AAGA,WAAOC,GAAP;AACD,GAlJmB,CAmJpB;;;AACAiE,EAAAA,YAAY,CAACC,CAAD,EAAI;AACdA,IAAAA,CAAC,CAACC,YAAF;AACA,SAAKnF,QAAL,GAAgB,KAAKA,QAAL,IAAiB,IAAI3B,OAAJ,EAAjC;AACA,SAAK2B,QAAL,CAAcoF,IAAd,CAAmBF,CAAC,CAACG,MAArB;AACA,SAAKrF,QAAL,CAAcsF,SAAd;AACA,WAAQ,WAAU,KAAKtF,QAAL,CAAcuF,OAAd,GAAwBxE,IAAxB,CAA6B,GAA7B,CAAkC,WAApD;AACD,GA1JmB,CA2JpB;AACA;;;AACAyE,EAAAA,eAAe,CAACC,CAAD,EAAI;AACjB,QAAIC,IAAI,GAAG,KAAKrG,YAAL,CAAkBsG,GAAlB,CAAsBF,CAAtB,CAAX;;AACA,QAAI,CAACC,IAAL,EAAW;AACT,YAAME,cAAc,GAAGH,CAAvB;;AACA,UAAI,CAACG,cAAc,CAACC,gBAApB,EAAsC;AACpC,cAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AACD,YAAMC,MAAM,GAAI,OAAM,KAAKpG,iBAAL,CAAuB4C,MAAvB,GAAgC,CAAE,EAAxD;AACA,YAAMyD,UAAU,GAAGJ,cAAc,CAACK,KAAf,GAAuBL,cAAc,CAACK,KAAf,CAAqBpC,KAArB,GAA6B+B,cAAc,CAACK,KAAf,CAAqBnC,QAAzE,GAAoF8B,cAAc,CAACM,UAAf,CAA0BC,QAA1B,CAAmCtC,KAA1I;AACA,YAAMuC,MAAM,GAAGR,cAAc,CAACQ,MAAf,IAAyB,IAAzB,IAAiCR,cAAc,CAACQ,MAAf,CAAsB7D,MAAtB,KAAiC,CAAlE,GAAsEqD,cAAc,CAACQ,MAArF,GAA8F,CAAC;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYxC,QAAAA,KAAK,EAAEmC,UAAnB;AAA+BM,QAAAA,aAAa,EAAE;AAA9C,OAAD,CAA7G;AACA,YAAMC,KAAK,GAAGd,CAAC,CAACd,IAAF,GAAU,UAASc,CAAC,CAACd,IAAK,GAA1B,GAA+B,EAA7C;AACA,UAAI6B,KAAK,GAAI,iBAAgBT,MAAO,IAAGQ,KAAM,SAA7C;AACA,YAAME,OAAO,GAAI,GAAEV,MAAO,WAA1B;AACA,YAAMW,QAAQ,GAAI,GAAEX,MAAO,WAA3B;AACAS,MAAAA,KAAK,IAAI,KAAK9B,YAAL,CAAkBkB,cAAc,CAACM,UAAf,CAA0BC,QAA5C,EAAsDM,OAAtD,EAA+D,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/D,EAAgF,OAAhF,CAAT;AACAD,MAAAA,KAAK,IAAK,iBAAgBE,QAAS,yCAAwCD,OAAQ,iBAAnF;AACA,UAAIE,cAAc,GAAI,qCAAoCD,QAAS,iBAAnE;;AACA,UAAI,YAAYd,cAAc,CAACM,UAA/B,EAA2C;AACzC,cAAMU,QAAQ,GAAI,GAAEb,MAAO,SAA3B;AACAS,QAAAA,KAAK,IAAI,KAAK9B,YAAL,CAAkBkB,cAAc,CAACM,UAAf,CAA0BW,MAA5C,EAAoDD,QAApD,EAA8D,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA9D,EAA+E,OAA/E,CAAT;AACAD,QAAAA,cAAc,IAAK,qCAAoCC,QAAS,iBAAhE;AACD;;AACD,UAAI,QAAQhB,cAAc,CAACM,UAA3B,EAAuC;AACrC,cAAMY,MAAM,GAAI,GAAEf,MAAO,WAAzB;AACAS,QAAAA,KAAK,IAAI,KAAK9B,YAAL,CAAkBkB,cAAc,CAACM,UAAf,CAA0Ba,EAA5C,EAAgDD,MAAhD,EAAwD,CAAC,GAAD,EAAM,GAAN,CAAxD,EAAoE,OAApE,CAAT;AACAH,QAAAA,cAAc,IAAK,uCAAsCG,MAAO,yBAAhE;AACD;;AACD,UAAI,SAASlB,cAAc,CAACM,UAA5B,EAAwC;AACtC,cAAMY,MAAM,GAAI,GAAEf,MAAO,YAAzB;AACAS,QAAAA,KAAK,IAAI,KAAK9B,YAAL,CAAkBkB,cAAc,CAACM,UAAf,CAA0Bc,GAA5C,EAAiDF,MAAjD,EAAyD,CAAC,GAAD,EAAM,GAAN,CAAzD,EAAqE,OAArE,CAAT;AACAH,QAAAA,cAAc,IAAK,uCAAsCG,MAAO,yBAAhE;AACD;;AACD,UAAI,WAAWlB,cAAc,CAACM,UAA9B,EAA0C;AACxC,cAAMe,OAAO,GAAI,GAAElB,MAAO,QAA1B;AACAS,QAAAA,KAAK,IAAI,KAAK9B,YAAL,CAAkBkB,cAAc,CAACM,UAAf,CAA0BgB,KAA5C,EAAmDD,OAAnD,EAA4D,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA5D,EAA6E,OAA7E,CAAT;AACAN,QAAAA,cAAc,IAAK,oCAAmCM,OAAQ,iBAA9D;AACD;;AACD,UAAIE,UAAU,GAAG,IAAjB;;AACA,UAAIvB,cAAc,CAACK,KAAnB,EAA0B;AACxBkB,QAAAA,UAAU,GAAG,KAAK5D,iBAAL,CAAuBqC,cAAc,CAACK,KAAtC,CAAb;AACD,OAFD,MAEO;AACLkB,QAAAA,UAAU,GAAG,IAAI9C,KAAJ,CAAU2B,UAAV,CAAb;;AACA,aAAK,IAAIxD,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG0E,UAAU,CAAC5E,MAA/B,EAAuCC,CAAC,GAAGC,CAAJ,IAAS4B,KAAK,CAACC,OAAN,CAAc6C,UAAd,CAAhD,EAA2E3E,CAAC,EAA5E,EACE2E,UAAU,CAAC3E,CAAD,CAAV,GAAgBA,CAAhB;AACH;;AACD,WAAK,IAAIA,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG2D,MAAM,CAAC7D,MAA3B,EAAmCC,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,cAAM4E,KAAK,GAAGhB,MAAM,CAAC5D,CAAD,CAApB;AACA,cAAM6E,MAAM,GAAG,KAAKnD,QAAL,CAAciD,UAAd,EAA0BC,KAAK,CAACf,KAAhC,EAAuCe,KAAK,CAACvD,KAA7C,CAAf;AACA,cAAMyD,SAAS,GAAGD,MAAM,CAAC9E,MAAP,GAAgB,CAAlC;AACAiE,QAAAA,KAAK,IAAK,sCAAqCY,KAAK,CAACd,aAAc,YAAWgB,SAAU,IAAxF;AACAd,QAAAA,KAAK,IAAIG,cAAT;AACAH,QAAAA,KAAK,IAAK,MAAKa,MAAM,CAACtG,IAAP,CAAY,GAAZ,CAAiB,MAAhC;AACAyF,QAAAA,KAAK,IAAI,cAAT;AACD;;AACDA,MAAAA,KAAK,IAAI,oBAAT;AACA,WAAK7G,iBAAL,CAAuB4H,IAAvB,CAA4Bf,KAA5B;AACAd,MAAAA,IAAI,GAAG;AAAEK,QAAAA,MAAF;AAAUH,QAAAA;AAAV,OAAP;AACA,WAAKvG,YAAL,CAAkBmI,GAAlB,CAAsB/B,CAAtB,EAAyBC,IAAzB;AACD;;AACD,WAAOA,IAAP;AACD,GAzNmB,CA0NpB;AACA;;;AACA+B,EAAAA,cAAc,CAACC,GAAD,EAAM;AAClB,QAAIC,KAAK,GAAG,KAAKnI,QAAL,CAAcmG,GAAd,CAAkB+B,GAAlB,CAAZ;;AACA,QAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBA,MAAAA,KAAK,GAAI,SAAQ,KAAKjI,aAAL,CAAmB6C,MAAnB,GAA4B,CAAE,EAA/C;AACA,YAAMM,GAAG,GAAG,KAAZ;AACA,YAAM8B,IAAI,GAAG+C,GAAG,CAAC/C,IAAJ,IAAYgD,KAAzB;AACA,UAAIC,SAAS,GAAI,cAAaD,KAAM,WAAUhD,IAAK,IAAnD;;AACA,UAAI,KAAK7F,OAAL,CAAaC,OAAb,KAAyB,OAA7B,EAAsC;AACpC6I,QAAAA,SAAS,IAAK,mBAAkB,KAAK9I,OAAL,CAAaG,gBAAiB,GAAE0F,IAAK,IAAG9B,GAAI,oBAA5E;AACD,OAFD,MAEO;AACL+E,QAAAA,SAAS,IAAK,cAAa,KAAK9I,OAAL,CAAaG,gBAAiB,GAAE0F,IAAK,IAAG9B,GAAI,cAAvE;AACD;;AACD+E,MAAAA,SAAS,IAAI,UAAb;AACA,WAAKlI,aAAL,CAAmB6H,IAAnB,CAAwBK,SAAxB;AACA,WAAKpI,QAAL,CAAcgI,GAAd,CAAkBE,GAAlB,EAAuBC,KAAvB;AACA,WAAKlI,QAAL,CAAc8H,IAAd,CAAmB;AACjBM,QAAAA,SAAS,EAAE,KAAK/I,OAAL,CAAaG,gBADP;AAEjB0F,QAAAA,IAFiB;AAGjB9B,QAAAA,GAHiB;AAIjB5B,QAAAA,IAAI,EAAE,KAAK0B,WAAL,CAAiB+E,GAAG,CAAC9E,KAArB,EAA4BC,GAA5B,CAJW;AAKjBiF,QAAAA,QAAQ,EAAEJ;AALO,OAAnB;AAOD;;AACD,WAAOC,KAAP;AACD,GApPmB,CAqPpB;AACA;;;AACAI,EAAAA,eAAe,CAACC,CAAD,EAAI;AACjB,QAAIC,KAAK,GAAG,KAAK1I,WAAL,CAAiBoG,GAAjB,CAAqBqC,CAArB,CAAZ;;AACA,QAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBA,MAAAA,KAAK,GAAI,MAAK,KAAKrI,cAAL,CAAoB2C,MAApB,GAA6B,CAAE,EAA7C;AACA,UAAIsC,IAAI,GAAG,OAAX;;AACA,UAAImD,CAAC,YAAY1J,mBAAjB,EAAsC;AACpCuG,QAAAA,IAAI,GAAG,SAAP;AACD,OAFD,MAEO,IAAImD,CAAC,YAAYzJ,iBAAjB,EAAoC;AACzCsG,QAAAA,IAAI,GAAG,UAAP;;AACA,YAAImD,CAAC,CAAClG,GAAF,KAAU,IAAd,EAAoB;AAClBzB,UAAAA,OAAO,CAACG,IAAR,CAAa,qEAAb;AACD;AACF;;AACD,UAAIwH,CAAC,YAAYxJ,iBAAjB,EAAoC;AAClC,cAAM0J,QAAQ,GAAGF,CAAC,CAACE,QAAF,GAAaF,CAAC,CAACE,QAAf,GAA0B,IAAIzJ,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAA3C;AACA,cAAM0J,OAAO,GAAGH,CAAC,CAACd,KAAF,GAAUc,CAAC,CAACd,KAAZ,GAAoB,IAAIzI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAApC;AACA,cAAM2J,QAAQ,GAAGJ,CAAC,CAACI,QAAF,GAAaJ,CAAC,CAACI,QAAf,GAA0B,IAAI3J,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAA3C;AACA,cAAM4J,SAAS,GAAGL,CAAC,CAACK,SAAF,IAAe,CAAjC;AACA,cAAMC,YAAY,GAAGN,CAAC,CAACM,YAAF,IAAkB,CAAvC;AACA,YAAIC,gBAAgB,GAAG,EAAvB;;AACA,YAAIP,CAAC,CAACQ,WAAN,EAAmB;AACjBD,UAAAA,gBAAgB,IAAK,gBAAeP,CAAC,CAAClG,GAAF,GAAQ,+CAAR,GAA0D,kBAAmB,gBAAjH;;AACA,cAAIkG,CAAC,CAACS,OAAF,GAAY,CAAhB,EAAmB;AACjBF,YAAAA,gBAAgB,IAAK,wBAAuBP,CAAC,CAACS,OAAQ,yBAAtD;AACD;AACF;;AACD,cAAMC,aAAa,GAAI,GAAG,4BAA2B7D,IAAK,GAAG,aAAYmD,CAAC,CAACW,WAAF,GAAgB,4DAAhB,GAAgF,yBAAwBT,QAAQ,CAACU,CAAE,IAAGV,QAAQ,CAACzC,CAAE,IAAGyC,QAAQ,CAAC/F,CAAE,YAAY,cAAa0C,IAAI,KAAK,UAAT,GAAuB,YAAWmD,CAAC,CAAClG,GAAF,GAAQ,2DAAR,GAAuE,wBAAuBqG,OAAO,CAACS,CAAE,IAAGT,OAAO,CAAC1C,CAAE,IAAG0C,OAAO,CAAChG,CAAE,YAAY,YAAhL,GAA8L,EAAG,GAAE0C,IAAI,KAAK,UAAT,GAAuB,SAAQmD,CAAC,CAACa,SAAF,GAAc,wDAAd,GAAyE,EAAG,SAA3G,GAAsH,EAAG,GAAEhE,IAAI,KAAK,OAAT,GAAoB,GAAG,mCAAkCuD,QAAQ,CAACQ,CAAE,IAAGR,QAAQ,CAAC3C,CAAE,IAAG2C,QAAQ,CAACjG,CAAE,uBAAuB,cAAa6F,CAAC,CAACc,WAAF,GAAgB,4DAAhB,GAAgF,0BAAyBT,SAAU,UAAU,cAAjQ,GAAiR,EAAG,GAAG,sBAAqBF,OAAO,CAACS,CAAE,IAAGT,OAAO,CAAC1C,CAAE,IAAG0C,OAAO,CAAChG,CAAE,yBAAyB,GAAG,wBAAuBmG,YAAa,yBAAyB,GAAEC,gBAAiB,GAAG,KAAI1D,IAAK,eAAe,EAAtgC;AACA,cAAMkE,UAAU,GAAI,GAAG,eAAcd,KAAM,WAAW,mBAAkBD,CAAC,CAAClG,GAAF,GAAS,sDAAsD,cAAa,KAAK2F,cAAL,CAClJO,CAAC,CAAClG,GADgJ,CAElJ,cAAc,yHAFwD,GAEmE,EAAG,GAAEkG,CAAC,CAACc,WAAF,GAAiB,uDAAuD,cAAa,KAAKrB,cAAL,CACnOO,CAAC,CAACc,WADiO,CAEnO,cAAc,2HAFgI,GAEH,EAAG,GAAEd,CAAC,CAACW,WAAF,GAAiB,uDAAuD,cAAa,KAAKlB,cAAL,CACrOO,CAAC,CAACW,WADmO,CAErO,cAAc,2HAFkI,GAEL,EAAG,GAAEX,CAAC,CAACa,SAAF,GAAe,mDAAmD,cAAa,KAAKpB,cAAL,CAC/NO,CAAC,CAACa,SAD6N,CAE/N,cAAc,mHAFkI,GAEb,EAAG,GAAEH,aAAc,GAAEV,CAAC,CAACgB,IAAF,KAAWtK,UAAX,GAAwB,sHAAxB,GAAiJ,EAAG,4BAR9S;AASA,cAAMuK,YAAY,GAAGjB,CAAC,CAACrD,IAAF,GAAU,UAASqD,CAAC,CAACrD,IAAK,GAA1B,GAA+B,EAApD;AACA,cAAMuE,YAAY,GAAI,iBAAgBjB,KAAM,IAAGgB,YAAa,2BAA0BhB,KAAM,wBAA5F;AACA,aAAKpI,gBAAL,CAAsB0H,IAAtB,CAA2B2B,YAA3B;AACA,aAAKtJ,cAAL,CAAoB2H,IAApB,CAAyBwB,UAAzB;AACA,aAAKxJ,WAAL,CAAiBiI,GAAjB,CAAqBQ,CAArB,EAAwBC,KAAxB;AACD;AACF;;AACD,WAAOA,KAAP;AACD,GAnSmB,CAoSpB;;;AACAvH,EAAAA,aAAa,CAACwE,CAAD,EAAI;AACf,QAAIiE,IAAI,GAAI,eAAcjE,CAAC,CAACP,IAAK,IAAjC;AACAwE,IAAAA,IAAI,IAAI,KAAKlE,YAAL,CAAkBC,CAAlB,CAAR;AACA,UAAMkE,CAAC,GAAG,IAAIzK,IAAJ,EAAV;AACAyK,IAAAA,CAAC,CAACC,QAAF;;AACA,QAAInE,CAAC,YAAYvG,IAAb,IAAqBuG,CAAC,CAACoE,MAAvB,IAAiCpE,CAAC,CAACmE,QAAF,KAAe,IAApD,EAA0D;AACxD,YAAME,QAAQ,GAAG,KAAK/D,eAAL,CAAqBN,CAAC,CAACmE,QAAvB,CAAjB;AACA,YAAMtD,MAAM,GAAGwD,QAAQ,CAACxD,MAAxB;AACA,YAAMsD,QAAQ,GAAGE,QAAQ,CAAC3D,cAA1B;AACA,UAAI4D,MAAM,GAAG,IAAb;AACA,UAAIC,WAAJ;AACA,YAAMC,GAAG,GAAGxE,CAAC,CAACyE,QAAF,IAAc,IAAIpL,iBAAJ,EAA1B;AACA,YAAMqL,SAAS,GAAGvF,KAAK,CAACC,OAAN,CAAcoF,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA7C;;AACA,UAAIL,QAAQ,CAACjD,MAAT,CAAgB7D,MAAhB,GAAyBqH,SAAS,CAACrH,MAAvC,EAA+C;AAC7CkH,QAAAA,WAAW,GAAG,IAAIpF,KAAJ,CAAUgF,QAAQ,CAACjD,MAAT,CAAgB7D,MAA1B,CAAd;AACD,OAFD,MAEO;AACLkH,QAAAA,WAAW,GAAG,IAAIpF,KAAJ,CAAUuF,SAAS,CAACrH,MAApB,CAAd;AACD;;AACDiH,MAAAA,MAAM,GAAGC,WAAW,CAACI,IAAZ,CAAiB,IAAjB,EAAuB/H,GAAvB,CAA2B,CAACgI,CAAD,EAAItH,CAAJ,KAAU,KAAKuF,eAAL,CAAqB6B,SAAS,CAACpH,CAAC,GAAGoH,SAAS,CAACrH,MAAf,CAA9B,CAArC,CAAT;AACA4G,MAAAA,IAAI,IAAK,GAAG,4BAA2BpD,MAAO,IAAnC,IAA0CyD,MAAM,IAAI,IAAV,GAAkB,oCAAmCA,MAAM,CAAC1H,GAAP,CACxG,CAACiI,EAAD,EAAKvH,CAAL,KAAY,GAAG,4CAA2CA,CAAE,cAAauH,EAAG,KAAK,uGADuB,EAExGhJ,IAFwG,CAEnG,EAFmG,CAE/F,qCAF0C,GAEH,EAFvC,CAE2C,sBAFtD;AAGD;;AACDmE,IAAAA,CAAC,CAAC8E,QAAF,CAAWC,OAAX,CAAoBC,CAAD,IAAOf,IAAI,IAAI,KAAKzI,aAAL,CAAmBwJ,CAAnB,CAAlC;AACAf,IAAAA,IAAI,IAAI,SAAR;AACA,WAAOA,IAAP;AACD;;AA/TmB;;AAiUtB,SACEvK,eADF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from \"three\";\nclass ColladaExporter {\n  constructor() {\n    __publicField(this, \"options\");\n    __publicField(this, \"geometryInfo\");\n    __publicField(this, \"materialMap\");\n    __publicField(this, \"imageMap\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"libraryImages\");\n    __publicField(this, \"libraryGeometries\");\n    __publicField(this, \"libraryEffects\");\n    __publicField(this, \"libraryMaterials\");\n    __publicField(this, \"canvas\");\n    __publicField(this, \"ctx\");\n    __publicField(this, \"transMat\");\n    __publicField(this, \"getFuncs\", [\"getX\", \"getY\", \"getZ\", \"getW\"]);\n    this.options = {\n      version: \"1.4.1\",\n      author: null,\n      textureDirectory: \"\",\n      upAxis: \"Y_UP\",\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = /* @__PURE__ */ new WeakMap();\n    this.materialMap = /* @__PURE__ */ new WeakMap();\n    this.imageMap = /* @__PURE__ */ new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n  parse(object, onDone, options = {}) {\n    this.options = { ...this.options, ...options };\n    if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n      console.error(\"ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.\");\n      return null;\n    }\n    if (this.options.unitName !== null && this.options.unitMeter === null) {\n      console.error(\"ColladaExporter: unitMeter needs to be specified if unitName is specified.\");\n      return null;\n    }\n    if (this.options.unitMeter !== null && this.options.unitName === null) {\n      console.error(\"ColladaExporter: unitName needs to be specified if unitMeter is specified.\");\n      return null;\n    }\n    if (this.options.textureDirectory !== \"\") {\n      this.options.textureDirectory = `${this.options.textureDirectory}/`.replace(/\\\\/g, \"/\").replace(/\\/+/g, \"/\");\n    }\n    if (this.options.version !== \"1.4.1\" && this.options.version !== \"1.5.0\") {\n      console.warn(`ColladaExporter : Version ${this.options.version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    }\n    const libraryVisualScenes = this.processObject(object);\n    const specLink = this.options.version === \"1.4.1\" ? \"http://www.collada.org/2005/11/COLLADASchema\" : \"https://www.khronos.org/collada/\";\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${this.options.version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${this.options.author !== null ? `<author>${this.options.author}</author>` : \"\"}</contributor>${`<created>${(/* @__PURE__ */ new Date()).toISOString()}</created>`}${`<modified>${(/* @__PURE__ */ new Date()).toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${this.libraryImages.join(\"\")}</library_images>`;\n    dae += `<library_effects>${this.libraryEffects.join(\"\")}</library_effects>`;\n    dae += `<library_materials>${this.libraryMaterials.join(\"\")}</library_materials>`;\n    dae += `<library_geometries>${this.libraryGeometries.join(\"\")}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += \"</COLLADA>\";\n    const res = {\n      data: this.format(dae),\n      textures: this.textures\n    };\n    if (typeof onDone === \"function\") {\n      requestAnimationFrame(() => onDone(res));\n    }\n    return res;\n  }\n  // Convert the urdf xml into a well-formatted, indented format\n  format(urdf) {\n    var _a, _b;\n    const IS_END_TAG = /^<\\//;\n    const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n    const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n    const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : \"\";\n    let tagnum = 0;\n    return (_b = (_a = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) == null ? void 0 : _a.map((tag) => {\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n        tagnum--;\n      }\n      const res = `${pad(\"  \", tagnum)}${tag}`;\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n        tagnum++;\n      }\n      return res;\n    }).join(\"\\n\")) != null ? _b : \"\";\n  }\n  // Convert an image into a png format for saving\n  base64ToBuffer(str) {\n    const b = atob(str);\n    const buf = new Uint8Array(b.length);\n    for (let i = 0, l = buf.length; i < l; i++) {\n      buf[i] = b.charCodeAt(i);\n    }\n    return buf;\n  }\n  imageToData(image, ext) {\n    var _a;\n    this.canvas = this.canvas || document.createElement(\"canvas\");\n    this.ctx = this.ctx || this.canvas.getContext(\"2d\");\n    this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n    this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n    (_a = this.ctx) == null ? void 0 : _a.drawImage(image, 0, 0);\n    const base64data = this.canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, \"\");\n    return this.base64ToBuffer(base64data);\n  }\n  // gets the attribute array. Generate a new array if the attribute is interleaved\n  attrBufferToArray(attr) {\n    if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n      const TypedArrayConstructor = attr.array.constructor;\n      const arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n      const size = attr.itemSize;\n      for (let i = 0, l = attr.count; i < l; i++) {\n        for (let j = 0; j < size; j++) {\n          arr[i * size + j] = attr[this.getFuncs[j]](i);\n        }\n      }\n      return arr;\n    } else {\n      return attr.array;\n    }\n  }\n  // Returns an array of the same type starting at the `st` index,\n  // and `ct` length\n  subArray(arr, st, ct) {\n    if (Array.isArray(arr)) {\n      return arr.slice(st, st + ct);\n    } else {\n      const TypedArrayConstructor = arr.constructor;\n      return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    }\n  }\n  // Returns the string for a geometry's attribute\n  getAttribute(attr, name, params, type) {\n    const array = this.attrBufferToArray(attr);\n    const res = Array.isArray(array) ? `${`<source id=\"${name}\"><float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(\" \")}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(\n      array.length / attr.itemSize\n    )}\" stride=\"${attr.itemSize}\">`}${params.map((n) => `<param name=\"${n}\" type=\"${type}\" />`).join(\"\")}</accessor></technique_common></source>` : \"\";\n    return res;\n  }\n  // Returns the string for a node's transform information\n  getTransform(o) {\n    o.updateMatrix();\n    this.transMat = this.transMat || new Matrix4();\n    this.transMat.copy(o.matrix);\n    this.transMat.transpose();\n    return `<matrix>${this.transMat.toArray().join(\" \")}</matrix>`;\n  }\n  // Process the given piece of geometry into the geometry library\n  // Returns the mesh id\n  processGeometry(g) {\n    let info = this.geometryInfo.get(g);\n    if (!info) {\n      const bufferGeometry = g;\n      if (!bufferGeometry.isBufferGeometry) {\n        throw new Error(\"THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.\");\n      }\n      const meshid = `Mesh${this.libraryGeometries.length + 1}`;\n      const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n      const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{ start: 0, count: indexCount, materialIndex: 0 }];\n      const gname = g.name ? ` name=\"${g.name}\"` : \"\";\n      let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`;\n      const posName = `${meshid}-position`;\n      const vertName = `${meshid}-vertices`;\n      gnode += this.getAttribute(bufferGeometry.attributes.position, posName, [\"X\", \"Y\", \"Z\"], \"float\");\n      gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`;\n      let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n      if (\"normal\" in bufferGeometry.attributes) {\n        const normName = `${meshid}-normal`;\n        gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, [\"X\", \"Y\", \"Z\"], \"float\");\n        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n      }\n      if (\"uv\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n      }\n      if (\"uv2\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord2`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv2, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n      }\n      if (\"color\" in bufferGeometry.attributes) {\n        const colName = `${meshid}-color`;\n        gnode += this.getAttribute(bufferGeometry.attributes.color, colName, [\"X\", \"Y\", \"Z\"], \"uint8\");\n        triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n      }\n      let indexArray = null;\n      if (bufferGeometry.index) {\n        indexArray = this.attrBufferToArray(bufferGeometry.index);\n      } else {\n        indexArray = new Array(indexCount);\n        for (let i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++)\n          indexArray[i] = i;\n      }\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        const subarr = this.subArray(indexArray, group.start, group.count);\n        const polycount = subarr.length / 3;\n        gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n        gnode += triangleInputs;\n        gnode += `<p>${subarr.join(\" \")}</p>`;\n        gnode += \"</triangles>\";\n      }\n      gnode += \"</mesh></geometry>\";\n      this.libraryGeometries.push(gnode);\n      info = { meshid, bufferGeometry };\n      this.geometryInfo.set(g, info);\n    }\n    return info;\n  }\n  // Process the given texture into the image library\n  // Returns the image library\n  processTexture(tex) {\n    let texid = this.imageMap.get(tex);\n    if (texid == null) {\n      texid = `image-${this.libraryImages.length + 1}`;\n      const ext = \"png\";\n      const name = tex.name || texid;\n      let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n      if (this.options.version === \"1.5.0\") {\n        imageNode += `<init_from><ref>${this.options.textureDirectory}${name}.${ext}</ref></init_from>`;\n      } else {\n        imageNode += `<init_from>${this.options.textureDirectory}${name}.${ext}</init_from>`;\n      }\n      imageNode += \"</image>\";\n      this.libraryImages.push(imageNode);\n      this.imageMap.set(tex, texid);\n      this.textures.push({\n        directory: this.options.textureDirectory,\n        name,\n        ext,\n        data: this.imageToData(tex.image, ext),\n        original: tex\n      });\n    }\n    return texid;\n  }\n  // Process the given material into the material and effect libraries\n  // Returns the material id\n  processMaterial(m) {\n    let matid = this.materialMap.get(m);\n    if (matid == null) {\n      matid = `Mat${this.libraryEffects.length + 1}`;\n      let type = \"phong\";\n      if (m instanceof MeshLambertMaterial) {\n        type = \"lambert\";\n      } else if (m instanceof MeshBasicMaterial) {\n        type = \"constant\";\n        if (m.map !== null) {\n          console.warn(\"ColladaExporter: Texture maps not supported with MeshBasicMaterial.\");\n        }\n      }\n      if (m instanceof MeshPhongMaterial) {\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0;\n        let transparencyNode = \"\";\n        if (m.transparent) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : \"<float>1</float>\"}</transparent>`;\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== \"constant\" ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : \"\"}${type !== \"constant\" ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : \"\"}</bump>` : \"\"}${type === \"phong\" ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : \"\"}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.map\n        )}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : \"\"}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.specularMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : \"\"}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.emissiveMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : \"\"}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.normalMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : \"\"}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : \"\"}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : \"\";\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        this.libraryMaterials.push(materialNode);\n        this.libraryEffects.push(effectnode);\n        this.materialMap.set(m, matid);\n      }\n    }\n    return matid;\n  }\n  // Recursively process the object into a scene\n  processObject(o) {\n    let node = `<node name=\"${o.name}\">`;\n    node += this.getTransform(o);\n    const a = new Mesh();\n    a.geometry;\n    if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n      const geomInfo = this.processGeometry(o.geometry);\n      const meshid = geomInfo.meshid;\n      const geometry = geomInfo.bufferGeometry;\n      let matids = null;\n      let matidsArray;\n      const mat = o.material || new MeshBasicMaterial();\n      const materials = Array.isArray(mat) ? mat : [mat];\n      if (geometry.groups.length > materials.length) {\n        matidsArray = new Array(geometry.groups.length);\n      } else {\n        matidsArray = new Array(materials.length);\n      }\n      matids = matidsArray.fill(null).map((_, i) => this.processMaterial(materials[i % materials.length]));\n      node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map(\n        (id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`\n      ).join(\"\")}</technique_common></bind_material>` : \"\")}</instance_geometry>`;\n    }\n    o.children.forEach((c) => node += this.processObject(c));\n    node += \"</node>\";\n    return node;\n  }\n}\nexport {\n  ColladaExporter\n};\n"]},"metadata":{},"sourceType":"module"}