{"ast":null,"code":"import { Vector3, Quaternion, Matrix4, AnimationMixer, VectorKeyframeTrack, QuaternionKeyframeTrack, AnimationClip, SkeletonHelper } from \"three\";\n\nfunction retarget(target, source) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var pos = new Vector3(),\n      quat = new Quaternion(),\n      scale = new Vector3(),\n      bindBoneMatrix = new Matrix4(),\n      relativeMatrix = new Matrix4(),\n      globalMatrix = new Matrix4();\n  options.preserveMatrix = options.preserveMatrix !== void 0 ? options.preserveMatrix : true;\n  options.preservePosition = options.preservePosition !== void 0 ? options.preservePosition : true;\n  options.preserveHipPosition = options.preserveHipPosition !== void 0 ? options.preserveHipPosition : false;\n  options.useTargetMatrix = options.useTargetMatrix !== void 0 ? options.useTargetMatrix : false;\n  options.hip = options.hip !== void 0 ? options.hip : \"hip\";\n  options.names = options.names || {};\n  var sourceBones = source.isObject3D ? source.skeleton.bones : getBones(source),\n      bones = target.isObject3D ? target.skeleton.bones : getBones(target);\n  var bindBones, bone, name, boneTo, bonesPosition;\n\n  if (target.isObject3D) {\n    target.skeleton.pose();\n  } else {\n    options.useTargetMatrix = true;\n    options.preserveMatrix = false;\n  }\n\n  if (options.preservePosition) {\n    bonesPosition = [];\n\n    for (var i = 0; i < bones.length; i++) {\n      bonesPosition.push(bones[i].position.clone());\n    }\n  }\n\n  if (options.preserveMatrix) {\n    target.updateMatrixWorld();\n    target.matrixWorld.identity();\n\n    for (var _i = 0; _i < target.children.length; ++_i) {\n      target.children[_i].updateMatrixWorld(true);\n    }\n  }\n\n  if (options.offsets) {\n    bindBones = [];\n\n    for (var _i2 = 0; _i2 < bones.length; ++_i2) {\n      bone = bones[_i2];\n      name = options.names[bone.name] || bone.name;\n\n      if (options.offsets[name]) {\n        bone.matrix.multiply(options.offsets[name]);\n        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n        bone.updateMatrixWorld();\n      }\n\n      bindBones.push(bone.matrixWorld.clone());\n    }\n  }\n\n  for (var _i3 = 0; _i3 < bones.length; ++_i3) {\n    bone = bones[_i3];\n    name = options.names[bone.name] || bone.name;\n    boneTo = getBoneByName(name, sourceBones);\n    globalMatrix.copy(bone.matrixWorld);\n\n    if (boneTo) {\n      boneTo.updateMatrixWorld();\n\n      if (options.useTargetMatrix) {\n        relativeMatrix.copy(boneTo.matrixWorld);\n      } else {\n        relativeMatrix.copy(target.matrixWorld).invert();\n        relativeMatrix.multiply(boneTo.matrixWorld);\n      }\n\n      scale.setFromMatrixScale(relativeMatrix);\n      relativeMatrix.scale(scale.set(1 / scale.x, 1 / scale.y, 1 / scale.z));\n      globalMatrix.makeRotationFromQuaternion(quat.setFromRotationMatrix(relativeMatrix));\n\n      if (target.isObject3D) {\n        var boneIndex = bones.indexOf(bone),\n            wBindMatrix = bindBones ? bindBones[boneIndex] : bindBoneMatrix.copy(target.skeleton.boneInverses[boneIndex]).invert();\n        globalMatrix.multiply(wBindMatrix);\n      }\n\n      globalMatrix.copyPosition(relativeMatrix);\n    }\n\n    if (bone.parent && bone.parent.isBone) {\n      bone.matrix.copy(bone.parent.matrixWorld).invert();\n      bone.matrix.multiply(globalMatrix);\n    } else {\n      bone.matrix.copy(globalMatrix);\n    }\n\n    if (options.preserveHipPosition && name === options.hip) {\n      bone.matrix.setPosition(pos.set(0, bone.position.y, 0));\n    }\n\n    bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n    bone.updateMatrixWorld();\n  }\n\n  if (options.preservePosition) {\n    for (var _i4 = 0; _i4 < bones.length; ++_i4) {\n      bone = bones[_i4];\n      name = options.names[bone.name] || bone.name;\n\n      if (name !== options.hip) {\n        bone.position.copy(bonesPosition[_i4]);\n      }\n    }\n  }\n\n  if (options.preserveMatrix) {\n    target.updateMatrixWorld(true);\n  }\n}\n\nfunction retargetClip(target, source, clip) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  options.useFirstFramePosition = options.useFirstFramePosition !== void 0 ? options.useFirstFramePosition : false;\n  options.fps = options.fps !== void 0 ? options.fps : 30;\n  options.names = options.names || [];\n\n  if (!source.isObject3D) {\n    source = getHelperFromSkeleton(source);\n  }\n\n  var numFrames = Math.round(clip.duration * (options.fps / 1e3) * 1e3),\n      delta = 1 / options.fps,\n      convertedTracks = [],\n      mixer = new AnimationMixer(source),\n      bones = getBones(target.skeleton),\n      boneDatas = [];\n  var positionOffset, bone, boneTo, boneData, name;\n  mixer.clipAction(clip).play();\n  mixer.update(0);\n  source.updateMatrixWorld();\n\n  for (var i = 0; i < numFrames; ++i) {\n    var time = i * delta;\n    retarget(target, source, options);\n\n    for (var j = 0; j < bones.length; ++j) {\n      name = options.names[bones[j].name] || bones[j].name;\n      boneTo = getBoneByName(name, source.skeleton);\n\n      if (boneTo) {\n        bone = bones[j];\n        boneData = boneDatas[j] = boneDatas[j] || {\n          bone: bone\n        };\n\n        if (options.hip === name) {\n          if (!boneData.pos) {\n            boneData.pos = {\n              times: new Float32Array(numFrames),\n              values: new Float32Array(numFrames * 3)\n            };\n          }\n\n          if (options.useFirstFramePosition) {\n            if (i === 0) {\n              positionOffset = bone.position.clone();\n            }\n\n            bone.position.sub(positionOffset);\n          }\n\n          boneData.pos.times[i] = time;\n          bone.position.toArray(boneData.pos.values, i * 3);\n        }\n\n        if (!boneData.quat) {\n          boneData.quat = {\n            times: new Float32Array(numFrames),\n            values: new Float32Array(numFrames * 4)\n          };\n        }\n\n        boneData.quat.times[i] = time;\n        bone.quaternion.toArray(boneData.quat.values, i * 4);\n      }\n    }\n\n    mixer.update(delta);\n    source.updateMatrixWorld();\n  }\n\n  for (var _i5 = 0; _i5 < boneDatas.length; ++_i5) {\n    boneData = boneDatas[_i5];\n\n    if (boneData) {\n      if (boneData.pos) {\n        convertedTracks.push(new VectorKeyframeTrack(\".bones[\" + boneData.bone.name + \"].position\", boneData.pos.times, boneData.pos.values));\n      }\n\n      convertedTracks.push(new QuaternionKeyframeTrack(\".bones[\" + boneData.bone.name + \"].quaternion\", boneData.quat.times, boneData.quat.values));\n    }\n  }\n\n  mixer.uncacheAction(clip);\n  return new AnimationClip(clip.name, -1, convertedTracks);\n}\n\nfunction clone(source) {\n  var sourceLookup = /* @__PURE__ */new Map();\n  var cloneLookup = /* @__PURE__ */new Map();\n  var clone2 = source.clone();\n  parallelTraverse(source, clone2, function (sourceNode, clonedNode) {\n    sourceLookup.set(clonedNode, sourceNode);\n    cloneLookup.set(sourceNode, clonedNode);\n  });\n  clone2.traverse(function (node) {\n    if (!node.isSkinnedMesh) return;\n    var clonedMesh = node;\n    var sourceMesh = sourceLookup.get(node);\n    var sourceBones = sourceMesh.skeleton.bones;\n    clonedMesh.skeleton = sourceMesh.skeleton.clone();\n    clonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n    clonedMesh.skeleton.bones = sourceBones.map(function (bone) {\n      return cloneLookup.get(bone);\n    });\n    clonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n  });\n  return clone2;\n}\n\nfunction getBoneByName(name, skeleton) {\n  for (var i = 0, bones = getBones(skeleton); i < bones.length; i++) {\n    if (name === bones[i].name) return bones[i];\n  }\n}\n\nfunction getBones(skeleton) {\n  return Array.isArray(skeleton) ? skeleton : skeleton.bones;\n}\n\nfunction getHelperFromSkeleton(skeleton) {\n  var source = new SkeletonHelper(skeleton.bones[0]);\n  source.skeleton = skeleton;\n  return source;\n}\n\nfunction parallelTraverse(a, b, callback) {\n  callback(a, b);\n\n  for (var i = 0; i < a.children.length; i++) {\n    parallelTraverse(a.children[i], b.children[i], callback);\n  }\n}\n\nvar SkeletonUtils = {\n  retarget: retarget,\n  retargetClip: retargetClip,\n  clone: clone\n};\nexport { SkeletonUtils };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/utils/SkeletonUtils.js"],"names":["Vector3","Quaternion","Matrix4","AnimationMixer","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationClip","SkeletonHelper","retarget","target","source","options","pos","quat","scale","bindBoneMatrix","relativeMatrix","globalMatrix","preserveMatrix","preservePosition","preserveHipPosition","useTargetMatrix","hip","names","sourceBones","isObject3D","skeleton","bones","getBones","bindBones","bone","name","boneTo","bonesPosition","pose","i","length","push","position","clone","updateMatrixWorld","matrixWorld","identity","children","offsets","matrix","multiply","decompose","quaternion","getBoneByName","copy","invert","setFromMatrixScale","set","x","y","z","makeRotationFromQuaternion","setFromRotationMatrix","boneIndex","indexOf","wBindMatrix","boneInverses","copyPosition","parent","isBone","setPosition","retargetClip","clip","useFirstFramePosition","fps","getHelperFromSkeleton","numFrames","Math","round","duration","delta","convertedTracks","mixer","boneDatas","positionOffset","boneData","clipAction","play","update","time","j","times","Float32Array","values","sub","toArray","uncacheAction","sourceLookup","Map","cloneLookup","clone2","parallelTraverse","sourceNode","clonedNode","traverse","node","isSkinnedMesh","clonedMesh","sourceMesh","get","bindMatrix","map","bind","Array","isArray","a","b","callback","SkeletonUtils"],"mappings":"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","sourcesContent":["import { Vector3, Quaternion, Matrix4, AnimationMixer, VectorKeyframeTrack, QuaternionKeyframeTrack, AnimationClip, SkeletonHelper } from \"three\";\nfunction retarget(target, source, options = {}) {\n  const pos = new Vector3(), quat = new Quaternion(), scale = new Vector3(), bindBoneMatrix = new Matrix4(), relativeMatrix = new Matrix4(), globalMatrix = new Matrix4();\n  options.preserveMatrix = options.preserveMatrix !== void 0 ? options.preserveMatrix : true;\n  options.preservePosition = options.preservePosition !== void 0 ? options.preservePosition : true;\n  options.preserveHipPosition = options.preserveHipPosition !== void 0 ? options.preserveHipPosition : false;\n  options.useTargetMatrix = options.useTargetMatrix !== void 0 ? options.useTargetMatrix : false;\n  options.hip = options.hip !== void 0 ? options.hip : \"hip\";\n  options.names = options.names || {};\n  const sourceBones = source.isObject3D ? source.skeleton.bones : getBones(source), bones = target.isObject3D ? target.skeleton.bones : getBones(target);\n  let bindBones, bone, name, boneTo, bonesPosition;\n  if (target.isObject3D) {\n    target.skeleton.pose();\n  } else {\n    options.useTargetMatrix = true;\n    options.preserveMatrix = false;\n  }\n  if (options.preservePosition) {\n    bonesPosition = [];\n    for (let i = 0; i < bones.length; i++) {\n      bonesPosition.push(bones[i].position.clone());\n    }\n  }\n  if (options.preserveMatrix) {\n    target.updateMatrixWorld();\n    target.matrixWorld.identity();\n    for (let i = 0; i < target.children.length; ++i) {\n      target.children[i].updateMatrixWorld(true);\n    }\n  }\n  if (options.offsets) {\n    bindBones = [];\n    for (let i = 0; i < bones.length; ++i) {\n      bone = bones[i];\n      name = options.names[bone.name] || bone.name;\n      if (options.offsets[name]) {\n        bone.matrix.multiply(options.offsets[name]);\n        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n        bone.updateMatrixWorld();\n      }\n      bindBones.push(bone.matrixWorld.clone());\n    }\n  }\n  for (let i = 0; i < bones.length; ++i) {\n    bone = bones[i];\n    name = options.names[bone.name] || bone.name;\n    boneTo = getBoneByName(name, sourceBones);\n    globalMatrix.copy(bone.matrixWorld);\n    if (boneTo) {\n      boneTo.updateMatrixWorld();\n      if (options.useTargetMatrix) {\n        relativeMatrix.copy(boneTo.matrixWorld);\n      } else {\n        relativeMatrix.copy(target.matrixWorld).invert();\n        relativeMatrix.multiply(boneTo.matrixWorld);\n      }\n      scale.setFromMatrixScale(relativeMatrix);\n      relativeMatrix.scale(scale.set(1 / scale.x, 1 / scale.y, 1 / scale.z));\n      globalMatrix.makeRotationFromQuaternion(quat.setFromRotationMatrix(relativeMatrix));\n      if (target.isObject3D) {\n        const boneIndex = bones.indexOf(bone), wBindMatrix = bindBones ? bindBones[boneIndex] : bindBoneMatrix.copy(target.skeleton.boneInverses[boneIndex]).invert();\n        globalMatrix.multiply(wBindMatrix);\n      }\n      globalMatrix.copyPosition(relativeMatrix);\n    }\n    if (bone.parent && bone.parent.isBone) {\n      bone.matrix.copy(bone.parent.matrixWorld).invert();\n      bone.matrix.multiply(globalMatrix);\n    } else {\n      bone.matrix.copy(globalMatrix);\n    }\n    if (options.preserveHipPosition && name === options.hip) {\n      bone.matrix.setPosition(pos.set(0, bone.position.y, 0));\n    }\n    bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n    bone.updateMatrixWorld();\n  }\n  if (options.preservePosition) {\n    for (let i = 0; i < bones.length; ++i) {\n      bone = bones[i];\n      name = options.names[bone.name] || bone.name;\n      if (name !== options.hip) {\n        bone.position.copy(bonesPosition[i]);\n      }\n    }\n  }\n  if (options.preserveMatrix) {\n    target.updateMatrixWorld(true);\n  }\n}\nfunction retargetClip(target, source, clip, options = {}) {\n  options.useFirstFramePosition = options.useFirstFramePosition !== void 0 ? options.useFirstFramePosition : false;\n  options.fps = options.fps !== void 0 ? options.fps : 30;\n  options.names = options.names || [];\n  if (!source.isObject3D) {\n    source = getHelperFromSkeleton(source);\n  }\n  const numFrames = Math.round(clip.duration * (options.fps / 1e3) * 1e3), delta = 1 / options.fps, convertedTracks = [], mixer = new AnimationMixer(source), bones = getBones(target.skeleton), boneDatas = [];\n  let positionOffset, bone, boneTo, boneData, name;\n  mixer.clipAction(clip).play();\n  mixer.update(0);\n  source.updateMatrixWorld();\n  for (let i = 0; i < numFrames; ++i) {\n    const time = i * delta;\n    retarget(target, source, options);\n    for (let j = 0; j < bones.length; ++j) {\n      name = options.names[bones[j].name] || bones[j].name;\n      boneTo = getBoneByName(name, source.skeleton);\n      if (boneTo) {\n        bone = bones[j];\n        boneData = boneDatas[j] = boneDatas[j] || { bone };\n        if (options.hip === name) {\n          if (!boneData.pos) {\n            boneData.pos = {\n              times: new Float32Array(numFrames),\n              values: new Float32Array(numFrames * 3)\n            };\n          }\n          if (options.useFirstFramePosition) {\n            if (i === 0) {\n              positionOffset = bone.position.clone();\n            }\n            bone.position.sub(positionOffset);\n          }\n          boneData.pos.times[i] = time;\n          bone.position.toArray(boneData.pos.values, i * 3);\n        }\n        if (!boneData.quat) {\n          boneData.quat = {\n            times: new Float32Array(numFrames),\n            values: new Float32Array(numFrames * 4)\n          };\n        }\n        boneData.quat.times[i] = time;\n        bone.quaternion.toArray(boneData.quat.values, i * 4);\n      }\n    }\n    mixer.update(delta);\n    source.updateMatrixWorld();\n  }\n  for (let i = 0; i < boneDatas.length; ++i) {\n    boneData = boneDatas[i];\n    if (boneData) {\n      if (boneData.pos) {\n        convertedTracks.push(\n          new VectorKeyframeTrack(\n            \".bones[\" + boneData.bone.name + \"].position\",\n            boneData.pos.times,\n            boneData.pos.values\n          )\n        );\n      }\n      convertedTracks.push(\n        new QuaternionKeyframeTrack(\n          \".bones[\" + boneData.bone.name + \"].quaternion\",\n          boneData.quat.times,\n          boneData.quat.values\n        )\n      );\n    }\n  }\n  mixer.uncacheAction(clip);\n  return new AnimationClip(clip.name, -1, convertedTracks);\n}\nfunction clone(source) {\n  const sourceLookup = /* @__PURE__ */ new Map();\n  const cloneLookup = /* @__PURE__ */ new Map();\n  const clone2 = source.clone();\n  parallelTraverse(source, clone2, function(sourceNode, clonedNode) {\n    sourceLookup.set(clonedNode, sourceNode);\n    cloneLookup.set(sourceNode, clonedNode);\n  });\n  clone2.traverse(function(node) {\n    if (!node.isSkinnedMesh)\n      return;\n    const clonedMesh = node;\n    const sourceMesh = sourceLookup.get(node);\n    const sourceBones = sourceMesh.skeleton.bones;\n    clonedMesh.skeleton = sourceMesh.skeleton.clone();\n    clonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n    clonedMesh.skeleton.bones = sourceBones.map(function(bone) {\n      return cloneLookup.get(bone);\n    });\n    clonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n  });\n  return clone2;\n}\nfunction getBoneByName(name, skeleton) {\n  for (let i = 0, bones = getBones(skeleton); i < bones.length; i++) {\n    if (name === bones[i].name)\n      return bones[i];\n  }\n}\nfunction getBones(skeleton) {\n  return Array.isArray(skeleton) ? skeleton : skeleton.bones;\n}\nfunction getHelperFromSkeleton(skeleton) {\n  const source = new SkeletonHelper(skeleton.bones[0]);\n  source.skeleton = skeleton;\n  return source;\n}\nfunction parallelTraverse(a, b, callback) {\n  callback(a, b);\n  for (let i = 0; i < a.children.length; i++) {\n    parallelTraverse(a.children[i], b.children[i], callback);\n  }\n}\nconst SkeletonUtils = { retarget, retargetClip, clone };\nexport {\n  SkeletonUtils\n};\n"]},"metadata":{},"sourceType":"module"}