{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute } from \"three\";\n\nvar _taskCache = /* @__PURE__ */new WeakMap();\n\nvar DRACOLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(DRACOLoader, _Loader);\n\n  var _super = _createSuper(DRACOLoader);\n\n  function DRACOLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, DRACOLoader);\n\n    _this = _super.call(this, manager);\n    _this.decoderPath = \"\";\n    _this.decoderConfig = {};\n    _this.decoderBinary = null;\n    _this.decoderPending = null;\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = \"\";\n    _this.defaultAttributeIDs = {\n      position: \"POSITION\",\n      normal: \"NORMAL\",\n      color: \"COLOR\",\n      uv: \"TEX_COORD\"\n    };\n    _this.defaultAttributeTypes = {\n      position: \"Float32Array\",\n      normal: \"Float32Array\",\n      color: \"Float32Array\",\n      uv: \"Float32Array\"\n    };\n    return _this;\n  }\n\n  _createClass(DRACOLoader, [{\n    key: \"setDecoderPath\",\n    value: function setDecoderPath(path) {\n      this.decoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setDecoderConfig\",\n    value: function setDecoderConfig(config) {\n      this.decoderConfig = config;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        var taskConfig = {\n          attributeIDs: _this2.defaultAttributeIDs,\n          attributeTypes: _this2.defaultAttributeTypes,\n          useUniqueIDs: false\n        };\n\n        _this2.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n      }, onProgress, onError);\n    }\n    /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\n  }, {\n    key: \"decodeDracoFile\",\n    value: function decodeDracoFile(buffer, callback, attributeIDs, attributeTypes) {\n      var taskConfig = {\n        attributeIDs: attributeIDs || this.defaultAttributeIDs,\n        attributeTypes: attributeTypes || this.defaultAttributeTypes,\n        useUniqueIDs: !!attributeIDs\n      };\n      this.decodeGeometry(buffer, taskConfig).then(callback);\n    }\n  }, {\n    key: \"decodeGeometry\",\n    value: function decodeGeometry(buffer, taskConfig) {\n      var _this3 = this;\n\n      for (var attribute in taskConfig.attributeTypes) {\n        var type = taskConfig.attributeTypes[attribute];\n\n        if (type.BYTES_PER_ELEMENT !== void 0) {\n          taskConfig.attributeTypes[attribute] = type.name;\n        }\n      }\n\n      var taskKey = JSON.stringify(taskConfig);\n\n      if (_taskCache.has(buffer)) {\n        var cachedTask = _taskCache.get(buffer);\n\n        if (cachedTask.key === taskKey) {\n          return cachedTask.promise;\n        } else if (buffer.byteLength === 0) {\n          throw new Error(\"THREE.DRACOLoader: Unable to re-decode a buffer with different settings. Buffer has already been transferred.\");\n        }\n      }\n\n      var worker;\n      var taskID = this.workerNextTaskID++;\n      var taskCost = buffer.byteLength;\n\n      var geometryPending = this._getWorker(taskID, taskCost).then(function (_worker) {\n        worker = _worker;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: \"decode\",\n            id: taskID,\n            taskConfig: taskConfig,\n            buffer: buffer\n          }, [buffer]);\n        });\n      }).then(function (message) {\n        return _this3._createGeometry(message.geometry);\n      });\n\n      geometryPending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          _this3._releaseTask(worker, taskID);\n        }\n      });\n\n      _taskCache.set(buffer, {\n        key: taskKey,\n        promise: geometryPending\n      });\n\n      return geometryPending;\n    }\n  }, {\n    key: \"_createGeometry\",\n    value: function _createGeometry(geometryData) {\n      var geometry = new BufferGeometry();\n\n      if (geometryData.index) {\n        geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n      }\n\n      for (var i = 0; i < geometryData.attributes.length; i++) {\n        var attribute = geometryData.attributes[i];\n        var name = attribute.name;\n        var array = attribute.array;\n        var itemSize = attribute.itemSize;\n        geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n      }\n\n      return geometry;\n    }\n  }, {\n    key: \"_loadLibrary\",\n    value: function _loadLibrary(url, responseType) {\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.decoderPath);\n      loader.setResponseType(responseType);\n      loader.setWithCredentials(this.withCredentials);\n      return new Promise(function (resolve, reject) {\n        loader.load(url, resolve, void 0, reject);\n      });\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      this._initDecoder();\n\n      return this;\n    }\n  }, {\n    key: \"_initDecoder\",\n    value: function _initDecoder() {\n      var _this4 = this;\n\n      if (this.decoderPending) return this.decoderPending;\n      var useJS = typeof WebAssembly !== \"object\" || this.decoderConfig.type === \"js\";\n      var librariesPending = [];\n\n      if (useJS) {\n        librariesPending.push(this._loadLibrary(\"draco_decoder.js\", \"text\"));\n      } else {\n        librariesPending.push(this._loadLibrary(\"draco_wasm_wrapper.js\", \"text\"));\n        librariesPending.push(this._loadLibrary(\"draco_decoder.wasm\", \"arraybuffer\"));\n      }\n\n      this.decoderPending = Promise.all(librariesPending).then(function (libraries) {\n        var jsContent = libraries[0];\n\n        if (!useJS) {\n          _this4.decoderConfig.wasmBinary = libraries[1];\n        }\n\n        var fn = DRACOWorker.toString();\n        var body = [\"/* draco decoder */\", jsContent, \"\", \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n        _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n      return this.decoderPending;\n    }\n  }, {\n    key: \"_getWorker\",\n    value: function _getWorker(taskID, taskCost) {\n      var _this5 = this;\n\n      return this._initDecoder().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var worker2 = new Worker(_this5.workerSourceURL);\n          worker2._callbacks = {};\n          worker2._taskCosts = {};\n          worker2._taskLoad = 0;\n          worker2.postMessage({\n            type: \"init\",\n            decoderConfig: _this5.decoderConfig\n          });\n\n          worker2.onmessage = function (e) {\n            var message = e.data;\n\n            switch (message.type) {\n              case \"decode\":\n                worker2._callbacks[message.id].resolve(message);\n\n                break;\n\n              case \"error\":\n                worker2._callbacks[message.id].reject(message);\n\n                break;\n\n              default:\n                console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n\n          _this5.workerPool.push(worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskCosts[taskID] = taskCost;\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"_releaseTask\",\n    value: function _releaseTask(worker, taskID) {\n      worker._taskLoad -= worker._taskCosts[taskID];\n      delete worker._callbacks[taskID];\n      delete worker._taskCosts[taskID];\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      console.log(\"Task load: \", this.workerPool.map(function (worker) {\n        return worker._taskLoad;\n      }));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; ++i) {\n        this.workerPool[i].terminate();\n      }\n\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n\n  return DRACOLoader;\n}(Loader);\n\nfunction DRACOWorker() {\n  var decoderConfig;\n  var decoderPending;\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case \"init\":\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            resolve({\n              draco: draco\n            });\n          };\n\n          DracoDecoderModule(decoderConfig);\n        });\n        break;\n\n      case \"decode\":\n        var buffer = message.buffer;\n        var taskConfig = message.taskConfig;\n        decoderPending.then(function (module) {\n          var draco = module.draco;\n          var decoder = new draco.Decoder();\n          var decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n\n          try {\n            var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            var buffers = geometry.attributes.map(function (attr) {\n              return attr.array.buffer;\n            });\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: \"decode\",\n              id: message.id,\n              geometry: geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    var attributeIDs = taskConfig.attributeIDs;\n    var attributeTypes = taskConfig.attributeTypes;\n    var dracoGeometry;\n    var decodingStatus;\n    var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error(\"THREE.DRACOLoader: Unexpected geometry type.\");\n    }\n\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error(\"THREE.DRACOLoader: Decoding failed: \" + decodingStatus.error_msg());\n    }\n\n    var geometry = {\n      index: null,\n      attributes: []\n    };\n\n    for (var attributeName in attributeIDs) {\n      var attributeType = self[attributeTypes[attributeName]];\n      var attribute = void 0;\n      var attributeID = void 0;\n\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    }\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    var numFaces = dracoGeometry.num_faces();\n    var numIndices = numFaces * 3;\n    var byteLength = numIndices * 4;\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    var index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n\n    draco._free(ptr);\n\n    return {\n      array: index,\n      itemSize: 1\n    };\n  }\n\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    var numComponents = attribute.num_components();\n    var numPoints = dracoGeometry.num_points();\n    var numValues = numPoints * numComponents;\n    var byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    var dataType = getDracoDataType(draco, attributeType);\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    var array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n\n    draco._free(ptr);\n\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n\n      case Int8Array:\n        return draco.DT_INT8;\n\n      case Int16Array:\n        return draco.DT_INT16;\n\n      case Int32Array:\n        return draco.DT_INT32;\n\n      case Uint8Array:\n        return draco.DT_UINT8;\n\n      case Uint16Array:\n        return draco.DT_UINT16;\n\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n}\n\nexport { DRACOLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/DRACOLoader.js"],"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","_taskCache","WeakMap","DRACOLoader","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","path","config","url","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","callback","attribute","type","BYTES_PER_ELEMENT","name","taskKey","JSON","stringify","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","itemSize","setAttribute","responseType","_initDecoder","useJS","WebAssembly","librariesPending","push","_loadLibrary","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","worker2","Worker","_taskCosts","_taskLoad","onmessage","e","data","console","error","sort","a","b","log","map","terminate","onModuleLoaded","draco","DracoDecoderModule","module","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","Int8Array","buffers","attr","self","destroy","dracoGeometry","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeName","attributeType","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","decodeAttribute","decodeIndex","numFaces","num_faces","numIndices","_malloc","GetTrianglesUInt32Array","Uint32Array","HEAPF32","slice","_free","numComponents","num_components","numPoints","num_points","numValues","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","Float32Array","DT_FLOAT32","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","DT_UINT32"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nclass DRACOLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.decoderPath = \"\";\n    this.decoderConfig = {};\n    this.decoderBinary = null;\n    this.decoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.defaultAttributeIDs = {\n      position: \"POSITION\",\n      normal: \"NORMAL\",\n      color: \"COLOR\",\n      uv: \"TEX_COORD\"\n    };\n    this.defaultAttributeTypes = {\n      position: \"Float32Array\",\n      normal: \"Float32Array\",\n      color: \"Float32Array\",\n      uv: \"Float32Array\"\n    };\n  }\n  setDecoderPath(path) {\n    this.decoderPath = path;\n    return this;\n  }\n  setDecoderConfig(config) {\n    this.decoderConfig = config;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      (buffer) => {\n        const taskConfig = {\n          attributeIDs: this.defaultAttributeIDs,\n          attributeTypes: this.defaultAttributeTypes,\n          useUniqueIDs: false\n        };\n        this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n  decodeDracoFile(buffer, callback, attributeIDs, attributeTypes) {\n    const taskConfig = {\n      attributeIDs: attributeIDs || this.defaultAttributeIDs,\n      attributeTypes: attributeTypes || this.defaultAttributeTypes,\n      useUniqueIDs: !!attributeIDs\n    };\n    this.decodeGeometry(buffer, taskConfig).then(callback);\n  }\n  decodeGeometry(buffer, taskConfig) {\n    for (const attribute in taskConfig.attributeTypes) {\n      const type = taskConfig.attributeTypes[attribute];\n      if (type.BYTES_PER_ELEMENT !== void 0) {\n        taskConfig.attributeTypes[attribute] = type.name;\n      }\n    }\n    const taskKey = JSON.stringify(taskConfig);\n    if (_taskCache.has(buffer)) {\n      const cachedTask = _taskCache.get(buffer);\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        throw new Error(\n          \"THREE.DRACOLoader: Unable to re-decode a buffer with different settings. Buffer has already been transferred.\"\n        );\n      }\n    }\n    let worker;\n    const taskID = this.workerNextTaskID++;\n    const taskCost = buffer.byteLength;\n    const geometryPending = this._getWorker(taskID, taskCost).then((_worker) => {\n      worker = _worker;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"decode\", id: taskID, taskConfig, buffer }, [buffer]);\n      });\n    }).then((message) => this._createGeometry(message.geometry));\n    geometryPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n      }\n    });\n    _taskCache.set(buffer, {\n      key: taskKey,\n      promise: geometryPending\n    });\n    return geometryPending;\n  }\n  _createGeometry(geometryData) {\n    const geometry = new BufferGeometry();\n    if (geometryData.index) {\n      geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n    }\n    for (let i = 0; i < geometryData.attributes.length; i++) {\n      const attribute = geometryData.attributes[i];\n      const name = attribute.name;\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n    }\n    return geometry;\n  }\n  _loadLibrary(url, responseType) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.decoderPath);\n    loader.setResponseType(responseType);\n    loader.setWithCredentials(this.withCredentials);\n    return new Promise((resolve, reject) => {\n      loader.load(url, resolve, void 0, reject);\n    });\n  }\n  preload() {\n    this._initDecoder();\n    return this;\n  }\n  _initDecoder() {\n    if (this.decoderPending)\n      return this.decoderPending;\n    const useJS = typeof WebAssembly !== \"object\" || this.decoderConfig.type === \"js\";\n    const librariesPending = [];\n    if (useJS) {\n      librariesPending.push(this._loadLibrary(\"draco_decoder.js\", \"text\"));\n    } else {\n      librariesPending.push(this._loadLibrary(\"draco_wasm_wrapper.js\", \"text\"));\n      librariesPending.push(this._loadLibrary(\"draco_decoder.wasm\", \"arraybuffer\"));\n    }\n    this.decoderPending = Promise.all(librariesPending).then((libraries) => {\n      const jsContent = libraries[0];\n      if (!useJS) {\n        this.decoderConfig.wasmBinary = libraries[1];\n      }\n      const fn = DRACOWorker.toString();\n      const body = [\n        \"/* draco decoder */\",\n        jsContent,\n        \"\",\n        \"/* worker */\",\n        fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n      ].join(\"\\n\");\n      this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n    });\n    return this.decoderPending;\n  }\n  _getWorker(taskID, taskCost) {\n    return this._initDecoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskCosts = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({ type: \"init\", decoderConfig: this.decoderConfig });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"decode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskCosts[taskID] = taskCost;\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  debug() {\n    console.log(\n      \"Task load: \",\n      this.workerPool.map((worker) => worker._taskLoad)\n    );\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\nfunction DRACOWorker() {\n  let decoderConfig;\n  let decoderPending;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function(resolve) {\n          decoderConfig.onModuleLoaded = function(draco) {\n            resolve({ draco });\n          };\n          DracoDecoderModule(decoderConfig);\n        });\n        break;\n      case \"decode\":\n        const buffer = message.buffer;\n        const taskConfig = message.taskConfig;\n        decoderPending.then((module) => {\n          const draco = module.draco;\n          const decoder = new draco.Decoder();\n          const decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n          try {\n            const geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            const buffers = geometry.attributes.map((attr) => attr.array.buffer);\n            if (geometry.index)\n              buffers.push(geometry.index.array.buffer);\n            self.postMessage({ type: \"decode\", id: message.id, geometry }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    const attributeIDs = taskConfig.attributeIDs;\n    const attributeTypes = taskConfig.attributeTypes;\n    let dracoGeometry;\n    let decodingStatus;\n    const geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error(\"THREE.DRACOLoader: Unexpected geometry type.\");\n    }\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error(\"THREE.DRACOLoader: Decoding failed: \" + decodingStatus.error_msg());\n    }\n    const geometry = { index: null, attributes: [] };\n    for (const attributeName in attributeIDs) {\n      const attributeType = self[attributeTypes[attributeName]];\n      let attribute;\n      let attributeID;\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1)\n          continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    }\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * 4;\n    const ptr = draco._malloc(byteLength);\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    const index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n    draco._free(ptr);\n    return { array: index, itemSize: 1 };\n  }\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    const numComponents = attribute.num_components();\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n    const byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(draco, attributeType);\n    const ptr = draco._malloc(byteLength);\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    const array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n    draco._free(ptr);\n    return {\n      name: attributeName,\n      array,\n      itemSize: numComponents\n    };\n  }\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n      case Int8Array:\n        return draco.DT_INT8;\n      case Int16Array:\n        return draco.DT_INT16;\n      case Int32Array:\n        return draco.DT_INT32;\n      case Uint8Array:\n        return draco.DT_UINT8;\n      case Uint16Array:\n        return draco.DT_UINT16;\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n}\nexport {\n  DRACOLoader\n};\n"]},"metadata":{},"sourceType":"module"}