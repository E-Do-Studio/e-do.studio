{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\n\nvar SAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SAOPass, _Pass);\n\n  var _super = _createSuper(SAOPass);\n\n  function SAOPass(scene, camera) {\n    var _this;\n\n    var useDepthTexture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var useNormals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var resolution = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Vector2(256, 256);\n\n    _classCallCheck(this, SAOPass);\n\n    _this = _super.call(this);\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.clear = true;\n    _this.needsSwap = false;\n    _this.supportsDepthTextureExtension = useDepthTexture;\n    _this.supportsNormalTexture = useNormals;\n    _this.originalClearColor = new Color();\n    _this._oldClearColor = new Color();\n    _this.oldClearAlpha = 1;\n    _this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    _this.resolution = new Vector2(resolution.x, resolution.y);\n    _this.saoRenderTarget = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y, {\n      type: HalfFloatType\n    });\n    _this.blurIntermediateRenderTarget = _this.saoRenderTarget.clone();\n    _this.beautyRenderTarget = _this.saoRenderTarget.clone();\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.depthRenderTarget = _this.normalRenderTarget.clone();\n    var depthTexture;\n\n    if (_this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      _this.beautyRenderTarget.depthTexture = depthTexture;\n      _this.beautyRenderTarget.depthBuffer = true;\n    }\n\n    _this.depthMaterial = new MeshDepthMaterial();\n    _this.depthMaterial.depthPacking = RGBADepthPacking;\n    _this.depthMaterial.blending = NoBlending;\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    _this.saoMaterial.extensions.derivatives = true;\n    _this.saoMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = _this.supportsNormalTexture ? 1 : 0;\n    _this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.saoMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n    _this.saoMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n\n    _this.saoMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n\n    _this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n\n    _this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = _this.camera.projectionMatrix;\n    _this.saoMaterial.blending = NoBlending;\n    _this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    _this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.vBlurMaterial.uniforms[\"tDiffuse\"].value = _this.saoRenderTarget.texture;\n    _this.vBlurMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n\n    _this.vBlurMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n\n    _this.vBlurMaterial.blending = NoBlending;\n    _this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    _this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.hBlurMaterial.uniforms[\"tDiffuse\"].value = _this.blurIntermediateRenderTarget.texture;\n    _this.hBlurMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n\n    _this.hBlurMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n\n    _this.hBlurMaterial.blending = NoBlending;\n    _this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.materialCopy.transparent = true;\n    _this.materialCopy.depthTest = false;\n    _this.materialCopy.depthWrite = false;\n    _this.materialCopy.blending = CustomBlending;\n    _this.materialCopy.blendSrc = DstColorFactor;\n    _this.materialCopy.blendDst = ZeroFactor;\n    _this.materialCopy.blendEquation = AddEquation;\n    _this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    _this.materialCopy.blendDstAlpha = ZeroFactor;\n    _this.materialCopy.blendEquationAlpha = AddEquation;\n    _this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    return _this;\n  }\n\n  _createClass(SAOPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      if (this.renderToScreen) {\n        this.materialCopy.blending = NoBlending;\n        this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.materialCopy.needsUpdate = true;\n        this.renderPass(renderer, this.materialCopy, null);\n      }\n\n      if (this.params.output === 1) {\n        return;\n      }\n\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setRenderTarget(this.depthRenderTarget);\n      renderer.clear();\n      this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n      this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n      this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n      this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n      this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n      this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n      this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n\n      if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n        BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n        BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n        this.prevStdDev = this.params.saoBlurStdDev;\n        this.prevNumSamples = this.params.saoBlurRadius;\n      }\n\n      renderer.setClearColor(0);\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n\n      if (!this.supportsDepthTextureExtension) {\n        this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n      }\n\n      if (this.supportsNormalTexture) {\n        this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      }\n\n      this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n\n      if (this.params.saoBlur) {\n        this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n        this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n      }\n\n      var outputMaterial = this.materialCopy;\n\n      if (this.params.output === 3) {\n        if (this.supportsDepthTextureExtension) {\n          this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n          this.materialCopy.needsUpdate = true;\n        } else {\n          this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n          this.depthCopy.needsUpdate = true;\n          outputMaterial = this.depthCopy;\n        }\n      } else if (this.params.output === 4) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      }\n\n      if (this.params.output === 0) {\n        outputMaterial.blending = CustomBlending;\n      } else {\n        outputMaterial.blending = NoBlending;\n      }\n\n      this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.beautyRenderTarget.setSize(width, height);\n      this.saoRenderTarget.setSize(width, height);\n      this.blurIntermediateRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.depthRenderTarget.setSize(width, height);\n      this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n      this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n      this.saoMaterial.needsUpdate = true;\n      this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.vBlurMaterial.needsUpdate = true;\n      this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.hBlurMaterial.needsUpdate = true;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.saoRenderTarget.dispose();\n      this.blurIntermediateRenderTarget.dispose();\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.depthRenderTarget.dispose();\n      this.depthMaterial.dispose();\n      this.normalMaterial.dispose();\n      this.saoMaterial.dispose();\n      this.vBlurMaterial.dispose();\n      this.hBlurMaterial.dispose();\n      this.materialCopy.dispose();\n      this.depthCopy.dispose();\n      this.fsQuad.dispose();\n    }\n  }]);\n\n  return SAOPass;\n}(Pass);\n\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\n\nexport { SAOPass };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/SAOPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","Vector2","WebGLRenderTarget","HalfFloatType","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Pass","FullScreenQuad","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","scene","camera","useDepthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","depthRenderTarget","depthTexture","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","saoMaterial","defines","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","render","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","width","height","setSize","dispose","Beauty","Default","SAO","Depth","Normal"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n    this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n    this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(\n        this.vBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(0, 1)\n      );\n      BlurShaderUtils.configure(\n        this.hBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(1, 0)\n      );\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n    renderer.setClearColor(0);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    if (!this.supportsDepthTextureExtension) {\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n    }\n    if (this.supportsNormalTexture) {\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    }\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n    }\n    let outputMaterial = this.materialCopy;\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n}\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport {\n  SAOPass\n};\n"]},"metadata":{},"sourceType":"module"}