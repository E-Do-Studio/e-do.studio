{"ast":null,"code":"import { Vector4, Vector3 } from \"three\";\n\nfunction findSpan(p, u, U) {\n  var n = U.length - p - 1;\n\n  if (u >= U[n]) {\n    return n - 1;\n  }\n\n  if (u <= U[p]) {\n    return p;\n  }\n\n  var low = p;\n  var high = n;\n  var mid = Math.floor((low + high) / 2);\n\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n\n    mid = Math.floor((low + high) / 2);\n  }\n\n  return mid;\n}\n\nfunction calcBasisFunctions(span, u, p, U) {\n  var N = [];\n  var left = [];\n  var right = [];\n  N[0] = 1;\n\n  for (var j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    var saved = 0;\n\n    for (var r = 0; r < j; ++r) {\n      var rv = right[r + 1];\n      var lv = left[j - r];\n      var temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    N[j] = saved;\n  }\n\n  return N;\n}\n\nfunction calcBSplinePoint(p, U, P, u) {\n  var span = findSpan(p, u, U);\n  var N = calcBasisFunctions(span, u, p, U);\n  var C = new Vector4(0, 0, 0, 0);\n\n  for (var j = 0; j <= p; ++j) {\n    var point = P[span - p + j];\n    var Nj = N[j];\n    var wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n\n  return C;\n}\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  var zeroArr = [];\n\n  for (var i = 0; i <= p; ++i) {\n    zeroArr[i] = 0;\n  }\n\n  var ders = [];\n\n  for (var _i = 0; _i <= n; ++_i) {\n    ders[_i] = zeroArr.slice(0);\n  }\n\n  var ndu = [];\n\n  for (var _i2 = 0; _i2 <= p; ++_i2) {\n    ndu[_i2] = zeroArr.slice(0);\n  }\n\n  ndu[0][0] = 1;\n  var left = zeroArr.slice(0);\n  var right = zeroArr.slice(0);\n\n  for (var j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    var saved = 0;\n\n    for (var r2 = 0; r2 < j; ++r2) {\n      var rv = right[r2 + 1];\n      var lv = left[j - r2];\n      ndu[j][r2] = rv + lv;\n      var temp = ndu[r2][j - 1] / ndu[j][r2];\n      ndu[r2][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    ndu[j][j] = saved;\n  }\n\n  for (var _j = 0; _j <= p; ++_j) {\n    ders[0][_j] = ndu[_j][p];\n  }\n\n  for (var _r = 0; _r <= p; ++_r) {\n    var s1 = 0;\n    var s2 = 1;\n    var a = [];\n\n    for (var _i3 = 0; _i3 <= p; ++_i3) {\n      a[_i3] = zeroArr.slice(0);\n    }\n\n    a[0][0] = 1;\n\n    for (var k = 1; k <= n; ++k) {\n      var d = 0;\n      var rk = _r - k;\n      var pk = p - k;\n\n      if (_r >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n\n      var j1 = rk >= -1 ? 1 : -rk;\n      var j2 = _r - 1 <= pk ? k - 1 : p - _r;\n\n      for (var j3 = j1; j3 <= j2; ++j3) {\n        a[s2][j3] = (a[s1][j3] - a[s1][j3 - 1]) / ndu[pk + 1][rk + j3];\n        d += a[s2][j3] * ndu[rk + j3][pk];\n      }\n\n      if (_r <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][_r];\n        d += a[s2][k] * ndu[_r][pk];\n      }\n\n      ders[k][_r] = d;\n      var _j2 = s1;\n      s1 = s2;\n      s2 = _j2;\n    }\n  }\n\n  var r = p;\n\n  for (var _k = 1; _k <= n; ++_k) {\n    for (var _j3 = 0; _j3 <= p; ++_j3) {\n      ders[_k][_j3] *= r;\n    }\n\n    r *= p - _k;\n  }\n\n  return ders;\n}\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  var du = nd < p ? nd : p;\n  var CK = [];\n  var span = findSpan(p, u, U);\n  var nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  var Pw = [];\n\n  for (var i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    var w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n\n  for (var k = 0; k <= du; ++k) {\n    var _point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n    for (var j = 1; j <= p; ++j) {\n      _point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n\n    CK[k] = _point;\n  }\n\n  for (var _k2 = du + 1; _k2 <= nd + 1; ++_k2) {\n    CK[_k2] = new Vector4(0, 0, 0);\n  }\n\n  return CK;\n}\n\nfunction calcKoverI(k, i) {\n  var nom = 1;\n\n  for (var j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n\n  var denom = 1;\n\n  for (var _j4 = 2; _j4 <= i; ++_j4) {\n    denom *= _j4;\n  }\n\n  for (var _j5 = 2; _j5 <= k - i; ++_j5) {\n    denom *= _j5;\n  }\n\n  return nom / denom;\n}\n\nfunction calcRationalCurveDerivatives(Pders) {\n  var nd = Pders.length;\n  var Aders = [];\n  var wders = [];\n\n  for (var i = 0; i < nd; ++i) {\n    var point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n\n  var CK = [];\n\n  for (var k = 0; k < nd; ++k) {\n    var v = Aders[k].clone();\n\n    for (var _i4 = 1; _i4 <= k; ++_i4) {\n      v.sub(CK[k - _i4].clone().multiplyScalar(calcKoverI(k, _i4) * wders[_i4]));\n    }\n\n    CK[k] = v.divideScalar(wders[0]);\n  }\n\n  return CK;\n}\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  var Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  var uspan = findSpan(p, u, U);\n  var vspan = findSpan(q, v, V);\n  var Nu = calcBasisFunctions(uspan, u, p, U);\n  var Nv = calcBasisFunctions(vspan, v, q, V);\n  var temp = [];\n\n  for (var l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n\n    for (var k = 0; k <= p; ++k) {\n      var point = P[uspan - p + k][vspan - q + l].clone();\n      var w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n\n  var Sw = new Vector4(0, 0, 0, 0);\n\n  for (var _l = 0; _l <= q; ++_l) {\n    Sw.add(temp[_l].multiplyScalar(Nv[_l]));\n  }\n\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\n\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/curves/NURBSUtils.js"],"names":["Vector4","Vector3","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","r2","s1","s2","a","k","d","rk","pk","j1","j2","j3","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,OAAjC;;AACA,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,MAAMC,CAAC,GAAGD,CAAC,CAACE,MAAF,GAAWJ,CAAX,GAAe,CAAzB;;AACA,MAAIC,CAAC,IAAIC,CAAC,CAACC,CAAD,CAAV,EAAe;AACb,WAAOA,CAAC,GAAG,CAAX;AACD;;AACD,MAAIF,CAAC,IAAIC,CAAC,CAACF,CAAD,CAAV,EAAe;AACb,WAAOA,CAAP;AACD;;AACD,MAAIK,GAAG,GAAGL,CAAV;AACA,MAAIM,IAAI,GAAGH,CAAX;AACA,MAAII,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,GAAGC,IAAP,IAAe,CAA1B,CAAV;;AACA,SAAOL,CAAC,GAAGC,CAAC,CAACK,GAAD,CAAL,IAAcN,CAAC,IAAIC,CAAC,CAACK,GAAG,GAAG,CAAP,CAA3B,EAAsC;AACpC,QAAIN,CAAC,GAAGC,CAAC,CAACK,GAAD,CAAT,EAAgB;AACdD,MAAAA,IAAI,GAAGC,GAAP;AACD,KAFD,MAEO;AACLF,MAAAA,GAAG,GAAGE,GAAN;AACD;;AACDA,IAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,GAAGC,IAAP,IAAe,CAA1B,CAAN;AACD;;AACD,SAAOC,GAAP;AACD;;AACD,SAASG,kBAAT,CAA4BC,IAA5B,EAAkCV,CAAlC,EAAqCD,CAArC,EAAwCE,CAAxC,EAA2C;AACzC,MAAMU,CAAC,GAAG,EAAV;AACA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,KAAK,GAAG,EAAd;AACAF,EAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAP;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BF,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUd,CAAC,GAAGC,CAAC,CAACS,IAAI,GAAG,CAAP,GAAWI,CAAZ,CAAf;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWb,CAAC,CAACS,IAAI,GAAGI,CAAR,CAAD,GAAcd,CAAzB;AACA,QAAIe,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuB,EAAEE,CAAzB,EAA4B;AAC1B,UAAMC,EAAE,GAAGJ,KAAK,CAACG,CAAC,GAAG,CAAL,CAAhB;AACA,UAAME,EAAE,GAAGN,IAAI,CAACE,CAAC,GAAGE,CAAL,CAAf;AACA,UAAMG,IAAI,GAAGR,CAAC,CAACK,CAAD,CAAD,IAAQC,EAAE,GAAGC,EAAb,CAAb;AACAP,MAAAA,CAAC,CAACK,CAAD,CAAD,GAAOD,KAAK,GAAGE,EAAE,GAAGE,IAApB;AACAJ,MAAAA,KAAK,GAAGG,EAAE,GAAGC,IAAb;AACD;;AACDR,IAAAA,CAAC,CAACG,CAAD,CAAD,GAAOC,KAAP;AACD;;AACD,SAAOJ,CAAP;AACD;;AACD,SAASS,gBAAT,CAA0BrB,CAA1B,EAA6BE,CAA7B,EAAgCoB,CAAhC,EAAmCrB,CAAnC,EAAsC;AACpC,MAAMU,IAAI,GAAGZ,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAArB;AACA,MAAMU,CAAC,GAAGF,kBAAkB,CAACC,IAAD,EAAOV,CAAP,EAAUD,CAAV,EAAaE,CAAb,CAA5B;AACA,MAAMqB,CAAC,GAAG,IAAI1B,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAV;;AACA,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3B,QAAMS,KAAK,GAAGF,CAAC,CAACX,IAAI,GAAGX,CAAP,GAAWe,CAAZ,CAAf;AACA,QAAMU,EAAE,GAAGb,CAAC,CAACG,CAAD,CAAZ;AACA,QAAMW,GAAG,GAAGF,KAAK,CAACG,CAAN,GAAUF,EAAtB;AACAF,IAAAA,CAAC,CAACK,CAAF,IAAOJ,KAAK,CAACI,CAAN,GAAUF,GAAjB;AACAH,IAAAA,CAAC,CAACM,CAAF,IAAOL,KAAK,CAACK,CAAN,GAAUH,GAAjB;AACAH,IAAAA,CAAC,CAACO,CAAF,IAAON,KAAK,CAACM,CAAN,GAAUJ,GAAjB;AACAH,IAAAA,CAAC,CAACI,CAAF,IAAOH,KAAK,CAACG,CAAN,GAAUF,EAAjB;AACD;;AACD,SAAOF,CAAP;AACD;;AACD,SAASQ,4BAAT,CAAsCpB,IAAtC,EAA4CV,CAA5C,EAA+CD,CAA/C,EAAkDG,CAAlD,EAAqDD,CAArD,EAAwD;AACtD,MAAM8B,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIjC,CAArB,EAAwB,EAAEiC,CAA1B;AACED,IAAAA,OAAO,CAACC,CAAD,CAAP,GAAa,CAAb;AADF;;AAEA,MAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAID,EAAC,GAAG,CAAb,EAAgBA,EAAC,IAAI9B,CAArB,EAAwB,EAAE8B,EAA1B;AACEC,IAAAA,IAAI,CAACD,EAAD,CAAJ,GAAUD,OAAO,CAACG,KAAR,CAAc,CAAd,CAAV;AADF;;AAEA,MAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIH,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAIjC,CAArB,EAAwB,EAAEiC,GAA1B;AACEG,IAAAA,GAAG,CAACH,GAAD,CAAH,GAASD,OAAO,CAACG,KAAR,CAAc,CAAd,CAAT;AADF;;AAEAC,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAY,CAAZ;AACA,MAAMvB,IAAI,GAAGmB,OAAO,CAACG,KAAR,CAAc,CAAd,CAAb;AACA,MAAMrB,KAAK,GAAGkB,OAAO,CAACG,KAAR,CAAc,CAAd,CAAd;;AACA,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BF,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUd,CAAC,GAAGC,CAAC,CAACS,IAAI,GAAG,CAAP,GAAWI,CAAZ,CAAf;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWb,CAAC,CAACS,IAAI,GAAGI,CAAR,CAAD,GAAcd,CAAzB;AACA,QAAIe,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIqB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGtB,CAAtB,EAAyB,EAAEsB,EAA3B,EAA+B;AAC7B,UAAMnB,EAAE,GAAGJ,KAAK,CAACuB,EAAE,GAAG,CAAN,CAAhB;AACA,UAAMlB,EAAE,GAAGN,IAAI,CAACE,CAAC,GAAGsB,EAAL,CAAf;AACAD,MAAAA,GAAG,CAACrB,CAAD,CAAH,CAAOsB,EAAP,IAAanB,EAAE,GAAGC,EAAlB;AACA,UAAMC,IAAI,GAAGgB,GAAG,CAACC,EAAD,CAAH,CAAQtB,CAAC,GAAG,CAAZ,IAAiBqB,GAAG,CAACrB,CAAD,CAAH,CAAOsB,EAAP,CAA9B;AACAD,MAAAA,GAAG,CAACC,EAAD,CAAH,CAAQtB,CAAR,IAAaC,KAAK,GAAGE,EAAE,GAAGE,IAA1B;AACAJ,MAAAA,KAAK,GAAGG,EAAE,GAAGC,IAAb;AACD;;AACDgB,IAAAA,GAAG,CAACrB,CAAD,CAAH,CAAOA,CAAP,IAAYC,KAAZ;AACD;;AACD,OAAK,IAAID,EAAC,GAAG,CAAb,EAAgBA,EAAC,IAAIf,CAArB,EAAwB,EAAEe,EAA1B,EAA6B;AAC3BmB,IAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQnB,EAAR,IAAaqB,GAAG,CAACrB,EAAD,CAAH,CAAOf,CAAP,CAAb;AACD;;AACD,OAAK,IAAIqC,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAIrC,CAAvB,EAA0B,EAAEqC,EAA5B,EAAgC;AAC9B,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;AACA,QAAMC,CAAC,GAAG,EAAV;;AACA,SAAK,IAAIP,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAIjC,CAArB,EAAwB,EAAEiC,GAA1B,EAA6B;AAC3BO,MAAAA,CAAC,CAACP,GAAD,CAAD,GAAOD,OAAO,CAACG,KAAR,CAAc,CAAd,CAAP;AACD;;AACDK,IAAAA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAItC,CAArB,EAAwB,EAAEsC,CAA1B,EAA6B;AAC3B,UAAIC,CAAC,GAAG,CAAR;AACA,UAAMC,EAAE,GAAGN,EAAE,GAAGI,CAAhB;AACA,UAAMG,EAAE,GAAG5C,CAAC,GAAGyC,CAAf;;AACA,UAAIJ,EAAE,IAAII,CAAV,EAAa;AACXD,QAAAA,CAAC,CAACD,EAAD,CAAD,CAAM,CAAN,IAAWC,CAAC,CAACF,EAAD,CAAD,CAAM,CAAN,IAAWF,GAAG,CAACQ,EAAE,GAAG,CAAN,CAAH,CAAYD,EAAZ,CAAtB;AACAD,QAAAA,CAAC,GAAGF,CAAC,CAACD,EAAD,CAAD,CAAM,CAAN,IAAWH,GAAG,CAACO,EAAD,CAAH,CAAQC,EAAR,CAAf;AACD;;AACD,UAAMC,EAAE,GAAGF,EAAE,IAAI,CAAC,CAAP,GAAW,CAAX,GAAe,CAACA,EAA3B;AACA,UAAMG,EAAE,GAAGT,EAAE,GAAG,CAAL,IAAUO,EAAV,GAAeH,CAAC,GAAG,CAAnB,GAAuBzC,CAAC,GAAGqC,EAAtC;;AACA,WAAK,IAAIU,EAAE,GAAGF,EAAd,EAAkBE,EAAE,IAAID,EAAxB,EAA4B,EAAEC,EAA9B,EAAkC;AAChCP,QAAAA,CAAC,CAACD,EAAD,CAAD,CAAMQ,EAAN,IAAY,CAACP,CAAC,CAACF,EAAD,CAAD,CAAMS,EAAN,IAAYP,CAAC,CAACF,EAAD,CAAD,CAAMS,EAAE,GAAG,CAAX,CAAb,IAA8BX,GAAG,CAACQ,EAAE,GAAG,CAAN,CAAH,CAAYD,EAAE,GAAGI,EAAjB,CAA1C;AACAL,QAAAA,CAAC,IAAIF,CAAC,CAACD,EAAD,CAAD,CAAMQ,EAAN,IAAYX,GAAG,CAACO,EAAE,GAAGI,EAAN,CAAH,CAAaH,EAAb,CAAjB;AACD;;AACD,UAAIP,EAAE,IAAIO,EAAV,EAAc;AACZJ,QAAAA,CAAC,CAACD,EAAD,CAAD,CAAME,CAAN,IAAW,CAACD,CAAC,CAACF,EAAD,CAAD,CAAMG,CAAC,GAAG,CAAV,CAAD,GAAgBL,GAAG,CAACQ,EAAE,GAAG,CAAN,CAAH,CAAYP,EAAZ,CAA3B;AACAK,QAAAA,CAAC,IAAIF,CAAC,CAACD,EAAD,CAAD,CAAME,CAAN,IAAWL,GAAG,CAACC,EAAD,CAAH,CAAQO,EAAR,CAAhB;AACD;;AACDV,MAAAA,IAAI,CAACO,CAAD,CAAJ,CAAQJ,EAAR,IAAcK,CAAd;AACA,UAAM3B,GAAC,GAAGuB,EAAV;AACAA,MAAAA,EAAE,GAAGC,EAAL;AACAA,MAAAA,EAAE,GAAGxB,GAAL;AACD;AACF;;AACD,MAAIE,CAAC,GAAGjB,CAAR;;AACA,OAAK,IAAIyC,EAAC,GAAG,CAAb,EAAgBA,EAAC,IAAItC,CAArB,EAAwB,EAAEsC,EAA1B,EAA6B;AAC3B,SAAK,IAAI1B,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAIf,CAArB,EAAwB,EAAEe,GAA1B,EAA6B;AAC3BmB,MAAAA,IAAI,CAACO,EAAD,CAAJ,CAAQ1B,GAAR,KAAcE,CAAd;AACD;;AACDA,IAAAA,CAAC,IAAIjB,CAAC,GAAGyC,EAAT;AACD;;AACD,SAAOP,IAAP;AACD;;AACD,SAASc,sBAAT,CAAgChD,CAAhC,EAAmCE,CAAnC,EAAsCoB,CAAtC,EAAyCrB,CAAzC,EAA4CgD,EAA5C,EAAgD;AAC9C,MAAMC,EAAE,GAAGD,EAAE,GAAGjD,CAAL,GAASiD,EAAT,GAAcjD,CAAzB;AACA,MAAMmD,EAAE,GAAG,EAAX;AACA,MAAMxC,IAAI,GAAGZ,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAArB;AACA,MAAMkD,KAAK,GAAGrB,4BAA4B,CAACpB,IAAD,EAAOV,CAAP,EAAUD,CAAV,EAAakD,EAAb,EAAiBhD,CAAjB,CAA1C;AACA,MAAMmD,EAAE,GAAG,EAAX;;AACA,OAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,CAAC,CAAClB,MAAtB,EAA8B,EAAE6B,CAAhC,EAAmC;AACjC,QAAMT,KAAK,GAAGF,CAAC,CAACW,CAAD,CAAD,CAAKqB,KAAL,EAAd;AACA,QAAM3B,CAAC,GAAGH,KAAK,CAACG,CAAhB;AACAH,IAAAA,KAAK,CAACI,CAAN,IAAWD,CAAX;AACAH,IAAAA,KAAK,CAACK,CAAN,IAAWF,CAAX;AACAH,IAAAA,KAAK,CAACM,CAAN,IAAWH,CAAX;AACA0B,IAAAA,EAAE,CAACpB,CAAD,CAAF,GAAQT,KAAR;AACD;;AACD,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIS,EAArB,EAAyB,EAAET,CAA3B,EAA8B;AAC5B,QAAMjB,MAAK,GAAG6B,EAAE,CAAC1C,IAAI,GAAGX,CAAR,CAAF,CAAasD,KAAb,GAAqBC,cAArB,CAAoCH,KAAK,CAACX,CAAD,CAAL,CAAS,CAAT,CAApC,CAAd;;AACA,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwB,EAAEe,CAA1B,EAA6B;AAC3BS,MAAAA,MAAK,CAACgC,GAAN,CAAUH,EAAE,CAAC1C,IAAI,GAAGX,CAAP,GAAWe,CAAZ,CAAF,CAAiBuC,KAAjB,GAAyBC,cAAzB,CAAwCH,KAAK,CAACX,CAAD,CAAL,CAAS1B,CAAT,CAAxC,CAAV;AACD;;AACDoC,IAAAA,EAAE,CAACV,CAAD,CAAF,GAAQjB,MAAR;AACD;;AACD,OAAK,IAAIiB,GAAC,GAAGS,EAAE,GAAG,CAAlB,EAAqBT,GAAC,IAAIQ,EAAE,GAAG,CAA/B,EAAkC,EAAER,GAApC,EAAuC;AACrCU,IAAAA,EAAE,CAACV,GAAD,CAAF,GAAQ,IAAI5C,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAR;AACD;;AACD,SAAOsD,EAAP;AACD;;AACD,SAASM,UAAT,CAAoBhB,CAApB,EAAuBR,CAAvB,EAA0B;AACxB,MAAIyB,GAAG,GAAG,CAAV;;AACA,OAAK,IAAI3C,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI0B,CAArB,EAAwB,EAAE1B,CAA1B,EAA6B;AAC3B2C,IAAAA,GAAG,IAAI3C,CAAP;AACD;;AACD,MAAI4C,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAI5C,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAIkB,CAArB,EAAwB,EAAElB,GAA1B,EAA6B;AAC3B4C,IAAAA,KAAK,IAAI5C,GAAT;AACD;;AACD,OAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAI0B,CAAC,GAAGR,CAAzB,EAA4B,EAAElB,GAA9B,EAAiC;AAC/B4C,IAAAA,KAAK,IAAI5C,GAAT;AACD;;AACD,SAAO2C,GAAG,GAAGC,KAAb;AACD;;AACD,SAASC,4BAAT,CAAsCC,KAAtC,EAA6C;AAC3C,MAAMZ,EAAE,GAAGY,KAAK,CAACzD,MAAjB;AACA,MAAM0D,KAAK,GAAG,EAAd;AACA,MAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,EAApB,EAAwB,EAAEhB,CAA1B,EAA6B;AAC3B,QAAMT,KAAK,GAAGqC,KAAK,CAAC5B,CAAD,CAAnB;AACA6B,IAAAA,KAAK,CAAC7B,CAAD,CAAL,GAAW,IAAInC,OAAJ,CAAY0B,KAAK,CAACI,CAAlB,EAAqBJ,KAAK,CAACK,CAA3B,EAA8BL,KAAK,CAACM,CAApC,CAAX;AACAiC,IAAAA,KAAK,CAAC9B,CAAD,CAAL,GAAWT,KAAK,CAACG,CAAjB;AACD;;AACD,MAAMwB,EAAE,GAAG,EAAX;;AACA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,EAApB,EAAwB,EAAER,CAA1B,EAA6B;AAC3B,QAAMuB,CAAC,GAAGF,KAAK,CAACrB,CAAD,CAAL,CAASa,KAAT,EAAV;;AACA,SAAK,IAAIrB,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAIQ,CAArB,EAAwB,EAAER,GAA1B,EAA6B;AAC3B+B,MAAAA,CAAC,CAACC,GAAF,CAAMd,EAAE,CAACV,CAAC,GAAGR,GAAL,CAAF,CAAUqB,KAAV,GAAkBC,cAAlB,CAAiCE,UAAU,CAAChB,CAAD,EAAIR,GAAJ,CAAV,GAAmB8B,KAAK,CAAC9B,GAAD,CAAzD,CAAN;AACD;;AACDkB,IAAAA,EAAE,CAACV,CAAD,CAAF,GAAQuB,CAAC,CAACE,YAAF,CAAeH,KAAK,CAAC,CAAD,CAApB,CAAR;AACD;;AACD,SAAOZ,EAAP;AACD;;AACD,SAASgB,oBAAT,CAA8BnE,CAA9B,EAAiCE,CAAjC,EAAoCoB,CAApC,EAAuCrB,CAAvC,EAA0CgD,EAA1C,EAA8C;AAC5C,MAAMY,KAAK,GAAGb,sBAAsB,CAAChD,CAAD,EAAIE,CAAJ,EAAOoB,CAAP,EAAUrB,CAAV,EAAagD,EAAb,CAApC;AACA,SAAOW,4BAA4B,CAACC,KAAD,CAAnC;AACD;;AACD,SAASO,gBAAT,CAA0BpE,CAA1B,EAA6BqE,CAA7B,EAAgCnE,CAAhC,EAAmCoE,CAAnC,EAAsChD,CAAtC,EAAyCrB,CAAzC,EAA4C+D,CAA5C,EAA+CO,MAA/C,EAAuD;AACrD,MAAMC,KAAK,GAAGzE,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAtB;AACA,MAAMuE,KAAK,GAAG1E,QAAQ,CAACsE,CAAD,EAAIL,CAAJ,EAAOM,CAAP,CAAtB;AACA,MAAMI,EAAE,GAAGhE,kBAAkB,CAAC8D,KAAD,EAAQvE,CAAR,EAAWD,CAAX,EAAcE,CAAd,CAA7B;AACA,MAAMyE,EAAE,GAAGjE,kBAAkB,CAAC+D,KAAD,EAAQT,CAAR,EAAWK,CAAX,EAAcC,CAAd,CAA7B;AACA,MAAMlD,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIwD,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,CAArB,EAAwB,EAAEO,CAA1B,EAA6B;AAC3BxD,IAAAA,IAAI,CAACwD,CAAD,CAAJ,GAAU,IAAI/E,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAV;;AACA,SAAK,IAAI4C,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIzC,CAArB,EAAwB,EAAEyC,CAA1B,EAA6B;AAC3B,UAAMjB,KAAK,GAAGF,CAAC,CAACkD,KAAK,GAAGxE,CAAR,GAAYyC,CAAb,CAAD,CAAiBgC,KAAK,GAAGJ,CAAR,GAAYO,CAA7B,EAAgCtB,KAAhC,EAAd;AACA,UAAM3B,CAAC,GAAGH,KAAK,CAACG,CAAhB;AACAH,MAAAA,KAAK,CAACI,CAAN,IAAWD,CAAX;AACAH,MAAAA,KAAK,CAACK,CAAN,IAAWF,CAAX;AACAH,MAAAA,KAAK,CAACM,CAAN,IAAWH,CAAX;AACAP,MAAAA,IAAI,CAACwD,CAAD,CAAJ,CAAQpB,GAAR,CAAYhC,KAAK,CAAC+B,cAAN,CAAqBmB,EAAE,CAACjC,CAAD,CAAvB,CAAZ;AACD;AACF;;AACD,MAAMoC,EAAE,GAAG,IAAIhF,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAX;;AACA,OAAK,IAAI+E,EAAC,GAAG,CAAb,EAAgBA,EAAC,IAAIP,CAArB,EAAwB,EAAEO,EAA1B,EAA6B;AAC3BC,IAAAA,EAAE,CAACrB,GAAH,CAAOpC,IAAI,CAACwD,EAAD,CAAJ,CAAQrB,cAAR,CAAuBoB,EAAE,CAACC,EAAD,CAAzB,CAAP;AACD;;AACDC,EAAAA,EAAE,CAACX,YAAH,CAAgBW,EAAE,CAAClD,CAAnB;AACA4C,EAAAA,MAAM,CAACO,GAAP,CAAWD,EAAE,CAACjD,CAAd,EAAiBiD,EAAE,CAAChD,CAApB,EAAuBgD,EAAE,CAAC/C,CAA1B;AACD;;AACD,SACEkB,sBADF,EAEE3B,gBAFF,EAGEU,4BAHF,EAIErB,kBAJF,EAKE+C,UALF,EAMEU,oBANF,EAOEP,4BAPF,EAQEQ,gBARF,EASErE,QATF","sourcesContent":["import { Vector4, Vector3 } from \"three\";\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n  if (u >= U[n]) {\n    return n - 1;\n  }\n  if (u <= U[p]) {\n    return p;\n  }\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n    mid = Math.floor((low + high) / 2);\n  }\n  return mid;\n}\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1;\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0;\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    N[j] = saved;\n  }\n  return N;\n}\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = findSpan(p, u, U);\n  const N = calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n  return C;\n}\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n  for (let i = 0; i <= p; ++i)\n    zeroArr[i] = 0;\n  const ders = [];\n  for (let i = 0; i <= n; ++i)\n    ders[i] = zeroArr.slice(0);\n  const ndu = [];\n  for (let i = 0; i <= p; ++i)\n    ndu[i] = zeroArr.slice(0);\n  ndu[0][0] = 1;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0;\n    for (let r2 = 0; r2 < j; ++r2) {\n      const rv = right[r2 + 1];\n      const lv = left[j - r2];\n      ndu[j][r2] = rv + lv;\n      const temp = ndu[r2][j - 1] / ndu[j][r2];\n      ndu[r2][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    ndu[j][j] = saved;\n  }\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n  for (let r2 = 0; r2 <= p; ++r2) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n    a[0][0] = 1;\n    for (let k = 1; k <= n; ++k) {\n      let d = 0;\n      const rk = r2 - k;\n      const pk = p - k;\n      if (r2 >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r2 - 1 <= pk ? k - 1 : p - r2;\n      for (let j3 = j1; j3 <= j2; ++j3) {\n        a[s2][j3] = (a[s1][j3] - a[s1][j3 - 1]) / ndu[pk + 1][rk + j3];\n        d += a[s2][j3] * ndu[rk + j3][pk];\n      }\n      if (r2 <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r2];\n        d += a[s2][k] * ndu[r2][pk];\n      }\n      ders[k][r2] = d;\n      const j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n  let r = p;\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n    r *= p - k;\n  }\n  return ders;\n}\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = findSpan(p, u, U);\n  const nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n  for (let i = 0; i < P.length; ++i) {\n    const point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n  for (let k = 0; k <= du; ++k) {\n    const point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n    CK[k] = point;\n  }\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n  return CK;\n}\nfunction calcKoverI(k, i) {\n  let nom = 1;\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n  let denom = 1;\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n  return nom / denom;\n}\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n  const CK = [];\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));\n    }\n    CK[k] = v.divideScalar(wders[0]);\n  }\n  return CK;\n}\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = findSpan(p, u, U);\n  const vspan = findSpan(q, v, V);\n  const Nu = calcBasisFunctions(uspan, u, p, U);\n  const Nv = calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n  const Sw = new Vector4(0, 0, 0, 0);\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\nexport {\n  calcBSplineDerivatives,\n  calcBSplinePoint,\n  calcBasisFunctionDerivatives,\n  calcBasisFunctions,\n  calcKoverI,\n  calcNURBSDerivatives,\n  calcRationalCurveDerivatives,\n  calcSurfacePoint,\n  findSpan\n};\n"]},"metadata":{},"sourceType":"module"}