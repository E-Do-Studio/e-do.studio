{"ast":null,"code":"var AfterimageShader = {\n  uniforms: {\n    damp: {\n      value: 0.96\n    },\n    tOld: {\n      value: null\n    },\n    tNew: {\n      value: null\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float damp;\", \"uniform sampler2D tOld;\", \"uniform sampler2D tNew;\", \"varying vec2 vUv;\", \"vec4 when_gt( vec4 x, float y ) {\", \"\treturn max( sign( x - y ), 0.0 );\", \"}\", \"void main() {\", \"\tvec4 texelOld = texture2D( tOld, vUv );\", \"\tvec4 texelNew = texture2D( tNew, vUv );\", \"\ttexelOld *= damp * when_gt( texelOld, 0.1 );\", \"\tgl_FragColor = max(texelNew, texelOld);\", \"}\"].join(\"\\n\")\n};\nexport { AfterimageShader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/shaders/AfterimageShader.js"],"names":["AfterimageShader","uniforms","damp","value","tOld","tNew","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAMA,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADE;AAERC,IAAAA,IAAI,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFE;AAGRE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT;AAHE,GADa;AAMvBG,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CANS;AAavBC,EAAAA,cAAc,EAAE,CACd,qBADc,EAEd,yBAFc,EAGd,yBAHc,EAId,mBAJc,EAKd,mCALc,EAMd,oCANc,EAOd,GAPc,EAQd,eARc,EASd,0CATc,EAUd,0CAVc,EAWd,+CAXc,EAYd,0CAZc,EAad,GAbc,EAcdD,IAdc,CAcT,IAdS;AAbO,CAAzB;AA6BA,SACEP,gBADF","sourcesContent":["const AfterimageShader = {\n  uniforms: {\n    damp: { value: 0.96 },\n    tOld: { value: null },\n    tNew: { value: null }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform float damp;\",\n    \"uniform sampler2D tOld;\",\n    \"uniform sampler2D tNew;\",\n    \"varying vec2 vUv;\",\n    \"vec4 when_gt( vec4 x, float y ) {\",\n    \"\treturn max( sign( x - y ), 0.0 );\",\n    \"}\",\n    \"void main() {\",\n    \"\tvec4 texelOld = texture2D( tOld, vUv );\",\n    \"\tvec4 texelNew = texture2D( tNew, vUv );\",\n    \"\ttexelOld *= damp * when_gt( texelOld, 0.1 );\",\n    \"\tgl_FragColor = max(texelNew, texelOld);\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  AfterimageShader\n};\n"]},"metadata":{},"sourceType":"module"}