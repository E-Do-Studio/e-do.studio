{"ast":null,"code":"import { PlaneGeometry, ShaderMaterial, Uniform, Mesh, PerspectiveCamera, Scene, WebGLRenderer, Texture, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping, Color, MathUtils, Vector3, CompressedTexture, RGBAFormat, DoubleSide, REVISION, BufferAttribute, PropertyBinding, InterpolateDiscrete, Matrix4, InterpolateLinear } from \"three\";\n\nlet _renderer;\n\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\n\nfunction decompress(texture, maxTextureSize = Infinity, renderer = null) {\n  if (!fullscreenQuadGeometry) fullscreenQuadGeometry = new PlaneGeometry(2, 2, 1, 1);\n  if (!fullscreenQuadMaterial) fullscreenQuadMaterial = new ShaderMaterial({\n    uniforms: {\n      blitTexture: new Uniform(texture)\n    },\n    vertexShader:\n    /* glsl */\n    `\n        varying vec2 vUv;\n        void main(){\n            vUv = uv;\n            gl_Position = vec4(position.xy * 1.0,0.,.999999);\n        }\n      `,\n    fragmentShader:\n    /* glsl */\n    `\n          uniform sampler2D blitTexture; \n          varying vec2 vUv;\n\n          void main(){ \n              gl_FragColor = vec4(vUv.xy, 0, 1);\n              \n              #ifdef IS_SRGB\n              gl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n              #else\n              gl_FragColor = texture2D( blitTexture, vUv);\n              #endif\n          }\n      `\n  });\n  fullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n  fullscreenQuadMaterial.defines.IS_SRGB = \"colorSpace\" in texture ? texture.colorSpace === \"srgb\" : texture.encoding === 3001;\n  fullscreenQuadMaterial.needsUpdate = true;\n\n  if (!fullscreenQuad) {\n    fullscreenQuad = new Mesh(fullscreenQuadGeometry, fullscreenQuadMaterial);\n    fullscreenQuad.frustrumCulled = false;\n  }\n\n  const _camera = new PerspectiveCamera();\n\n  const _scene = new Scene();\n\n  _scene.add(fullscreenQuad);\n\n  if (!renderer) {\n    renderer = _renderer = new WebGLRenderer({\n      antialias: false\n    });\n  }\n\n  renderer.setSize(Math.min(texture.image.width, maxTextureSize), Math.min(texture.image.height, maxTextureSize));\n  renderer.clear();\n  renderer.render(_scene, _camera);\n  const readableTexture = new Texture(renderer.domElement);\n  readableTexture.minFilter = texture.minFilter;\n  readableTexture.magFilter = texture.magFilter;\n  readableTexture.wrapS = texture.wrapS;\n  readableTexture.wrapT = texture.wrapT;\n  readableTexture.name = texture.name;\n\n  if (_renderer) {\n    _renderer.dispose();\n\n    _renderer = null;\n  }\n\n  return readableTexture;\n}\n\nconst KHR_mesh_quantization_ExtraAttrTypes = {\n  POSITION: [\"byte\", \"byte normalized\", \"unsigned byte\", \"unsigned byte normalized\", \"short\", \"short normalized\", \"unsigned short\", \"unsigned short normalized\"],\n  NORMAL: [\"byte normalized\", \"short normalized\"],\n  TANGENT: [\"byte normalized\", \"short normalized\"],\n  TEXCOORD: [\"byte\", \"byte normalized\", \"unsigned byte\", \"short\", \"short normalized\", \"unsigned short\"]\n};\n\nclass GLTFExporter {\n  constructor() {\n    this.pluginCallbacks = [];\n    this.register(function (writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsIorExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsSpecularExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsClearcoatExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsIridescenceExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsSheenExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsAnisotropyExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsEmissiveStrengthExtension(writer);\n    });\n  }\n\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n\n    return this;\n  }\n\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n\n    return this;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Function} onError  Callback on errors\n   * @param  {Object} options options\n   */\n\n\n  parse(input, onDone, onError, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options).catch(onError);\n  }\n\n  parseAsync(input, options) {\n    const scope = this;\n    return new Promise(function (resolve, reject) {\n      scope.parse(input, resolve, reject, options);\n    });\n  }\n\n}\n\nconst WEBGL_CONSTANTS = {\n  POINTS: 0,\n  LINES: 1,\n  LINE_LOOP: 2,\n  LINE_STRIP: 3,\n  TRIANGLES: 4,\n  TRIANGLE_STRIP: 5,\n  TRIANGLE_FAN: 6,\n  BYTE: 5120,\n  UNSIGNED_BYTE: 5121,\n  SHORT: 5122,\n  UNSIGNED_SHORT: 5123,\n  INT: 5124,\n  UNSIGNED_INT: 5125,\n  FLOAT: 5126,\n  ARRAY_BUFFER: 34962,\n  ELEMENT_ARRAY_BUFFER: 34963,\n  NEAREST: 9728,\n  LINEAR: 9729,\n  NEAREST_MIPMAP_NEAREST: 9984,\n  LINEAR_MIPMAP_NEAREST: 9985,\n  NEAREST_MIPMAP_LINEAR: 9986,\n  LINEAR_MIPMAP_LINEAR: 9987,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst KHR_MESH_QUANTIZATION = \"KHR_mesh_quantization\";\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: \"scale\",\n  position: \"translation\",\n  quaternion: \"rotation\",\n  morphTargetInfluences: \"weights\"\n};\nconst DEFAULT_SPECULAR_COLOR = new Color();\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 1179937895;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 1313821514;\nconst GLB_CHUNK_TYPE_BIN = 5130562;\n\nfunction equalArray(array1, array2) {\n  return array1.length === array2.length && array1.every(function (element, index) {\n    return element === array2[index];\n  });\n}\n\nfunction stringToArrayBuffer(text) {\n  return new TextEncoder().encode(text).buffer;\n}\n\nfunction isIdentityMatrix(matrix) {\n  return equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n}\n\nfunction getMinMax(attribute, start, count) {\n  const output = {\n    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n  };\n\n  for (let i = start; i < start + count; i++) {\n    for (let a = 0; a < attribute.itemSize; a++) {\n      let value;\n\n      if (attribute.itemSize > 4) {\n        value = attribute.array[i * attribute.itemSize + a];\n      } else {\n        if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n\n        if (attribute.normalized === true) {\n          value = MathUtils.normalize(value, attribute.array);\n        }\n      }\n\n      output.min[a] = Math.min(output.min[a], value);\n      output.max[a] = Math.max(output.max[a], value);\n    }\n  }\n\n  return output;\n}\n\nfunction getPaddedBufferSize(bufferSize) {\n  return Math.ceil(bufferSize / 4) * 4;\n}\n\nfunction getPaddedArrayBuffer(arrayBuffer, paddingByte = 0) {\n  const paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n\n  if (paddedLength !== arrayBuffer.byteLength) {\n    const array = new Uint8Array(paddedLength);\n    array.set(new Uint8Array(arrayBuffer));\n\n    if (paddingByte !== 0) {\n      for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n        array[i] = paddingByte;\n      }\n    }\n\n    return array.buffer;\n  }\n\n  return arrayBuffer;\n}\n\nfunction getCanvas() {\n  if (typeof document === \"undefined\" && typeof OffscreenCanvas !== \"undefined\") {\n    return new OffscreenCanvas(1, 1);\n  }\n\n  return document.createElement(\"canvas\");\n}\n\nfunction getToBlobPromise(canvas, mimeType) {\n  if (canvas.toBlob !== void 0) {\n    return new Promise(resolve => canvas.toBlob(resolve, mimeType));\n  }\n\n  let quality;\n\n  if (mimeType === \"image/jpeg\") {\n    quality = 0.92;\n  } else if (mimeType === \"image/webp\") {\n    quality = 0.8;\n  }\n\n  return canvas.convertToBlob({\n    type: mimeType,\n    quality\n  });\n}\n\nclass GLTFWriter {\n  constructor() {\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.buffers = [];\n    this.nodeMap = /* @__PURE__ */new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.extensionsRequired = {};\n    this.uids = /* @__PURE__ */new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: \"2.0\",\n        generator: \"THREE.GLTFExporter\"\n      }\n    };\n    this.cache = {\n      meshes: /* @__PURE__ */new Map(),\n      attributes: /* @__PURE__ */new Map(),\n      attributesNormalized: /* @__PURE__ */new Map(),\n      materials: /* @__PURE__ */new Map(),\n      textures: /* @__PURE__ */new Map(),\n      images: /* @__PURE__ */new Map()\n    };\n  }\n\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n\n\n  async write(input, onDone, options = {}) {\n    this.options = Object.assign({\n      // default options\n      binary: false,\n      trs: false,\n      onlyVisible: true,\n      maxTextureSize: Infinity,\n      animations: [],\n      includeCustomExtensions: false\n    }, options);\n\n    if (this.options.animations.length > 0) {\n      this.options.trs = true;\n    }\n\n    this.processInput(input);\n    await Promise.all(this.pending);\n    const writer = this;\n    const buffers = writer.buffers;\n    const json = writer.json;\n    options = writer.options;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionsRequired = writer.extensionsRequired;\n    const blob = new Blob(buffers, {\n      type: \"application/octet-stream\"\n    });\n    const extensionsUsedList = Object.keys(extensionsUsed);\n    const extensionsRequiredList = Object.keys(extensionsRequired);\n    if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList;\n    if (extensionsRequiredList.length > 0) json.extensionsRequired = extensionsRequiredList;\n    if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n\n    if (options.binary === true) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onloadend = function () {\n        const binaryChunk = getPaddedArrayBuffer(reader.result);\n        const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);\n        const jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(json)), 32);\n        const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);\n        const header = new ArrayBuffer(GLB_HEADER_BYTES);\n        const headerView = new DataView(header);\n        headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n        headerView.setUint32(4, GLB_VERSION, true);\n        const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n        headerView.setUint32(8, totalByteLength, true);\n        const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n          type: \"application/octet-stream\"\n        });\n        const glbReader = new FileReader();\n        glbReader.readAsArrayBuffer(glbBlob);\n\n        glbReader.onloadend = function () {\n          onDone(glbReader.result);\n        };\n      };\n    } else {\n      if (json.buffers && json.buffers.length > 0) {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n\n        reader.onloadend = function () {\n          const base64data = reader.result;\n          json.buffers[0].uri = base64data;\n          onDone(json);\n        };\n      } else {\n        onDone(json);\n      }\n    }\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n\n\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0) return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === void 0) objectDef.extensions = {};\n\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n\n        delete json.gltfExtensions;\n      }\n\n      if (Object.keys(json).length > 0) objectDef.extras = json;\n    } catch (error) {\n      console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' won't be serialized because of JSON.stringify error - \" + error.message);\n    }\n  }\n  /**\n   * Returns ids for buffer attributes.\n   * @param  {Object} object\n   * @return {Integer}\n   */\n\n\n  getUID(attribute, isRelativeCopy = false) {\n    if (this.uids.has(attribute) === false) {\n      const uids2 = /* @__PURE__ */new Map();\n      uids2.set(true, this.uid++);\n      uids2.set(false, this.uid++);\n      this.uids.set(attribute, uids2);\n    }\n\n    const uids = this.uids.get(attribute);\n    return uids.get(isRelativeCopy);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n\n\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return false;\n    const v = new Vector3();\n\n    for (let i = 0, il = normal.count; i < il; i++) {\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1) > 5e-4) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n\n\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        v.setX(1);\n      } else {\n        v.normalize();\n      }\n\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n\n\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions[\"KHR_texture_transform\"] = transformDef;\n      this.extensionsUsed[\"KHR_texture_transform\"] = true;\n    }\n  }\n\n  buildMetalRoughTexture(metalnessMap, roughnessMap) {\n    if (metalnessMap === roughnessMap) return metalnessMap;\n\n    function getEncodingConversion(map) {\n      if (\"colorSpace\" in map ? map.colorSpace === \"srgb\" : map.encoding === 3001) {\n        return function SRGBToLinear(c) {\n          return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n        };\n      }\n\n      return function LinearToLinear(c) {\n        return c;\n      };\n    }\n\n    console.warn(\"THREE.GLTFExporter: Merged metalnessMap and roughnessMap textures.\");\n\n    if (metalnessMap instanceof CompressedTexture) {\n      metalnessMap = decompress(metalnessMap);\n    }\n\n    if (roughnessMap instanceof CompressedTexture) {\n      roughnessMap = decompress(roughnessMap);\n    }\n\n    const metalness = metalnessMap ? metalnessMap.image : null;\n    const roughness = roughnessMap ? roughnessMap.image : null;\n    const width = Math.max(metalness ? metalness.width : 0, roughness ? roughness.width : 0);\n    const height = Math.max(metalness ? metalness.height : 0, roughness ? roughness.height : 0);\n    const canvas = getCanvas();\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#00ffff\";\n    context.fillRect(0, 0, width, height);\n    const composite = context.getImageData(0, 0, width, height);\n\n    if (metalness) {\n      context.drawImage(metalness, 0, 0, width, height);\n      const convert = getEncodingConversion(metalnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n\n      for (let i = 2; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n\n    if (roughness) {\n      context.drawImage(roughness, 0, 0, width, height);\n      const convert = getEncodingConversion(roughnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n\n      for (let i = 1; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n\n    context.putImageData(composite, 0, 0);\n    const reference = metalnessMap || roughnessMap;\n    const texture = reference.clone();\n    texture.source = new Texture(canvas).source;\n    if (\"colorSpace\" in texture) texture.colorSpace = \"\";else texture.encoding = 3e3;\n    texture.channel = (metalnessMap || roughnessMap).channel;\n\n    if (metalnessMap && roughnessMap && metalnessMap.channel !== roughnessMap.channel) {\n      console.warn(\"THREE.GLTFExporter: UV channels for metalnessMap and roughnessMap textures must match.\");\n    }\n\n    return texture;\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n\n\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers) json.buffers = [{\n      byteLength: 0\n    }];\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n\n\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    let componentSize;\n\n    switch (componentType) {\n      case WEBGL_CONSTANTS.BYTE:\n      case WEBGL_CONSTANTS.UNSIGNED_BYTE:\n        componentSize = 1;\n        break;\n\n      case WEBGL_CONSTANTS.SHORT:\n      case WEBGL_CONSTANTS.UNSIGNED_SHORT:\n        componentSize = 2;\n        break;\n\n      default:\n        componentSize = 4;\n    }\n\n    const byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n\n        if (attribute.itemSize > 4) {\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n\n          if (attribute.normalized === true) {\n            value = MathUtils.normalize(value, attribute.array);\n          }\n        }\n\n        if (componentType === WEBGL_CONSTANTS.FLOAT) {\n          dataView.setFloat32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.INT) {\n          dataView.setInt32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n          dataView.setUint32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.SHORT) {\n          dataView.setInt16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n          dataView.setUint16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.BYTE) {\n          dataView.setInt8(offset, value);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n          dataView.setUint8(offset, value);\n        }\n\n        offset += componentSize;\n      }\n    }\n\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength\n    };\n    if (target !== void 0) bufferViewDef.target = target;\n\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef);\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n\n\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    return new Promise(function (resolve) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onloadend = function () {\n        const buffer = getPaddedArrayBuffer(reader.result);\n        const bufferViewDef = {\n          buffer: writer.processBuffer(buffer),\n          byteOffset: writer.byteOffset,\n          byteLength: buffer.byteLength\n        };\n        writer.byteOffset += buffer.byteLength;\n        resolve(json.bufferViews.push(bufferViewDef) - 1);\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n\n\n  processAccessor(attribute, geometry, start, count) {\n    const json = this.json;\n    const types = {\n      1: \"SCALAR\",\n      2: \"VEC2\",\n      3: \"VEC3\",\n      4: \"VEC4\",\n      9: \"MAT3\",\n      16: \"MAT4\"\n    };\n    let componentType;\n\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Int32Array) {\n      componentType = WEBGL_CONSTANTS.INT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Int16Array) {\n      componentType = WEBGL_CONSTANTS.SHORT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Int8Array) {\n      componentType = WEBGL_CONSTANTS.BYTE;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error(\"THREE.GLTFExporter: Unsupported bufferAttribute component type: \" + attribute.array.constructor.name);\n    }\n\n    if (start === void 0) start = 0;\n    if (count === void 0) count = attribute.count;\n    if (count === 0) return null;\n    const minMax = getMinMax(attribute, start, count);\n    let bufferViewTarget;\n\n    if (geometry !== void 0) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n\n    const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n    const accessorDef = {\n      bufferView: bufferView.id,\n      byteOffset: bufferView.byteOffset,\n      componentType,\n      count,\n      max: minMax.max,\n      min: minMax.min,\n      type: types[attribute.itemSize]\n    };\n    if (attribute.normalized === true) accessorDef.normalized = true;\n    if (!json.accessors) json.accessors = [];\n    return json.accessors.push(accessorDef) - 1;\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @param  {String} mimeType export format\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n\n\n  processImage(image, format, flipY, mimeType = \"image/png\") {\n    if (image !== null) {\n      const writer = this;\n      const cache = writer.cache;\n      const json = writer.json;\n      const options = writer.options;\n      const pending = writer.pending;\n      if (!cache.images.has(image)) cache.images.set(image, {});\n      const cachedImages = cache.images.get(image);\n      const key = mimeType + \":flipY/\" + flipY.toString();\n      if (cachedImages[key] !== void 0) return cachedImages[key];\n      if (!json.images) json.images = [];\n      const imageDef = {\n        mimeType\n      };\n      const canvas = getCanvas();\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext(\"2d\");\n\n      if (flipY === true) {\n        ctx.translate(0, canvas.height);\n        ctx.scale(1, -1);\n      }\n\n      if (image.data !== void 0) {\n        if (format !== RGBAFormat) {\n          console.error(\"GLTFExporter: Only RGBAFormat is supported.\", format);\n        }\n\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn(\"GLTFExporter: Image size is bigger than maxTextureSize\", image);\n        }\n\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n\n        for (let i = 0; i < data.length; i += 4) {\n          data[i + 0] = image.data[i + 0];\n          data[i + 1] = image.data[i + 1];\n          data[i + 2] = image.data[i + 2];\n          data[i + 3] = image.data[i + 3];\n        }\n\n        ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      } else {\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      }\n\n      if (options.binary === true) {\n        pending.push(getToBlobPromise(canvas, mimeType).then(blob => writer.processBufferViewImage(blob)).then(bufferViewIndex => {\n          imageDef.bufferView = bufferViewIndex;\n        }));\n      } else {\n        if (canvas.toDataURL !== void 0) {\n          imageDef.uri = canvas.toDataURL(mimeType);\n        } else {\n          pending.push(getToBlobPromise(canvas, mimeType).then(blob => new FileReader().readAsDataURL(blob)).then(dataURL => {\n            imageDef.uri = dataURL;\n          }));\n        }\n      }\n\n      const index = json.images.push(imageDef) - 1;\n      cachedImages[key] = index;\n      return index;\n    } else {\n      throw new Error(\"THREE.GLTFExporter: No valid image data found. Unable to process texture.\");\n    }\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n\n\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers) json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n\n\n  processTexture(map) {\n    const writer = this;\n    const options = writer.options;\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map)) return cache.textures.get(map);\n    if (!json.textures) json.textures = [];\n\n    if (map instanceof CompressedTexture) {\n      map = decompress(map, options.maxTextureSize);\n    }\n\n    let mimeType = map.userData.mimeType;\n    if (mimeType === \"image/webp\") mimeType = \"image/png\";\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY, mimeType)\n    };\n    if (map.name) textureDef.name = map.name;\n\n    this._invokeAll(function (ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n\n\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material)) return cache.materials.get(material);\n\n    if (material.isShaderMaterial) {\n      console.warn(\"GLTFExporter: THREE.ShaderMaterial not supported.\");\n      return null;\n    }\n\n    if (!json.materials) json.materials = [];\n    const materialDef = {\n      pbrMetallicRoughness: {}\n    };\n\n    if (material.isMeshStandardMaterial !== true && material.isMeshBasicMaterial !== true) {\n      console.warn(\"GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.\");\n    }\n\n    const color = material.color.toArray().concat([material.opacity]);\n\n    if (!equalArray(color, [1, 1, 1, 1])) {\n      materialDef.pbrMetallicRoughness.baseColorFactor = color;\n    }\n\n    if (material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    }\n\n    if (material.metalnessMap || material.roughnessMap) {\n      const metalRoughTexture = this.buildMetalRoughTexture(material.metalnessMap, material.roughnessMap);\n      const metalRoughMapDef = {\n        index: this.processTexture(metalRoughTexture),\n        channel: metalRoughTexture.channel\n      };\n      this.applyTextureTransform(metalRoughMapDef, metalRoughTexture);\n      materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n    }\n\n    if (material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map),\n        texCoord: material.map.channel\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n\n    if (material.emissive) {\n      const emissive = material.emissive;\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = material.emissive.toArray();\n      }\n\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap),\n          texCoord: material.emissiveMap.channel\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    }\n\n    if (material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap),\n        texCoord: material.normalMap.channel\n      };\n\n      if (material.normalScale && material.normalScale.x !== 1) {\n        normalMapDef.scale = material.normalScale.x;\n      }\n\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    }\n\n    if (material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: material.aoMap.channel\n      };\n\n      if (material.aoMapIntensity !== 1) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    }\n\n    if (material.transparent) {\n      materialDef.alphaMode = \"BLEND\";\n    } else {\n      if (material.alphaTest > 0) {\n        materialDef.alphaMode = \"MASK\";\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    }\n\n    if (material.side === DoubleSide) materialDef.doubleSided = true;\n    if (material.name !== \"\") materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n\n    this._invokeAll(function (ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n\n\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n\n    const meshCacheKey = meshCacheKeyParts.join(\":\");\n    if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode;\n\n    if (mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = [];\n    const nameConversion = {\n      uv: \"TEXCOORD_0\",\n      [REVISION.replace(/\\D+/g, \"\") >= 152 ? \"uv1\" : \"uv2\"]: \"TEXCOORD_1\",\n      color: \"COLOR_0\",\n      skinWeight: \"WEIGHTS_0\",\n      skinIndex: \"JOINTS_0\"\n    };\n    const originalNormal = geometry.getAttribute(\"normal\");\n\n    if (originalNormal !== void 0 && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn(\"THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.\");\n      geometry.setAttribute(\"normal\", this.createNormalizedNormalAttribute(originalNormal));\n    }\n\n    let modifiedAttribute = null;\n\n    for (let attributeName in geometry.attributes) {\n      if (attributeName.slice(0, 5) === \"morph\") continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase();\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName)) attributeName = \"_\" + attributeName;\n\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      }\n\n      modifiedAttribute = null;\n      const array = attribute.array;\n\n      if (attributeName === \"JOINTS_0\" && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n\n      const accessor = this.processAccessor(modifiedAttribute || attribute, geometry);\n\n      if (accessor !== null) {\n        if (!attributeName.startsWith(\"_\")) {\n          this.detectMeshQuantization(attributeName, attribute);\n        }\n\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n\n    if (originalNormal !== void 0) geometry.setAttribute(\"normal\", originalNormal);\n    if (Object.keys(attributes).length === 0) return null;\n\n    if (mesh.morphTargetInfluences !== void 0 && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n\n      if (mesh.morphTargetDictionary !== void 0) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n\n        for (const attributeName in geometry.morphAttributes) {\n          if (attributeName !== \"position\" && attributeName !== \"normal\") {\n            if (!warned) {\n              console.warn(\"GLTFExporter: Only POSITION and NORMAL morph are supported.\");\n              warned = true;\n            }\n\n            continue;\n          }\n\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase();\n          const baseAttribute = geometry.attributes[attributeName];\n\n          if (cache.attributes.has(this.getUID(attribute, true))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute, true));\n            continue;\n          }\n\n          const relativeAttribute = attribute.clone();\n\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              for (let a = 0; a < attribute.itemSize; a++) {\n                if (a === 0) relativeAttribute.setX(j, attribute.getX(j) - baseAttribute.getX(j));\n                if (a === 1) relativeAttribute.setY(j, attribute.getY(j) - baseAttribute.getY(j));\n                if (a === 2) relativeAttribute.setZ(j, attribute.getZ(j) - baseAttribute.getZ(j));\n                if (a === 3) relativeAttribute.setW(j, attribute.getW(j) - baseAttribute.getW(j));\n              }\n            }\n          }\n\n          target[gltfAttributeName] = this.processAccessor(relativeAttribute, geometry);\n          cache.attributes.set(this.getUID(baseAttribute, true), target[gltfAttributeName]);\n        }\n\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== void 0) targetNames.push(reverseDictionary[i]);\n      }\n\n      meshDef.weights = weights;\n\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0) return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{\n      materialIndex: 0,\n      start: void 0,\n      count: void 0\n    }];\n\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode,\n        attributes\n      };\n      this.serializeUserData(geometry, primitive);\n      if (targets.length > 0) primitive.targets = targets;\n\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n\n        if (groups[i].start !== void 0 || groups[i].count !== void 0) {\n          cacheKey += \":\" + groups[i].start + \":\" + groups[i].count;\n        }\n\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n\n        if (primitive.indices === null) delete primitive.indices;\n      }\n\n      const material = this.processMaterial(materials[groups[i].materialIndex]);\n      if (material !== null) primitive.material = material;\n      primitives.push(primitive);\n    }\n\n    meshDef.primitives = primitives;\n    if (!json.meshes) json.meshes = [];\n\n    this._invokeAll(function (ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * If a vertex attribute with a\n   * [non-standard data type](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#meshes-overview)\n   * is used, it is checked whether it is a valid data type according to the\n   * [KHR_mesh_quantization](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\n   * extension.\n   * In this case the extension is automatically added to the list of used extensions.\n   *\n   * @param {string} attributeName\n   * @param {THREE.BufferAttribute} attribute\n   */\n\n\n  detectMeshQuantization(attributeName, attribute) {\n    if (this.extensionsUsed[KHR_MESH_QUANTIZATION]) return;\n    let attrType = void 0;\n\n    switch (attribute.array.constructor) {\n      case Int8Array:\n        attrType = \"byte\";\n        break;\n\n      case Uint8Array:\n        attrType = \"unsigned byte\";\n        break;\n\n      case Int16Array:\n        attrType = \"short\";\n        break;\n\n      case Uint16Array:\n        attrType = \"unsigned short\";\n        break;\n\n      default:\n        return;\n    }\n\n    if (attribute.normalized) attrType += \" normalized\";\n    const attrNamePrefix = attributeName.split(\"_\", 1)[0];\n\n    if (KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix] && KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix].includes(attrType)) {\n      this.extensionsUsed[KHR_MESH_QUANTIZATION] = true;\n      this.extensionsRequired[KHR_MESH_QUANTIZATION] = true;\n    }\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n\n\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras) json.cameras = [];\n    const isOrtho = camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? \"orthographic\" : \"perspective\"\n    };\n\n    if (isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    }\n\n    if (camera.name !== \"\") cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n\n\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations) json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n\n      if (trackBinding.objectName === \"bones\") {\n        if (trackNode.isSkinnedMesh === true) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = void 0;\n        }\n      }\n\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n\n      let interpolation;\n\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n        interpolation = \"CUBICSPLINE\";\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = \"STEP\";\n      } else {\n        interpolation = \"LINEAR\";\n      }\n\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n\n    json.animations.push({\n      name: clip.name || \"clip_\" + json.animations.length,\n      samplers,\n      channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n\n\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    const node = json.nodes[nodeMap.get(object)];\n    const skeleton = object.skeleton;\n    if (skeleton === void 0) return null;\n    const rootJoint = object.skeleton.bones[0];\n    if (rootJoint === void 0) return null;\n    const joints = [];\n    const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n    const temporaryBoneInverse = new Matrix4();\n\n    for (let i = 0; i < skeleton.bones.length; ++i) {\n      joints.push(nodeMap.get(skeleton.bones[i]));\n      temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n      temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n    }\n\n    if (json.skins === void 0) json.skins = [];\n    json.skins.push({\n      inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n      joints,\n      skeleton: nodeMap.get(rootJoint)\n    });\n    const skinIndex = node.skin = json.skins.length - 1;\n    return skinIndex;\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n\n\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes) json.nodes = [];\n    const nodeDef = {};\n\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n\n      if (!equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n\n      if (!equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n\n      if (!equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n\n      if (isIdentityMatrix(object.matrix) === false) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    }\n\n    if (object.name !== \"\") nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n\n    if (object.isMesh || object.isLine || object.isPoints) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null) nodeDef.mesh = meshIndex;\n    } else if (object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n\n    if (object.isSkinnedMesh) this.skins.push(object);\n\n    if (object.children.length > 0) {\n      const children = [];\n\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n\n        if (child.visible || options.onlyVisible === false) {\n          const nodeIndex2 = this.processNode(child);\n          if (nodeIndex2 !== null) children.push(nodeIndex2);\n        }\n      }\n\n      if (children.length > 0) nodeDef.children = children;\n    }\n\n    this._invokeAll(function (ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n\n\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n\n    const sceneDef = {};\n    if (scene.name !== \"\") sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n\n      if (child.visible || options.onlyVisible === false) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null) nodes.push(nodeIndex);\n      }\n    }\n\n    if (nodes.length > 0) sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n  /**\n   * Creates a Scene to hold a list of objects and parse it\n   * @param  {Array} objects List of objects to process\n   */\n\n\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = \"AuxScene\";\n\n    for (let i = 0; i < objects.length; i++) {\n      scene.children.push(objects[i]);\n    }\n\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n\n\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n\n    this._invokeAll(function (ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n\n    const objectsWithoutScene = [];\n\n    for (let i = 0; i < input.length; i++) {\n      if (input[i] instanceof Scene) {\n        this.processScene(input[i]);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n\n    if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n\n    for (let i = 0; i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n\n    this._invokeAll(function (ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  }\n\n}\n\nclass GLTFLightExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_lights_punctual\";\n  }\n\n  writeNode(light, nodeDef) {\n    if (!light.isLight) return;\n\n    if (!light.isDirectionalLight && !light.isPointLight && !light.isSpotLight) {\n      console.warn(\"THREE.GLTFExporter: Only directional, point, and spot lights are supported.\", light);\n      return;\n    }\n\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name) lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n\n    if (light.isDirectionalLight) {\n      lightDef.type = \"directional\";\n    } else if (light.isPointLight) {\n      lightDef.type = \"point\";\n      if (light.distance > 0) lightDef.range = light.distance;\n    } else if (light.isSpotLight) {\n      lightDef.type = \"spot\";\n      if (light.distance > 0) lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n\n    if (light.decay !== void 0 && light.decay !== 2) {\n      console.warn(\"THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, and expects light.decay=2.\");\n    }\n\n    if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn(\"THREE.GLTFExporter: Light direction may be lost. For best results, make light.target a child of the light with position 0,0,-1.\");\n    }\n\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = {\n        lights: []\n      };\n      extensionsUsed[this.name] = true;\n    }\n\n    const lights = json.extensions[this.name].lights;\n    lights.push(lightDef);\n    nodeDef.extensions = nodeDef.extensions || {};\n    nodeDef.extensions[this.name] = {\n      light: lights.length - 1\n    };\n  }\n\n}\n\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_unlit\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshBasicMaterial) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n\n}\n\nclass GLTFMaterialsClearcoatExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_clearcoat\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.clearcoat === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.clearcoatFactor = material.clearcoat;\n\n    if (material.clearcoatMap) {\n      const clearcoatMapDef = {\n        index: writer.processTexture(material.clearcoatMap),\n        texCoord: material.clearcoatMap.channel\n      };\n      writer.applyTextureTransform(clearcoatMapDef, material.clearcoatMap);\n      extensionDef.clearcoatTexture = clearcoatMapDef;\n    }\n\n    extensionDef.clearcoatRoughnessFactor = material.clearcoatRoughness;\n\n    if (material.clearcoatRoughnessMap) {\n      const clearcoatRoughnessMapDef = {\n        index: writer.processTexture(material.clearcoatRoughnessMap),\n        texCoord: material.clearcoatRoughnessMap.channel\n      };\n      writer.applyTextureTransform(clearcoatRoughnessMapDef, material.clearcoatRoughnessMap);\n      extensionDef.clearcoatRoughnessTexture = clearcoatRoughnessMapDef;\n    }\n\n    if (material.clearcoatNormalMap) {\n      const clearcoatNormalMapDef = {\n        index: writer.processTexture(material.clearcoatNormalMap),\n        texCoord: material.clearcoatNormalMap.channel\n      };\n      writer.applyTextureTransform(clearcoatNormalMapDef, material.clearcoatNormalMap);\n      extensionDef.clearcoatNormalTexture = clearcoatNormalMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsIridescenceExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_iridescence\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.iridescence === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.iridescenceFactor = material.iridescence;\n\n    if (material.iridescenceMap) {\n      const iridescenceMapDef = {\n        index: writer.processTexture(material.iridescenceMap),\n        texCoord: material.iridescenceMap.channel\n      };\n      writer.applyTextureTransform(iridescenceMapDef, material.iridescenceMap);\n      extensionDef.iridescenceTexture = iridescenceMapDef;\n    }\n\n    extensionDef.iridescenceIor = material.iridescenceIOR;\n    extensionDef.iridescenceThicknessMinimum = material.iridescenceThicknessRange[0];\n    extensionDef.iridescenceThicknessMaximum = material.iridescenceThicknessRange[1];\n\n    if (material.iridescenceThicknessMap) {\n      const iridescenceThicknessMapDef = {\n        index: writer.processTexture(material.iridescenceThicknessMap),\n        texCoord: material.iridescenceThicknessMap.channel\n      };\n      writer.applyTextureTransform(iridescenceThicknessMapDef, material.iridescenceThicknessMap);\n      extensionDef.iridescenceThicknessTexture = iridescenceThicknessMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_transmission\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap),\n        texCoord: material.transmissionMap.channel\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_volume\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thicknessFactor = material.thickness;\n\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap),\n        texCoord: material.thicknessMap.channel\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor = material.attenuationColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsIorExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_ior\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.ior === 1.5) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.ior = material.ior;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsSpecularExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_specular\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.specularIntensity === 1 && material.specularColor.equals(DEFAULT_SPECULAR_COLOR) && !material.specularIntensityMap && !material.specularColorTexture) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n\n    if (material.specularIntensityMap) {\n      const specularIntensityMapDef = {\n        index: writer.processTexture(material.specularIntensityMap),\n        texCoord: material.specularIntensityMap.channel\n      };\n      writer.applyTextureTransform(specularIntensityMapDef, material.specularIntensityMap);\n      extensionDef.specularTexture = specularIntensityMapDef;\n    }\n\n    if (material.specularColorMap) {\n      const specularColorMapDef = {\n        index: writer.processTexture(material.specularColorMap),\n        texCoord: material.specularColorMap.channel\n      };\n      writer.applyTextureTransform(specularColorMapDef, material.specularColorMap);\n      extensionDef.specularColorTexture = specularColorMapDef;\n    }\n\n    extensionDef.specularFactor = material.specularIntensity;\n    extensionDef.specularColorFactor = material.specularColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsSheenExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_sheen\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.sheen == 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n\n    if (material.sheenRoughnessMap) {\n      const sheenRoughnessMapDef = {\n        index: writer.processTexture(material.sheenRoughnessMap),\n        texCoord: material.sheenRoughnessMap.channel\n      };\n      writer.applyTextureTransform(sheenRoughnessMapDef, material.sheenRoughnessMap);\n      extensionDef.sheenRoughnessTexture = sheenRoughnessMapDef;\n    }\n\n    if (material.sheenColorMap) {\n      const sheenColorMapDef = {\n        index: writer.processTexture(material.sheenColorMap),\n        texCoord: material.sheenColorMap.channel\n      };\n      writer.applyTextureTransform(sheenColorMapDef, material.sheenColorMap);\n      extensionDef.sheenColorTexture = sheenColorMapDef;\n    }\n\n    extensionDef.sheenRoughnessFactor = material.sheenRoughness;\n    extensionDef.sheenColorFactor = material.sheenColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsAnisotropyExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_anisotropy\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.anisotropy == 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n\n    if (material.anisotropyMap) {\n      const anisotropyMapDef = {\n        index: writer.processTexture(material.anisotropyMap)\n      };\n      writer.applyTextureTransform(anisotropyMapDef, material.anisotropyMap);\n      extensionDef.anisotropyTexture = anisotropyMapDef;\n    }\n\n    extensionDef.anisotropyStrength = material.anisotropy;\n    extensionDef.anisotropyRotation = material.anisotropyRotation;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nclass GLTFMaterialsEmissiveStrengthExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_emissive_strength\";\n  }\n\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshStandardMaterial || material.emissiveIntensity === 1) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.emissiveStrength = material.emissiveIntensity;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n\n}\n\nGLTFExporter.Utils = {\n  insertKeyframe: function (track, time) {\n    const tolerance = 1e-3;\n    const valueSize = track.getValueSize();\n    const times = new track.TimeBufferType(track.times.length + 1);\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n\n    if (track.times.length === 0) {\n      times[0] = time;\n\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance) return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance) return i;\n\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function (clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n\n      if (sourceTrackBinding.propertyName !== \"morphTargetInfluences\" || sourceTrackBinding.propertyIndex === void 0) {\n        tracks.push(sourceTrack);\n        continue;\n      }\n\n      if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          throw new Error(\"THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.\");\n        }\n\n        console.warn(\"THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.\");\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n\n      if (targetIndex === void 0) {\n        throw new Error(\"THREE.GLTFExporter: Morph target name not found: \" + sourceTrackBinding.propertyIndex);\n      }\n\n      let mergedTrack;\n\n      if (mergedTracks[sourceTrackNode.uuid] === void 0) {\n        mergedTrack = sourceTrack.clone();\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        }\n\n        mergedTrack.name = (sourceTrackBinding.nodeName || \"\") + \".morphTargetInfluences\";\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      }\n\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid];\n\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      }\n\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n\n    clip.tracks = tracks;\n    return clip;\n  }\n};\nexport { GLTFExporter };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/exporters/GLTFExporter.js"],"names":["PlaneGeometry","ShaderMaterial","Uniform","Mesh","PerspectiveCamera","Scene","WebGLRenderer","Texture","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","Color","MathUtils","Vector3","CompressedTexture","RGBAFormat","DoubleSide","REVISION","BufferAttribute","PropertyBinding","InterpolateDiscrete","Matrix4","InterpolateLinear","_renderer","fullscreenQuadGeometry","fullscreenQuadMaterial","fullscreenQuad","decompress","texture","maxTextureSize","Infinity","renderer","uniforms","blitTexture","vertexShader","fragmentShader","value","defines","IS_SRGB","colorSpace","encoding","needsUpdate","frustrumCulled","_camera","_scene","add","antialias","setSize","Math","min","image","width","height","clear","render","readableTexture","domElement","minFilter","magFilter","wrapS","wrapT","name","dispose","KHR_mesh_quantization_ExtraAttrTypes","POSITION","NORMAL","TANGENT","TEXCOORD","GLTFExporter","constructor","pluginCallbacks","register","writer","GLTFLightExtension","GLTFMaterialsUnlitExtension","GLTFMaterialsTransmissionExtension","GLTFMaterialsVolumeExtension","GLTFMaterialsIorExtension","GLTFMaterialsSpecularExtension","GLTFMaterialsClearcoatExtension","GLTFMaterialsIridescenceExtension","GLTFMaterialsSheenExtension","GLTFMaterialsAnisotropyExtension","GLTFMaterialsEmissiveStrengthExtension","callback","indexOf","push","unregister","splice","parse","input","onDone","onError","options","GLTFWriter","plugins","i","il","length","setPlugins","write","catch","parseAsync","scope","Promise","resolve","reject","WEBGL_CONSTANTS","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","REPEAT","KHR_MESH_QUANTIZATION","THREE_TO_WEBGL","PATH_PROPERTIES","scale","position","quaternion","morphTargetInfluences","DEFAULT_SPECULAR_COLOR","GLB_HEADER_BYTES","GLB_HEADER_MAGIC","GLB_VERSION","GLB_CHUNK_PREFIX_BYTES","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","equalArray","array1","array2","every","element","index","stringToArrayBuffer","text","TextEncoder","encode","buffer","isIdentityMatrix","matrix","elements","getMinMax","attribute","start","count","output","Array","itemSize","fill","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","a","array","getX","getY","getZ","getW","normalized","normalize","getPaddedBufferSize","bufferSize","ceil","getPaddedArrayBuffer","arrayBuffer","paddingByte","paddedLength","byteLength","Uint8Array","set","getCanvas","document","OffscreenCanvas","createElement","getToBlobPromise","canvas","mimeType","toBlob","quality","convertToBlob","type","pending","buffers","byteOffset","nodeMap","Map","skins","extensionsUsed","extensionsRequired","uids","uid","json","asset","version","generator","cache","meshes","attributes","attributesNormalized","materials","textures","images","Object","assign","binary","trs","onlyVisible","animations","includeCustomExtensions","processInput","all","blob","Blob","extensionsUsedList","keys","extensionsRequiredList","size","reader","FileReader","readAsArrayBuffer","onloadend","binaryChunk","result","binaryChunkPrefix","DataView","ArrayBuffer","setUint32","jsonChunk","JSON","stringify","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","uri","serializeUserData","object","objectDef","userData","gltfExtensions","extensions","extensionName","extras","error","console","warn","message","getUID","isRelativeCopy","has","uids2","get","isNormalizedNormalAttribute","normal","v","abs","fromBufferAttribute","createNormalizedNormalAttribute","clone","x","y","z","setX","setXYZ","applyTextureTransform","mapDef","didTransform","transformDef","offset","toArray","rotation","repeat","buildMetalRoughTexture","metalnessMap","roughnessMap","getEncodingConversion","map","SRGBToLinear","c","pow","LinearToLinear","metalness","roughness","context","getContext","fillStyle","fillRect","composite","getImageData","drawImage","convert","data","putImageData","reference","source","channel","processBuffer","processBufferView","componentType","target","bufferViews","componentSize","dataView","setFloat32","setInt32","setInt16","setUint16","setInt8","setUint8","bufferViewDef","byteStride","id","processBufferViewImage","processAccessor","geometry","types","Float32Array","Int32Array","Uint32Array","Int16Array","Uint16Array","Int8Array","Error","minMax","bufferViewTarget","bufferView","accessorDef","accessors","processImage","format","flipY","cachedImages","key","toString","imageDef","ctx","translate","Uint8ClampedArray","ImageData","then","bufferViewIndex","toDataURL","dataURL","processSampler","samplers","samplerDef","processTexture","textureDef","sampler","_invokeAll","ext","writeTexture","processMaterial","material","isShaderMaterial","materialDef","pbrMetallicRoughness","isMeshStandardMaterial","isMeshBasicMaterial","color","concat","opacity","baseColorFactor","metallicFactor","roughnessFactor","metalRoughTexture","metalRoughMapDef","metallicRoughnessTexture","baseColorMapDef","texCoord","baseColorTexture","emissive","maxEmissiveComponent","r","g","b","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","doubleSided","writeMaterial","processMesh","mesh","meshCacheKeyParts","uuid","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","meshDef","primitives","targets","nameConversion","uv","replace","skinWeight","skinIndex","originalNormal","getAttribute","setAttribute","modifiedAttribute","attributeName","slice","toUpperCase","validVertexAttributes","test","accessor","startsWith","detectMeshQuantization","weights","targetNames","reverseDictionary","morphTargetDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","j","jl","setY","setZ","setW","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","writeMesh","attrType","attrNamePrefix","split","includes","processCamera","camera","cameras","isOrtho","isOrthographicCamera","cameraDef","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","degToRad","fov","processAnimation","clip","root","Utils","mergeMorphTargetTracks","tracks","channels","track","trackBinding","parseTrackName","trackNode","findNode","nodeName","trackProperty","propertyName","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","inputItemSize","outputItemSize","values","times","interpolation","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","getInterpolation","node","path","processSkin","nodes","rootJoint","bones","joints","inverseBindMatrices","temporaryBoneInverse","copy","boneInverses","multiply","bindMatrix","skin","processNode","nodeDef","translation","matrixAutoUpdate","updateMatrix","String","isMesh","meshIndex","isCamera","children","child","visible","nodeIndex2","writeNode","nodeIndex","processScene","scene","scenes","sceneDef","processObjects","objects","beforeParse","objectsWithoutScene","afterParse","func","light","isLight","isDirectionalLight","isPointLight","isSpotLight","lightDef","intensity","distance","range","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","lights","isMeshPhysicalMaterial","clearcoat","extensionDef","clearcoatFactor","clearcoatMap","clearcoatMapDef","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughness","clearcoatRoughnessMap","clearcoatRoughnessMapDef","clearcoatRoughnessTexture","clearcoatNormalMap","clearcoatNormalMapDef","clearcoatNormalTexture","iridescence","iridescenceFactor","iridescenceMap","iridescenceMapDef","iridescenceTexture","iridescenceIor","iridescenceIOR","iridescenceThicknessMinimum","iridescenceThicknessRange","iridescenceThicknessMaximum","iridescenceThicknessMap","iridescenceThicknessMapDef","iridescenceThicknessTexture","transmission","transmissionFactor","transmissionMap","transmissionMapDef","transmissionTexture","thicknessFactor","thickness","thicknessMap","thicknessMapDef","thicknessTexture","attenuationDistance","attenuationColor","ior","specularIntensity","specularColor","equals","specularIntensityMap","specularColorTexture","specularIntensityMapDef","specularTexture","specularColorMap","specularColorMapDef","specularFactor","specularColorFactor","sheen","sheenRoughnessMap","sheenRoughnessMapDef","sheenRoughnessTexture","sheenColorMap","sheenColorMapDef","sheenColorTexture","sheenRoughnessFactor","sheenRoughness","sheenColorFactor","sheenColor","anisotropy","anisotropyMap","anisotropyMapDef","anisotropyTexture","anisotropyStrength","anisotropyRotation","emissiveIntensity","emissiveStrength","insertKeyframe","time","tolerance","valueSize","getValueSize","TimeBufferType","ValueBufferType","interpolant","evaluate","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","propertyIndex","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","setInterpolation","targetCount","targetIndex","mergedTrack","sourceInterpolant","keyframeIndex"],"mappings":"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","sourcesContent":["import { PlaneGeometry, ShaderMaterial, Uniform, Mesh, PerspectiveCamera, Scene, WebGLRenderer, Texture, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping, Color, MathUtils, Vector3, CompressedTexture, RGBAFormat, DoubleSide, REVISION, BufferAttribute, PropertyBinding, InterpolateDiscrete, Matrix4, InterpolateLinear } from \"three\";\nlet _renderer;\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\nfunction decompress(texture, maxTextureSize = Infinity, renderer = null) {\n  if (!fullscreenQuadGeometry)\n    fullscreenQuadGeometry = new PlaneGeometry(2, 2, 1, 1);\n  if (!fullscreenQuadMaterial)\n    fullscreenQuadMaterial = new ShaderMaterial({\n      uniforms: { blitTexture: new Uniform(texture) },\n      vertexShader: (\n        /* glsl */\n        `\n        varying vec2 vUv;\n        void main(){\n            vUv = uv;\n            gl_Position = vec4(position.xy * 1.0,0.,.999999);\n        }\n      `\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n          uniform sampler2D blitTexture; \n          varying vec2 vUv;\n\n          void main(){ \n              gl_FragColor = vec4(vUv.xy, 0, 1);\n              \n              #ifdef IS_SRGB\n              gl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n              #else\n              gl_FragColor = texture2D( blitTexture, vUv);\n              #endif\n          }\n      `\n      )\n    });\n  fullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n  fullscreenQuadMaterial.defines.IS_SRGB = \"colorSpace\" in texture ? texture.colorSpace === \"srgb\" : texture.encoding === 3001;\n  fullscreenQuadMaterial.needsUpdate = true;\n  if (!fullscreenQuad) {\n    fullscreenQuad = new Mesh(fullscreenQuadGeometry, fullscreenQuadMaterial);\n    fullscreenQuad.frustrumCulled = false;\n  }\n  const _camera = new PerspectiveCamera();\n  const _scene = new Scene();\n  _scene.add(fullscreenQuad);\n  if (!renderer) {\n    renderer = _renderer = new WebGLRenderer({ antialias: false });\n  }\n  renderer.setSize(Math.min(texture.image.width, maxTextureSize), Math.min(texture.image.height, maxTextureSize));\n  renderer.clear();\n  renderer.render(_scene, _camera);\n  const readableTexture = new Texture(renderer.domElement);\n  readableTexture.minFilter = texture.minFilter;\n  readableTexture.magFilter = texture.magFilter;\n  readableTexture.wrapS = texture.wrapS;\n  readableTexture.wrapT = texture.wrapT;\n  readableTexture.name = texture.name;\n  if (_renderer) {\n    _renderer.dispose();\n    _renderer = null;\n  }\n  return readableTexture;\n}\nconst KHR_mesh_quantization_ExtraAttrTypes = {\n  POSITION: [\n    \"byte\",\n    \"byte normalized\",\n    \"unsigned byte\",\n    \"unsigned byte normalized\",\n    \"short\",\n    \"short normalized\",\n    \"unsigned short\",\n    \"unsigned short normalized\"\n  ],\n  NORMAL: [\"byte normalized\", \"short normalized\"],\n  TANGENT: [\"byte normalized\", \"short normalized\"],\n  TEXCOORD: [\"byte\", \"byte normalized\", \"unsigned byte\", \"short\", \"short normalized\", \"unsigned short\"]\n};\nclass GLTFExporter {\n  constructor() {\n    this.pluginCallbacks = [];\n    this.register(function(writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsIorExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsSpecularExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsClearcoatExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsIridescenceExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsSheenExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsAnisotropyExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsEmissiveStrengthExtension(writer);\n    });\n  }\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n    return this;\n  }\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n    return this;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Function} onError  Callback on errors\n   * @param  {Object} options options\n   */\n  parse(input, onDone, onError, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options).catch(onError);\n  }\n  parseAsync(input, options) {\n    const scope = this;\n    return new Promise(function(resolve, reject) {\n      scope.parse(input, resolve, reject, options);\n    });\n  }\n}\nconst WEBGL_CONSTANTS = {\n  POINTS: 0,\n  LINES: 1,\n  LINE_LOOP: 2,\n  LINE_STRIP: 3,\n  TRIANGLES: 4,\n  TRIANGLE_STRIP: 5,\n  TRIANGLE_FAN: 6,\n  BYTE: 5120,\n  UNSIGNED_BYTE: 5121,\n  SHORT: 5122,\n  UNSIGNED_SHORT: 5123,\n  INT: 5124,\n  UNSIGNED_INT: 5125,\n  FLOAT: 5126,\n  ARRAY_BUFFER: 34962,\n  ELEMENT_ARRAY_BUFFER: 34963,\n  NEAREST: 9728,\n  LINEAR: 9729,\n  NEAREST_MIPMAP_NEAREST: 9984,\n  LINEAR_MIPMAP_NEAREST: 9985,\n  NEAREST_MIPMAP_LINEAR: 9986,\n  LINEAR_MIPMAP_LINEAR: 9987,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst KHR_MESH_QUANTIZATION = \"KHR_mesh_quantization\";\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: \"scale\",\n  position: \"translation\",\n  quaternion: \"rotation\",\n  morphTargetInfluences: \"weights\"\n};\nconst DEFAULT_SPECULAR_COLOR = new Color();\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 1179937895;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 1313821514;\nconst GLB_CHUNK_TYPE_BIN = 5130562;\nfunction equalArray(array1, array2) {\n  return array1.length === array2.length && array1.every(function(element, index) {\n    return element === array2[index];\n  });\n}\nfunction stringToArrayBuffer(text) {\n  return new TextEncoder().encode(text).buffer;\n}\nfunction isIdentityMatrix(matrix) {\n  return equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n}\nfunction getMinMax(attribute, start, count) {\n  const output = {\n    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n  };\n  for (let i = start; i < start + count; i++) {\n    for (let a = 0; a < attribute.itemSize; a++) {\n      let value;\n      if (attribute.itemSize > 4) {\n        value = attribute.array[i * attribute.itemSize + a];\n      } else {\n        if (a === 0)\n          value = attribute.getX(i);\n        else if (a === 1)\n          value = attribute.getY(i);\n        else if (a === 2)\n          value = attribute.getZ(i);\n        else if (a === 3)\n          value = attribute.getW(i);\n        if (attribute.normalized === true) {\n          value = MathUtils.normalize(value, attribute.array);\n        }\n      }\n      output.min[a] = Math.min(output.min[a], value);\n      output.max[a] = Math.max(output.max[a], value);\n    }\n  }\n  return output;\n}\nfunction getPaddedBufferSize(bufferSize) {\n  return Math.ceil(bufferSize / 4) * 4;\n}\nfunction getPaddedArrayBuffer(arrayBuffer, paddingByte = 0) {\n  const paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n  if (paddedLength !== arrayBuffer.byteLength) {\n    const array = new Uint8Array(paddedLength);\n    array.set(new Uint8Array(arrayBuffer));\n    if (paddingByte !== 0) {\n      for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n        array[i] = paddingByte;\n      }\n    }\n    return array.buffer;\n  }\n  return arrayBuffer;\n}\nfunction getCanvas() {\n  if (typeof document === \"undefined\" && typeof OffscreenCanvas !== \"undefined\") {\n    return new OffscreenCanvas(1, 1);\n  }\n  return document.createElement(\"canvas\");\n}\nfunction getToBlobPromise(canvas, mimeType) {\n  if (canvas.toBlob !== void 0) {\n    return new Promise((resolve) => canvas.toBlob(resolve, mimeType));\n  }\n  let quality;\n  if (mimeType === \"image/jpeg\") {\n    quality = 0.92;\n  } else if (mimeType === \"image/webp\") {\n    quality = 0.8;\n  }\n  return canvas.convertToBlob({\n    type: mimeType,\n    quality\n  });\n}\nclass GLTFWriter {\n  constructor() {\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.buffers = [];\n    this.nodeMap = /* @__PURE__ */ new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.extensionsRequired = {};\n    this.uids = /* @__PURE__ */ new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: \"2.0\",\n        generator: \"THREE.GLTFExporter\"\n      }\n    };\n    this.cache = {\n      meshes: /* @__PURE__ */ new Map(),\n      attributes: /* @__PURE__ */ new Map(),\n      attributesNormalized: /* @__PURE__ */ new Map(),\n      materials: /* @__PURE__ */ new Map(),\n      textures: /* @__PURE__ */ new Map(),\n      images: /* @__PURE__ */ new Map()\n    };\n  }\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n  async write(input, onDone, options = {}) {\n    this.options = Object.assign(\n      {\n        // default options\n        binary: false,\n        trs: false,\n        onlyVisible: true,\n        maxTextureSize: Infinity,\n        animations: [],\n        includeCustomExtensions: false\n      },\n      options\n    );\n    if (this.options.animations.length > 0) {\n      this.options.trs = true;\n    }\n    this.processInput(input);\n    await Promise.all(this.pending);\n    const writer = this;\n    const buffers = writer.buffers;\n    const json = writer.json;\n    options = writer.options;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionsRequired = writer.extensionsRequired;\n    const blob = new Blob(buffers, { type: \"application/octet-stream\" });\n    const extensionsUsedList = Object.keys(extensionsUsed);\n    const extensionsRequiredList = Object.keys(extensionsRequired);\n    if (extensionsUsedList.length > 0)\n      json.extensionsUsed = extensionsUsedList;\n    if (extensionsRequiredList.length > 0)\n      json.extensionsRequired = extensionsRequiredList;\n    if (json.buffers && json.buffers.length > 0)\n      json.buffers[0].byteLength = blob.size;\n    if (options.binary === true) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      reader.onloadend = function() {\n        const binaryChunk = getPaddedArrayBuffer(reader.result);\n        const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);\n        const jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(json)), 32);\n        const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);\n        const header = new ArrayBuffer(GLB_HEADER_BYTES);\n        const headerView = new DataView(header);\n        headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n        headerView.setUint32(4, GLB_VERSION, true);\n        const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n        headerView.setUint32(8, totalByteLength, true);\n        const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n          type: \"application/octet-stream\"\n        });\n        const glbReader = new FileReader();\n        glbReader.readAsArrayBuffer(glbBlob);\n        glbReader.onloadend = function() {\n          onDone(glbReader.result);\n        };\n      };\n    } else {\n      if (json.buffers && json.buffers.length > 0) {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = function() {\n          const base64data = reader.result;\n          json.buffers[0].uri = base64data;\n          onDone(json);\n        };\n      } else {\n        onDone(json);\n      }\n    }\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0)\n      return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === void 0)\n          objectDef.extensions = {};\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n        delete json.gltfExtensions;\n      }\n      if (Object.keys(json).length > 0)\n        objectDef.extras = json;\n    } catch (error) {\n      console.warn(\n        \"THREE.GLTFExporter: userData of '\" + object.name + \"' won't be serialized because of JSON.stringify error - \" + error.message\n      );\n    }\n  }\n  /**\n   * Returns ids for buffer attributes.\n   * @param  {Object} object\n   * @return {Integer}\n   */\n  getUID(attribute, isRelativeCopy = false) {\n    if (this.uids.has(attribute) === false) {\n      const uids2 = /* @__PURE__ */ new Map();\n      uids2.set(true, this.uid++);\n      uids2.set(false, this.uid++);\n      this.uids.set(attribute, uids2);\n    }\n    const uids = this.uids.get(attribute);\n    return uids.get(isRelativeCopy);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal))\n      return false;\n    const v = new Vector3();\n    for (let i = 0, il = normal.count; i < il; i++) {\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1) > 5e-4)\n        return false;\n    }\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal))\n      return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        v.setX(1);\n      } else {\n        v.normalize();\n      }\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions[\"KHR_texture_transform\"] = transformDef;\n      this.extensionsUsed[\"KHR_texture_transform\"] = true;\n    }\n  }\n  buildMetalRoughTexture(metalnessMap, roughnessMap) {\n    if (metalnessMap === roughnessMap)\n      return metalnessMap;\n    function getEncodingConversion(map) {\n      if (\"colorSpace\" in map ? map.colorSpace === \"srgb\" : map.encoding === 3001) {\n        return function SRGBToLinear(c) {\n          return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n        };\n      }\n      return function LinearToLinear(c) {\n        return c;\n      };\n    }\n    console.warn(\"THREE.GLTFExporter: Merged metalnessMap and roughnessMap textures.\");\n    if (metalnessMap instanceof CompressedTexture) {\n      metalnessMap = decompress(metalnessMap);\n    }\n    if (roughnessMap instanceof CompressedTexture) {\n      roughnessMap = decompress(roughnessMap);\n    }\n    const metalness = metalnessMap ? metalnessMap.image : null;\n    const roughness = roughnessMap ? roughnessMap.image : null;\n    const width = Math.max(metalness ? metalness.width : 0, roughness ? roughness.width : 0);\n    const height = Math.max(metalness ? metalness.height : 0, roughness ? roughness.height : 0);\n    const canvas = getCanvas();\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#00ffff\";\n    context.fillRect(0, 0, width, height);\n    const composite = context.getImageData(0, 0, width, height);\n    if (metalness) {\n      context.drawImage(metalness, 0, 0, width, height);\n      const convert = getEncodingConversion(metalnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n      for (let i = 2; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n    if (roughness) {\n      context.drawImage(roughness, 0, 0, width, height);\n      const convert = getEncodingConversion(roughnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n      for (let i = 1; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n    context.putImageData(composite, 0, 0);\n    const reference = metalnessMap || roughnessMap;\n    const texture = reference.clone();\n    texture.source = new Texture(canvas).source;\n    if (\"colorSpace\" in texture)\n      texture.colorSpace = \"\";\n    else\n      texture.encoding = 3e3;\n    texture.channel = (metalnessMap || roughnessMap).channel;\n    if (metalnessMap && roughnessMap && metalnessMap.channel !== roughnessMap.channel) {\n      console.warn(\"THREE.GLTFExporter: UV channels for metalnessMap and roughnessMap textures must match.\");\n    }\n    return texture;\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers)\n      json.buffers = [{ byteLength: 0 }];\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews)\n      json.bufferViews = [];\n    let componentSize;\n    switch (componentType) {\n      case WEBGL_CONSTANTS.BYTE:\n      case WEBGL_CONSTANTS.UNSIGNED_BYTE:\n        componentSize = 1;\n        break;\n      case WEBGL_CONSTANTS.SHORT:\n      case WEBGL_CONSTANTS.UNSIGNED_SHORT:\n        componentSize = 2;\n        break;\n      default:\n        componentSize = 4;\n    }\n    const byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n        if (attribute.itemSize > 4) {\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0)\n            value = attribute.getX(i);\n          else if (a === 1)\n            value = attribute.getY(i);\n          else if (a === 2)\n            value = attribute.getZ(i);\n          else if (a === 3)\n            value = attribute.getW(i);\n          if (attribute.normalized === true) {\n            value = MathUtils.normalize(value, attribute.array);\n          }\n        }\n        if (componentType === WEBGL_CONSTANTS.FLOAT) {\n          dataView.setFloat32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.INT) {\n          dataView.setInt32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n          dataView.setUint32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.SHORT) {\n          dataView.setInt16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n          dataView.setUint16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.BYTE) {\n          dataView.setInt8(offset, value);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n          dataView.setUint8(offset, value);\n        }\n        offset += componentSize;\n      }\n    }\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength\n    };\n    if (target !== void 0)\n      bufferViewDef.target = target;\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef);\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews)\n      json.bufferViews = [];\n    return new Promise(function(resolve) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      reader.onloadend = function() {\n        const buffer = getPaddedArrayBuffer(reader.result);\n        const bufferViewDef = {\n          buffer: writer.processBuffer(buffer),\n          byteOffset: writer.byteOffset,\n          byteLength: buffer.byteLength\n        };\n        writer.byteOffset += buffer.byteLength;\n        resolve(json.bufferViews.push(bufferViewDef) - 1);\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n  processAccessor(attribute, geometry, start, count) {\n    const json = this.json;\n    const types = {\n      1: \"SCALAR\",\n      2: \"VEC2\",\n      3: \"VEC3\",\n      4: \"VEC4\",\n      9: \"MAT3\",\n      16: \"MAT4\"\n    };\n    let componentType;\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Int32Array) {\n      componentType = WEBGL_CONSTANTS.INT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Int16Array) {\n      componentType = WEBGL_CONSTANTS.SHORT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Int8Array) {\n      componentType = WEBGL_CONSTANTS.BYTE;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error(\n        \"THREE.GLTFExporter: Unsupported bufferAttribute component type: \" + attribute.array.constructor.name\n      );\n    }\n    if (start === void 0)\n      start = 0;\n    if (count === void 0)\n      count = attribute.count;\n    if (count === 0)\n      return null;\n    const minMax = getMinMax(attribute, start, count);\n    let bufferViewTarget;\n    if (geometry !== void 0) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n    const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n    const accessorDef = {\n      bufferView: bufferView.id,\n      byteOffset: bufferView.byteOffset,\n      componentType,\n      count,\n      max: minMax.max,\n      min: minMax.min,\n      type: types[attribute.itemSize]\n    };\n    if (attribute.normalized === true)\n      accessorDef.normalized = true;\n    if (!json.accessors)\n      json.accessors = [];\n    return json.accessors.push(accessorDef) - 1;\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @param  {String} mimeType export format\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n  processImage(image, format, flipY, mimeType = \"image/png\") {\n    if (image !== null) {\n      const writer = this;\n      const cache = writer.cache;\n      const json = writer.json;\n      const options = writer.options;\n      const pending = writer.pending;\n      if (!cache.images.has(image))\n        cache.images.set(image, {});\n      const cachedImages = cache.images.get(image);\n      const key = mimeType + \":flipY/\" + flipY.toString();\n      if (cachedImages[key] !== void 0)\n        return cachedImages[key];\n      if (!json.images)\n        json.images = [];\n      const imageDef = { mimeType };\n      const canvas = getCanvas();\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext(\"2d\");\n      if (flipY === true) {\n        ctx.translate(0, canvas.height);\n        ctx.scale(1, -1);\n      }\n      if (image.data !== void 0) {\n        if (format !== RGBAFormat) {\n          console.error(\"GLTFExporter: Only RGBAFormat is supported.\", format);\n        }\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn(\"GLTFExporter: Image size is bigger than maxTextureSize\", image);\n        }\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n        for (let i = 0; i < data.length; i += 4) {\n          data[i + 0] = image.data[i + 0];\n          data[i + 1] = image.data[i + 1];\n          data[i + 2] = image.data[i + 2];\n          data[i + 3] = image.data[i + 3];\n        }\n        ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      } else {\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      }\n      if (options.binary === true) {\n        pending.push(\n          getToBlobPromise(canvas, mimeType).then((blob) => writer.processBufferViewImage(blob)).then((bufferViewIndex) => {\n            imageDef.bufferView = bufferViewIndex;\n          })\n        );\n      } else {\n        if (canvas.toDataURL !== void 0) {\n          imageDef.uri = canvas.toDataURL(mimeType);\n        } else {\n          pending.push(\n            getToBlobPromise(canvas, mimeType).then((blob) => new FileReader().readAsDataURL(blob)).then((dataURL) => {\n              imageDef.uri = dataURL;\n            })\n          );\n        }\n      }\n      const index = json.images.push(imageDef) - 1;\n      cachedImages[key] = index;\n      return index;\n    } else {\n      throw new Error(\"THREE.GLTFExporter: No valid image data found. Unable to process texture.\");\n    }\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers)\n      json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n  processTexture(map) {\n    const writer = this;\n    const options = writer.options;\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map))\n      return cache.textures.get(map);\n    if (!json.textures)\n      json.textures = [];\n    if (map instanceof CompressedTexture) {\n      map = decompress(map, options.maxTextureSize);\n    }\n    let mimeType = map.userData.mimeType;\n    if (mimeType === \"image/webp\")\n      mimeType = \"image/png\";\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY, mimeType)\n    };\n    if (map.name)\n      textureDef.name = map.name;\n    this._invokeAll(function(ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material))\n      return cache.materials.get(material);\n    if (material.isShaderMaterial) {\n      console.warn(\"GLTFExporter: THREE.ShaderMaterial not supported.\");\n      return null;\n    }\n    if (!json.materials)\n      json.materials = [];\n    const materialDef = { pbrMetallicRoughness: {} };\n    if (material.isMeshStandardMaterial !== true && material.isMeshBasicMaterial !== true) {\n      console.warn(\"GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.\");\n    }\n    const color = material.color.toArray().concat([material.opacity]);\n    if (!equalArray(color, [1, 1, 1, 1])) {\n      materialDef.pbrMetallicRoughness.baseColorFactor = color;\n    }\n    if (material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    }\n    if (material.metalnessMap || material.roughnessMap) {\n      const metalRoughTexture = this.buildMetalRoughTexture(material.metalnessMap, material.roughnessMap);\n      const metalRoughMapDef = {\n        index: this.processTexture(metalRoughTexture),\n        channel: metalRoughTexture.channel\n      };\n      this.applyTextureTransform(metalRoughMapDef, metalRoughTexture);\n      materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n    }\n    if (material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map),\n        texCoord: material.map.channel\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n    if (material.emissive) {\n      const emissive = material.emissive;\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = material.emissive.toArray();\n      }\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap),\n          texCoord: material.emissiveMap.channel\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    }\n    if (material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap),\n        texCoord: material.normalMap.channel\n      };\n      if (material.normalScale && material.normalScale.x !== 1) {\n        normalMapDef.scale = material.normalScale.x;\n      }\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    }\n    if (material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: material.aoMap.channel\n      };\n      if (material.aoMapIntensity !== 1) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    }\n    if (material.transparent) {\n      materialDef.alphaMode = \"BLEND\";\n    } else {\n      if (material.alphaTest > 0) {\n        materialDef.alphaMode = \"MASK\";\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    }\n    if (material.side === DoubleSide)\n      materialDef.doubleSided = true;\n    if (material.name !== \"\")\n      materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n    this._invokeAll(function(ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n    const meshCacheKey = meshCacheKeyParts.join(\":\");\n    if (cache.meshes.has(meshCacheKey))\n      return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode;\n    if (mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = [];\n    const nameConversion = {\n      uv: \"TEXCOORD_0\",\n      [REVISION.replace(/\\D+/g, \"\") >= 152 ? \"uv1\" : \"uv2\"]: \"TEXCOORD_1\",\n      color: \"COLOR_0\",\n      skinWeight: \"WEIGHTS_0\",\n      skinIndex: \"JOINTS_0\"\n    };\n    const originalNormal = geometry.getAttribute(\"normal\");\n    if (originalNormal !== void 0 && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn(\"THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.\");\n      geometry.setAttribute(\"normal\", this.createNormalizedNormalAttribute(originalNormal));\n    }\n    let modifiedAttribute = null;\n    for (let attributeName in geometry.attributes) {\n      if (attributeName.slice(0, 5) === \"morph\")\n        continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase();\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName))\n        attributeName = \"_\" + attributeName;\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      }\n      modifiedAttribute = null;\n      const array = attribute.array;\n      if (attributeName === \"JOINTS_0\" && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n      const accessor = this.processAccessor(modifiedAttribute || attribute, geometry);\n      if (accessor !== null) {\n        if (!attributeName.startsWith(\"_\")) {\n          this.detectMeshQuantization(attributeName, attribute);\n        }\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n    if (originalNormal !== void 0)\n      geometry.setAttribute(\"normal\", originalNormal);\n    if (Object.keys(attributes).length === 0)\n      return null;\n    if (mesh.morphTargetInfluences !== void 0 && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n      if (mesh.morphTargetDictionary !== void 0) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n        for (const attributeName in geometry.morphAttributes) {\n          if (attributeName !== \"position\" && attributeName !== \"normal\") {\n            if (!warned) {\n              console.warn(\"GLTFExporter: Only POSITION and NORMAL morph are supported.\");\n              warned = true;\n            }\n            continue;\n          }\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase();\n          const baseAttribute = geometry.attributes[attributeName];\n          if (cache.attributes.has(this.getUID(attribute, true))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute, true));\n            continue;\n          }\n          const relativeAttribute = attribute.clone();\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              for (let a = 0; a < attribute.itemSize; a++) {\n                if (a === 0)\n                  relativeAttribute.setX(j, attribute.getX(j) - baseAttribute.getX(j));\n                if (a === 1)\n                  relativeAttribute.setY(j, attribute.getY(j) - baseAttribute.getY(j));\n                if (a === 2)\n                  relativeAttribute.setZ(j, attribute.getZ(j) - baseAttribute.getZ(j));\n                if (a === 3)\n                  relativeAttribute.setW(j, attribute.getW(j) - baseAttribute.getW(j));\n              }\n            }\n          }\n          target[gltfAttributeName] = this.processAccessor(relativeAttribute, geometry);\n          cache.attributes.set(this.getUID(baseAttribute, true), target[gltfAttributeName]);\n        }\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== void 0)\n          targetNames.push(reverseDictionary[i]);\n      }\n      meshDef.weights = weights;\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0)\n      return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{ materialIndex: 0, start: void 0, count: void 0 }];\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode,\n        attributes\n      };\n      this.serializeUserData(geometry, primitive);\n      if (targets.length > 0)\n        primitive.targets = targets;\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n        if (groups[i].start !== void 0 || groups[i].count !== void 0) {\n          cacheKey += \":\" + groups[i].start + \":\" + groups[i].count;\n        }\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n        if (primitive.indices === null)\n          delete primitive.indices;\n      }\n      const material = this.processMaterial(materials[groups[i].materialIndex]);\n      if (material !== null)\n        primitive.material = material;\n      primitives.push(primitive);\n    }\n    meshDef.primitives = primitives;\n    if (!json.meshes)\n      json.meshes = [];\n    this._invokeAll(function(ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * If a vertex attribute with a\n   * [non-standard data type](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#meshes-overview)\n   * is used, it is checked whether it is a valid data type according to the\n   * [KHR_mesh_quantization](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\n   * extension.\n   * In this case the extension is automatically added to the list of used extensions.\n   *\n   * @param {string} attributeName\n   * @param {THREE.BufferAttribute} attribute\n   */\n  detectMeshQuantization(attributeName, attribute) {\n    if (this.extensionsUsed[KHR_MESH_QUANTIZATION])\n      return;\n    let attrType = void 0;\n    switch (attribute.array.constructor) {\n      case Int8Array:\n        attrType = \"byte\";\n        break;\n      case Uint8Array:\n        attrType = \"unsigned byte\";\n        break;\n      case Int16Array:\n        attrType = \"short\";\n        break;\n      case Uint16Array:\n        attrType = \"unsigned short\";\n        break;\n      default:\n        return;\n    }\n    if (attribute.normalized)\n      attrType += \" normalized\";\n    const attrNamePrefix = attributeName.split(\"_\", 1)[0];\n    if (KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix] && KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix].includes(attrType)) {\n      this.extensionsUsed[KHR_MESH_QUANTIZATION] = true;\n      this.extensionsRequired[KHR_MESH_QUANTIZATION] = true;\n    }\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras)\n      json.cameras = [];\n    const isOrtho = camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? \"orthographic\" : \"perspective\"\n    };\n    if (isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    }\n    if (camera.name !== \"\")\n      cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations)\n      json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n      if (trackBinding.objectName === \"bones\") {\n        if (trackNode.isSkinnedMesh === true) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = void 0;\n        }\n      }\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n      let interpolation;\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n        interpolation = \"CUBICSPLINE\";\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = \"STEP\";\n      } else {\n        interpolation = \"LINEAR\";\n      }\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n    json.animations.push({\n      name: clip.name || \"clip_\" + json.animations.length,\n      samplers,\n      channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    const node = json.nodes[nodeMap.get(object)];\n    const skeleton = object.skeleton;\n    if (skeleton === void 0)\n      return null;\n    const rootJoint = object.skeleton.bones[0];\n    if (rootJoint === void 0)\n      return null;\n    const joints = [];\n    const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n    const temporaryBoneInverse = new Matrix4();\n    for (let i = 0; i < skeleton.bones.length; ++i) {\n      joints.push(nodeMap.get(skeleton.bones[i]));\n      temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n      temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n    }\n    if (json.skins === void 0)\n      json.skins = [];\n    json.skins.push({\n      inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n      joints,\n      skeleton: nodeMap.get(rootJoint)\n    });\n    const skinIndex = node.skin = json.skins.length - 1;\n    return skinIndex;\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes)\n      json.nodes = [];\n    const nodeDef = {};\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n      if (!equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n      if (!equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n      if (!equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n      if (isIdentityMatrix(object.matrix) === false) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    }\n    if (object.name !== \"\")\n      nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n    if (object.isMesh || object.isLine || object.isPoints) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null)\n        nodeDef.mesh = meshIndex;\n    } else if (object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n    if (object.isSkinnedMesh)\n      this.skins.push(object);\n    if (object.children.length > 0) {\n      const children = [];\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n        if (child.visible || options.onlyVisible === false) {\n          const nodeIndex2 = this.processNode(child);\n          if (nodeIndex2 !== null)\n            children.push(nodeIndex2);\n        }\n      }\n      if (children.length > 0)\n        nodeDef.children = children;\n    }\n    this._invokeAll(function(ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n    const sceneDef = {};\n    if (scene.name !== \"\")\n      sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n      if (child.visible || options.onlyVisible === false) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null)\n          nodes.push(nodeIndex);\n      }\n    }\n    if (nodes.length > 0)\n      sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n  /**\n   * Creates a Scene to hold a list of objects and parse it\n   * @param  {Array} objects List of objects to process\n   */\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = \"AuxScene\";\n    for (let i = 0; i < objects.length; i++) {\n      scene.children.push(objects[i]);\n    }\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n    this._invokeAll(function(ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n    const objectsWithoutScene = [];\n    for (let i = 0; i < input.length; i++) {\n      if (input[i] instanceof Scene) {\n        this.processScene(input[i]);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n    if (objectsWithoutScene.length > 0)\n      this.processObjects(objectsWithoutScene);\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n    for (let i = 0; i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n    this._invokeAll(function(ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  }\n}\nclass GLTFLightExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_lights_punctual\";\n  }\n  writeNode(light, nodeDef) {\n    if (!light.isLight)\n      return;\n    if (!light.isDirectionalLight && !light.isPointLight && !light.isSpotLight) {\n      console.warn(\"THREE.GLTFExporter: Only directional, point, and spot lights are supported.\", light);\n      return;\n    }\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name)\n      lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n    if (light.isDirectionalLight) {\n      lightDef.type = \"directional\";\n    } else if (light.isPointLight) {\n      lightDef.type = \"point\";\n      if (light.distance > 0)\n        lightDef.range = light.distance;\n    } else if (light.isSpotLight) {\n      lightDef.type = \"spot\";\n      if (light.distance > 0)\n        lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n    if (light.decay !== void 0 && light.decay !== 2) {\n      console.warn(\n        \"THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, and expects light.decay=2.\"\n      );\n    }\n    if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn(\n        \"THREE.GLTFExporter: Light direction may be lost. For best results, make light.target a child of the light with position 0,0,-1.\"\n      );\n    }\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = { lights: [] };\n      extensionsUsed[this.name] = true;\n    }\n    const lights = json.extensions[this.name].lights;\n    lights.push(lightDef);\n    nodeDef.extensions = nodeDef.extensions || {};\n    nodeDef.extensions[this.name] = { light: lights.length - 1 };\n  }\n}\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_unlit\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshBasicMaterial)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n}\nclass GLTFMaterialsClearcoatExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_clearcoat\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.clearcoat === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.clearcoatFactor = material.clearcoat;\n    if (material.clearcoatMap) {\n      const clearcoatMapDef = {\n        index: writer.processTexture(material.clearcoatMap),\n        texCoord: material.clearcoatMap.channel\n      };\n      writer.applyTextureTransform(clearcoatMapDef, material.clearcoatMap);\n      extensionDef.clearcoatTexture = clearcoatMapDef;\n    }\n    extensionDef.clearcoatRoughnessFactor = material.clearcoatRoughness;\n    if (material.clearcoatRoughnessMap) {\n      const clearcoatRoughnessMapDef = {\n        index: writer.processTexture(material.clearcoatRoughnessMap),\n        texCoord: material.clearcoatRoughnessMap.channel\n      };\n      writer.applyTextureTransform(clearcoatRoughnessMapDef, material.clearcoatRoughnessMap);\n      extensionDef.clearcoatRoughnessTexture = clearcoatRoughnessMapDef;\n    }\n    if (material.clearcoatNormalMap) {\n      const clearcoatNormalMapDef = {\n        index: writer.processTexture(material.clearcoatNormalMap),\n        texCoord: material.clearcoatNormalMap.channel\n      };\n      writer.applyTextureTransform(clearcoatNormalMapDef, material.clearcoatNormalMap);\n      extensionDef.clearcoatNormalTexture = clearcoatNormalMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsIridescenceExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_iridescence\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.iridescence === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.iridescenceFactor = material.iridescence;\n    if (material.iridescenceMap) {\n      const iridescenceMapDef = {\n        index: writer.processTexture(material.iridescenceMap),\n        texCoord: material.iridescenceMap.channel\n      };\n      writer.applyTextureTransform(iridescenceMapDef, material.iridescenceMap);\n      extensionDef.iridescenceTexture = iridescenceMapDef;\n    }\n    extensionDef.iridescenceIor = material.iridescenceIOR;\n    extensionDef.iridescenceThicknessMinimum = material.iridescenceThicknessRange[0];\n    extensionDef.iridescenceThicknessMaximum = material.iridescenceThicknessRange[1];\n    if (material.iridescenceThicknessMap) {\n      const iridescenceThicknessMapDef = {\n        index: writer.processTexture(material.iridescenceThicknessMap),\n        texCoord: material.iridescenceThicknessMap.channel\n      };\n      writer.applyTextureTransform(iridescenceThicknessMapDef, material.iridescenceThicknessMap);\n      extensionDef.iridescenceThicknessTexture = iridescenceThicknessMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_transmission\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap),\n        texCoord: material.transmissionMap.channel\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_volume\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thicknessFactor = material.thickness;\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap),\n        texCoord: material.thicknessMap.channel\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor = material.attenuationColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsIorExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_ior\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.ior === 1.5)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.ior = material.ior;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsSpecularExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_specular\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.specularIntensity === 1 && material.specularColor.equals(DEFAULT_SPECULAR_COLOR) && !material.specularIntensityMap && !material.specularColorTexture)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.specularIntensityMap) {\n      const specularIntensityMapDef = {\n        index: writer.processTexture(material.specularIntensityMap),\n        texCoord: material.specularIntensityMap.channel\n      };\n      writer.applyTextureTransform(specularIntensityMapDef, material.specularIntensityMap);\n      extensionDef.specularTexture = specularIntensityMapDef;\n    }\n    if (material.specularColorMap) {\n      const specularColorMapDef = {\n        index: writer.processTexture(material.specularColorMap),\n        texCoord: material.specularColorMap.channel\n      };\n      writer.applyTextureTransform(specularColorMapDef, material.specularColorMap);\n      extensionDef.specularColorTexture = specularColorMapDef;\n    }\n    extensionDef.specularFactor = material.specularIntensity;\n    extensionDef.specularColorFactor = material.specularColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsSheenExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_sheen\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.sheen == 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.sheenRoughnessMap) {\n      const sheenRoughnessMapDef = {\n        index: writer.processTexture(material.sheenRoughnessMap),\n        texCoord: material.sheenRoughnessMap.channel\n      };\n      writer.applyTextureTransform(sheenRoughnessMapDef, material.sheenRoughnessMap);\n      extensionDef.sheenRoughnessTexture = sheenRoughnessMapDef;\n    }\n    if (material.sheenColorMap) {\n      const sheenColorMapDef = {\n        index: writer.processTexture(material.sheenColorMap),\n        texCoord: material.sheenColorMap.channel\n      };\n      writer.applyTextureTransform(sheenColorMapDef, material.sheenColorMap);\n      extensionDef.sheenColorTexture = sheenColorMapDef;\n    }\n    extensionDef.sheenRoughnessFactor = material.sheenRoughness;\n    extensionDef.sheenColorFactor = material.sheenColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsAnisotropyExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_anisotropy\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.anisotropy == 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.anisotropyMap) {\n      const anisotropyMapDef = { index: writer.processTexture(material.anisotropyMap) };\n      writer.applyTextureTransform(anisotropyMapDef, material.anisotropyMap);\n      extensionDef.anisotropyTexture = anisotropyMapDef;\n    }\n    extensionDef.anisotropyStrength = material.anisotropy;\n    extensionDef.anisotropyRotation = material.anisotropyRotation;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsEmissiveStrengthExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_emissive_strength\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshStandardMaterial || material.emissiveIntensity === 1)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.emissiveStrength = material.emissiveIntensity;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nGLTFExporter.Utils = {\n  insertKeyframe: function(track, time) {\n    const tolerance = 1e-3;\n    const valueSize = track.getValueSize();\n    const times = new track.TimeBufferType(track.times.length + 1);\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n    if (track.times.length === 0) {\n      times[0] = time;\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance)\n        return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance)\n          return i;\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function(clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n      if (sourceTrackBinding.propertyName !== \"morphTargetInfluences\" || sourceTrackBinding.propertyIndex === void 0) {\n        tracks.push(sourceTrack);\n        continue;\n      }\n      if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          throw new Error(\"THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.\");\n        }\n        console.warn(\"THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.\");\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n      if (targetIndex === void 0) {\n        throw new Error(\"THREE.GLTFExporter: Morph target name not found: \" + sourceTrackBinding.propertyIndex);\n      }\n      let mergedTrack;\n      if (mergedTracks[sourceTrackNode.uuid] === void 0) {\n        mergedTrack = sourceTrack.clone();\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        }\n        mergedTrack.name = (sourceTrackBinding.nodeName || \"\") + \".morphTargetInfluences\";\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      }\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid];\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      }\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n    clip.tracks = tracks;\n    return clip;\n  }\n};\nexport {\n  GLTFExporter\n};\n"]},"metadata":{},"sourceType":"module"}