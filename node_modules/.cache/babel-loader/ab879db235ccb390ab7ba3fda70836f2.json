{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from \"three\";\n\nclass MTLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setMaterialOptions(value) {\n    this.materialOptions = value;\n    return this;\n  }\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n\n\n  parse(text, path) {\n    const lines = text.split(\"\\n\");\n    let info = {};\n    const delimiter_pattern = /\\s+/;\n    const materialsInfo = {};\n\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === \"#\") {\n        continue;\n      }\n\n      const pos = line.indexOf(\" \");\n      let key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      let value = pos >= 0 ? line.substring(pos + 1) : \"\";\n      value = value.trim();\n\n      if (key === \"newmtl\") {\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else {\n        if (key === \"ka\" || key === \"kd\" || key === \"ks\" || key === \"ke\") {\n          const ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    const materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n\n}\n\nclass MaterialCreator {\n  constructor(baseUrl = \"\", options = {}) {\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = \"anonymous\";\n    this.side = this.options.side !== void 0 ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== void 0 ? this.options.wrap : RepeatWrapping;\n  }\n\n  setCrossOrigin(value) {\n    this.crossOrigin = value;\n    return this;\n  }\n\n  setManager(value) {\n    this.manager = value;\n  }\n\n  setMaterials(materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  }\n\n  convert(materialsInfo) {\n    if (!this.options) return materialsInfo;\n    const converted = {};\n\n    for (const mn in materialsInfo) {\n      const mat = materialsInfo[mn];\n      const covmat = {};\n      converted[mn] = covmat;\n\n      for (const prop in mat) {\n        let save = true;\n        let value = mat[prop];\n        const lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case \"kd\":\n          case \"ka\":\n          case \"ks\":\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                save = false;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  }\n\n  preload() {\n    for (const mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  }\n\n  getIndex(materialName) {\n    return this.nameLookup[materialName];\n  }\n\n  getAsArray() {\n    let index = 0;\n\n    for (const mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  }\n\n  create(materialName) {\n    if (this.materials[materialName] === void 0) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  }\n\n  createMaterial_(materialName) {\n    const scope = this;\n    const mat = this.materialsInfo[materialName];\n    const params = {\n      name: materialName,\n      side: this.side\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== \"string\" || url === \"\") return \"\";\n      if (/^https?:\\/\\//i.test(url)) return url;\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return;\n      const texParams = scope.getTextureParams(value, params);\n      const map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n\n    for (const prop in mat) {\n      const value = mat[prop];\n      let n;\n      if (value === \"\") continue;\n\n      switch (prop.toLowerCase()) {\n        case \"kd\":\n          params.color = new Color().fromArray(value);\n          break;\n\n        case \"ks\":\n          params.specular = new Color().fromArray(value);\n          break;\n\n        case \"ke\":\n          params.emissive = new Color().fromArray(value);\n          break;\n\n        case \"map_kd\":\n          setMapForType(\"map\", value);\n          break;\n\n        case \"map_ks\":\n          setMapForType(\"specularMap\", value);\n          break;\n\n        case \"map_ke\":\n          setMapForType(\"emissiveMap\", value);\n          break;\n\n        case \"norm\":\n          setMapForType(\"normalMap\", value);\n          break;\n\n        case \"map_bump\":\n        case \"bump\":\n          setMapForType(\"bumpMap\", value);\n          break;\n\n        case \"map_d\":\n          setMapForType(\"alphaMap\", value);\n          params.transparent = true;\n          break;\n\n        case \"ns\":\n          params.shininess = parseFloat(value);\n          break;\n\n        case \"d\":\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case \"tr\":\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.materials[materialName] = new MeshPhongMaterial(params);\n    return this.materials[materialName];\n  }\n\n  getTextureParams(value, matParams) {\n    const texParams = {\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    const items = value.split(/\\s+/);\n    let pos;\n    pos = items.indexOf(\"-bm\");\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf(\"-s\");\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4);\n    }\n\n    pos = items.indexOf(\"-o\");\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4);\n    }\n\n    texParams.url = items.join(\" \").trim();\n    return texParams;\n  }\n\n  loadTexture(url, mapping, onLoad, onProgress, onError) {\n    const manager = this.manager !== void 0 ? this.manager : DefaultLoadingManager;\n    let loader = manager.getHandler(url);\n\n    if (loader === null) {\n      loader = new TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    const texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== void 0) texture.mapping = mapping;\n    return texture;\n  }\n\n}\n\nexport { MTLLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/MTLLoader.js"],"names":["Loader","LoaderUtils","FileLoader","FrontSide","RepeatWrapping","Color","MeshPhongMaterial","Vector2","DefaultLoadingManager","TextureLoader","MTLLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","getHandler","texture"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from \"three\";\nclass MTLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  setMaterialOptions(value) {\n    this.materialOptions = value;\n    return this;\n  }\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n  parse(text, path) {\n    const lines = text.split(\"\\n\");\n    let info = {};\n    const delimiter_pattern = /\\s+/;\n    const materialsInfo = {};\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      line = line.trim();\n      if (line.length === 0 || line.charAt(0) === \"#\") {\n        continue;\n      }\n      const pos = line.indexOf(\" \");\n      let key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      let value = pos >= 0 ? line.substring(pos + 1) : \"\";\n      value = value.trim();\n      if (key === \"newmtl\") {\n        info = { name: value };\n        materialsInfo[value] = info;\n      } else {\n        if (key === \"ka\" || key === \"kd\" || key === \"ks\" || key === \"ke\") {\n          const ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n    const materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n}\nclass MaterialCreator {\n  constructor(baseUrl = \"\", options = {}) {\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = \"anonymous\";\n    this.side = this.options.side !== void 0 ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== void 0 ? this.options.wrap : RepeatWrapping;\n  }\n  setCrossOrigin(value) {\n    this.crossOrigin = value;\n    return this;\n  }\n  setManager(value) {\n    this.manager = value;\n  }\n  setMaterials(materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  }\n  convert(materialsInfo) {\n    if (!this.options)\n      return materialsInfo;\n    const converted = {};\n    for (const mn in materialsInfo) {\n      const mat = materialsInfo[mn];\n      const covmat = {};\n      converted[mn] = covmat;\n      for (const prop in mat) {\n        let save = true;\n        let value = mat[prop];\n        const lprop = prop.toLowerCase();\n        switch (lprop) {\n          case \"kd\":\n          case \"ka\":\n          case \"ks\":\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                save = false;\n              }\n            }\n            break;\n          default:\n            break;\n        }\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n    return converted;\n  }\n  preload() {\n    for (const mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  }\n  getIndex(materialName) {\n    return this.nameLookup[materialName];\n  }\n  getAsArray() {\n    let index = 0;\n    for (const mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n    return this.materialsArray;\n  }\n  create(materialName) {\n    if (this.materials[materialName] === void 0) {\n      this.createMaterial_(materialName);\n    }\n    return this.materials[materialName];\n  }\n  createMaterial_(materialName) {\n    const scope = this;\n    const mat = this.materialsInfo[materialName];\n    const params = {\n      name: materialName,\n      side: this.side\n    };\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== \"string\" || url === \"\")\n        return \"\";\n      if (/^https?:\\/\\//i.test(url))\n        return url;\n      return baseUrl + url;\n    }\n    function setMapForType(mapType, value) {\n      if (params[mapType])\n        return;\n      const texParams = scope.getTextureParams(value, params);\n      const map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n    for (const prop in mat) {\n      const value = mat[prop];\n      let n;\n      if (value === \"\")\n        continue;\n      switch (prop.toLowerCase()) {\n        case \"kd\":\n          params.color = new Color().fromArray(value);\n          break;\n        case \"ks\":\n          params.specular = new Color().fromArray(value);\n          break;\n        case \"ke\":\n          params.emissive = new Color().fromArray(value);\n          break;\n        case \"map_kd\":\n          setMapForType(\"map\", value);\n          break;\n        case \"map_ks\":\n          setMapForType(\"specularMap\", value);\n          break;\n        case \"map_ke\":\n          setMapForType(\"emissiveMap\", value);\n          break;\n        case \"norm\":\n          setMapForType(\"normalMap\", value);\n          break;\n        case \"map_bump\":\n        case \"bump\":\n          setMapForType(\"bumpMap\", value);\n          break;\n        case \"map_d\":\n          setMapForType(\"alphaMap\", value);\n          params.transparent = true;\n          break;\n        case \"ns\":\n          params.shininess = parseFloat(value);\n          break;\n        case \"d\":\n          n = parseFloat(value);\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n          break;\n        case \"tr\":\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty)\n            n = 1 - n;\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    this.materials[materialName] = new MeshPhongMaterial(params);\n    return this.materials[materialName];\n  }\n  getTextureParams(value, matParams) {\n    const texParams = {\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    const items = value.split(/\\s+/);\n    let pos;\n    pos = items.indexOf(\"-bm\");\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n    pos = items.indexOf(\"-s\");\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4);\n    }\n    pos = items.indexOf(\"-o\");\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4);\n    }\n    texParams.url = items.join(\" \").trim();\n    return texParams;\n  }\n  loadTexture(url, mapping, onLoad, onProgress, onError) {\n    const manager = this.manager !== void 0 ? this.manager : DefaultLoadingManager;\n    let loader = manager.getHandler(url);\n    if (loader === null) {\n      loader = new TextureLoader(manager);\n    }\n    if (loader.setCrossOrigin)\n      loader.setCrossOrigin(this.crossOrigin);\n    const texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== void 0)\n      texture.mapping = mapping;\n    return texture;\n  }\n}\nexport {\n  MTLLoader\n};\n"]},"metadata":{},"sourceType":"module"}