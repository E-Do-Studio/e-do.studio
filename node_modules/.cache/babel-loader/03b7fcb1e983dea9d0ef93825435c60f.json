{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, LoaderUtils } from \"three\";\n\nvar PLYLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PLYLoader, _Loader);\n\n  var _super = _createSuper(PLYLoader);\n\n  function PLYLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, PLYLoader);\n\n    _this = _super.call(this, manager);\n    _this.propertyNameMapping = {};\n    return _this;\n  }\n\n  _createClass(PLYLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setPropertyNameMapping\",\n    value: function setPropertyNameMapping(mapping) {\n      this.propertyNameMapping = mapping;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function parseHeader(data2) {\n        var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n        var headerText = \"\";\n        var headerLength = 0;\n        var result = patternHeader.exec(data2);\n\n        if (result !== null) {\n          headerText = result[1];\n          headerLength = new Blob([result[0]]).size;\n        }\n\n        var header = {\n          comments: [],\n          elements: [],\n          headerLength: headerLength,\n          objInfo: \"\"\n        };\n        var lines = headerText.split(\"\\n\");\n        var currentElement;\n\n        function make_ply_element_property(propertValues, propertyNameMapping) {\n          var property = {\n            type: propertValues[0]\n          };\n\n          if (property.type === \"list\") {\n            property.name = propertValues[3];\n            property.countType = propertValues[1];\n            property.itemType = propertValues[2];\n          } else {\n            property.name = propertValues[1];\n          }\n\n          if (property.name in propertyNameMapping) {\n            property.name = propertyNameMapping[property.name];\n          }\n\n          return property;\n        }\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n          if (line === \"\") continue;\n          var lineValues = line.split(/\\s+/);\n          var lineType = lineValues.shift();\n          line = lineValues.join(\" \");\n\n          switch (lineType) {\n            case \"format\":\n              header.format = lineValues[0];\n              header.version = lineValues[1];\n              break;\n\n            case \"comment\":\n              header.comments.push(line);\n              break;\n\n            case \"element\":\n              if (currentElement !== void 0) {\n                header.elements.push(currentElement);\n              }\n\n              currentElement = {};\n              currentElement.name = lineValues[0];\n              currentElement.count = parseInt(lineValues[1]);\n              currentElement.properties = [];\n              break;\n\n            case \"property\":\n              currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n              break;\n\n            case \"obj_info\":\n              header.objInfo = line;\n              break;\n\n            default:\n              console.log(\"unhandled\", lineType, lineValues);\n          }\n        }\n\n        if (currentElement !== void 0) {\n          header.elements.push(currentElement);\n        }\n\n        return header;\n      }\n\n      function parseASCIINumber(n, type) {\n        switch (type) {\n          case \"char\":\n          case \"uchar\":\n          case \"short\":\n          case \"ushort\":\n          case \"int\":\n          case \"uint\":\n          case \"int8\":\n          case \"uint8\":\n          case \"int16\":\n          case \"uint16\":\n          case \"int32\":\n          case \"uint32\":\n            return parseInt(n);\n\n          case \"float\":\n          case \"double\":\n          case \"float32\":\n          case \"float64\":\n            return parseFloat(n);\n        }\n      }\n\n      function parseASCIIElement(properties, line) {\n        var values = line.split(/\\s+/);\n        var element = {};\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === \"list\") {\n            var list = [];\n            var n = parseASCIINumber(values.shift(), properties[i].countType);\n\n            for (var j = 0; j < n; j++) {\n              list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n            }\n\n            element[properties[i].name] = list;\n          } else {\n            element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n          }\n        }\n\n        return element;\n      }\n\n      function parseASCII(data2, header) {\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var result;\n        var patternBody = /end_header\\s([\\s\\S]*)$/;\n        var body = \"\";\n\n        if ((result = patternBody.exec(data2)) !== null) {\n          body = result[1];\n        }\n\n        var lines = body.split(\"\\n\");\n        var currentElement = 0;\n        var currentElementCount = 0;\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n\n          if (line === \"\") {\n            continue;\n          }\n\n          if (currentElementCount >= header.elements[currentElement].count) {\n            currentElement++;\n            currentElementCount = 0;\n          }\n\n          var element = parseASCIIElement(header.elements[currentElement].properties, line);\n          handleElement(buffer, header.elements[currentElement].name, element);\n          currentElementCount++;\n        }\n\n        return postProcess(buffer);\n      }\n\n      function postProcess(buffer) {\n        var geometry2 = new BufferGeometry();\n\n        if (buffer.indices.length > 0) {\n          geometry2.setIndex(buffer.indices);\n        }\n\n        geometry2.setAttribute(\"position\", new Float32BufferAttribute(buffer.vertices, 3));\n\n        if (buffer.normals.length > 0) {\n          geometry2.setAttribute(\"normal\", new Float32BufferAttribute(buffer.normals, 3));\n        }\n\n        if (buffer.uvs.length > 0) {\n          geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.uvs, 2));\n        }\n\n        if (buffer.colors.length > 0) {\n          geometry2.setAttribute(\"color\", new Float32BufferAttribute(buffer.colors, 3));\n        }\n\n        if (buffer.faceVertexUvs.length > 0) {\n          geometry2 = geometry2.toNonIndexed();\n          geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n        }\n\n        geometry2.computeBoundingSphere();\n        return geometry2;\n      }\n\n      function handleElement(buffer, elementName, element) {\n        if (elementName === \"vertex\") {\n          buffer.vertices.push(element.x, element.y, element.z);\n\n          if (\"nx\" in element && \"ny\" in element && \"nz\" in element) {\n            buffer.normals.push(element.nx, element.ny, element.nz);\n          }\n\n          if (\"s\" in element && \"t\" in element) {\n            buffer.uvs.push(element.s, element.t);\n          }\n\n          if (\"red\" in element && \"green\" in element && \"blue\" in element) {\n            buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n          }\n        } else if (elementName === \"face\") {\n          var vertex_indices = element.vertex_indices || element.vertex_index;\n          var texcoord = element.texcoord;\n\n          if (vertex_indices.length === 3) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n\n            if (texcoord && texcoord.length === 6) {\n              buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n              buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n              buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n            }\n          } else if (vertex_indices.length === 4) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n            buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n          }\n        }\n      }\n\n      function binaryRead(dataview, at, type, little_endian) {\n        switch (type) {\n          case \"int8\":\n          case \"char\":\n            return [dataview.getInt8(at), 1];\n\n          case \"uint8\":\n          case \"uchar\":\n            return [dataview.getUint8(at), 1];\n\n          case \"int16\":\n          case \"short\":\n            return [dataview.getInt16(at, little_endian), 2];\n\n          case \"uint16\":\n          case \"ushort\":\n            return [dataview.getUint16(at, little_endian), 2];\n\n          case \"int32\":\n          case \"int\":\n            return [dataview.getInt32(at, little_endian), 4];\n\n          case \"uint32\":\n          case \"uint\":\n            return [dataview.getUint32(at, little_endian), 4];\n\n          case \"float32\":\n          case \"float\":\n            return [dataview.getFloat32(at, little_endian), 4];\n\n          case \"float64\":\n          case \"double\":\n            return [dataview.getFloat64(at, little_endian), 8];\n        }\n      }\n\n      function binaryReadElement(dataview, at, properties, little_endian) {\n        var element = {};\n        var result,\n            read = 0;\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === \"list\") {\n            var list = [];\n            result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n            var n = result[0];\n            read += result[1];\n\n            for (var j = 0; j < n; j++) {\n              result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n              list.push(result[0]);\n              read += result[1];\n            }\n\n            element[properties[i].name] = list;\n          } else {\n            result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n            element[properties[i].name] = result[0];\n            read += result[1];\n          }\n        }\n\n        return [element, read];\n      }\n\n      function parseBinary(data2, header) {\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var little_endian = header.format === \"binary_little_endian\";\n        var body = new DataView(data2, header.headerLength);\n        var result,\n            loc = 0;\n\n        for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n          for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n            result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n            loc += result[1];\n            var element = result[0];\n            handleElement(buffer, header.elements[currentElement].name, element);\n          }\n        }\n\n        return postProcess(buffer);\n      }\n\n      var geometry;\n      var scope = this;\n\n      if (data instanceof ArrayBuffer) {\n        var text = LoaderUtils.decodeText(new Uint8Array(data));\n        var header = parseHeader(text);\n        geometry = header.format === \"ascii\" ? parseASCII(text, header) : parseBinary(data, header);\n      } else {\n        geometry = parseASCII(data, parseHeader(data));\n      }\n\n      return geometry;\n    }\n  }]);\n\n  return PLYLoader;\n}(Loader);\n\nexport { PLYLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/PLYLoader.js"],"names":["Loader","FileLoader","BufferGeometry","Float32BufferAttribute","LoaderUtils","PLYLoader","manager","propertyNameMapping","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","mapping","data","parseHeader","data2","patternHeader","headerText","headerLength","result","exec","Blob","size","header","comments","elements","objInfo","lines","split","currentElement","make_ply_element_property","propertValues","property","type","name","countType","itemType","i","length","line","trim","lineValues","lineType","shift","join","format","version","push","count","parseInt","properties","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","patternBody","body","currentElementCount","handleElement","postProcess","geometry2","setIndex","setAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","parseBinary","DataView","loc","geometry","ArrayBuffer","decodeText","Uint8Array"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, LoaderUtils } from \"three\";\nclass PLYLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.propertyNameMapping = {};\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  setPropertyNameMapping(mapping) {\n    this.propertyNameMapping = mapping;\n  }\n  parse(data) {\n    function parseHeader(data2) {\n      const patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n      let headerText = \"\";\n      let headerLength = 0;\n      const result = patternHeader.exec(data2);\n      if (result !== null) {\n        headerText = result[1];\n        headerLength = new Blob([result[0]]).size;\n      }\n      const header = {\n        comments: [],\n        elements: [],\n        headerLength,\n        objInfo: \"\"\n      };\n      const lines = headerText.split(\"\\n\");\n      let currentElement;\n      function make_ply_element_property(propertValues, propertyNameMapping) {\n        const property = { type: propertValues[0] };\n        if (property.type === \"list\") {\n          property.name = propertValues[3];\n          property.countType = propertValues[1];\n          property.itemType = propertValues[2];\n        } else {\n          property.name = propertValues[1];\n        }\n        if (property.name in propertyNameMapping) {\n          property.name = propertyNameMapping[property.name];\n        }\n        return property;\n      }\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === \"\")\n          continue;\n        const lineValues = line.split(/\\s+/);\n        const lineType = lineValues.shift();\n        line = lineValues.join(\" \");\n        switch (lineType) {\n          case \"format\":\n            header.format = lineValues[0];\n            header.version = lineValues[1];\n            break;\n          case \"comment\":\n            header.comments.push(line);\n            break;\n          case \"element\":\n            if (currentElement !== void 0) {\n              header.elements.push(currentElement);\n            }\n            currentElement = {};\n            currentElement.name = lineValues[0];\n            currentElement.count = parseInt(lineValues[1]);\n            currentElement.properties = [];\n            break;\n          case \"property\":\n            currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n            break;\n          case \"obj_info\":\n            header.objInfo = line;\n            break;\n          default:\n            console.log(\"unhandled\", lineType, lineValues);\n        }\n      }\n      if (currentElement !== void 0) {\n        header.elements.push(currentElement);\n      }\n      return header;\n    }\n    function parseASCIINumber(n, type) {\n      switch (type) {\n        case \"char\":\n        case \"uchar\":\n        case \"short\":\n        case \"ushort\":\n        case \"int\":\n        case \"uint\":\n        case \"int8\":\n        case \"uint8\":\n        case \"int16\":\n        case \"uint16\":\n        case \"int32\":\n        case \"uint32\":\n          return parseInt(n);\n        case \"float\":\n        case \"double\":\n        case \"float32\":\n        case \"float64\":\n          return parseFloat(n);\n      }\n    }\n    function parseASCIIElement(properties, line) {\n      const values = line.split(/\\s+/);\n      const element = {};\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === \"list\") {\n          const list = [];\n          const n = parseASCIINumber(values.shift(), properties[i].countType);\n          for (let j = 0; j < n; j++) {\n            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n          }\n          element[properties[i].name] = list;\n        } else {\n          element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n        }\n      }\n      return element;\n    }\n    function parseASCII(data2, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      let result;\n      const patternBody = /end_header\\s([\\s\\S]*)$/;\n      let body = \"\";\n      if ((result = patternBody.exec(data2)) !== null) {\n        body = result[1];\n      }\n      const lines = body.split(\"\\n\");\n      let currentElement = 0;\n      let currentElementCount = 0;\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === \"\") {\n          continue;\n        }\n        if (currentElementCount >= header.elements[currentElement].count) {\n          currentElement++;\n          currentElementCount = 0;\n        }\n        const element = parseASCIIElement(header.elements[currentElement].properties, line);\n        handleElement(buffer, header.elements[currentElement].name, element);\n        currentElementCount++;\n      }\n      return postProcess(buffer);\n    }\n    function postProcess(buffer) {\n      let geometry2 = new BufferGeometry();\n      if (buffer.indices.length > 0) {\n        geometry2.setIndex(buffer.indices);\n      }\n      geometry2.setAttribute(\"position\", new Float32BufferAttribute(buffer.vertices, 3));\n      if (buffer.normals.length > 0) {\n        geometry2.setAttribute(\"normal\", new Float32BufferAttribute(buffer.normals, 3));\n      }\n      if (buffer.uvs.length > 0) {\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.uvs, 2));\n      }\n      if (buffer.colors.length > 0) {\n        geometry2.setAttribute(\"color\", new Float32BufferAttribute(buffer.colors, 3));\n      }\n      if (buffer.faceVertexUvs.length > 0) {\n        geometry2 = geometry2.toNonIndexed();\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n      }\n      geometry2.computeBoundingSphere();\n      return geometry2;\n    }\n    function handleElement(buffer, elementName, element) {\n      if (elementName === \"vertex\") {\n        buffer.vertices.push(element.x, element.y, element.z);\n        if (\"nx\" in element && \"ny\" in element && \"nz\" in element) {\n          buffer.normals.push(element.nx, element.ny, element.nz);\n        }\n        if (\"s\" in element && \"t\" in element) {\n          buffer.uvs.push(element.s, element.t);\n        }\n        if (\"red\" in element && \"green\" in element && \"blue\" in element) {\n          buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n        }\n      } else if (elementName === \"face\") {\n        const vertex_indices = element.vertex_indices || element.vertex_index;\n        const texcoord = element.texcoord;\n        if (vertex_indices.length === 3) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n          if (texcoord && texcoord.length === 6) {\n            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n          }\n        } else if (vertex_indices.length === 4) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n          buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n        }\n      }\n    }\n    function binaryRead(dataview, at, type, little_endian) {\n      switch (type) {\n        case \"int8\":\n        case \"char\":\n          return [dataview.getInt8(at), 1];\n        case \"uint8\":\n        case \"uchar\":\n          return [dataview.getUint8(at), 1];\n        case \"int16\":\n        case \"short\":\n          return [dataview.getInt16(at, little_endian), 2];\n        case \"uint16\":\n        case \"ushort\":\n          return [dataview.getUint16(at, little_endian), 2];\n        case \"int32\":\n        case \"int\":\n          return [dataview.getInt32(at, little_endian), 4];\n        case \"uint32\":\n        case \"uint\":\n          return [dataview.getUint32(at, little_endian), 4];\n        case \"float32\":\n        case \"float\":\n          return [dataview.getFloat32(at, little_endian), 4];\n        case \"float64\":\n        case \"double\":\n          return [dataview.getFloat64(at, little_endian), 8];\n      }\n    }\n    function binaryReadElement(dataview, at, properties, little_endian) {\n      const element = {};\n      let result, read = 0;\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === \"list\") {\n          const list = [];\n          result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n          const n = result[0];\n          read += result[1];\n          for (let j = 0; j < n; j++) {\n            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n            list.push(result[0]);\n            read += result[1];\n          }\n          element[properties[i].name] = list;\n        } else {\n          result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n          element[properties[i].name] = result[0];\n          read += result[1];\n        }\n      }\n      return [element, read];\n    }\n    function parseBinary(data2, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      const little_endian = header.format === \"binary_little_endian\";\n      const body = new DataView(data2, header.headerLength);\n      let result, loc = 0;\n      for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n        for (let currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n          result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n          loc += result[1];\n          const element = result[0];\n          handleElement(buffer, header.elements[currentElement].name, element);\n        }\n      }\n      return postProcess(buffer);\n    }\n    let geometry;\n    const scope = this;\n    if (data instanceof ArrayBuffer) {\n      const text = LoaderUtils.decodeText(new Uint8Array(data));\n      const header = parseHeader(text);\n      geometry = header.format === \"ascii\" ? parseASCII(text, header) : parseBinary(data, header);\n    } else {\n      geometry = parseASCII(data, parseHeader(data));\n    }\n    return geometry;\n  }\n}\nexport {\n  PLYLoader\n};\n"]},"metadata":{},"sourceType":"module"}