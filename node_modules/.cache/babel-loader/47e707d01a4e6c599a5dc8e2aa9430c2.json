{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute } from \"three\";\nvar bigEndianPlatform = null;\n\nfunction _isBigEndianPlatform() {\n  if (bigEndianPlatform === null) {\n    var buffer = new ArrayBuffer(2),\n        uint8Array = new Uint8Array(buffer),\n        uint16Array = new Uint16Array(buffer);\n    uint8Array[0] = 170;\n    uint8Array[1] = 187;\n    bigEndianPlatform = uint16Array[0] === 43707;\n  }\n\n  return bigEndianPlatform;\n}\n\nvar InvertedEncodingTypes = [null, Float32Array, null, Int8Array, Int16Array, null, Int32Array, Uint8Array, Uint16Array, null, Uint32Array];\nvar getMethods = {\n  Uint16Array: \"getUint16\",\n  Uint32Array: \"getUint32\",\n  Int16Array: \"getInt16\",\n  Int32Array: \"getInt32\",\n  Float32Array: \"getFloat32\",\n  Float64Array: \"getFloat64\"\n};\n\nfunction copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n  var bytesPerElement = viewType.BYTES_PER_ELEMENT;\n  var result;\n\n  if (fromBigEndian === _isBigEndianPlatform() || bytesPerElement === 1) {\n    result = new viewType(sourceArrayBuffer, position, length);\n  } else {\n    var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement),\n        getMethod = getMethods[viewType.name],\n        littleEndian = !fromBigEndian;\n    result = new viewType(length);\n\n    for (var i = 0; i < length; i++) {\n      result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n    }\n  }\n\n  return result;\n}\n\nfunction decodePrwm(buffer) {\n  var array = new Uint8Array(buffer),\n      version = array[0];\n  var flags = array[1];\n  var indexedGeometry = !!(flags >> 7 & 1),\n      indicesType = flags >> 6 & 1,\n      bigEndian = (flags >> 5 & 1) === 1,\n      attributesNumber = flags & 31;\n  var valuesNumber = 0,\n      indicesNumber = 0;\n\n  if (bigEndian) {\n    valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n    indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n  } else {\n    valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n    indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n  }\n\n  if (version === 0) {\n    throw new Error(\"PRWM decoder: Invalid format version: 0\");\n  } else if (version !== 1) {\n    throw new Error(\"PRWM decoder: Unsupported format version: \" + version);\n  }\n\n  if (!indexedGeometry) {\n    if (indicesType !== 0) {\n      throw new Error(\"PRWM decoder: Indices type must be set to 0 for non-indexed geometries\");\n    } else if (indicesNumber !== 0) {\n      throw new Error(\"PRWM decoder: Number of indices must be set to 0 for non-indexed geometries\");\n    }\n  }\n\n  var pos = 8;\n  var attributes = {};\n\n  for (var i = 0; i < attributesNumber; i++) {\n    var attributeName = \"\";\n\n    while (pos < array.length) {\n      var char = array[pos];\n      pos++;\n\n      if (char === 0) {\n        break;\n      } else {\n        attributeName += String.fromCharCode(char);\n      }\n    }\n\n    flags = array[pos];\n    var attributeType = flags >> 7 & 1;\n    var cardinality = (flags >> 4 & 3) + 1;\n    var encodingType = flags & 15;\n    var arrayType = InvertedEncodingTypes[encodingType];\n    pos++;\n    pos = Math.ceil(pos / 4) * 4;\n    var values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n    pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n    attributes[attributeName] = {\n      type: attributeType,\n      cardinality: cardinality,\n      values: values\n    };\n  }\n\n  pos = Math.ceil(pos / 4) * 4;\n  var indices = null;\n\n  if (indexedGeometry) {\n    indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n  }\n\n  return {\n    version: version,\n    attributes: attributes,\n    indices: indices\n  };\n}\n\nvar PRWMLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PRWMLoader, _Loader);\n\n  var _super = _createSuper(PRWMLoader);\n\n  function PRWMLoader(manager) {\n    _classCallCheck(this, PRWMLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(PRWMLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      url = url.replace(/\\*/g, _isBigEndianPlatform() ? \"be\" : \"le\");\n      loader.load(url, function (arrayBuffer) {\n        try {\n          onLoad(scope.parse(arrayBuffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(arrayBuffer) {\n      var data = decodePrwm(arrayBuffer),\n          attributesKey = Object.keys(data.attributes),\n          bufferGeometry = new BufferGeometry();\n\n      for (var i = 0; i < attributesKey.length; i++) {\n        var attribute = data.attributes[attributesKey[i]];\n        bufferGeometry.setAttribute(attributesKey[i], new BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\n      }\n\n      if (data.indices !== null) {\n        bufferGeometry.setIndex(new BufferAttribute(data.indices, 1));\n      }\n\n      return bufferGeometry;\n    }\n  }], [{\n    key: \"isBigEndianPlatform\",\n    value: function isBigEndianPlatform() {\n      return _isBigEndianPlatform();\n    }\n  }]);\n\n  return PRWMLoader;\n}(Loader);\n\nexport { PRWMLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/PRWMLoader.js"],"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","bigEndianPlatform","isBigEndianPlatform","buffer","ArrayBuffer","uint8Array","Uint8Array","uint16Array","Uint16Array","InvertedEncodingTypes","Float32Array","Int8Array","Int16Array","Int32Array","Uint32Array","getMethods","Float64Array","copyFromBuffer","sourceArrayBuffer","viewType","position","length","fromBigEndian","bytesPerElement","BYTES_PER_ELEMENT","result","readView","DataView","getMethod","name","littleEndian","i","decodePrwm","array","version","flags","indexedGeometry","indicesType","bigEndian","attributesNumber","valuesNumber","indicesNumber","Error","pos","attributes","attributeName","char","String","fromCharCode","attributeType","cardinality","encodingType","arrayType","Math","ceil","values","type","indices","PRWMLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","replace","load","arrayBuffer","parse","e","console","error","itemError","data","attributesKey","Object","keys","bufferGeometry","attribute","setAttribute","normalized","setIndex"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute } from \"three\";\nlet bigEndianPlatform = null;\nfunction isBigEndianPlatform() {\n  if (bigEndianPlatform === null) {\n    const buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);\n    uint8Array[0] = 170;\n    uint8Array[1] = 187;\n    bigEndianPlatform = uint16Array[0] === 43707;\n  }\n  return bigEndianPlatform;\n}\nconst InvertedEncodingTypes = [\n  null,\n  Float32Array,\n  null,\n  Int8Array,\n  Int16Array,\n  null,\n  Int32Array,\n  Uint8Array,\n  Uint16Array,\n  null,\n  Uint32Array\n];\nconst getMethods = {\n  Uint16Array: \"getUint16\",\n  Uint32Array: \"getUint32\",\n  Int16Array: \"getInt16\",\n  Int32Array: \"getInt32\",\n  Float32Array: \"getFloat32\",\n  Float64Array: \"getFloat64\"\n};\nfunction copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n  const bytesPerElement = viewType.BYTES_PER_ELEMENT;\n  let result;\n  if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\n    result = new viewType(sourceArrayBuffer, position, length);\n  } else {\n    const readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian;\n    result = new viewType(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n    }\n  }\n  return result;\n}\nfunction decodePrwm(buffer) {\n  const array = new Uint8Array(buffer), version = array[0];\n  let flags = array[1];\n  const indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31;\n  let valuesNumber = 0, indicesNumber = 0;\n  if (bigEndian) {\n    valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n    indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n  } else {\n    valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n    indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n  }\n  if (version === 0) {\n    throw new Error(\"PRWM decoder: Invalid format version: 0\");\n  } else if (version !== 1) {\n    throw new Error(\"PRWM decoder: Unsupported format version: \" + version);\n  }\n  if (!indexedGeometry) {\n    if (indicesType !== 0) {\n      throw new Error(\"PRWM decoder: Indices type must be set to 0 for non-indexed geometries\");\n    } else if (indicesNumber !== 0) {\n      throw new Error(\"PRWM decoder: Number of indices must be set to 0 for non-indexed geometries\");\n    }\n  }\n  let pos = 8;\n  const attributes = {};\n  for (let i = 0; i < attributesNumber; i++) {\n    let attributeName = \"\";\n    while (pos < array.length) {\n      const char = array[pos];\n      pos++;\n      if (char === 0) {\n        break;\n      } else {\n        attributeName += String.fromCharCode(char);\n      }\n    }\n    flags = array[pos];\n    const attributeType = flags >> 7 & 1;\n    const cardinality = (flags >> 4 & 3) + 1;\n    const encodingType = flags & 15;\n    const arrayType = InvertedEncodingTypes[encodingType];\n    pos++;\n    pos = Math.ceil(pos / 4) * 4;\n    const values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n    pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n    attributes[attributeName] = {\n      type: attributeType,\n      cardinality,\n      values\n    };\n  }\n  pos = Math.ceil(pos / 4) * 4;\n  let indices = null;\n  if (indexedGeometry) {\n    indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n  }\n  return {\n    version,\n    attributes,\n    indices\n  };\n}\nclass PRWMLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    url = url.replace(/\\*/g, isBigEndianPlatform() ? \"be\" : \"le\");\n    loader.load(\n      url,\n      function(arrayBuffer) {\n        try {\n          onLoad(scope.parse(arrayBuffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(arrayBuffer) {\n    const data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new BufferGeometry();\n    for (let i = 0; i < attributesKey.length; i++) {\n      const attribute = data.attributes[attributesKey[i]];\n      bufferGeometry.setAttribute(\n        attributesKey[i],\n        new BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized)\n      );\n    }\n    if (data.indices !== null) {\n      bufferGeometry.setIndex(new BufferAttribute(data.indices, 1));\n    }\n    return bufferGeometry;\n  }\n  static isBigEndianPlatform() {\n    return isBigEndianPlatform();\n  }\n}\nexport {\n  PRWMLoader\n};\n"]},"metadata":{},"sourceType":"module"}