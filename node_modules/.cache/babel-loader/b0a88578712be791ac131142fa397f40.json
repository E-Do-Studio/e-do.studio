{"ast":null,"code":"var WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: [\"uniform mat4 textureMatrix;\", \"varying vec2 vUv;\", \"varying vec4 vUvRefraction;\", \"void main() {\", \"\tvUv = uv;\", \"\tvUvRefraction = textureMatrix * vec4( position, 1.0 );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 color;\", \"uniform float time;\", \"uniform sampler2D tDiffuse;\", \"uniform sampler2D tDudv;\", \"varying vec2 vUv;\", \"varying vec4 vUvRefraction;\", \"float blendOverlay( float base, float blend ) {\", \"\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\", \"}\", \"vec3 blendOverlay( vec3 base, vec3 blend ) {\", \"\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\", \"}\", \"void main() {\", \" float waveStrength = 0.1;\", \" float waveSpeed = 0.03;\", // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n  \"\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\", \"\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\", \"\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\", // new uv coords\n  \" vec4 uv = vec4( vUvRefraction );\", \" uv.xy += distortion;\", \"\tvec4 base = texture2DProj( tDiffuse, uv );\", \"\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\", \"}\"].join(\"\\n\")\n};\nexport { WaterRefractionShader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/shaders/WaterRefractionShader.js"],"names":["WaterRefractionShader","uniforms","color","value","time","tDiffuse","tDudv","textureMatrix","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAMA,qBAAqB,GAAG;AAC5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KADC;AAIRC,IAAAA,IAAI,EAAE;AACJD,MAAAA,KAAK,EAAE;AADH,KAJE;AAORE,IAAAA,QAAQ,EAAE;AACRF,MAAAA,KAAK,EAAE;AADC,KAPF;AAURG,IAAAA,KAAK,EAAE;AACLH,MAAAA,KAAK,EAAE;AADF,KAVC;AAaRI,IAAAA,aAAa,EAAE;AACbJ,MAAAA,KAAK,EAAE;AADM;AAbP,GADkB;AAkB5BK,EAAAA,YAAY,EAAE,CACZ,6BADY,EAEZ,mBAFY,EAGZ,6BAHY,EAIZ,eAJY,EAKZ,YALY,EAMZ,yDANY,EAOZ,4EAPY,EAQZ,GARY,EASZC,IATY,CASP,IATO,CAlBc;AA4B5BC,EAAAA,cAAc,EAAE,CACd,qBADc,EAEd,qBAFc,EAGd,6BAHc,EAId,0BAJc,EAKd,mBALc,EAMd,6BANc,EAOd,iDAPc,EAQd,oGARc,EASd,GATc,EAUd,8CAVc,EAWd,mHAXc,EAYd,GAZc,EAad,eAbc,EAcd,4BAdc,EAed,0BAfc,EAgBd;AACA,sGAjBc,EAkBd,kFAlBc,EAmBd,uFAnBc,EAoBd;AACA,qCArBc,EAsBd,uBAtBc,EAuBd,6CAvBc,EAwBd,+DAxBc,EAyBd,GAzBc,EA0BdD,IA1Bc,CA0BT,IA1BS;AA5BY,CAA9B;AAwDA,SACET,qBADF","sourcesContent":["const WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: [\n    \"uniform mat4 textureMatrix;\",\n    \"varying vec2 vUv;\",\n    \"varying vec4 vUvRefraction;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tvUvRefraction = textureMatrix * vec4( position, 1.0 );\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 color;\",\n    \"uniform float time;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform sampler2D tDudv;\",\n    \"varying vec2 vUv;\",\n    \"varying vec4 vUvRefraction;\",\n    \"float blendOverlay( float base, float blend ) {\",\n    \"\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\",\n    \"}\",\n    \"vec3 blendOverlay( vec3 base, vec3 blend ) {\",\n    \"\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\",\n    \"}\",\n    \"void main() {\",\n    \" float waveStrength = 0.1;\",\n    \" float waveSpeed = 0.03;\",\n    // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n    \"\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\",\n    \"\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\",\n    \"\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\",\n    // new uv coords\n    \" vec4 uv = vec4( vUvRefraction );\",\n    \" uv.xy += distortion;\",\n    \"\tvec4 base = texture2DProj( tDiffuse, uv );\",\n    \"\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  WaterRefractionShader\n};\n"]},"metadata":{},"sourceType":"module"}