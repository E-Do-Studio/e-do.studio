{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nclass TexturePass extends Pass {\n  constructor(map, opacity) {\n    super();\n    const shader = CopyShader;\n    this.map = map;\n    this.opacity = opacity !== void 0 ? opacity : 1;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      depthTest: false,\n      depthWrite: false\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(null);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.fsQuad.material = this.material;\n    this.uniforms[\"opacity\"].value = this.opacity;\n    this.uniforms[\"tDiffuse\"].value = this.map;\n    this.material.transparent = this.opacity < 1;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n\n  dispose() {\n    this.material.dispose();\n    this.fsQuad.dispose();\n  }\n\n}\n\nexport { TexturePass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/TexturePass.js"],"names":["UniformsUtils","ShaderMaterial","Pass","FullScreenQuad","CopyShader","TexturePass","constructor","map","opacity","shader","uniforms","clone","material","vertexShader","fragmentShader","depthTest","depthWrite","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","value","transparent","setRenderTarget","renderToScreen","clear","dispose"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AACA,MAAMC,WAAN,SAA0BH,IAA1B,CAA+B;AAC7BI,EAAAA,WAAW,CAACC,GAAD,EAAMC,OAAN,EAAe;AACxB;AACA,UAAMC,MAAM,GAAGL,UAAf;AACA,SAAKG,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeA,OAAO,KAAK,KAAK,CAAjB,GAAqBA,OAArB,GAA+B,CAA9C;AACA,SAAKE,QAAL,GAAgBV,aAAa,CAACW,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAhB;AACA,SAAKE,QAAL,GAAgB,IAAIX,cAAJ,CAAmB;AACjCS,MAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCG,MAAAA,YAAY,EAAEJ,MAAM,CAACI,YAFY;AAGjCC,MAAAA,cAAc,EAAEL,MAAM,CAACK,cAHU;AAIjCC,MAAAA,SAAS,EAAE,KAJsB;AAKjCC,MAAAA,UAAU,EAAE;AALqB,KAAnB,CAAhB;AAOA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,MAAL,GAAc,IAAIf,cAAJ,CAAmB,IAAnB,CAAd;AACD;;AACDgB,EAAAA,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC,UAAxB,EAAoC;AACxC,UAAMC,YAAY,GAAGH,QAAQ,CAACI,SAA9B;AACAJ,IAAAA,QAAQ,CAACI,SAAT,GAAqB,KAArB;AACA,SAAKN,MAAL,CAAYN,QAAZ,GAAuB,KAAKA,QAA5B;AACA,SAAKF,QAAL,CAAc,SAAd,EAAyBe,KAAzB,GAAiC,KAAKjB,OAAtC;AACA,SAAKE,QAAL,CAAc,UAAd,EAA0Be,KAA1B,GAAkC,KAAKlB,GAAvC;AACA,SAAKK,QAAL,CAAcc,WAAd,GAA4B,KAAKlB,OAAL,GAAe,CAA3C;AACAY,IAAAA,QAAQ,CAACO,eAAT,CAAyB,KAAKC,cAAL,GAAsB,IAAtB,GAA6BN,UAAtD;AACA,QAAI,KAAKO,KAAT,EACET,QAAQ,CAACS,KAAT;AACF,SAAKX,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACAA,IAAAA,QAAQ,CAACI,SAAT,GAAqBD,YAArB;AACD;;AACDO,EAAAA,OAAO,GAAG;AACR,SAAKlB,QAAL,CAAckB,OAAd;AACA,SAAKZ,MAAL,CAAYY,OAAZ;AACD;;AAjC4B;;AAmC/B,SACEzB,WADF","sourcesContent":["import { UniformsUtils, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nclass TexturePass extends Pass {\n  constructor(map, opacity) {\n    super();\n    const shader = CopyShader;\n    this.map = map;\n    this.opacity = opacity !== void 0 ? opacity : 1;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      depthTest: false,\n      depthWrite: false\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.fsQuad.material = this.material;\n    this.uniforms[\"opacity\"].value = this.opacity;\n    this.uniforms[\"tDiffuse\"].value = this.map;\n    this.material.transparent = this.opacity < 1;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear)\n      renderer.clear();\n    this.fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n  dispose() {\n    this.material.dispose();\n    this.fsQuad.dispose();\n  }\n}\nexport {\n  TexturePass\n};\n"]},"metadata":{},"sourceType":"module"}