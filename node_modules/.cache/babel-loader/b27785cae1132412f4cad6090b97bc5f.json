{"ast":null,"code":"import { Matrix4, Mesh, MeshBasicMaterial, EqualStencilFunc, IncrementStencilOp } from \"three\";\n\nconst _shadowMatrix = /* @__PURE__ */new Matrix4();\n\nclass ShadowMesh extends Mesh {\n  constructor(mesh) {\n    const shadowMaterial = new MeshBasicMaterial({\n      color: 0,\n      transparent: true,\n      opacity: 0.6,\n      depthWrite: false,\n      stencilWrite: true,\n      stencilFunc: EqualStencilFunc,\n      stencilRef: 0,\n      stencilZPass: IncrementStencilOp\n    });\n    super(mesh.geometry, shadowMaterial);\n    this.isShadowMesh = true;\n    this.meshMatrix = mesh.matrixWorld;\n    this.frustumCulled = false;\n    this.matrixAutoUpdate = false;\n  }\n\n  update(plane, lightPosition4D) {\n    const dot = plane.normal.x * lightPosition4D.x + plane.normal.y * lightPosition4D.y + plane.normal.z * lightPosition4D.z + -plane.constant * lightPosition4D.w;\n    const sme = _shadowMatrix.elements;\n    sme[0] = dot - lightPosition4D.x * plane.normal.x;\n    sme[4] = -lightPosition4D.x * plane.normal.y;\n    sme[8] = -lightPosition4D.x * plane.normal.z;\n    sme[12] = -lightPosition4D.x * -plane.constant;\n    sme[1] = -lightPosition4D.y * plane.normal.x;\n    sme[5] = dot - lightPosition4D.y * plane.normal.y;\n    sme[9] = -lightPosition4D.y * plane.normal.z;\n    sme[13] = -lightPosition4D.y * -plane.constant;\n    sme[2] = -lightPosition4D.z * plane.normal.x;\n    sme[6] = -lightPosition4D.z * plane.normal.y;\n    sme[10] = dot - lightPosition4D.z * plane.normal.z;\n    sme[14] = -lightPosition4D.z * -plane.constant;\n    sme[3] = -lightPosition4D.w * plane.normal.x;\n    sme[7] = -lightPosition4D.w * plane.normal.y;\n    sme[11] = -lightPosition4D.w * plane.normal.z;\n    sme[15] = dot - lightPosition4D.w * -plane.constant;\n    this.matrix.multiplyMatrices(_shadowMatrix, this.meshMatrix);\n  }\n\n}\n\nexport { ShadowMesh };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/objects/ShadowMesh.js"],"names":["Matrix4","Mesh","MeshBasicMaterial","EqualStencilFunc","IncrementStencilOp","_shadowMatrix","ShadowMesh","constructor","mesh","shadowMaterial","color","transparent","opacity","depthWrite","stencilWrite","stencilFunc","stencilRef","stencilZPass","geometry","isShadowMesh","meshMatrix","matrixWorld","frustumCulled","matrixAutoUpdate","update","plane","lightPosition4D","dot","normal","x","y","z","constant","w","sme","elements","matrix","multiplyMatrices"],"mappings":"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","sourcesContent":["import { Matrix4, Mesh, MeshBasicMaterial, EqualStencilFunc, IncrementStencilOp } from \"three\";\nconst _shadowMatrix = /* @__PURE__ */ new Matrix4();\nclass ShadowMesh extends Mesh {\n  constructor(mesh) {\n    const shadowMaterial = new MeshBasicMaterial({\n      color: 0,\n      transparent: true,\n      opacity: 0.6,\n      depthWrite: false,\n      stencilWrite: true,\n      stencilFunc: EqualStencilFunc,\n      stencilRef: 0,\n      stencilZPass: IncrementStencilOp\n    });\n    super(mesh.geometry, shadowMaterial);\n    this.isShadowMesh = true;\n    this.meshMatrix = mesh.matrixWorld;\n    this.frustumCulled = false;\n    this.matrixAutoUpdate = false;\n  }\n  update(plane, lightPosition4D) {\n    const dot = plane.normal.x * lightPosition4D.x + plane.normal.y * lightPosition4D.y + plane.normal.z * lightPosition4D.z + -plane.constant * lightPosition4D.w;\n    const sme = _shadowMatrix.elements;\n    sme[0] = dot - lightPosition4D.x * plane.normal.x;\n    sme[4] = -lightPosition4D.x * plane.normal.y;\n    sme[8] = -lightPosition4D.x * plane.normal.z;\n    sme[12] = -lightPosition4D.x * -plane.constant;\n    sme[1] = -lightPosition4D.y * plane.normal.x;\n    sme[5] = dot - lightPosition4D.y * plane.normal.y;\n    sme[9] = -lightPosition4D.y * plane.normal.z;\n    sme[13] = -lightPosition4D.y * -plane.constant;\n    sme[2] = -lightPosition4D.z * plane.normal.x;\n    sme[6] = -lightPosition4D.z * plane.normal.y;\n    sme[10] = dot - lightPosition4D.z * plane.normal.z;\n    sme[14] = -lightPosition4D.z * -plane.constant;\n    sme[3] = -lightPosition4D.w * plane.normal.x;\n    sme[7] = -lightPosition4D.w * plane.normal.y;\n    sme[11] = -lightPosition4D.w * plane.normal.z;\n    sme[15] = dot - lightPosition4D.w * -plane.constant;\n    this.matrix.multiplyMatrices(_shadowMatrix, this.meshMatrix);\n  }\n}\nexport {\n  ShadowMesh\n};\n"]},"metadata":{},"sourceType":"module"}