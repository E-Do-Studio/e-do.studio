{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, TextureLoader, LoaderUtils, Color, Matrix4, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, Group, MeshStandardMaterial } from \"three\";\nimport { unzipSync } from \"fflate\";\n\nvar ThreeMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(ThreeMFLoader, _Loader);\n\n  var _super = _createSuper(ThreeMFLoader);\n\n  function ThreeMFLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, ThreeMFLoader);\n\n    _this = _super.call(this, manager);\n    _this.availableExtensions = [];\n    return _this;\n  }\n\n  _createClass(ThreeMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var scope = this;\n      var textureLoader = new TextureLoader(this.manager);\n\n      function loadDocument(data2) {\n        var zip = null;\n        var file = null;\n        var relsName;\n        var modelRelsName;\n        var modelPartNames = [];\n        var printTicketPartNames = [];\n        var texturesPartNames = [];\n        var otherPartNames = [];\n        var modelRels;\n        var modelParts = {};\n        var printTicketParts = {};\n        var texturesParts = {};\n        var otherParts = {};\n\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n\n        for (file in zip) {\n          if (file.match(/\\_rels\\/.rels$/)) {\n            relsName = file;\n          } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n            modelRelsName = file;\n          } else if (file.match(/^3D\\/.*\\.model$/)) {\n            modelPartNames.push(file);\n          } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n            printTicketPartNames.push(file);\n          } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n            texturesPartNames.push(file);\n          } else if (file.match(/^3D\\/Other\\/.*/)) {\n            otherPartNames.push(file);\n          }\n        }\n\n        var relsView = zip[relsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        var rels = parseRelsXml(relsFileText);\n\n        if (modelRelsName) {\n          var relsView2 = zip[modelRelsName];\n          var relsFileText2 = LoaderUtils.decodeText(relsView2);\n          modelRels = parseRelsXml(relsFileText2);\n        }\n\n        for (var i = 0; i < modelPartNames.length; i++) {\n          var modelPart = modelPartNames[i];\n          var view = zip[modelPart];\n          var fileText = LoaderUtils.decodeText(view);\n          var xmlData = new DOMParser().parseFromString(fileText, \"application/xml\");\n\n          if (xmlData.documentElement.nodeName.toLowerCase() !== \"model\") {\n            console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \", modelPart);\n          }\n\n          var modelNode = xmlData.querySelector(\"model\");\n          var extensions = {};\n\n          for (var i2 = 0; i2 < modelNode.attributes.length; i2++) {\n            var attr = modelNode.attributes[i2];\n\n            if (attr.name.match(/^xmlns:(.+)$/)) {\n              extensions[attr.value] = RegExp.$1;\n            }\n          }\n\n          var modelData = parseModelNode(modelNode);\n          modelData[\"xml\"] = modelNode;\n\n          if (0 < Object.keys(extensions).length) {\n            modelData[\"extensions\"] = extensions;\n          }\n\n          modelParts[modelPart] = modelData;\n        }\n\n        for (var _i = 0; _i < texturesPartNames.length; _i++) {\n          var texturesPartName = texturesPartNames[_i];\n          texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n        }\n\n        return {\n          rels: rels,\n          modelRels: modelRels,\n          model: modelParts,\n          printTicket: printTicketParts,\n          texture: texturesParts,\n          other: otherParts\n        };\n      }\n\n      function parseRelsXml(relsFileText) {\n        var relationships = [];\n        var relsXmlData = new DOMParser().parseFromString(relsFileText, \"application/xml\");\n        var relsNodes = relsXmlData.querySelectorAll(\"Relationship\");\n\n        for (var i = 0; i < relsNodes.length; i++) {\n          var relsNode = relsNodes[i];\n          var relationship = {\n            target: relsNode.getAttribute(\"Target\"),\n            //required\n            id: relsNode.getAttribute(\"Id\"),\n            //required\n            type: relsNode.getAttribute(\"Type\") //required\n\n          };\n          relationships.push(relationship);\n        }\n\n        return relationships;\n      }\n\n      function parseMetadataNodes(metadataNodes) {\n        var metadataData = {};\n\n        for (var i = 0; i < metadataNodes.length; i++) {\n          var metadataNode = metadataNodes[i];\n          var name = metadataNode.getAttribute(\"name\");\n          var validNames = [\"Title\", \"Designer\", \"Description\", \"Copyright\", \"LicenseTerms\", \"Rating\", \"CreationDate\", \"ModificationDate\"];\n\n          if (0 <= validNames.indexOf(name)) {\n            metadataData[name] = metadataNode.textContent;\n          }\n        }\n\n        return metadataData;\n      }\n\n      function parseBasematerialsNode(basematerialsNode) {\n        var basematerialsData = {\n          id: basematerialsNode.getAttribute(\"id\"),\n          // required\n          basematerials: []\n        };\n        var basematerialNodes = basematerialsNode.querySelectorAll(\"base\");\n\n        for (var i = 0; i < basematerialNodes.length; i++) {\n          var basematerialNode = basematerialNodes[i];\n          var basematerialData = parseBasematerialNode(basematerialNode);\n          basematerialData.index = i;\n          basematerialsData.basematerials.push(basematerialData);\n        }\n\n        return basematerialsData;\n      }\n\n      function parseTexture2DNode(texture2DNode) {\n        var texture2dData = {\n          id: texture2DNode.getAttribute(\"id\"),\n          // required\n          path: texture2DNode.getAttribute(\"path\"),\n          // required\n          contenttype: texture2DNode.getAttribute(\"contenttype\"),\n          // required\n          tilestyleu: texture2DNode.getAttribute(\"tilestyleu\"),\n          tilestylev: texture2DNode.getAttribute(\"tilestylev\"),\n          filter: texture2DNode.getAttribute(\"filter\")\n        };\n        return texture2dData;\n      }\n\n      function parseTextures2DGroupNode(texture2DGroupNode) {\n        var texture2DGroupData = {\n          id: texture2DGroupNode.getAttribute(\"id\"),\n          // required\n          texid: texture2DGroupNode.getAttribute(\"texid\"),\n          // required\n          displaypropertiesid: texture2DGroupNode.getAttribute(\"displaypropertiesid\")\n        };\n        var tex2coordNodes = texture2DGroupNode.querySelectorAll(\"tex2coord\");\n        var uvs = [];\n\n        for (var i = 0; i < tex2coordNodes.length; i++) {\n          var tex2coordNode = tex2coordNodes[i];\n          var u = tex2coordNode.getAttribute(\"u\");\n          var v = tex2coordNode.getAttribute(\"v\");\n          uvs.push(parseFloat(u), parseFloat(v));\n        }\n\n        texture2DGroupData[\"uvs\"] = new Float32Array(uvs);\n        return texture2DGroupData;\n      }\n\n      function parseColorGroupNode(colorGroupNode) {\n        var colorGroupData = {\n          id: colorGroupNode.getAttribute(\"id\"),\n          // required\n          displaypropertiesid: colorGroupNode.getAttribute(\"displaypropertiesid\")\n        };\n        var colorNodes = colorGroupNode.querySelectorAll(\"color\");\n        var colors = [];\n        var colorObject = new Color();\n\n        for (var i = 0; i < colorNodes.length; i++) {\n          var colorNode = colorNodes[i];\n          var color = colorNode.getAttribute(\"color\");\n          colorObject.setStyle(color.substring(0, 7));\n          colorObject.convertSRGBToLinear();\n          colors.push(colorObject.r, colorObject.g, colorObject.b);\n        }\n\n        colorGroupData[\"colors\"] = new Float32Array(colors);\n        return colorGroupData;\n      }\n\n      function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n        var metallicDisplaypropertiesData = {\n          id: metallicDisplaypropetiesNode.getAttribute(\"id\") // required\n\n        };\n        var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\");\n        var metallicData = [];\n\n        for (var i = 0; i < metallicNodes.length; i++) {\n          var metallicNode = metallicNodes[i];\n          metallicData.push({\n            name: metallicNode.getAttribute(\"name\"),\n            // required\n            metallicness: parseFloat(metallicNode.getAttribute(\"metallicness\")),\n            // required\n            roughness: parseFloat(metallicNode.getAttribute(\"roughness\")) // required\n\n          });\n        }\n\n        metallicDisplaypropertiesData.data = metallicData;\n        return metallicDisplaypropertiesData;\n      }\n\n      function parseBasematerialNode(basematerialNode) {\n        var basematerialData = {};\n        basematerialData[\"name\"] = basematerialNode.getAttribute(\"name\");\n        basematerialData[\"displaycolor\"] = basematerialNode.getAttribute(\"displaycolor\");\n        basematerialData[\"displaypropertiesid\"] = basematerialNode.getAttribute(\"displaypropertiesid\");\n        return basematerialData;\n      }\n\n      function parseMeshNode(meshNode) {\n        var meshData = {};\n        var vertices = [];\n        var vertexNodes = meshNode.querySelectorAll(\"vertices vertex\");\n\n        for (var i = 0; i < vertexNodes.length; i++) {\n          var vertexNode = vertexNodes[i];\n          var x = vertexNode.getAttribute(\"x\");\n          var y = vertexNode.getAttribute(\"y\");\n          var z = vertexNode.getAttribute(\"z\");\n          vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n        }\n\n        meshData[\"vertices\"] = new Float32Array(vertices);\n        var triangleProperties = [];\n        var triangles = [];\n        var triangleNodes = meshNode.querySelectorAll(\"triangles triangle\");\n\n        for (var _i2 = 0; _i2 < triangleNodes.length; _i2++) {\n          var triangleNode = triangleNodes[_i2];\n          var v1 = triangleNode.getAttribute(\"v1\");\n          var v2 = triangleNode.getAttribute(\"v2\");\n          var v3 = triangleNode.getAttribute(\"v3\");\n          var p1 = triangleNode.getAttribute(\"p1\");\n          var p2 = triangleNode.getAttribute(\"p2\");\n          var p3 = triangleNode.getAttribute(\"p3\");\n          var pid = triangleNode.getAttribute(\"pid\");\n          var triangleProperty = {};\n          triangleProperty[\"v1\"] = parseInt(v1, 10);\n          triangleProperty[\"v2\"] = parseInt(v2, 10);\n          triangleProperty[\"v3\"] = parseInt(v3, 10);\n          triangles.push(triangleProperty[\"v1\"], triangleProperty[\"v2\"], triangleProperty[\"v3\"]);\n\n          if (p1) {\n            triangleProperty[\"p1\"] = parseInt(p1, 10);\n          }\n\n          if (p2) {\n            triangleProperty[\"p2\"] = parseInt(p2, 10);\n          }\n\n          if (p3) {\n            triangleProperty[\"p3\"] = parseInt(p3, 10);\n          }\n\n          if (pid) {\n            triangleProperty[\"pid\"] = pid;\n          }\n\n          if (0 < Object.keys(triangleProperty).length) {\n            triangleProperties.push(triangleProperty);\n          }\n        }\n\n        meshData[\"triangleProperties\"] = triangleProperties;\n        meshData[\"triangles\"] = new Uint32Array(triangles);\n        return meshData;\n      }\n\n      function parseComponentsNode(componentsNode) {\n        var components = [];\n        var componentNodes = componentsNode.querySelectorAll(\"component\");\n\n        for (var i = 0; i < componentNodes.length; i++) {\n          var componentNode = componentNodes[i];\n          var componentData = parseComponentNode(componentNode);\n          components.push(componentData);\n        }\n\n        return components;\n      }\n\n      function parseComponentNode(componentNode) {\n        var componentData = {};\n        componentData[\"objectId\"] = componentNode.getAttribute(\"objectid\");\n        var transform = componentNode.getAttribute(\"transform\");\n\n        if (transform) {\n          componentData[\"transform\"] = parseTransform(transform);\n        }\n\n        return componentData;\n      }\n\n      function parseTransform(transform) {\n        var t = [];\n        transform.split(\" \").forEach(function (s) {\n          t.push(parseFloat(s));\n        });\n        var matrix = new Matrix4();\n        matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n        return matrix;\n      }\n\n      function parseObjectNode(objectNode) {\n        var objectData = {\n          type: objectNode.getAttribute(\"type\")\n        };\n        var id = objectNode.getAttribute(\"id\");\n\n        if (id) {\n          objectData[\"id\"] = id;\n        }\n\n        var pid = objectNode.getAttribute(\"pid\");\n\n        if (pid) {\n          objectData[\"pid\"] = pid;\n        }\n\n        var pindex = objectNode.getAttribute(\"pindex\");\n\n        if (pindex) {\n          objectData[\"pindex\"] = pindex;\n        }\n\n        var thumbnail = objectNode.getAttribute(\"thumbnail\");\n\n        if (thumbnail) {\n          objectData[\"thumbnail\"] = thumbnail;\n        }\n\n        var partnumber = objectNode.getAttribute(\"partnumber\");\n\n        if (partnumber) {\n          objectData[\"partnumber\"] = partnumber;\n        }\n\n        var name = objectNode.getAttribute(\"name\");\n\n        if (name) {\n          objectData[\"name\"] = name;\n        }\n\n        var meshNode = objectNode.querySelector(\"mesh\");\n\n        if (meshNode) {\n          objectData[\"mesh\"] = parseMeshNode(meshNode);\n        }\n\n        var componentsNode = objectNode.querySelector(\"components\");\n\n        if (componentsNode) {\n          objectData[\"components\"] = parseComponentsNode(componentsNode);\n        }\n\n        return objectData;\n      }\n\n      function parseResourcesNode(resourcesNode) {\n        var resourcesData = {};\n        resourcesData[\"basematerials\"] = {};\n        var basematerialsNodes = resourcesNode.querySelectorAll(\"basematerials\");\n\n        for (var i = 0; i < basematerialsNodes.length; i++) {\n          var basematerialsNode = basematerialsNodes[i];\n          var basematerialsData = parseBasematerialsNode(basematerialsNode);\n          resourcesData[\"basematerials\"][basematerialsData[\"id\"]] = basematerialsData;\n        }\n\n        resourcesData[\"texture2d\"] = {};\n        var textures2DNodes = resourcesNode.querySelectorAll(\"texture2d\");\n\n        for (var _i3 = 0; _i3 < textures2DNodes.length; _i3++) {\n          var textures2DNode = textures2DNodes[_i3];\n          var texture2DData = parseTexture2DNode(textures2DNode);\n          resourcesData[\"texture2d\"][texture2DData[\"id\"]] = texture2DData;\n        }\n\n        resourcesData[\"colorgroup\"] = {};\n        var colorGroupNodes = resourcesNode.querySelectorAll(\"colorgroup\");\n\n        for (var _i4 = 0; _i4 < colorGroupNodes.length; _i4++) {\n          var colorGroupNode = colorGroupNodes[_i4];\n          var colorGroupData = parseColorGroupNode(colorGroupNode);\n          resourcesData[\"colorgroup\"][colorGroupData[\"id\"]] = colorGroupData;\n        }\n\n        resourcesData[\"pbmetallicdisplayproperties\"] = {};\n        var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll(\"pbmetallicdisplayproperties\");\n\n        for (var _i5 = 0; _i5 < pbmetallicdisplaypropertiesNodes.length; _i5++) {\n          var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i5];\n          var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n          resourcesData[\"pbmetallicdisplayproperties\"][pbmetallicdisplaypropertiesData[\"id\"]] = pbmetallicdisplaypropertiesData;\n        }\n\n        resourcesData[\"texture2dgroup\"] = {};\n        var textures2DGroupNodes = resourcesNode.querySelectorAll(\"texture2dgroup\");\n\n        for (var _i6 = 0; _i6 < textures2DGroupNodes.length; _i6++) {\n          var textures2DGroupNode = textures2DGroupNodes[_i6];\n          var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n          resourcesData[\"texture2dgroup\"][textures2DGroupData[\"id\"]] = textures2DGroupData;\n        }\n\n        resourcesData[\"object\"] = {};\n        var objectNodes = resourcesNode.querySelectorAll(\"object\");\n\n        for (var _i7 = 0; _i7 < objectNodes.length; _i7++) {\n          var objectNode = objectNodes[_i7];\n          var objectData = parseObjectNode(objectNode);\n          resourcesData[\"object\"][objectData[\"id\"]] = objectData;\n        }\n\n        return resourcesData;\n      }\n\n      function parseBuildNode(buildNode) {\n        var buildData = [];\n        var itemNodes = buildNode.querySelectorAll(\"item\");\n\n        for (var i = 0; i < itemNodes.length; i++) {\n          var itemNode = itemNodes[i];\n          var buildItem = {\n            objectId: itemNode.getAttribute(\"objectid\")\n          };\n          var transform = itemNode.getAttribute(\"transform\");\n\n          if (transform) {\n            buildItem[\"transform\"] = parseTransform(transform);\n          }\n\n          buildData.push(buildItem);\n        }\n\n        return buildData;\n      }\n\n      function parseModelNode(modelNode) {\n        var modelData = {\n          unit: modelNode.getAttribute(\"unit\") || \"millimeter\"\n        };\n        var metadataNodes = modelNode.querySelectorAll(\"metadata\");\n\n        if (metadataNodes) {\n          modelData[\"metadata\"] = parseMetadataNodes(metadataNodes);\n        }\n\n        var resourcesNode = modelNode.querySelector(\"resources\");\n\n        if (resourcesNode) {\n          modelData[\"resources\"] = parseResourcesNode(resourcesNode);\n        }\n\n        var buildNode = modelNode.querySelector(\"build\");\n\n        if (buildNode) {\n          modelData[\"build\"] = parseBuildNode(buildNode);\n        }\n\n        return modelData;\n      }\n\n      function buildTexture(texture2dgroup, objects2, modelData, textureData) {\n        var texid = texture2dgroup.texid;\n        var texture2ds = modelData.resources.texture2d;\n        var texture2d = texture2ds[texid];\n\n        if (texture2d) {\n          var data2 = textureData[texture2d.path];\n          var type = texture2d.contenttype;\n          var blob = new Blob([data2], {\n            type: type\n          });\n          var sourceURI = URL.createObjectURL(blob);\n          var texture = textureLoader.load(sourceURI, function () {\n            URL.revokeObjectURL(sourceURI);\n          });\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb\";else texture.encoding = 3001;\n\n          switch (texture2d.tilestyleu) {\n            case \"wrap\":\n              texture.wrapS = RepeatWrapping;\n              break;\n\n            case \"mirror\":\n              texture.wrapS = MirroredRepeatWrapping;\n              break;\n\n            case \"none\":\n            case \"clamp\":\n              texture.wrapS = ClampToEdgeWrapping;\n              break;\n\n            default:\n              texture.wrapS = RepeatWrapping;\n          }\n\n          switch (texture2d.tilestylev) {\n            case \"wrap\":\n              texture.wrapT = RepeatWrapping;\n              break;\n\n            case \"mirror\":\n              texture.wrapT = MirroredRepeatWrapping;\n              break;\n\n            case \"none\":\n            case \"clamp\":\n              texture.wrapT = ClampToEdgeWrapping;\n              break;\n\n            default:\n              texture.wrapT = RepeatWrapping;\n          }\n\n          switch (texture2d.filter) {\n            case \"auto\":\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n              break;\n\n            case \"linear\":\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearFilter;\n              break;\n\n            case \"nearest\":\n              texture.magFilter = NearestFilter;\n              texture.minFilter = NearestFilter;\n              break;\n\n            default:\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n          }\n\n          return texture;\n        } else {\n          return null;\n        }\n      }\n\n      function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n        var objectPindex = objectData.pindex;\n        var materialMap = {};\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pindex = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectPindex;\n          if (materialMap[pindex] === void 0) materialMap[pindex] = [];\n          materialMap[pindex].push(triangleProperty);\n        }\n\n        var keys = Object.keys(materialMap);\n        var meshes = [];\n\n        for (var _i8 = 0, _l = keys.length; _i8 < _l; _i8++) {\n          var materialIndex = keys[_i8];\n          var trianglePropertiesProps = materialMap[materialIndex];\n          var basematerialData = basematerials.basematerials[materialIndex];\n          var material = getBuild(basematerialData, objects2, modelData, textureData, objectData, buildBasematerial);\n          var geometry = new BufferGeometry();\n          var positionData = [];\n          var vertices = meshData.vertices;\n\n          for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n            var _triangleProperty = trianglePropertiesProps[j];\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 2]);\n          }\n\n          geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n          var mesh = new Mesh(geometry, material);\n          meshes.push(mesh);\n        }\n\n        return meshes;\n      }\n\n      function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var uvData = [];\n        var vertices = meshData.vertices;\n        var uvs = texture2dgroup.uvs;\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n        }\n\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvData, 2));\n        var texture = getBuild(texture2dgroup, objects2, modelData, textureData, objectData, buildTexture);\n        var material = new MeshPhongMaterial({\n          map: texture,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n\n      function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData) {\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var colorData = [];\n        var vertices = meshData.vertices;\n        var colors = colorgroup.colors;\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var v1 = triangleProperty.v1;\n          var v2 = triangleProperty.v2;\n          var v3 = triangleProperty.v3;\n          positionData.push(vertices[v1 * 3 + 0]);\n          positionData.push(vertices[v1 * 3 + 1]);\n          positionData.push(vertices[v1 * 3 + 2]);\n          positionData.push(vertices[v2 * 3 + 0]);\n          positionData.push(vertices[v2 * 3 + 1]);\n          positionData.push(vertices[v2 * 3 + 2]);\n          positionData.push(vertices[v3 * 3 + 0]);\n          positionData.push(vertices[v3 * 3 + 1]);\n          positionData.push(vertices[v3 * 3 + 2]);\n          var p1 = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectData.pindex;\n          var p2 = triangleProperty.p2 !== void 0 ? triangleProperty.p2 : p1;\n          var p3 = triangleProperty.p3 !== void 0 ? triangleProperty.p3 : p1;\n          colorData.push(colors[p1 * 3 + 0]);\n          colorData.push(colors[p1 * 3 + 1]);\n          colorData.push(colors[p1 * 3 + 2]);\n          colorData.push(colors[p2 * 3 + 0]);\n          colorData.push(colors[p2 * 3 + 1]);\n          colorData.push(colors[p2 * 3 + 2]);\n          colorData.push(colors[p3 * 3 + 0]);\n          colorData.push(colors[p3 * 3 + 1]);\n          colorData.push(colors[p3 * 3 + 2]);\n        }\n\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute(\"color\", new Float32BufferAttribute(colorData, 3));\n        var material = new MeshPhongMaterial({\n          vertexColors: true,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n\n      function buildDefaultMesh(meshData) {\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(meshData[\"triangles\"], 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(meshData[\"vertices\"], 3));\n        var material = new MeshPhongMaterial({\n          color: 11184895,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n\n      function buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData) {\n        var keys = Object.keys(resourceMap);\n        var meshes = [];\n\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var resourceId = keys[i];\n          var triangleProperties = resourceMap[resourceId];\n          var resourceType = getResourceType(resourceId, modelData);\n\n          switch (resourceType) {\n            case \"material\":\n              var basematerials = modelData.resources.basematerials[resourceId];\n              var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData);\n\n              for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                meshes.push(newMeshes[j]);\n              }\n\n              break;\n\n            case \"texture\":\n              var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n              meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData));\n              break;\n\n            case \"vertexColors\":\n              var colorgroup = modelData.resources.colorgroup[resourceId];\n              meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData));\n              break;\n\n            case \"default\":\n              meshes.push(buildDefaultMesh(meshData));\n              break;\n\n            default:\n              console.error(\"THREE.3MFLoader: Unsupported resource type.\");\n          }\n        }\n\n        return meshes;\n      }\n\n      function getResourceType(pid, modelData) {\n        if (modelData.resources.texture2dgroup[pid] !== void 0) {\n          return \"texture\";\n        } else if (modelData.resources.basematerials[pid] !== void 0) {\n          return \"material\";\n        } else if (modelData.resources.colorgroup[pid] !== void 0) {\n          return \"vertexColors\";\n        } else if (pid === \"default\") {\n          return \"default\";\n        } else {\n          return void 0;\n        }\n      }\n\n      function analyzeObject(modelData, meshData, objectData) {\n        var resourceMap = {};\n        var triangleProperties = meshData[\"triangleProperties\"];\n        var objectPid = objectData.pid;\n\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pid = triangleProperty.pid !== void 0 ? triangleProperty.pid : objectPid;\n          if (pid === void 0) pid = \"default\";\n          if (resourceMap[pid] === void 0) resourceMap[pid] = [];\n          resourceMap[pid].push(triangleProperty);\n        }\n\n        return resourceMap;\n      }\n\n      function buildGroup(meshData, objects2, modelData, textureData, objectData) {\n        var group = new Group();\n        var resourceMap = analyzeObject(modelData, meshData, objectData);\n        var meshes = buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData);\n\n        for (var i = 0, l = meshes.length; i < l; i++) {\n          group.add(meshes[i]);\n        }\n\n        return group;\n      }\n\n      function applyExtensions(extensions, meshData, modelXml) {\n        if (!extensions) {\n          return;\n        }\n\n        var availableExtensions = [];\n        var keys = Object.keys(extensions);\n\n        for (var i = 0; i < keys.length; i++) {\n          var ns = keys[i];\n\n          for (var j = 0; j < scope.availableExtensions.length; j++) {\n            var extension = scope.availableExtensions[j];\n\n            if (extension.ns === ns) {\n              availableExtensions.push(extension);\n            }\n          }\n        }\n\n        for (var _i9 = 0; _i9 < availableExtensions.length; _i9++) {\n          var _extension = availableExtensions[_i9];\n\n          _extension.apply(modelXml, extensions[_extension[\"ns\"]], meshData);\n        }\n      }\n\n      function getBuild(data2, objects2, modelData, textureData, objectData, builder) {\n        if (data2.build !== void 0) return data2.build;\n        data2.build = builder(data2, objects2, modelData, textureData, objectData);\n        return data2.build;\n      }\n\n      function buildBasematerial(materialData, objects2, modelData) {\n        var material;\n        var displaypropertiesid = materialData.displaypropertiesid;\n        var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n        if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== void 0) {\n          var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n          var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n          material = new MeshStandardMaterial({\n            flatShading: true,\n            roughness: metallicData.roughness,\n            metalness: metallicData.metallicness\n          });\n        } else {\n          material = new MeshPhongMaterial({\n            flatShading: true\n          });\n        }\n\n        material.name = materialData.name;\n        var displaycolor = materialData.displaycolor;\n        var color = displaycolor.substring(0, 7);\n        material.color.setStyle(color);\n        material.color.convertSRGBToLinear();\n\n        if (displaycolor.length === 9) {\n          material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n        }\n\n        return material;\n      }\n\n      function buildComposite(compositeData, objects2, modelData, textureData) {\n        var composite = new Group();\n\n        for (var j = 0; j < compositeData.length; j++) {\n          var component = compositeData[j];\n          var build2 = objects2[component.objectId];\n\n          if (build2 === void 0) {\n            buildObject(component.objectId, objects2, modelData, textureData);\n            build2 = objects2[component.objectId];\n          }\n\n          var object3D = build2.clone();\n          var transform = component.transform;\n\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n\n          composite.add(object3D);\n        }\n\n        return composite;\n      }\n\n      function buildObject(objectId, objects2, modelData, textureData) {\n        var objectData = modelData[\"resources\"][\"object\"][objectId];\n\n        if (objectData[\"mesh\"]) {\n          var meshData = objectData[\"mesh\"];\n          var extensions = modelData[\"extensions\"];\n          var modelXml = modelData[\"xml\"];\n          applyExtensions(extensions, meshData, modelXml);\n          objects2[objectData.id] = getBuild(meshData, objects2, modelData, textureData, objectData, buildGroup);\n        } else {\n          var compositeData = objectData[\"components\"];\n          objects2[objectData.id] = getBuild(compositeData, objects2, modelData, textureData, objectData, buildComposite);\n        }\n      }\n\n      function buildObjects(data3mf2) {\n        var modelsData = data3mf2.model;\n        var modelRels = data3mf2.modelRels;\n        var objects2 = {};\n        var modelsKeys = Object.keys(modelsData);\n        var textureData = {};\n\n        if (modelRels) {\n          for (var i = 0, l = modelRels.length; i < l; i++) {\n            var modelRel = modelRels[i];\n            var textureKey = modelRel.target.substring(1);\n\n            if (data3mf2.texture[textureKey]) {\n              textureData[modelRel.target] = data3mf2.texture[textureKey];\n            }\n          }\n        }\n\n        for (var _i10 = 0; _i10 < modelsKeys.length; _i10++) {\n          var modelsKey = modelsKeys[_i10];\n          var modelData = modelsData[modelsKey];\n          var objectIds = Object.keys(modelData[\"resources\"][\"object\"]);\n\n          for (var j = 0; j < objectIds.length; j++) {\n            var objectId = objectIds[j];\n            buildObject(objectId, objects2, modelData, textureData);\n          }\n        }\n\n        return objects2;\n      }\n\n      function fetch3DModelPart(rels) {\n        for (var i = 0; i < rels.length; i++) {\n          var rel = rels[i];\n          var extension = rel.target.split(\".\").pop();\n          if (extension.toLowerCase() === \"model\") return rel;\n        }\n      }\n\n      function build(objects2, data3mf2) {\n        var group = new Group();\n        var relationship = fetch3DModelPart(data3mf2[\"rels\"]);\n        var buildData = data3mf2.model[relationship[\"target\"].substring(1)][\"build\"];\n\n        for (var i = 0; i < buildData.length; i++) {\n          var buildItem = buildData[i];\n          var object3D = objects2[buildItem[\"objectId\"]];\n          var transform = buildItem[\"transform\"];\n\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n\n          group.add(object3D);\n        }\n\n        return group;\n      }\n\n      var data3mf = loadDocument(data);\n      var objects = buildObjects(data3mf);\n      return build(objects, data3mf);\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extension) {\n      this.availableExtensions.push(extension);\n    }\n  }]);\n\n  return ThreeMFLoader;\n}(Loader);\n\nexport { ThreeMFLoader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/3MFLoader.js"],"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Color","Matrix4","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","Group","MeshStandardMaterial","unzipSync","ThreeMFLoader","manager","availableExtensions","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","data2","zip","file","relsName","modelRelsName","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","relsView2","relsFileText2","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","i2","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects2","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","colorSpace","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","build2","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf2","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","data3mf","objects"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Color, Matrix4, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, Group, MeshStandardMaterial } from \"three\";\nimport { unzipSync } from \"fflate\";\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n    function loadDocument(data2) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const printTicketPartNames = [];\n      const texturesPartNames = [];\n      const otherPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n      try {\n        zip = unzipSync(new Uint8Array(data2));\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\");\n          return null;\n        }\n      }\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n          printTicketPartNames.push(file);\n        } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) {\n          otherPartNames.push(file);\n        }\n      }\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText);\n      if (modelRelsName) {\n        const relsView2 = zip[modelRelsName];\n        const relsFileText2 = LoaderUtils.decodeText(relsView2);\n        modelRels = parseRelsXml(relsFileText2);\n      }\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, \"application/xml\");\n        if (xmlData.documentElement.nodeName.toLowerCase() !== \"model\") {\n          console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \", modelPart);\n        }\n        const modelNode = xmlData.querySelector(\"model\");\n        const extensions = {};\n        for (let i2 = 0; i2 < modelNode.attributes.length; i2++) {\n          const attr = modelNode.attributes[i2];\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n        const modelData = parseModelNode(modelNode);\n        modelData[\"xml\"] = modelNode;\n        if (0 < Object.keys(extensions).length) {\n          modelData[\"extensions\"] = extensions;\n        }\n        modelParts[modelPart] = modelData;\n      }\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n      return {\n        rels,\n        modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, \"application/xml\");\n      const relsNodes = relsXmlData.querySelectorAll(\"Relationship\");\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute(\"Target\"),\n          //required\n          id: relsNode.getAttribute(\"Id\"),\n          //required\n          type: relsNode.getAttribute(\"Type\")\n          //required\n        };\n        relationships.push(relationship);\n      }\n      return relationships;\n    }\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute(\"name\");\n        const validNames = [\n          \"Title\",\n          \"Designer\",\n          \"Description\",\n          \"Copyright\",\n          \"LicenseTerms\",\n          \"Rating\",\n          \"CreationDate\",\n          \"ModificationDate\"\n        ];\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n      return metadataData;\n    }\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute(\"id\"),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll(\"base\");\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i;\n        basematerialsData.basematerials.push(basematerialData);\n      }\n      return basematerialsData;\n    }\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute(\"id\"),\n        // required\n        path: texture2DNode.getAttribute(\"path\"),\n        // required\n        contenttype: texture2DNode.getAttribute(\"contenttype\"),\n        // required\n        tilestyleu: texture2DNode.getAttribute(\"tilestyleu\"),\n        tilestylev: texture2DNode.getAttribute(\"tilestylev\"),\n        filter: texture2DNode.getAttribute(\"filter\")\n      };\n      return texture2dData;\n    }\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute(\"id\"),\n        // required\n        texid: texture2DGroupNode.getAttribute(\"texid\"),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll(\"tex2coord\");\n      const uvs = [];\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute(\"u\");\n        const v = tex2coordNode.getAttribute(\"v\");\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n      texture2DGroupData[\"uvs\"] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute(\"id\"),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const colorNodes = colorGroupNode.querySelectorAll(\"color\");\n      const colors = [];\n      const colorObject = new Color();\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute(\"color\");\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear();\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n      colorGroupData[\"colors\"] = new Float32Array(colors);\n      return colorGroupData;\n    }\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute(\"id\")\n        // required\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\");\n      const metallicData = [];\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute(\"name\"),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute(\"metallicness\")),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute(\"roughness\"))\n          // required\n        });\n      }\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData[\"name\"] = basematerialNode.getAttribute(\"name\");\n      basematerialData[\"displaycolor\"] = basematerialNode.getAttribute(\"displaycolor\");\n      basematerialData[\"displaypropertiesid\"] = basematerialNode.getAttribute(\"displaypropertiesid\");\n      return basematerialData;\n    }\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll(\"vertices vertex\");\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute(\"x\");\n        const y = vertexNode.getAttribute(\"y\");\n        const z = vertexNode.getAttribute(\"z\");\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n      meshData[\"vertices\"] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll(\"triangles triangle\");\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute(\"v1\");\n        const v2 = triangleNode.getAttribute(\"v2\");\n        const v3 = triangleNode.getAttribute(\"v3\");\n        const p1 = triangleNode.getAttribute(\"p1\");\n        const p2 = triangleNode.getAttribute(\"p2\");\n        const p3 = triangleNode.getAttribute(\"p3\");\n        const pid = triangleNode.getAttribute(\"pid\");\n        const triangleProperty = {};\n        triangleProperty[\"v1\"] = parseInt(v1, 10);\n        triangleProperty[\"v2\"] = parseInt(v2, 10);\n        triangleProperty[\"v3\"] = parseInt(v3, 10);\n        triangles.push(triangleProperty[\"v1\"], triangleProperty[\"v2\"], triangleProperty[\"v3\"]);\n        if (p1) {\n          triangleProperty[\"p1\"] = parseInt(p1, 10);\n        }\n        if (p2) {\n          triangleProperty[\"p2\"] = parseInt(p2, 10);\n        }\n        if (p3) {\n          triangleProperty[\"p3\"] = parseInt(p3, 10);\n        }\n        if (pid) {\n          triangleProperty[\"pid\"] = pid;\n        }\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n      meshData[\"triangleProperties\"] = triangleProperties;\n      meshData[\"triangles\"] = new Uint32Array(triangles);\n      return meshData;\n    }\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll(\"component\");\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n      return components;\n    }\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData[\"objectId\"] = componentNode.getAttribute(\"objectid\");\n      const transform = componentNode.getAttribute(\"transform\");\n      if (transform) {\n        componentData[\"transform\"] = parseTransform(transform);\n      }\n      return componentData;\n    }\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(\" \").forEach(function(s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n      return matrix;\n    }\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute(\"type\")\n      };\n      const id = objectNode.getAttribute(\"id\");\n      if (id) {\n        objectData[\"id\"] = id;\n      }\n      const pid = objectNode.getAttribute(\"pid\");\n      if (pid) {\n        objectData[\"pid\"] = pid;\n      }\n      const pindex = objectNode.getAttribute(\"pindex\");\n      if (pindex) {\n        objectData[\"pindex\"] = pindex;\n      }\n      const thumbnail = objectNode.getAttribute(\"thumbnail\");\n      if (thumbnail) {\n        objectData[\"thumbnail\"] = thumbnail;\n      }\n      const partnumber = objectNode.getAttribute(\"partnumber\");\n      if (partnumber) {\n        objectData[\"partnumber\"] = partnumber;\n      }\n      const name = objectNode.getAttribute(\"name\");\n      if (name) {\n        objectData[\"name\"] = name;\n      }\n      const meshNode = objectNode.querySelector(\"mesh\");\n      if (meshNode) {\n        objectData[\"mesh\"] = parseMeshNode(meshNode);\n      }\n      const componentsNode = objectNode.querySelector(\"components\");\n      if (componentsNode) {\n        objectData[\"components\"] = parseComponentsNode(componentsNode);\n      }\n      return objectData;\n    }\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData[\"basematerials\"] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll(\"basematerials\");\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData[\"basematerials\"][basematerialsData[\"id\"]] = basematerialsData;\n      }\n      resourcesData[\"texture2d\"] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll(\"texture2d\");\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData[\"texture2d\"][texture2DData[\"id\"]] = texture2DData;\n      }\n      resourcesData[\"colorgroup\"] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll(\"colorgroup\");\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData[\"colorgroup\"][colorGroupData[\"id\"]] = colorGroupData;\n      }\n      resourcesData[\"pbmetallicdisplayproperties\"] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll(\"pbmetallicdisplayproperties\");\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData[\"pbmetallicdisplayproperties\"][pbmetallicdisplaypropertiesData[\"id\"]] = pbmetallicdisplaypropertiesData;\n      }\n      resourcesData[\"texture2dgroup\"] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll(\"texture2dgroup\");\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData[\"texture2dgroup\"][textures2DGroupData[\"id\"]] = textures2DGroupData;\n      }\n      resourcesData[\"object\"] = {};\n      const objectNodes = resourcesNode.querySelectorAll(\"object\");\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData[\"object\"][objectData[\"id\"]] = objectData;\n      }\n      return resourcesData;\n    }\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll(\"item\");\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute(\"objectid\")\n        };\n        const transform = itemNode.getAttribute(\"transform\");\n        if (transform) {\n          buildItem[\"transform\"] = parseTransform(transform);\n        }\n        buildData.push(buildItem);\n      }\n      return buildData;\n    }\n    function parseModelNode(modelNode) {\n      const modelData = { unit: modelNode.getAttribute(\"unit\") || \"millimeter\" };\n      const metadataNodes = modelNode.querySelectorAll(\"metadata\");\n      if (metadataNodes) {\n        modelData[\"metadata\"] = parseMetadataNodes(metadataNodes);\n      }\n      const resourcesNode = modelNode.querySelector(\"resources\");\n      if (resourcesNode) {\n        modelData[\"resources\"] = parseResourcesNode(resourcesNode);\n      }\n      const buildNode = modelNode.querySelector(\"build\");\n      if (buildNode) {\n        modelData[\"build\"] = parseBuildNode(buildNode);\n      }\n      return modelData;\n    }\n    function buildTexture(texture2dgroup, objects2, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n      if (texture2d) {\n        const data2 = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data2], { type });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function() {\n          URL.revokeObjectURL(sourceURI);\n        });\n        if (\"colorSpace\" in texture)\n          texture.colorSpace = \"srgb\";\n        else\n          texture.encoding = 3001;\n        switch (texture2d.tilestyleu) {\n          case \"wrap\":\n            texture.wrapS = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n        switch (texture2d.tilestylev) {\n          case \"wrap\":\n            texture.wrapT = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n        switch (texture2d.filter) {\n          case \"auto\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n          case \"linear\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n          case \"nearest\":\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n        return texture;\n      } else {\n        return null;\n      }\n    }\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === void 0)\n          materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      }\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects2, modelData, textureData, objectData, buildBasematerial);\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n      return meshes;\n    }\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvData, 2));\n      const texture = getBuild(texture2dgroup, objects2, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({ map: texture, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]);\n        const p1 = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== void 0 ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== void 0 ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(colorData, 3));\n      const material = new MeshPhongMaterial({ vertexColors: true, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData[\"triangles\"], 1));\n      geometry.setAttribute(\"position\", new BufferAttribute(meshData[\"vertices\"], 3));\n      const material = new MeshPhongMaterial({ color: 11184895, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n        switch (resourceType) {\n          case \"material\":\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(\n              basematerials,\n              triangleProperties,\n              meshData,\n              objects2,\n              modelData,\n              textureData,\n              objectData\n            );\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n            break;\n          case \"texture\":\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(\n              buildTexturedMesh(\n                texture2dgroup,\n                triangleProperties,\n                meshData,\n                objects2,\n                modelData,\n                textureData,\n                objectData\n              )\n            );\n            break;\n          case \"vertexColors\":\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData));\n            break;\n          case \"default\":\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n          default:\n            console.error(\"THREE.3MFLoader: Unsupported resource type.\");\n        }\n      }\n      return meshes;\n    }\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== void 0) {\n        return \"texture\";\n      } else if (modelData.resources.basematerials[pid] !== void 0) {\n        return \"material\";\n      } else if (modelData.resources.colorgroup[pid] !== void 0) {\n        return \"vertexColors\";\n      } else if (pid === \"default\") {\n        return \"default\";\n      } else {\n        return void 0;\n      }\n    }\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData[\"triangleProperties\"];\n      const objectPid = objectData.pid;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== void 0 ? triangleProperty.pid : objectPid;\n        if (pid === void 0)\n          pid = \"default\";\n        if (resourceMap[pid] === void 0)\n          resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n      return resourceMap;\n    }\n    function buildGroup(meshData, objects2, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData);\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n      return group;\n    }\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension[\"ns\"]], meshData);\n      }\n    }\n    function getBuild(data2, objects2, modelData, textureData, objectData, builder) {\n      if (data2.build !== void 0)\n        return data2.build;\n      data2.build = builder(data2, objects2, modelData, textureData, objectData);\n      return data2.build;\n    }\n    function buildBasematerial(materialData, objects2, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== void 0) {\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        material = new MeshPhongMaterial({ flatShading: true });\n      }\n      material.name = materialData.name;\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear();\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n      return material;\n    }\n    function buildComposite(compositeData, objects2, modelData, textureData) {\n      const composite = new Group();\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build2 = objects2[component.objectId];\n        if (build2 === void 0) {\n          buildObject(component.objectId, objects2, modelData, textureData);\n          build2 = objects2[component.objectId];\n        }\n        const object3D = build2.clone();\n        const transform = component.transform;\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        composite.add(object3D);\n      }\n      return composite;\n    }\n    function buildObject(objectId, objects2, modelData, textureData) {\n      const objectData = modelData[\"resources\"][\"object\"][objectId];\n      if (objectData[\"mesh\"]) {\n        const meshData = objectData[\"mesh\"];\n        const extensions = modelData[\"extensions\"];\n        const modelXml = modelData[\"xml\"];\n        applyExtensions(extensions, meshData, modelXml);\n        objects2[objectData.id] = getBuild(meshData, objects2, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData[\"components\"];\n        objects2[objectData.id] = getBuild(compositeData, objects2, modelData, textureData, objectData, buildComposite);\n      }\n    }\n    function buildObjects(data3mf2) {\n      const modelsData = data3mf2.model;\n      const modelRels = data3mf2.modelRels;\n      const objects2 = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {};\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n          if (data3mf2.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf2.texture[textureKey];\n          }\n        }\n      }\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData[\"resources\"][\"object\"]);\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects2, modelData, textureData);\n        }\n      }\n      return objects2;\n    }\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split(\".\").pop();\n        if (extension.toLowerCase() === \"model\")\n          return rel;\n      }\n    }\n    function build(objects2, data3mf2) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf2[\"rels\"]);\n      const buildData = data3mf2.model[relationship[\"target\"].substring(1)][\"build\"];\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects2[buildItem[\"objectId\"]];\n        const transform = buildItem[\"transform\"];\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        group.add(object3D);\n      }\n      return group;\n    }\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n}\nexport {\n  ThreeMFLoader\n};\n"]},"metadata":{},"sourceType":"module"}