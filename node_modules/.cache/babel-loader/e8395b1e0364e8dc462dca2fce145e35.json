{"ast":null,"code":"var BokehShader = {\n  defines: {\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1\n  },\n  uniforms: {\n    tColor: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    focus: {\n      value: 1\n    },\n    aspect: {\n      value: 1\n    },\n    aperture: {\n      value: 0.025\n    },\n    maxblur: {\n      value: 0.01\n    },\n    nearClip: {\n      value: 1\n    },\n    farClip: {\n      value: 1e3\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"varying vec2 vUv;\", \"uniform sampler2D tColor;\", \"uniform sampler2D tDepth;\", \"uniform float maxblur;\", // max blur amount\n  \"uniform float aperture;\", // aperture - bigger values for shallower depth of field\n  \"uniform float nearClip;\", \"uniform float farClip;\", \"uniform float focus;\", \"uniform float aspect;\", \"#include <packing>\", \"float getDepth( const in vec2 screenPosition ) {\", \"\t#if DEPTH_PACKING == 1\", \"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\", \"\t#else\", \"\treturn texture2D( tDepth, screenPosition ).x;\", \"\t#endif\", \"}\", \"float getViewZ( const in float depth ) {\", \"\t#if PERSPECTIVE_CAMERA == 1\", \"\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\", \"\t#else\", \"\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\", \"\t#endif\", \"}\", \"void main() {\", \"\tvec2 aspectcorrect = vec2( 1.0, aspect );\", \"\tfloat viewZ = getViewZ( getDepth( vUv ) );\", \"\tfloat factor = ( focus + viewZ );\", // viewZ is <= 0, so this is a difference equation\n  \"\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\", \"\tvec2 dofblur9 = dofblur * 0.9;\", \"\tvec2 dofblur7 = dofblur * 0.7;\", \"\tvec2 dofblur4 = dofblur * 0.4;\", \"\tvec4 col = vec4( 0.0 );\", \"\tcol += texture2D( tColor, vUv.xy );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\", \"\tgl_FragColor = col / 41.0;\", \"\tgl_FragColor.a = 1.0;\", \"}\"].join(\"\\n\")\n};\nexport { BokehShader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/shaders/BokehShader.js"],"names":["BokehShader","defines","DEPTH_PACKING","PERSPECTIVE_CAMERA","uniforms","tColor","value","tDepth","focus","aspect","aperture","maxblur","nearClip","farClip","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAE,CADR;AAEPC,IAAAA,kBAAkB,EAAE;AAFb,GADS;AAKlBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADA;AAERC,IAAAA,MAAM,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFA;AAGRE,IAAAA,KAAK,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAHC;AAIRG,IAAAA,MAAM,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAJA;AAKRI,IAAAA,QAAQ,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KALF;AAMRK,IAAAA,OAAO,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT,KAND;AAORM,IAAAA,QAAQ,EAAE;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAPF;AAQRO,IAAAA,OAAO,EAAE;AAAEP,MAAAA,KAAK,EAAE;AAAT;AARD,GALQ;AAelBQ,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CAfI;AAsBlBC,EAAAA,cAAc,EAAE,CACd,mBADc,EAEd,mBAFc,EAGd,2BAHc,EAId,2BAJc,EAKd,wBALc,EAMd;AACA,2BAPc,EAQd;AACA,2BATc,EAUd,wBAVc,EAWd,sBAXc,EAYd,uBAZc,EAad,oBAbc,EAcd,kDAdc,EAed,yBAfc,EAgBd,mEAhBc,EAiBd,QAjBc,EAkBd,gDAlBc,EAmBd,SAnBc,EAoBd,GApBc,EAqBd,0CArBc,EAsBd,8BAtBc,EAuBd,8DAvBc,EAwBd,QAxBc,EAyBd,+DAzBc,EA0Bd,SA1Bc,EA2Bd,GA3Bc,EA4Bd,eA5Bc,EA6Bd,4CA7Bc,EA8Bd,6CA9Bc,EA+Bd,oCA/Bc,EAgCd;AACA,2EAjCc,EAkCd,iCAlCc,EAmCd,iCAnCc,EAoCd,iCApCc,EAqCd,0BArCc,EAsCd,sCAtCc,EAuCd,2FAvCc,EAwCd,2FAxCc,EAyCd,2FAzCc,EA0Cd,2FA1Cc,EA2Cd,2FA3Cc,EA4Cd,2FA5Cc,EA6Cd,2FA7Cc,EA8Cd,2FA9Cc,EA+Cd,2FA/Cc,EAgDd,2FAhDc,EAiDd,2FAjDc,EAkDd,2FAlDc,EAmDd,2FAnDc,EAoDd,2FApDc,EAqDd,2FArDc,EAsDd,2FAtDc,EAuDd,4FAvDc,EAwDd,4FAxDc,EAyDd,4FAzDc,EA0Dd,4FA1Dc,EA2Dd,4FA3Dc,EA4Dd,4FA5Dc,EA6Dd,4FA7Dc,EA8Dd,4FA9Dc,EA+Dd,4FA/Dc,EAgEd,4FAhEc,EAiEd,4FAjEc,EAkEd,4FAlEc,EAmEd,4FAnEc,EAoEd,4FApEc,EAqEd,4FArEc,EAsEd,4FAtEc,EAuEd,4FAvEc,EAwEd,4FAxEc,EAyEd,4FAzEc,EA0Ed,4FA1Ec,EA2Ed,4FA3Ec,EA4Ed,4FA5Ec,EA6Ed,4FA7Ec,EA8Ed,4FA9Ec,EA+Ed,6BA/Ec,EAgFd,wBAhFc,EAiFd,GAjFc,EAkFdD,IAlFc,CAkFT,IAlFS;AAtBE,CAApB;AA0GA,SACEf,WADF","sourcesContent":["const BokehShader = {\n  defines: {\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1\n  },\n  uniforms: {\n    tColor: { value: null },\n    tDepth: { value: null },\n    focus: { value: 1 },\n    aspect: { value: 1 },\n    aperture: { value: 0.025 },\n    maxblur: { value: 0.01 },\n    nearClip: { value: 1 },\n    farClip: { value: 1e3 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    \"varying vec2 vUv;\",\n    \"uniform sampler2D tColor;\",\n    \"uniform sampler2D tDepth;\",\n    \"uniform float maxblur;\",\n    // max blur amount\n    \"uniform float aperture;\",\n    // aperture - bigger values for shallower depth of field\n    \"uniform float nearClip;\",\n    \"uniform float farClip;\",\n    \"uniform float focus;\",\n    \"uniform float aspect;\",\n    \"#include <packing>\",\n    \"float getDepth( const in vec2 screenPosition ) {\",\n    \"\t#if DEPTH_PACKING == 1\",\n    \"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n    \"\t#else\",\n    \"\treturn texture2D( tDepth, screenPosition ).x;\",\n    \"\t#endif\",\n    \"}\",\n    \"float getViewZ( const in float depth ) {\",\n    \"\t#if PERSPECTIVE_CAMERA == 1\",\n    \"\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\",\n    \"\t#else\",\n    \"\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\",\n    \"\t#endif\",\n    \"}\",\n    \"void main() {\",\n    \"\tvec2 aspectcorrect = vec2( 1.0, aspect );\",\n    \"\tfloat viewZ = getViewZ( getDepth( vUv ) );\",\n    \"\tfloat factor = ( focus + viewZ );\",\n    // viewZ is <= 0, so this is a difference equation\n    \"\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\",\n    \"\tvec2 dofblur9 = dofblur * 0.9;\",\n    \"\tvec2 dofblur7 = dofblur * 0.7;\",\n    \"\tvec2 dofblur4 = dofblur * 0.4;\",\n    \"\tvec4 col = vec4( 0.0 );\",\n    \"\tcol += texture2D( tColor, vUv.xy );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tgl_FragColor = col / 41.0;\",\n    \"\tgl_FragColor.a = 1.0;\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  BokehShader\n};\n"]},"metadata":{},"sourceType":"module"}