{"ast":null,"code":"import _objectSpread from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _excluded = [\"bevelEnabled\", \"bevelSize\", \"bevelThickness\", \"font\", \"height\", \"size\", \"lineHeight\", \"letterSpacing\"];\nimport { ExtrudeGeometry } from \"three\";\n\nvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n  _inherits(TextGeometry, _ExtrudeGeometry);\n\n  var _super = _createSuper(TextGeometry);\n\n  function TextGeometry(text) {\n    var _this;\n\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TextGeometry);\n\n    var _parameters$bevelEnab = parameters.bevelEnabled,\n        bevelEnabled = _parameters$bevelEnab === void 0 ? false : _parameters$bevelEnab,\n        _parameters$bevelSize = parameters.bevelSize,\n        bevelSize = _parameters$bevelSize === void 0 ? 8 : _parameters$bevelSize,\n        _parameters$bevelThic = parameters.bevelThickness,\n        bevelThickness = _parameters$bevelThic === void 0 ? 10 : _parameters$bevelThic,\n        font = parameters.font,\n        _parameters$height = parameters.height,\n        height = _parameters$height === void 0 ? 50 : _parameters$height,\n        _parameters$size = parameters.size,\n        size = _parameters$size === void 0 ? 100 : _parameters$size,\n        _parameters$lineHeigh = parameters.lineHeight,\n        lineHeight = _parameters$lineHeigh === void 0 ? 1 : _parameters$lineHeigh,\n        _parameters$letterSpa = parameters.letterSpacing,\n        letterSpacing = _parameters$letterSpa === void 0 ? 0 : _parameters$letterSpa,\n        rest = _objectWithoutProperties(parameters, _excluded);\n\n    if (font === void 0) {\n      _this = _super.call(this);\n    } else {\n      var shapes = font.generateShapes(text, size, {\n        lineHeight: lineHeight,\n        letterSpacing: letterSpacing\n      });\n      _this = _super.call(this, shapes, _objectSpread(_objectSpread({}, rest), {}, {\n        bevelEnabled: bevelEnabled,\n        bevelSize: bevelSize,\n        bevelThickness: bevelThickness,\n        depth: height\n      }));\n    }\n\n    _this.type = \"TextGeometry\";\n    return _possibleConstructorReturn(_this);\n  }\n\n  return TextGeometry;\n}(ExtrudeGeometry);\n\nexport { TextGeometry as TextBufferGeometry, TextGeometry };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/geometries/TextGeometry.js"],"names":["ExtrudeGeometry","TextGeometry","text","parameters","bevelEnabled","bevelSize","bevelThickness","font","height","size","lineHeight","letterSpacing","rest","shapes","generateShapes","depth","type","TextBufferGeometry"],"mappings":";;;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;;IACMC,Y;;;;;AACJ,wBAAYC,IAAZ,EAAmC;AAAA;;AAAA,QAAjBC,UAAiB,uEAAJ,EAAI;;AAAA;;AACjC,gCAUIA,UAVJ,CACEC,YADF;AAAA,QACEA,YADF,sCACiB,KADjB;AAAA,gCAUID,UAVJ,CAEEE,SAFF;AAAA,QAEEA,SAFF,sCAEc,CAFd;AAAA,gCAUIF,UAVJ,CAGEG,cAHF;AAAA,QAGEA,cAHF,sCAGmB,EAHnB;AAAA,QAIEC,IAJF,GAUIJ,UAVJ,CAIEI,IAJF;AAAA,6BAUIJ,UAVJ,CAKEK,MALF;AAAA,QAKEA,MALF,mCAKW,EALX;AAAA,2BAUIL,UAVJ,CAMEM,IANF;AAAA,QAMEA,IANF,iCAMS,GANT;AAAA,gCAUIN,UAVJ,CAOEO,UAPF;AAAA,QAOEA,UAPF,sCAOe,CAPf;AAAA,gCAUIP,UAVJ,CAQEQ,aARF;AAAA,QAQEA,aARF,sCAQkB,CARlB;AAAA,QASKC,IATL,4BAUIT,UAVJ;;AAWA,QAAII,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnB;AACD,KAFD,MAEO;AACL,UAAMM,MAAM,GAAGN,IAAI,CAACO,cAAL,CAAoBZ,IAApB,EAA0BO,IAA1B,EAAgC;AAAEC,QAAAA,UAAU,EAAVA,UAAF;AAAcC,QAAAA,aAAa,EAAbA;AAAd,OAAhC,CAAf;AACA,gCAAME,MAAN,kCAAmBD,IAAnB;AAAyBR,QAAAA,YAAY,EAAZA,YAAzB;AAAuCC,QAAAA,SAAS,EAATA,SAAvC;AAAkDC,QAAAA,cAAc,EAAdA,cAAlD;AAAkES,QAAAA,KAAK,EAAEP;AAAzE;AACD;;AACD,UAAKQ,IAAL,GAAY,cAAZ;AAlBiC;AAmBlC;;;EApBwBhB,e;;AAsB3B,SACEC,YAAY,IAAIgB,kBADlB,EAEEhB,YAFF","sourcesContent":["import { ExtrudeGeometry } from \"three\";\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters = {}) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n    if (font === void 0) {\n      super();\n    } else {\n      const shapes = font.generateShapes(text, size, { lineHeight, letterSpacing });\n      super(shapes, { ...rest, bevelEnabled, bevelSize, bevelThickness, depth: height });\n    }\n    this.type = \"TextGeometry\";\n  }\n}\nexport {\n  TextGeometry as TextBufferGeometry,\n  TextGeometry\n};\n"]},"metadata":{},"sourceType":"module"}