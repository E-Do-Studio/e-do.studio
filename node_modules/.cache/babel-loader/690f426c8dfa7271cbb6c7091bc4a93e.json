{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from \"three\";\n\nvar PVRLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(PVRLoader, _CompressedTextureLoa);\n\n  var _super = _createSuper(PVRLoader);\n\n  function PVRLoader(manager) {\n    _classCallCheck(this, PVRLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(PVRLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var headerLengthInt = 13;\n      var header = new Uint32Array(buffer, 0, headerLengthInt);\n      var pvrDatas = {\n        buffer: buffer,\n        header: header,\n        loadMipmaps: loadMipmaps\n      };\n\n      if (header[0] === 55727696) {\n        return _parseV3(pvrDatas);\n      } else if (header[11] === 559044176) {\n        return _parseV2(pvrDatas);\n      } else {\n        console.error(\"THREE.PVRLoader: Unknown PVR format.\");\n      }\n    }\n  }]);\n\n  return PVRLoader;\n}(CompressedTextureLoader);\n\nfunction _parseV3(pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n      pixelFormat = header[2],\n      height = header[6],\n      width = header[7],\n      numFaces = header[10],\n      numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error(\"THREE.PVRLoader: Unsupported PVR format:\", pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\n\nfunction _parseV2(pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n      height = header[1],\n      width = header[2],\n      numMipmaps = header[3],\n      flags = header[4],\n      bitmaskAlpha = header[10],\n      numSurfs = header[12];\n  var TYPE_MASK = 255;\n  var PVRTC_2 = 24,\n      PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n\n  var _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error(\"THREE.PVRLoader: Unknown PVR format:\", formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1;\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\n\nfunction _extract(pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n  var bpp = pvrDatas.bpp,\n      numSurfs = pvrDatas.numSurfaces;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n        sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight;\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n}\n\nexport { PVRLoader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/PVRLoader.js"],"names":["CompressedTextureLoader","RGBA_PVRTC_4BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_2BPPV1_Format","PVRLoader","manager","buffer","loadMipmaps","headerLengthInt","header","Uint32Array","pvrDatas","_parseV3","_parseV2","console","error","bpp","format","metaLen","pixelFormat","height","width","numFaces","numMipmaps","dataPtr","numSurfaces","isCubemap","_extract","headerLength","flags","bitmaskAlpha","numSurfs","TYPE_MASK","PVRTC_2","PVRTC_4","formatFlags","_hasAlpha","pvr","mipmaps","mipmapCount","dataOffset","dataSize","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","length","mipLevel","sWidth","sHeight","surfIndex","byteArray","Uint8Array","mipmap","data"],"mappings":"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","sourcesContent":["import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from \"three\";\nclass PVRLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer, loadMipmaps) {\n    const headerLengthInt = 13;\n    const header = new Uint32Array(buffer, 0, headerLengthInt);\n    const pvrDatas = {\n      buffer,\n      header,\n      loadMipmaps\n    };\n    if (header[0] === 55727696) {\n      return _parseV3(pvrDatas);\n    } else if (header[11] === 559044176) {\n      return _parseV2(pvrDatas);\n    } else {\n      console.error(\"THREE.PVRLoader: Unknown PVR format.\");\n    }\n  }\n}\nfunction _parseV3(pvrDatas) {\n  const header = pvrDatas.header;\n  let bpp, format;\n  const metaLen = header[12], pixelFormat = header[2], height = header[6], width = header[7], numFaces = header[10], numMipmaps = header[11];\n  switch (pixelFormat) {\n    case 0:\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n    case 1:\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n    case 2:\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n    case 3:\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n    default:\n      console.error(\"THREE.PVRLoader: Unsupported PVR format:\", pixelFormat);\n  }\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\nfunction _parseV2(pvrDatas) {\n  const header = pvrDatas.header;\n  const headerLength = header[0], height = header[1], width = header[2], numMipmaps = header[3], flags = header[4], bitmaskAlpha = header[10], numSurfs = header[12];\n  const TYPE_MASK = 255;\n  const PVRTC_2 = 24, PVRTC_4 = 25;\n  const formatFlags = flags & TYPE_MASK;\n  let bpp, format;\n  const _hasAlpha = bitmaskAlpha > 0;\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error(\"THREE.PVRLoader: Unknown PVR format:\", formatFlags);\n  }\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1;\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\nfunction _extract(pvrDatas) {\n  const pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  const buffer = pvrDatas.buffer;\n  let dataOffset = pvrDatas.dataPtr, dataSize = 0, blockSize = 0, blockWidth = 0, blockHeight = 0, widthBlocks = 0, heightBlocks = 0;\n  const bpp = pvrDatas.bpp, numSurfs = pvrDatas.numSurfaces;\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  let mipLevel = 0;\n  while (mipLevel < pvrDatas.numMipmaps) {\n    const sWidth = pvrDatas.width >> mipLevel, sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight;\n    if (widthBlocks < 2)\n      widthBlocks = 2;\n    if (heightBlocks < 2)\n      heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      const byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      const mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n    mipLevel++;\n  }\n  return pvr;\n}\nexport {\n  PVRLoader\n};\n"]},"metadata":{},"sourceType":"module"}