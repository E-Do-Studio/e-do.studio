{"ast":null,"code":"import { Loader, FileLoader, LineBasicMaterial, BufferGeometry, Float32BufferAttribute, LineSegments, Group, Euler } from \"three\";\n\nclass GCodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.splitLayer = false;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    let state = {\n      x: 0,\n      y: 0,\n      z: 0,\n      e: 0,\n      f: 0,\n      extruding: false,\n      relative: false\n    };\n    let layers = [];\n    let currentLayer = void 0;\n    const pathMaterial = new LineBasicMaterial({\n      color: 16711680\n    });\n    pathMaterial.name = \"path\";\n    const extrudingMaterial = new LineBasicMaterial({\n      color: 65280\n    });\n    extrudingMaterial.name = \"extruded\";\n\n    function newLayer(line) {\n      currentLayer = {\n        vertex: [],\n        pathVertex: [],\n        z: line.z\n      };\n      layers.push(currentLayer);\n    }\n\n    function addSegment(p1, p2) {\n      if (currentLayer === void 0) {\n        newLayer(p1);\n      }\n\n      if (state.extruding) {\n        currentLayer.vertex.push(p1.x, p1.y, p1.z);\n        currentLayer.vertex.push(p2.x, p2.y, p2.z);\n      } else {\n        currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n        currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n      }\n    }\n\n    function delta(v1, v2) {\n      return state.relative ? v2 : v2 - v1;\n    }\n\n    function absolute(v1, v2) {\n      return state.relative ? v1 + v2 : v2;\n    }\n\n    let lines = data.replace(/;.+/g, \"\").split(\"\\n\");\n\n    for (let i = 0; i < lines.length; i++) {\n      let tokens = lines[i].split(\" \");\n      let cmd = tokens[0].toUpperCase();\n      let args = {};\n      tokens.splice(1).forEach(function (token) {\n        if (token[0] !== void 0) {\n          let key = token[0].toLowerCase();\n          let value = parseFloat(token.substring(1));\n          args[key] = value;\n        }\n      });\n\n      if (cmd === \"G0\" || cmd === \"G1\") {\n        let line = {\n          x: args.x !== void 0 ? absolute(state.x, args.x) : state.x,\n          y: args.y !== void 0 ? absolute(state.y, args.y) : state.y,\n          z: args.z !== void 0 ? absolute(state.z, args.z) : state.z,\n          e: args.e !== void 0 ? absolute(state.e, args.e) : state.e,\n          f: args.f !== void 0 ? absolute(state.f, args.f) : state.f\n        };\n\n        if (delta(state.e, line.e) > 0) {\n          line.extruding = delta(state.e, line.e) > 0;\n\n          if (currentLayer == void 0 || line.z != currentLayer.z) {\n            newLayer(line);\n          }\n        }\n\n        addSegment(state, line);\n        state = line;\n      } else if (cmd === \"G2\" || cmd === \"G3\") {} else if (cmd === \"G90\") {\n        state.relative = false;\n      } else if (cmd === \"G91\") {\n        state.relative = true;\n      } else if (cmd === \"G92\") {\n        let line = state;\n        line.x = args.x !== void 0 ? args.x : line.x;\n        line.y = args.y !== void 0 ? args.y : line.y;\n        line.z = args.z !== void 0 ? args.z : line.z;\n        line.e = args.e !== void 0 ? args.e : line.e;\n        state = line;\n      } else {}\n    }\n\n    function addObject(vertex, extruding, i) {\n      let geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(vertex, 3));\n      let segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n      segments.name = \"layer\" + i;\n      object.add(segments);\n    }\n\n    const object = new Group();\n    object.name = \"gcode\";\n\n    if (this.splitLayer) {\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        addObject(layer.vertex, true, i);\n        addObject(layer.pathVertex, false, i);\n      }\n    } else {\n      const vertex = [],\n            pathVertex = [];\n\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        let layerVertex = layer.vertex;\n        let layerPathVertex = layer.pathVertex;\n\n        for (let j = 0; j < layerVertex.length; j++) {\n          vertex.push(layerVertex[j]);\n        }\n\n        for (let j = 0; j < layerPathVertex.length; j++) {\n          pathVertex.push(layerPathVertex[j]);\n        }\n      }\n\n      addObject(vertex, true, layers.length);\n      addObject(pathVertex, false, layers.length);\n    }\n\n    object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    return object;\n  }\n\n}\n\nexport { GCodeLoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/GCodeLoader.js"],"names":["Loader","FileLoader","LineBasicMaterial","BufferGeometry","Float32BufferAttribute","LineSegments","Group","Euler","GCodeLoader","constructor","manager","splitLayer","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","state","x","y","z","f","extruding","relative","layers","currentLayer","pathMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","addSegment","p1","p2","delta","v1","v2","absolute","lines","replace","split","i","length","tokens","cmd","toUpperCase","args","splice","forEach","token","key","toLowerCase","value","parseFloat","substring","addObject","geometry","setAttribute","segments","object","add","layer","layerVertex","layerPathVertex","j","quaternion","setFromEuler","Math","PI"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, LineBasicMaterial, BufferGeometry, Float32BufferAttribute, LineSegments, Group, Euler } from \"three\";\nclass GCodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.splitLayer = false;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    let state = { x: 0, y: 0, z: 0, e: 0, f: 0, extruding: false, relative: false };\n    let layers = [];\n    let currentLayer = void 0;\n    const pathMaterial = new LineBasicMaterial({ color: 16711680 });\n    pathMaterial.name = \"path\";\n    const extrudingMaterial = new LineBasicMaterial({ color: 65280 });\n    extrudingMaterial.name = \"extruded\";\n    function newLayer(line) {\n      currentLayer = { vertex: [], pathVertex: [], z: line.z };\n      layers.push(currentLayer);\n    }\n    function addSegment(p1, p2) {\n      if (currentLayer === void 0) {\n        newLayer(p1);\n      }\n      if (state.extruding) {\n        currentLayer.vertex.push(p1.x, p1.y, p1.z);\n        currentLayer.vertex.push(p2.x, p2.y, p2.z);\n      } else {\n        currentLayer.pathVertex.push(p1.x, p1.y, p1.z);\n        currentLayer.pathVertex.push(p2.x, p2.y, p2.z);\n      }\n    }\n    function delta(v1, v2) {\n      return state.relative ? v2 : v2 - v1;\n    }\n    function absolute(v1, v2) {\n      return state.relative ? v1 + v2 : v2;\n    }\n    let lines = data.replace(/;.+/g, \"\").split(\"\\n\");\n    for (let i = 0; i < lines.length; i++) {\n      let tokens = lines[i].split(\" \");\n      let cmd = tokens[0].toUpperCase();\n      let args = {};\n      tokens.splice(1).forEach(function(token) {\n        if (token[0] !== void 0) {\n          let key = token[0].toLowerCase();\n          let value = parseFloat(token.substring(1));\n          args[key] = value;\n        }\n      });\n      if (cmd === \"G0\" || cmd === \"G1\") {\n        let line = {\n          x: args.x !== void 0 ? absolute(state.x, args.x) : state.x,\n          y: args.y !== void 0 ? absolute(state.y, args.y) : state.y,\n          z: args.z !== void 0 ? absolute(state.z, args.z) : state.z,\n          e: args.e !== void 0 ? absolute(state.e, args.e) : state.e,\n          f: args.f !== void 0 ? absolute(state.f, args.f) : state.f\n        };\n        if (delta(state.e, line.e) > 0) {\n          line.extruding = delta(state.e, line.e) > 0;\n          if (currentLayer == void 0 || line.z != currentLayer.z) {\n            newLayer(line);\n          }\n        }\n        addSegment(state, line);\n        state = line;\n      } else if (cmd === \"G2\" || cmd === \"G3\") {\n      } else if (cmd === \"G90\") {\n        state.relative = false;\n      } else if (cmd === \"G91\") {\n        state.relative = true;\n      } else if (cmd === \"G92\") {\n        let line = state;\n        line.x = args.x !== void 0 ? args.x : line.x;\n        line.y = args.y !== void 0 ? args.y : line.y;\n        line.z = args.z !== void 0 ? args.z : line.z;\n        line.e = args.e !== void 0 ? args.e : line.e;\n        state = line;\n      } else {\n      }\n    }\n    function addObject(vertex, extruding, i) {\n      let geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(vertex, 3));\n      let segments = new LineSegments(geometry, extruding ? extrudingMaterial : pathMaterial);\n      segments.name = \"layer\" + i;\n      object.add(segments);\n    }\n    const object = new Group();\n    object.name = \"gcode\";\n    if (this.splitLayer) {\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        addObject(layer.vertex, true, i);\n        addObject(layer.pathVertex, false, i);\n      }\n    } else {\n      const vertex = [], pathVertex = [];\n      for (let i = 0; i < layers.length; i++) {\n        let layer = layers[i];\n        let layerVertex = layer.vertex;\n        let layerPathVertex = layer.pathVertex;\n        for (let j = 0; j < layerVertex.length; j++) {\n          vertex.push(layerVertex[j]);\n        }\n        for (let j = 0; j < layerPathVertex.length; j++) {\n          pathVertex.push(layerPathVertex[j]);\n        }\n      }\n      addObject(vertex, true, layers.length);\n      addObject(pathVertex, false, layers.length);\n    }\n    object.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    return object;\n  }\n}\nexport {\n  GCodeLoader\n};\n"]},"metadata":{},"sourceType":"module"}