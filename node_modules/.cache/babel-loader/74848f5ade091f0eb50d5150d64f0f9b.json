{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from \"three\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\n\nvar _LightningStrike = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(_LightningStrike, _BufferGeometry);\n\n  var _super = _createSuper(_LightningStrike);\n\n  function _LightningStrike() {\n    var _this;\n\n    var rayParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, _LightningStrike);\n\n    _this = _super.call(this);\n    _this.isLightningStrike = true;\n    _this.type = \"LightningStrike\";\n\n    _this.init(_LightningStrike.copyParameters(rayParameters, rayParameters));\n\n    _this.createMesh();\n\n    return _this;\n  }\n\n  _createClass(_LightningStrike, [{\n    key: \"update\",\n    value: function update(time) {\n      if (this.isStatic) return;\n\n      if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n        this.updateMesh(time);\n\n        if (time < this.subrays[0].endPropagationTime) {\n          this.state = _LightningStrike.RAY_PROPAGATING;\n        } else if (time > this.subrays[0].beginVanishingTime) {\n          this.state = _LightningStrike.RAY_VANISHING;\n        } else {\n          this.state = _LightningStrike.RAY_STEADY;\n        }\n\n        this.visible = true;\n      } else {\n        this.visible = false;\n\n        if (time < this.rayParameters.birthTime) {\n          this.state = _LightningStrike.RAY_UNBORN;\n        } else {\n          this.state = _LightningStrike.RAY_EXTINGUISHED;\n        }\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(rayParameters) {\n      this.rayParameters = rayParameters;\n      this.maxIterations = rayParameters.maxIterations !== void 0 ? Math.floor(rayParameters.maxIterations) : 9;\n      rayParameters.maxIterations = this.maxIterations;\n      this.isStatic = rayParameters.isStatic !== void 0 ? rayParameters.isStatic : false;\n      rayParameters.isStatic = this.isStatic;\n      this.ramification = rayParameters.ramification !== void 0 ? Math.floor(rayParameters.ramification) : 5;\n      rayParameters.ramification = this.ramification;\n      this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== void 0 ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n      rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n      this.recursionProbability = rayParameters.recursionProbability !== void 0 ? rayParameters.recursionProbability : 0.6;\n      rayParameters.recursionProbability = this.recursionProbability;\n      this.generateUVs = rayParameters.generateUVs !== void 0 ? rayParameters.generateUVs : false;\n      rayParameters.generateUVs = this.generateUVs;\n\n      if (rayParameters.randomGenerator !== void 0) {\n        this.randomGenerator = rayParameters.randomGenerator;\n        this.seedGenerator = rayParameters.randomGenerator;\n\n        if (rayParameters.noiseSeed !== void 0) {\n          this.seedGenerator.setSeed(rayParameters.noiseSeed);\n        }\n      } else {\n        this.randomGenerator = _LightningStrike.createRandomGenerator();\n        this.seedGenerator = Math;\n      }\n\n      if (rayParameters.onDecideSubrayCreation !== void 0) {\n        this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n      } else {\n        this.createDefaultSubrayCreationCallbacks();\n\n        if (rayParameters.onSubrayCreation !== void 0) {\n          this.onSubrayCreation = rayParameters.onSubrayCreation;\n        }\n      }\n\n      this.state = _LightningStrike.RAY_INITIALIZED;\n      this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n      rayParameters.maxSubrays = this.maxSubrays;\n      this.maxRaySegments = 2 * (1 << this.maxIterations);\n      this.subrays = [];\n\n      for (var i = 0; i < this.maxSubrays; i++) {\n        this.subrays.push(this.createSubray());\n      }\n\n      this.raySegments = [];\n\n      for (var _i = 0; _i < this.maxRaySegments; _i++) {\n        this.raySegments.push(this.createSegment());\n      }\n\n      this.time = 0;\n      this.timeFraction = 0;\n      this.currentSegmentCallback = null;\n      this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n      this.numSubrays = 0;\n      this.currentSubray = null;\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = false;\n      this.subrayProbability = 0;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.vertices = null;\n      this.uvs = null;\n      this.indices = null;\n      this.positionAttribute = null;\n      this.uvsAttribute = null;\n      this.simplexX = new SimplexNoise(this.seedGenerator);\n      this.simplexY = new SimplexNoise(this.seedGenerator);\n      this.simplexZ = new SimplexNoise(this.seedGenerator);\n      this.forwards = new Vector3();\n      this.forwardsFill = new Vector3();\n      this.side = new Vector3();\n      this.down = new Vector3();\n      this.middlePos = new Vector3();\n      this.middleLinPos = new Vector3();\n      this.newPos = new Vector3();\n      this.vPos = new Vector3();\n      this.cross1 = new Vector3();\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh() {\n      var maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n      var maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n      var maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n      this.vertices = new Float32Array(maxVerts * 3);\n      this.indices = new Uint32Array(maxIndices);\n\n      if (this.generateUVs) {\n        this.uvs = new Float32Array(maxVerts * 2);\n      }\n\n      this.fillMesh(0);\n      this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n      this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n      this.setAttribute(\"position\", this.positionAttribute);\n\n      if (this.generateUVs) {\n        this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n        this.setAttribute(\"uv\", this.uvsAttribute);\n      }\n\n      if (!this.isStatic) {\n        this.index.usage = DynamicDrawUsage;\n        this.positionAttribute.usage = DynamicDrawUsage;\n\n        if (this.generateUVs) {\n          this.uvsAttribute.usage = DynamicDrawUsage;\n        }\n      }\n\n      this.vertices = this.positionAttribute.array;\n      this.indices = this.index.array;\n\n      if (this.generateUVs) {\n        this.uvs = this.uvsAttribute.array;\n      }\n    }\n  }, {\n    key: \"updateMesh\",\n    value: function updateMesh(time) {\n      this.fillMesh(time);\n      this.drawRange.count = this.currentIndex;\n      this.index.needsUpdate = true;\n      this.positionAttribute.needsUpdate = true;\n\n      if (this.generateUVs) {\n        this.uvsAttribute.needsUpdate = true;\n      }\n    }\n  }, {\n    key: \"fillMesh\",\n    value: function fillMesh(time) {\n      var scope = this;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.fractalRay(time, function fillVertices(segment) {\n        var subray = scope.currentSubray;\n\n        if (time < subray.birthTime) {\n          return;\n        } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else if (time < subray.endPropagationTime) {\n          if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n            scope.createPrism(segment);\n            scope.onDecideSubrayCreation(segment, scope);\n          }\n        } else if (time < subray.beginVanishingTime) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else {\n          if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n            scope.createPrism(segment);\n          }\n\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      });\n    }\n  }, {\n    key: \"addNewSubray\",\n    value: function addNewSubray() {\n      return this.subrays[this.numSubrays++];\n    }\n  }, {\n    key: \"initSubray\",\n    value: function initSubray(subray, rayParameters) {\n      subray.pos0.copy(rayParameters.sourceOffset);\n      subray.pos1.copy(rayParameters.destOffset);\n      subray.up0.copy(rayParameters.up0);\n      subray.up1.copy(rayParameters.up1);\n      subray.radius0 = rayParameters.radius0;\n      subray.radius1 = rayParameters.radius1;\n      subray.birthTime = rayParameters.birthTime;\n      subray.deathTime = rayParameters.deathTime;\n      subray.timeScale = rayParameters.timeScale;\n      subray.roughness = rayParameters.roughness;\n      subray.straightness = rayParameters.straightness;\n      subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n      subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n      subray.maxIterations = this.maxIterations;\n      subray.seed = rayParameters.noiseSeed !== void 0 ? rayParameters.noiseSeed : 0;\n      subray.recursion = 0;\n    }\n  }, {\n    key: \"fractalRay\",\n    value: function fractalRay(time, segmentCallback) {\n      this.time = time;\n      this.currentSegmentCallback = segmentCallback;\n      this.numSubrays = 0;\n      this.initSubray(this.addNewSubray(), this.rayParameters);\n\n      for (var subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n        var subray = this.subrays[subrayIndex];\n        this.currentSubray = subray;\n        this.randomGenerator.setSeed(subray.seed);\n        subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n        subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n        var random1 = this.randomGenerator.random;\n        subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n        this.currentSegmentIndex = 0;\n        this.isInitialSegment = true;\n        var segment = this.getNewSegment();\n        segment.iteration = 0;\n        segment.pos0.copy(subray.pos0);\n        segment.pos1.copy(subray.pos1);\n        segment.linPos0.copy(subray.linPos0);\n        segment.linPos1.copy(subray.linPos1);\n        segment.up0.copy(subray.up0);\n        segment.up1.copy(subray.up1);\n        segment.radius0 = subray.radius0;\n        segment.radius1 = subray.radius1;\n        segment.fraction0 = 0;\n        segment.fraction1 = 1;\n        segment.positionVariationFactor = 1 - subray.straightness;\n        this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n        this.fractalRayRecursive(segment);\n      }\n\n      this.currentSegmentCallback = null;\n      this.currentSubray = null;\n    }\n  }, {\n    key: \"fractalRayRecursive\",\n    value: function fractalRayRecursive(segment) {\n      if (segment.iteration >= this.currentSubray.maxIterations) {\n        this.currentSegmentCallback(segment);\n        return;\n      }\n\n      this.forwards.subVectors(segment.pos1, segment.pos0);\n      var lForwards = this.forwards.length();\n\n      if (lForwards < 1e-6) {\n        this.forwards.set(0, 0, 0.01);\n        lForwards = this.forwards.length();\n      }\n\n      var middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n      var middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n      var timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n      this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n      this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n      var p = this.middleLinPos;\n      this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\n      this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n      this.newPos.add(this.middlePos);\n      var newSegment1 = this.getNewSegment();\n      newSegment1.pos0.copy(segment.pos0);\n      newSegment1.pos1.copy(this.newPos);\n      newSegment1.linPos0.copy(segment.linPos0);\n      newSegment1.linPos1.copy(this.middleLinPos);\n      newSegment1.up0.copy(segment.up0);\n      newSegment1.up1.copy(segment.up1);\n      newSegment1.radius0 = segment.radius0;\n      newSegment1.radius1 = middleRadius;\n      newSegment1.fraction0 = segment.fraction0;\n      newSegment1.fraction1 = middleFraction;\n      newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment1.iteration = segment.iteration + 1;\n      var newSegment2 = this.getNewSegment();\n      newSegment2.pos0.copy(this.newPos);\n      newSegment2.pos1.copy(segment.pos1);\n      newSegment2.linPos0.copy(this.middleLinPos);\n      newSegment2.linPos1.copy(segment.linPos1);\n      this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n      newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n      newSegment2.up1.copy(segment.up1);\n      newSegment2.radius0 = middleRadius;\n      newSegment2.radius1 = segment.radius1;\n      newSegment2.fraction0 = middleFraction;\n      newSegment2.fraction1 = segment.fraction1;\n      newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment2.iteration = segment.iteration + 1;\n      this.fractalRayRecursive(newSegment1);\n      this.fractalRayRecursive(newSegment2);\n    }\n  }, {\n    key: \"createPrism\",\n    value: function createPrism(segment) {\n      this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n\n      if (this.isInitialSegment) {\n        this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n        this.isInitialSegment = false;\n      }\n\n      this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n      this.createPrismFaces();\n    }\n  }, {\n    key: \"createTriangleVerticesWithoutUVs\",\n    value: function createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createTriangleVerticesWithUVs\",\n    value: function createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      var uv = this.uvs;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0.5;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 1;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createPrismFaces\",\n    value: function createPrismFaces(vertex) {\n      var indices = this.indices;\n      vertex = this.currentVertex - 6;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 5;\n    }\n  }, {\n    key: \"createDefaultSubrayCreationCallbacks\",\n    value: function createDefaultSubrayCreationCallbacks() {\n      var random1 = this.randomGenerator.random;\n\n      this.onDecideSubrayCreation = function (segment, lightningStrike) {\n        var subray = lightningStrike.currentSubray;\n        var period = lightningStrike.rayParameters.subrayPeriod;\n        var dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n        var phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n        var phase = lightningStrike.time - phase0;\n        var currentCycle = Math.floor(phase / period);\n        var childSubraySeed = random1() * (currentCycle + 1);\n        var isActive = phase % period <= dutyCycle * period;\n        var probability = 0;\n\n        if (isActive) {\n          probability = lightningStrike.subrayProbability;\n        }\n\n        if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n          var childSubray = lightningStrike.addNewSubray();\n          var parentSeed = lightningStrike.randomGenerator.getSeed();\n          childSubray.seed = childSubraySeed;\n          lightningStrike.randomGenerator.setSeed(childSubraySeed);\n          childSubray.recursion = subray.recursion + 1;\n          childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n          childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n          childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n          childSubray.up0.copy(subray.up0);\n          childSubray.up1.copy(subray.up1);\n          childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n          childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\n          childSubray.birthTime = phase0 + currentCycle * period;\n          childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n\n          if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n            childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n            childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n          }\n\n          childSubray.timeScale = subray.timeScale * 2;\n          childSubray.roughness = subray.roughness;\n          childSubray.straightness = subray.straightness;\n          childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n          childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n          lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n          lightningStrike.randomGenerator.setSeed(parentSeed);\n        }\n      };\n\n      var vec1Pos = new Vector3();\n      var vec2Forward = new Vector3();\n      var vec3Side = new Vector3();\n      var vec4Up = new Vector3();\n\n      this.onSubrayCreation = function (segment, parentSubray, childSubray, lightningStrike) {\n        lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n      };\n\n      this.subrayConePosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n\n      this.subrayCylinderPosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n    }\n  }, {\n    key: \"createSubray\",\n    value: function createSubray() {\n      return {\n        seed: 0,\n        maxIterations: 0,\n        recursion: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        birthTime: 0,\n        deathTime: 0,\n        timeScale: 0,\n        roughness: 0,\n        straightness: 0,\n        propagationTimeFactor: 0,\n        vanishingTimeFactor: 0,\n        endPropagationTime: 0,\n        beginVanishingTime: 0\n      };\n    }\n  }, {\n    key: \"createSegment\",\n    value: function createSegment() {\n      return {\n        iteration: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        fraction0: 0,\n        fraction1: 0,\n        positionVariationFactor: 0\n      };\n    }\n  }, {\n    key: \"getNewSegment\",\n    value: function getNewSegment() {\n      return this.raySegments[this.currentSegmentIndex++];\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      _get(_getPrototypeOf(_LightningStrike.prototype), \"copy\", this).call(this, source);\n\n      this.init(_LightningStrike.copyParameters({}, source.rayParameters));\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(_LightningStrike.copyParameters({}, this.rayParameters));\n    }\n  }], [{\n    key: \"createRandomGenerator\",\n    value: function createRandomGenerator() {\n      var numSeeds = 2053;\n      var seeds = [];\n\n      for (var i = 0; i < numSeeds; i++) {\n        seeds.push(Math.random());\n      }\n\n      var generator = {\n        currentSeed: 0,\n        random: function random() {\n          var value = seeds[generator.currentSeed];\n          generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n          return value;\n        },\n        getSeed: function getSeed() {\n          return generator.currentSeed / numSeeds;\n        },\n        setSeed: function setSeed(seed) {\n          generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n        }\n      };\n      return generator;\n    }\n  }, {\n    key: \"copyParameters\",\n    value: function copyParameters() {\n      var dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var vecCopy = function vecCopy(v) {\n        if (source === dest) {\n          return v;\n        } else {\n          return v.clone();\n        }\n      };\n\n      dest.sourceOffset = source.sourceOffset !== void 0 ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== void 0 ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== void 0 ? source.timeScale : 1, dest.roughness = source.roughness !== void 0 ? source.roughness : 0.9, dest.straightness = source.straightness !== void 0 ? source.straightness : 0.7, dest.up0 = source.up0 !== void 0 ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n      dest.up1 = source.up1 !== void 0 ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== void 0 ? source.radius0 : 1, dest.radius1 = source.radius1 !== void 0 ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== void 0 ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== void 0 ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== void 0 ? source.minRadius : 0.2, // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n      dest.isEternal = source.isEternal !== void 0 ? source.isEternal : source.birthTime === void 0 || source.deathTime === void 0, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== void 0 ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== void 0 ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== void 0 ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== void 0 ? source.subrayDutyCycle : 0.6;\n      dest.maxIterations = source.maxIterations !== void 0 ? source.maxIterations : 9;\n      dest.isStatic = source.isStatic !== void 0 ? source.isStatic : false;\n      dest.ramification = source.ramification !== void 0 ? source.ramification : 5;\n      dest.maxSubrayRecursion = source.maxSubrayRecursion !== void 0 ? source.maxSubrayRecursion : 3;\n      dest.recursionProbability = source.recursionProbability !== void 0 ? source.recursionProbability : 0.6;\n      dest.generateUVs = source.generateUVs !== void 0 ? source.generateUVs : false;\n      dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n      return dest;\n    }\n  }]);\n\n  return _LightningStrike;\n}(BufferGeometry);\n\nvar LightningStrike = _LightningStrike; // Ray states\n\n__publicField(LightningStrike, \"RAY_INITIALIZED\", 0);\n\n__publicField(LightningStrike, \"RAY_UNBORN\", 1);\n\n__publicField(LightningStrike, \"RAY_PROPAGATING\", 2);\n\n__publicField(LightningStrike, \"RAY_STEADY\", 3);\n\n__publicField(LightningStrike, \"RAY_VANISHING\", 4);\n\n__publicField(LightningStrike, \"RAY_EXTINGUISHED\", 5);\n\n__publicField(LightningStrike, \"COS30DEG\", Math.cos(30 * Math.PI / 180));\n\n__publicField(LightningStrike, \"SIN30DEG\", Math.sin(30 * Math.PI / 180));\n\nexport { LightningStrike };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/geometries/LightningStrike.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","Vector3","Uint32BufferAttribute","Float32BufferAttribute","DynamicDrawUsage","MathUtils","SimplexNoise","_LightningStrike","rayParameters","isLightningStrike","type","init","copyParameters","createMesh","time","isStatic","isEternal","birthTime","deathTime","updateMesh","subrays","endPropagationTime","state","RAY_PROPAGATING","beginVanishingTime","RAY_VANISHING","RAY_STEADY","visible","RAY_UNBORN","RAY_EXTINGUISHED","maxIterations","Math","floor","ramification","maxSubrayRecursion","recursionProbability","generateUVs","randomGenerator","seedGenerator","noiseSeed","setSeed","createRandomGenerator","onDecideSubrayCreation","createDefaultSubrayCreationCallbacks","onSubrayCreation","RAY_INITIALIZED","maxSubrays","ceil","pow","max","maxRaySegments","i","push","createSubray","raySegments","createSegment","timeFraction","currentSegmentCallback","currentCreateTriangleVertices","createTriangleVerticesWithUVs","createTriangleVerticesWithoutUVs","numSubrays","currentSubray","currentSegmentIndex","isInitialSegment","subrayProbability","currentVertex","currentIndex","currentCoordinate","currentUVCoordinate","vertices","uvs","indices","positionAttribute","uvsAttribute","simplexX","simplexY","simplexZ","forwards","forwardsFill","side","down","middlePos","middleLinPos","newPos","vPos","cross1","maxDrawableSegmentsPerSubRay","maxVerts","maxIndices","Float32Array","Uint32Array","fillMesh","setIndex","setAttribute","index","usage","array","drawRange","count","needsUpdate","scope","fractalRay","fillVertices","segment","subray","recursion","createPrism","fraction0","propagationTimeFactor","vanishingTimeFactor","fraction1","pos0","copy","sourceOffset","pos1","destOffset","up0","up1","radius0","radius1","timeScale","roughness","straightness","seed","segmentCallback","initSubray","addNewSubray","subrayIndex","lerp","random1","random","linPos0","set","multiplyScalar","linPos1","getNewSegment","iteration","positionVariationFactor","fractalRayRecursive","subVectors","lForwards","length","middleRadius","middleFraction","timeDimension","lerpVectors","p","noise4d","x","y","z","add","newSegment1","newSegment2","crossVectors","normalize","createPrismFaces","pos","up","radius","COS30DEG","SIN30DEG","v","sub","u","uv","vertex","lightningStrike","period","subrayPeriod","dutyCycle","subrayDutyCycle","phase0","phase","currentCycle","childSubraySeed","isActive","probability","childSubray","parentSeed","getSeed","radius0Factor","min","minRadius","radius1Factor","vec1Pos","vec2Forward","vec3Side","vec4Up","parentSubray","subrayCylinderPosition","subrayConePosition","heightFactor","sideWidthFactor","minSideWidthFactor","angle","PI","cos","sin","source","constructor","numSeeds","seeds","generator","currentSeed","dest","vecCopy","clone","LightningStrike"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from \"three\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nconst _LightningStrike = class extends BufferGeometry {\n  constructor(rayParameters = {}) {\n    super();\n    this.isLightningStrike = true;\n    this.type = \"LightningStrike\";\n    this.init(_LightningStrike.copyParameters(rayParameters, rayParameters));\n    this.createMesh();\n  }\n  static createRandomGenerator() {\n    const numSeeds = 2053;\n    const seeds = [];\n    for (let i = 0; i < numSeeds; i++) {\n      seeds.push(Math.random());\n    }\n    const generator = {\n      currentSeed: 0,\n      random: function() {\n        const value = seeds[generator.currentSeed];\n        generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n        return value;\n      },\n      getSeed: function() {\n        return generator.currentSeed / numSeeds;\n      },\n      setSeed: function(seed) {\n        generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n      }\n    };\n    return generator;\n  }\n  static copyParameters(dest = {}, source = {}) {\n    const vecCopy = function(v) {\n      if (source === dest) {\n        return v;\n      } else {\n        return v.clone();\n      }\n    };\n    dest.sourceOffset = source.sourceOffset !== void 0 ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== void 0 ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== void 0 ? source.timeScale : 1, dest.roughness = source.roughness !== void 0 ? source.roughness : 0.9, dest.straightness = source.straightness !== void 0 ? source.straightness : 0.7, dest.up0 = source.up0 !== void 0 ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n    dest.up1 = source.up1 !== void 0 ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== void 0 ? source.radius0 : 1, dest.radius1 = source.radius1 !== void 0 ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== void 0 ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== void 0 ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== void 0 ? source.minRadius : 0.2, // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n    dest.isEternal = source.isEternal !== void 0 ? source.isEternal : source.birthTime === void 0 || source.deathTime === void 0, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== void 0 ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== void 0 ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== void 0 ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== void 0 ? source.subrayDutyCycle : 0.6;\n    dest.maxIterations = source.maxIterations !== void 0 ? source.maxIterations : 9;\n    dest.isStatic = source.isStatic !== void 0 ? source.isStatic : false;\n    dest.ramification = source.ramification !== void 0 ? source.ramification : 5;\n    dest.maxSubrayRecursion = source.maxSubrayRecursion !== void 0 ? source.maxSubrayRecursion : 3;\n    dest.recursionProbability = source.recursionProbability !== void 0 ? source.recursionProbability : 0.6;\n    dest.generateUVs = source.generateUVs !== void 0 ? source.generateUVs : false;\n    dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n    return dest;\n  }\n  update(time) {\n    if (this.isStatic)\n      return;\n    if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n      this.updateMesh(time);\n      if (time < this.subrays[0].endPropagationTime) {\n        this.state = _LightningStrike.RAY_PROPAGATING;\n      } else if (time > this.subrays[0].beginVanishingTime) {\n        this.state = _LightningStrike.RAY_VANISHING;\n      } else {\n        this.state = _LightningStrike.RAY_STEADY;\n      }\n      this.visible = true;\n    } else {\n      this.visible = false;\n      if (time < this.rayParameters.birthTime) {\n        this.state = _LightningStrike.RAY_UNBORN;\n      } else {\n        this.state = _LightningStrike.RAY_EXTINGUISHED;\n      }\n    }\n  }\n  init(rayParameters) {\n    this.rayParameters = rayParameters;\n    this.maxIterations = rayParameters.maxIterations !== void 0 ? Math.floor(rayParameters.maxIterations) : 9;\n    rayParameters.maxIterations = this.maxIterations;\n    this.isStatic = rayParameters.isStatic !== void 0 ? rayParameters.isStatic : false;\n    rayParameters.isStatic = this.isStatic;\n    this.ramification = rayParameters.ramification !== void 0 ? Math.floor(rayParameters.ramification) : 5;\n    rayParameters.ramification = this.ramification;\n    this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== void 0 ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n    rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n    this.recursionProbability = rayParameters.recursionProbability !== void 0 ? rayParameters.recursionProbability : 0.6;\n    rayParameters.recursionProbability = this.recursionProbability;\n    this.generateUVs = rayParameters.generateUVs !== void 0 ? rayParameters.generateUVs : false;\n    rayParameters.generateUVs = this.generateUVs;\n    if (rayParameters.randomGenerator !== void 0) {\n      this.randomGenerator = rayParameters.randomGenerator;\n      this.seedGenerator = rayParameters.randomGenerator;\n      if (rayParameters.noiseSeed !== void 0) {\n        this.seedGenerator.setSeed(rayParameters.noiseSeed);\n      }\n    } else {\n      this.randomGenerator = _LightningStrike.createRandomGenerator();\n      this.seedGenerator = Math;\n    }\n    if (rayParameters.onDecideSubrayCreation !== void 0) {\n      this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n    } else {\n      this.createDefaultSubrayCreationCallbacks();\n      if (rayParameters.onSubrayCreation !== void 0) {\n        this.onSubrayCreation = rayParameters.onSubrayCreation;\n      }\n    }\n    this.state = _LightningStrike.RAY_INITIALIZED;\n    this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n    rayParameters.maxSubrays = this.maxSubrays;\n    this.maxRaySegments = 2 * (1 << this.maxIterations);\n    this.subrays = [];\n    for (let i = 0; i < this.maxSubrays; i++) {\n      this.subrays.push(this.createSubray());\n    }\n    this.raySegments = [];\n    for (let i = 0; i < this.maxRaySegments; i++) {\n      this.raySegments.push(this.createSegment());\n    }\n    this.time = 0;\n    this.timeFraction = 0;\n    this.currentSegmentCallback = null;\n    this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n    this.numSubrays = 0;\n    this.currentSubray = null;\n    this.currentSegmentIndex = 0;\n    this.isInitialSegment = false;\n    this.subrayProbability = 0;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.vertices = null;\n    this.uvs = null;\n    this.indices = null;\n    this.positionAttribute = null;\n    this.uvsAttribute = null;\n    this.simplexX = new SimplexNoise(this.seedGenerator);\n    this.simplexY = new SimplexNoise(this.seedGenerator);\n    this.simplexZ = new SimplexNoise(this.seedGenerator);\n    this.forwards = new Vector3();\n    this.forwardsFill = new Vector3();\n    this.side = new Vector3();\n    this.down = new Vector3();\n    this.middlePos = new Vector3();\n    this.middleLinPos = new Vector3();\n    this.newPos = new Vector3();\n    this.vPos = new Vector3();\n    this.cross1 = new Vector3();\n  }\n  createMesh() {\n    const maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n    const maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n    const maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n    this.vertices = new Float32Array(maxVerts * 3);\n    this.indices = new Uint32Array(maxIndices);\n    if (this.generateUVs) {\n      this.uvs = new Float32Array(maxVerts * 2);\n    }\n    this.fillMesh(0);\n    this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n    this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n    this.setAttribute(\"position\", this.positionAttribute);\n    if (this.generateUVs) {\n      this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n      this.setAttribute(\"uv\", this.uvsAttribute);\n    }\n    if (!this.isStatic) {\n      this.index.usage = DynamicDrawUsage;\n      this.positionAttribute.usage = DynamicDrawUsage;\n      if (this.generateUVs) {\n        this.uvsAttribute.usage = DynamicDrawUsage;\n      }\n    }\n    this.vertices = this.positionAttribute.array;\n    this.indices = this.index.array;\n    if (this.generateUVs) {\n      this.uvs = this.uvsAttribute.array;\n    }\n  }\n  updateMesh(time) {\n    this.fillMesh(time);\n    this.drawRange.count = this.currentIndex;\n    this.index.needsUpdate = true;\n    this.positionAttribute.needsUpdate = true;\n    if (this.generateUVs) {\n      this.uvsAttribute.needsUpdate = true;\n    }\n  }\n  fillMesh(time) {\n    const scope = this;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.fractalRay(time, function fillVertices(segment) {\n      const subray = scope.currentSubray;\n      if (time < subray.birthTime) {\n        return;\n      } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else if (time < subray.endPropagationTime) {\n        if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      } else if (time < subray.beginVanishingTime) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else {\n        if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n          scope.createPrism(segment);\n        }\n        scope.onDecideSubrayCreation(segment, scope);\n      }\n    });\n  }\n  addNewSubray() {\n    return this.subrays[this.numSubrays++];\n  }\n  initSubray(subray, rayParameters) {\n    subray.pos0.copy(rayParameters.sourceOffset);\n    subray.pos1.copy(rayParameters.destOffset);\n    subray.up0.copy(rayParameters.up0);\n    subray.up1.copy(rayParameters.up1);\n    subray.radius0 = rayParameters.radius0;\n    subray.radius1 = rayParameters.radius1;\n    subray.birthTime = rayParameters.birthTime;\n    subray.deathTime = rayParameters.deathTime;\n    subray.timeScale = rayParameters.timeScale;\n    subray.roughness = rayParameters.roughness;\n    subray.straightness = rayParameters.straightness;\n    subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n    subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n    subray.maxIterations = this.maxIterations;\n    subray.seed = rayParameters.noiseSeed !== void 0 ? rayParameters.noiseSeed : 0;\n    subray.recursion = 0;\n  }\n  fractalRay(time, segmentCallback) {\n    this.time = time;\n    this.currentSegmentCallback = segmentCallback;\n    this.numSubrays = 0;\n    this.initSubray(this.addNewSubray(), this.rayParameters);\n    for (let subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n      const subray = this.subrays[subrayIndex];\n      this.currentSubray = subray;\n      this.randomGenerator.setSeed(subray.seed);\n      subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n      subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n      const random1 = this.randomGenerator.random;\n      subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = true;\n      const segment = this.getNewSegment();\n      segment.iteration = 0;\n      segment.pos0.copy(subray.pos0);\n      segment.pos1.copy(subray.pos1);\n      segment.linPos0.copy(subray.linPos0);\n      segment.linPos1.copy(subray.linPos1);\n      segment.up0.copy(subray.up0);\n      segment.up1.copy(subray.up1);\n      segment.radius0 = subray.radius0;\n      segment.radius1 = subray.radius1;\n      segment.fraction0 = 0;\n      segment.fraction1 = 1;\n      segment.positionVariationFactor = 1 - subray.straightness;\n      this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n      this.fractalRayRecursive(segment);\n    }\n    this.currentSegmentCallback = null;\n    this.currentSubray = null;\n  }\n  fractalRayRecursive(segment) {\n    if (segment.iteration >= this.currentSubray.maxIterations) {\n      this.currentSegmentCallback(segment);\n      return;\n    }\n    this.forwards.subVectors(segment.pos1, segment.pos0);\n    let lForwards = this.forwards.length();\n    if (lForwards < 1e-6) {\n      this.forwards.set(0, 0, 0.01);\n      lForwards = this.forwards.length();\n    }\n    const middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n    const middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n    const timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n    this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n    this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n    const p = this.middleLinPos;\n    this.newPos.set(\n      this.simplexX.noise4d(p.x, p.y, p.z, timeDimension),\n      this.simplexY.noise4d(p.x, p.y, p.z, timeDimension),\n      this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension)\n    );\n    this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n    this.newPos.add(this.middlePos);\n    const newSegment1 = this.getNewSegment();\n    newSegment1.pos0.copy(segment.pos0);\n    newSegment1.pos1.copy(this.newPos);\n    newSegment1.linPos0.copy(segment.linPos0);\n    newSegment1.linPos1.copy(this.middleLinPos);\n    newSegment1.up0.copy(segment.up0);\n    newSegment1.up1.copy(segment.up1);\n    newSegment1.radius0 = segment.radius0;\n    newSegment1.radius1 = middleRadius;\n    newSegment1.fraction0 = segment.fraction0;\n    newSegment1.fraction1 = middleFraction;\n    newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment1.iteration = segment.iteration + 1;\n    const newSegment2 = this.getNewSegment();\n    newSegment2.pos0.copy(this.newPos);\n    newSegment2.pos1.copy(segment.pos1);\n    newSegment2.linPos0.copy(this.middleLinPos);\n    newSegment2.linPos1.copy(segment.linPos1);\n    this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n    newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n    newSegment2.up1.copy(segment.up1);\n    newSegment2.radius0 = middleRadius;\n    newSegment2.radius1 = segment.radius1;\n    newSegment2.fraction0 = middleFraction;\n    newSegment2.fraction1 = segment.fraction1;\n    newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment2.iteration = segment.iteration + 1;\n    this.fractalRayRecursive(newSegment1);\n    this.fractalRayRecursive(newSegment2);\n  }\n  createPrism(segment) {\n    this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n    if (this.isInitialSegment) {\n      this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n      this.isInitialSegment = false;\n    }\n    this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n    this.createPrismFaces();\n  }\n  createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    this.currentVertex += 3;\n  }\n  createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    const uv = this.uvs;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0.5;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 1;\n    this.currentVertex += 3;\n  }\n  createPrismFaces(vertex) {\n    const indices = this.indices;\n    vertex = this.currentVertex - 6;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 5;\n  }\n  createDefaultSubrayCreationCallbacks() {\n    const random1 = this.randomGenerator.random;\n    this.onDecideSubrayCreation = function(segment, lightningStrike) {\n      const subray = lightningStrike.currentSubray;\n      const period = lightningStrike.rayParameters.subrayPeriod;\n      const dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n      const phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n      const phase = lightningStrike.time - phase0;\n      const currentCycle = Math.floor(phase / period);\n      const childSubraySeed = random1() * (currentCycle + 1);\n      const isActive = phase % period <= dutyCycle * period;\n      let probability = 0;\n      if (isActive) {\n        probability = lightningStrike.subrayProbability;\n      }\n      if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n        const childSubray = lightningStrike.addNewSubray();\n        const parentSeed = lightningStrike.randomGenerator.getSeed();\n        childSubray.seed = childSubraySeed;\n        lightningStrike.randomGenerator.setSeed(childSubraySeed);\n        childSubray.recursion = subray.recursion + 1;\n        childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n        childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.up0.copy(subray.up0);\n        childSubray.up1.copy(subray.up1);\n        childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n        childSubray.radius1 = Math.min(\n          lightningStrike.rayParameters.minRadius,\n          segment.radius1 * lightningStrike.rayParameters.radius1Factor\n        );\n        childSubray.birthTime = phase0 + currentCycle * period;\n        childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n        if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n          childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n          childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n        }\n        childSubray.timeScale = subray.timeScale * 2;\n        childSubray.roughness = subray.roughness;\n        childSubray.straightness = subray.straightness;\n        childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n        childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n        lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n        lightningStrike.randomGenerator.setSeed(parentSeed);\n      }\n    };\n    const vec1Pos = new Vector3();\n    const vec2Forward = new Vector3();\n    const vec3Side = new Vector3();\n    const vec4Up = new Vector3();\n    this.onSubrayCreation = function(segment, parentSubray, childSubray, lightningStrike) {\n      lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n    };\n    this.subrayConePosition = function(segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n    this.subrayCylinderPosition = function(segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n  }\n  createSubray() {\n    return {\n      seed: 0,\n      maxIterations: 0,\n      recursion: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      birthTime: 0,\n      deathTime: 0,\n      timeScale: 0,\n      roughness: 0,\n      straightness: 0,\n      propagationTimeFactor: 0,\n      vanishingTimeFactor: 0,\n      endPropagationTime: 0,\n      beginVanishingTime: 0\n    };\n  }\n  createSegment() {\n    return {\n      iteration: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      fraction0: 0,\n      fraction1: 0,\n      positionVariationFactor: 0\n    };\n  }\n  getNewSegment() {\n    return this.raySegments[this.currentSegmentIndex++];\n  }\n  copy(source) {\n    super.copy(source);\n    this.init(_LightningStrike.copyParameters({}, source.rayParameters));\n    return this;\n  }\n  clone() {\n    return new this.constructor(_LightningStrike.copyParameters({}, this.rayParameters));\n  }\n};\nlet LightningStrike = _LightningStrike;\n// Ray states\n__publicField(LightningStrike, \"RAY_INITIALIZED\", 0);\n__publicField(LightningStrike, \"RAY_UNBORN\", 1);\n__publicField(LightningStrike, \"RAY_PROPAGATING\", 2);\n__publicField(LightningStrike, \"RAY_STEADY\", 3);\n__publicField(LightningStrike, \"RAY_VANISHING\", 4);\n__publicField(LightningStrike, \"RAY_EXTINGUISHED\", 5);\n__publicField(LightningStrike, \"COS30DEG\", Math.cos(30 * Math.PI / 180));\n__publicField(LightningStrike, \"SIN30DEG\", Math.sin(30 * Math.PI / 180));\nexport {\n  LightningStrike\n};\n"]},"metadata":{},"sourceType":"module"}