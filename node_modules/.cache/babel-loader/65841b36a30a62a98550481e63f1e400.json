{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useEffect } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport image from \"./test.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Photo = /*#__PURE__*/memo(_c = _s(({\n  x,\n  y\n}) => {\n  _s();\n\n  const texture = useTexture(image);\n  const meshRef = useRef(); // Calculer les dimensions du plan en fonction de la taille de l'image\n\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight; // Utiliser PlaneGeometry avec une largeur unitaire (1) et une hauteur calculée\n\n  const geometry = new PlaneGeometry(1, 1 / aspectRatio); // Mettre à jour le scale du mesh pour remplir l'espace disponible\n\n  const updateScale = () => {\n    const parentWidth = meshRef.current.parent.scale.x;\n    const parentHeight = meshRef.current.parent.scale.y;\n    const scaleX = parentWidth / imageWidth;\n    const scaleY = parentHeight / imageHeight;\n    meshRef.current.scale.set(scaleX, scaleY, 1);\n  }; // Appeler updateScale lorsque la taille du parent change\n\n\n  useEffect(() => {\n    updateScale();\n  }, [meshRef.current.parent.scale.x, meshRef.current.parent.scale.y]);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, 0],\n    geometry: geometry,\n    ref: meshRef,\n    children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}, \"QOGAIcNtnvb2ANZq8EJTAfZsLYQ=\", false, function () {\n  return [useTexture];\n}));\n_c2 = Photo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["useTexture","memo","useRef","useEffect","PlaneGeometry","Mesh","MeshBasicMaterial","image","Photo","x","y","texture","meshRef","imageWidth","width","imageHeight","height","aspectRatio","geometry","updateScale","parentWidth","current","parent","scale","parentHeight","scaleX","scaleY","set"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,QAAwC,OAAxC;AACA,SAASC,aAAT,EAAwBC,IAAxB,EAA8BC,iBAA9B,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,OAAO,MAAMC,KAAK,gBAAGP,IAAI,SAAC,CAAC;AAAEQ,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAD,KAAc;AAAA;;AACtC,QAAMC,OAAO,GAAGX,UAAU,CAACO,KAAD,CAA1B;AACA,QAAMK,OAAO,GAAGV,MAAM,EAAtB,CAFsC,CAItC;;AACA,QAAMW,UAAU,GAAGF,OAAO,CAACJ,KAAR,CAAcO,KAAjC;AACA,QAAMC,WAAW,GAAGJ,OAAO,CAACJ,KAAR,CAAcS,MAAlC;AACA,QAAMC,WAAW,GAAGJ,UAAU,GAAGE,WAAjC,CAPsC,CAStC;;AACA,QAAMG,QAAQ,GAAG,IAAId,aAAJ,CAAkB,CAAlB,EAAqB,IAAIa,WAAzB,CAAjB,CAVsC,CAYtC;;AACA,QAAME,WAAW,GAAG,MAAM;AACxB,UAAMC,WAAW,GAAGR,OAAO,CAACS,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6Bd,CAAjD;AACA,UAAMe,YAAY,GAAGZ,OAAO,CAACS,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6Bb,CAAlD;AACA,UAAMe,MAAM,GAAGL,WAAW,GAAGP,UAA7B;AACA,UAAMa,MAAM,GAAGF,YAAY,GAAGT,WAA9B;AACAH,IAAAA,OAAO,CAACS,OAAR,CAAgBE,KAAhB,CAAsBI,GAAtB,CAA0BF,MAA1B,EAAkCC,MAAlC,EAA0C,CAA1C;AACD,GAND,CAbsC,CAqBtC;;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACP,OAAO,CAACS,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6Bd,CAA9B,EAAiCG,OAAO,CAACS,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6Bb,CAA9D,CAFM,CAAT;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAE,CAACD,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAAhB;AAA2B,IAAA,QAAQ,EAAEQ,QAArC;AAA+C,IAAA,GAAG,EAAEN,OAApD;AAAA,2BACE;AAAmB,MAAA,GAAG,EAAED;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/BwB;AAAA,UACPX,UADO;AAAA,GAAlB;MAAMQ,K","sourcesContent":["import { useTexture } from \"@react-three/drei\";\nimport { memo, useRef, useEffect } from \"react\";\nimport { PlaneGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport image from \"./test.png\";\n\nexport const Photo = memo(({ x, y }) => {\n  const texture = useTexture(image);\n  const meshRef = useRef();\n\n  // Calculer les dimensions du plan en fonction de la taille de l'image\n  const imageWidth = texture.image.width;\n  const imageHeight = texture.image.height;\n  const aspectRatio = imageWidth / imageHeight;\n\n  // Utiliser PlaneGeometry avec une largeur unitaire (1) et une hauteur calculée\n  const geometry = new PlaneGeometry(1, 1 / aspectRatio);\n\n  // Mettre à jour le scale du mesh pour remplir l'espace disponible\n  const updateScale = () => {\n    const parentWidth = meshRef.current.parent.scale.x;\n    const parentHeight = meshRef.current.parent.scale.y;\n    const scaleX = parentWidth / imageWidth;\n    const scaleY = parentHeight / imageHeight;\n    meshRef.current.scale.set(scaleX, scaleY, 1);\n  };\n\n  // Appeler updateScale lorsque la taille du parent change\n  useEffect(() => {\n    updateScale();\n  }, [meshRef.current.parent.scale.x, meshRef.current.parent.scale.y]);\n\n  return (\n    <mesh position={[x, y, 0]} geometry={geometry} ref={meshRef}>\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}