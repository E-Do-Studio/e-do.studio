{"ast":null,"code":"var FocusShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    screenWidth: {\n      value: 1024\n    },\n    screenHeight: {\n      value: 1024\n    },\n    sampleDistance: {\n      value: 0.94\n    },\n    waveFactor: {\n      value: 125e-5\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float screenWidth;\", \"uniform float screenHeight;\", \"uniform float sampleDistance;\", \"uniform float waveFactor;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 color, org, tmp, add;\", \"\tfloat sample_dist, f;\", \"\tvec2 vin;\", \"\tvec2 uv = vUv;\", \"\tadd = color = org = texture2D( tDiffuse, uv );\", \"\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\", \"\tsample_dist = dot( vin, vin ) * 2.0;\", \"\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\", \"\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\", \"\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\", \"\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\", \"}\"].join(\"\\n\")\n};\nexport { FocusShader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/shaders/FocusShader.js"],"names":["FocusShader","uniforms","tDiffuse","value","screenWidth","screenHeight","sampleDistance","waveFactor","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,WAAW,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFL;AAGRE,IAAAA,YAAY,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAHN;AAIRG,IAAAA,cAAc,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAJR;AAKRI,IAAAA,UAAU,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT;AALJ,GADQ;AAQlBK,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CARI;AAelBC,EAAAA,cAAc,EAAE,CACd,4BADc,EAEd,6BAFc,EAGd,+BAHc,EAId,2BAJc,EAKd,6BALc,EAMd,mBANc,EAOd,eAPc,EAQd,6BARc,EASd,wBATc,EAUd,YAVc,EAWd,iBAXc,EAYd,iDAZc,EAad,4CAbc,EAcd,uCAdc,EAed,mEAfc,EAgBd,gFAhBc,EAiBd,oFAjBc,EAkBd,qCAlBc,EAmBd,oFAnBc,EAoBd,qCApBc,EAqBd,qFArBc,EAsBd,qCAtBc,EAuBd,qFAvBc,EAwBd,qCAxBc,EAyBd,sFAzBc,EA0Bd,qCA1Bc,EA2Bd,sFA3Bc,EA4Bd,qCA5Bc,EA6Bd,qFA7Bc,EA8Bd,qCA9Bc,EA+Bd,uDA/Bc,EAgCd,+FAhCc,EAiCd,gFAjCc,EAkCd,GAlCc,EAmCdD,IAnCc,CAmCT,IAnCS;AAfE,CAApB;AAoDA,SACET,WADF","sourcesContent":["const FocusShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    screenWidth: { value: 1024 },\n    screenHeight: { value: 1024 },\n    sampleDistance: { value: 0.94 },\n    waveFactor: { value: 125e-5 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform float screenWidth;\",\n    \"uniform float screenHeight;\",\n    \"uniform float sampleDistance;\",\n    \"uniform float waveFactor;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec4 color, org, tmp, add;\",\n    \"\tfloat sample_dist, f;\",\n    \"\tvec2 vin;\",\n    \"\tvec2 uv = vUv;\",\n    \"\tadd = color = org = texture2D( tDiffuse, uv );\",\n    \"\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\",\n    \"\tsample_dist = dot( vin, vin ) * 2.0;\",\n    \"\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\",\n    \"\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\",\n    \"\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\",\n    \"\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  FocusShader\n};\n"]},"metadata":{},"sourceType":"module"}