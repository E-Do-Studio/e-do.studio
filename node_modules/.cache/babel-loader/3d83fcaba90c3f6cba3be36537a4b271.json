{"ast":null,"code":"import _createClass from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from \"three\";\n\nvar RenderableObject = function RenderableObject() {\n  _classCallCheck(this, RenderableObject);\n\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n};\n\nvar RenderableFace = function RenderableFace() {\n  _classCallCheck(this, RenderableFace);\n\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n};\n\nvar RenderableVertex = /*#__PURE__*/function () {\n  function RenderableVertex() {\n    _classCallCheck(this, RenderableVertex);\n\n    this.position = new Vector3();\n    this.positionWorld = new Vector3();\n    this.positionScreen = new Vector4();\n    this.visible = true;\n  }\n\n  _createClass(RenderableVertex, [{\n    key: \"copy\",\n    value: function copy(vertex) {\n      this.positionWorld.copy(vertex.positionWorld);\n      this.positionScreen.copy(vertex.positionScreen);\n    }\n  }]);\n\n  return RenderableVertex;\n}();\n\nvar RenderableLine = function RenderableLine() {\n  _classCallCheck(this, RenderableLine);\n\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n};\n\nvar RenderableSprite = function RenderableSprite() {\n  _classCallCheck(this, RenderableSprite);\n\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n};\n\nvar Projector = function Projector() {\n  _classCallCheck(this, Projector);\n\n  var _object,\n      _objectCount,\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePoolLength = 0,\n      _modelMatrix;\n\n  var _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(),\n      _objectPool = [],\n      _vertexPool = [],\n      _facePool = [],\n      _linePool = [],\n      _spritePool = [];\n\n  function RenderList() {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder;\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (var i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  }\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    }\n\n    var objects = _renderData.objects;\n\n    for (var o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object.isMesh) {\n        var material = object.material;\n        var isMultiMaterial = Array.isArray(material);\n        var attributes = geometry.attributes;\n        var groups = geometry.groups;\n        if (attributes.position === void 0) continue;\n        var positions = attributes.position.array;\n\n        for (var i = 0, l = positions.length; i < l; i += 3) {\n          var x = positions[i];\n          var y = positions[i + 1];\n          var z = positions[i + 2];\n          var morphTargets = geometry.morphAttributes.position;\n\n          if (morphTargets !== void 0) {\n            var morphTargetsRelative = geometry.morphTargetsRelative;\n            var morphInfluences = object.morphTargetInfluences;\n\n            for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n              var influence = morphInfluences[t];\n              if (influence === 0) continue;\n              var target = morphTargets[t];\n\n              if (morphTargetsRelative) {\n                x += target.getX(i / 3) * influence;\n                y += target.getY(i / 3) * influence;\n                z += target.getZ(i / 3) * influence;\n              } else {\n                x += (target.getX(i / 3) - positions[i]) * influence;\n                y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n              }\n            }\n          }\n\n          renderList.pushVertex(x, y, z);\n        }\n\n        if (attributes.normal !== void 0) {\n          var normals = attributes.normal.array;\n\n          for (var _i = 0, _l = normals.length; _i < _l; _i += 3) {\n            renderList.pushNormal(normals[_i], normals[_i + 1], normals[_i + 2]);\n          }\n        }\n\n        if (attributes.color !== void 0) {\n          var colors = attributes.color.array;\n\n          for (var _i2 = 0, _l2 = colors.length; _i2 < _l2; _i2 += 3) {\n            renderList.pushColor(colors[_i2], colors[_i2 + 1], colors[_i2 + 2]);\n          }\n        }\n\n        if (attributes.uv !== void 0) {\n          var uvs = attributes.uv.array;\n\n          for (var _i3 = 0, _l3 = uvs.length; _i3 < _l3; _i3 += 2) {\n            renderList.pushUv(uvs[_i3], uvs[_i3 + 1]);\n          }\n        }\n\n        if (geometry.index !== null) {\n          var indices = geometry.index.array;\n\n          if (groups.length > 0) {\n            for (var g = 0; g < groups.length; g++) {\n              var group = groups[g];\n              material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n              if (material === void 0) continue;\n\n              for (var _i4 = group.start, _l4 = group.start + group.count; _i4 < _l4; _i4 += 3) {\n                renderList.pushTriangle(indices[_i4], indices[_i4 + 1], indices[_i4 + 2], material);\n              }\n            }\n          } else {\n            for (var _i5 = 0, _l5 = indices.length; _i5 < _l5; _i5 += 3) {\n              renderList.pushTriangle(indices[_i5], indices[_i5 + 1], indices[_i5 + 2], material);\n            }\n          }\n        } else {\n          if (groups.length > 0) {\n            for (var _g = 0; _g < groups.length; _g++) {\n              var _group = groups[_g];\n              material = isMultiMaterial === true ? object.material[_group.materialIndex] : object.material;\n              if (material === void 0) continue;\n\n              for (var _i6 = _group.start, _l6 = _group.start + _group.count; _i6 < _l6; _i6 += 3) {\n                renderList.pushTriangle(_i6, _i6 + 1, _i6 + 2, material);\n              }\n            }\n          } else {\n            for (var _i7 = 0, _l7 = positions.length / 3; _i7 < _l7; _i7 += 3) {\n              renderList.pushTriangle(_i7, _i7 + 1, _i7 + 2, material);\n            }\n          }\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        var _attributes = geometry.attributes;\n\n        if (_attributes.position !== void 0) {\n          var _positions = _attributes.position.array;\n\n          for (var _i8 = 0, _l8 = _positions.length; _i8 < _l8; _i8 += 3) {\n            renderList.pushVertex(_positions[_i8], _positions[_i8 + 1], _positions[_i8 + 2]);\n          }\n\n          if (_attributes.color !== void 0) {\n            var _colors = _attributes.color.array;\n\n            for (var _i9 = 0, _l9 = _colors.length; _i9 < _l9; _i9 += 3) {\n              renderList.pushColor(_colors[_i9], _colors[_i9 + 1], _colors[_i9 + 2]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var _indices = geometry.index.array;\n\n            for (var _i10 = 0, _l10 = _indices.length; _i10 < _l10; _i10 += 2) {\n              renderList.pushLine(_indices[_i10], _indices[_i10 + 1]);\n            }\n          } else {\n            var step = object.isLineSegments ? 2 : 1;\n\n            for (var _i11 = 0, _l11 = _positions.length / 3 - 1; _i11 < _l11; _i11 += step) {\n              renderList.pushLine(_i11, _i11 + 1);\n            }\n          }\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        var _attributes2 = geometry.attributes;\n\n        if (_attributes2.position !== void 0) {\n          var _positions2 = _attributes2.position.array;\n\n          for (var _i12 = 0, _l12 = _positions2.length; _i12 < _l12; _i12 += 3) {\n            _vector4.set(_positions2[_i12], _positions2[_i12 + 1], _positions2[_i12 + 2], 1);\n\n            _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n            pushPoint(_vector4, object, camera);\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector42, object, camera) {\n    var invW = 1 / _vector42.w;\n    _vector42.z *= invW;\n\n    if (_vector42.z >= -1 && _vector42.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector42.x * invW;\n      _sprite.y = _vector42.y * invW;\n      _sprite.z = _vector42.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector42.x + camera.projectionMatrix.elements[0]) / (_vector42.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector42.y + camera.projectionMatrix.elements[5]) / (_vector42.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  }\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  }\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1;\n    var bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      return false;\n    } else {\n      if (bc1near < 0) {\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        return false;\n      } else {\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\n\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/renderers/Projector.js"],"names":["Vector3","Color","Vector2","Vector4","Box3","Matrix4","Frustum","Matrix3","DoubleSide","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","color","material","uvs","position","positionWorld","positionScreen","visible","vertex","copy","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPoolLength","_vertex","_vertexCount","_vertexPoolLength","_face","_faceCount","_facePoolLength","_line","_lineCount","_linePoolLength","_sprite","_spriteCount","_spritePoolLength","_modelMatrix","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","_boundingBox","_points3","Array","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_frustum","_objectPool","_vertexPool","_facePool","_linePool","_spritePool","RenderList","normals","colors","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectObject","isLight","isMesh","isLine","isPoints","frustumCulled","intersectsObject","addObject","isSprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","camera","sortObjects","sortElements","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromProjectionMatrix","sort","painterSort","o","ol","geometry","isMultiMaterial","isArray","attributes","groups","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","step","isLineSegments","pushPoint","modelViewMatrix","_vector42","getNextSpriteInPool","abs","face","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp"],"mappings":"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","sourcesContent":["import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from \"three\";\nclass RenderableObject {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableFace {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.v3 = new RenderableVertex();\n    this.normalModel = new Vector3();\n    this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n    this.vertexNormalsLength = 0;\n    this.color = new Color();\n    this.material = null;\n    this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableVertex {\n  constructor() {\n    this.position = new Vector3();\n    this.positionWorld = new Vector3();\n    this.positionScreen = new Vector4();\n    this.visible = true;\n  }\n  copy(vertex) {\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n  }\n}\nclass RenderableLine {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.vertexColors = [new Color(), new Color()];\n    this.material = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableSprite {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.rotation = 0;\n    this.scale = new Vector2();\n    this.material = null;\n    this.renderOrder = 0;\n  }\n}\nclass Projector {\n  constructor() {\n    let _object, _objectCount, _objectPoolLength = 0, _vertex, _vertexCount, _vertexPoolLength = 0, _face, _faceCount, _facePoolLength = 0, _line, _lineCount, _linePoolLength = 0, _sprite, _spriteCount, _spritePoolLength = 0, _modelMatrix;\n    const _renderData = { objects: [], lights: [], elements: [] }, _vector3 = new Vector3(), _vector4 = new Vector4(), _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)), _boundingBox = new Box3(), _points3 = new Array(3), _viewMatrix = new Matrix4(), _viewProjectionMatrix = new Matrix4(), _modelViewProjectionMatrix = new Matrix4(), _frustum = new Frustum(), _objectPool = [], _vertexPool = [], _facePool = [], _linePool = [], _spritePool = [];\n    function RenderList() {\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      let object = null;\n      const normalMatrix = new Matrix3();\n      function setObject(value) {\n        object = value;\n        normalMatrix.getNormalMatrix(object.matrixWorld);\n        normals.length = 0;\n        colors.length = 0;\n        uvs.length = 0;\n      }\n      function projectVertex(vertex) {\n        const position = vertex.position;\n        const positionWorld = vertex.positionWorld;\n        const positionScreen = vertex.positionScreen;\n        positionWorld.copy(position).applyMatrix4(_modelMatrix);\n        positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n        const invW = 1 / positionScreen.w;\n        positionScreen.x *= invW;\n        positionScreen.y *= invW;\n        positionScreen.z *= invW;\n        vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n      }\n      function pushVertex(x, y, z) {\n        _vertex = getNextVertexInPool();\n        _vertex.position.set(x, y, z);\n        projectVertex(_vertex);\n      }\n      function pushNormal(x, y, z) {\n        normals.push(x, y, z);\n      }\n      function pushColor(r, g, b) {\n        colors.push(r, g, b);\n      }\n      function pushUv(x, y) {\n        uvs.push(x, y);\n      }\n      function checkTriangleVisibility(v1, v2, v3) {\n        if (v1.visible === true || v2.visible === true || v3.visible === true)\n          return true;\n        _points3[0] = v1.positionScreen;\n        _points3[1] = v2.positionScreen;\n        _points3[2] = v3.positionScreen;\n        return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n      }\n      function checkBackfaceCulling(v1, v2, v3) {\n        return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n      }\n      function pushLine(a, b) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n        v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n        if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n          v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n          v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n          _line = getNextLineInPool();\n          _line.id = object.id;\n          _line.v1.copy(v1);\n          _line.v2.copy(v2);\n          _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n          _line.renderOrder = object.renderOrder;\n          _line.material = object.material;\n          if (object.material.vertexColors) {\n            _line.vertexColors[0].fromArray(colors, a * 3);\n            _line.vertexColors[1].fromArray(colors, b * 3);\n          }\n          _renderData.elements.push(_line);\n        }\n      }\n      function pushTriangle(a, b, c, material) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        const v3 = _vertexPool[c];\n        if (checkTriangleVisibility(v1, v2, v3) === false)\n          return;\n        if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n          _face = getNextFaceInPool();\n          _face.id = object.id;\n          _face.v1.copy(v1);\n          _face.v2.copy(v2);\n          _face.v3.copy(v3);\n          _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n          _face.renderOrder = object.renderOrder;\n          _vector3.subVectors(v3.position, v2.position);\n          _vector4.subVectors(v1.position, v2.position);\n          _vector3.cross(_vector4);\n          _face.normalModel.copy(_vector3);\n          _face.normalModel.applyMatrix3(normalMatrix).normalize();\n          for (let i = 0; i < 3; i++) {\n            const normal = _face.vertexNormalsModel[i];\n            normal.fromArray(normals, arguments[i] * 3);\n            normal.applyMatrix3(normalMatrix).normalize();\n            const uv = _face.uvs[i];\n            uv.fromArray(uvs, arguments[i] * 2);\n          }\n          _face.vertexNormalsLength = 3;\n          _face.material = material;\n          if (material.vertexColors) {\n            _face.color.fromArray(colors, a * 3);\n          }\n          _renderData.elements.push(_face);\n        }\n      }\n      return {\n        setObject,\n        projectVertex,\n        checkTriangleVisibility,\n        checkBackfaceCulling,\n        pushVertex,\n        pushNormal,\n        pushColor,\n        pushUv,\n        pushLine,\n        pushTriangle\n      };\n    }\n    const renderList = new RenderList();\n    function projectObject(object) {\n      if (object.visible === false)\n        return;\n      if (object.isLight) {\n        _renderData.lights.push(object);\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material.visible === false)\n          return;\n        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false)\n          return;\n        addObject(object);\n      } else if (object.isSprite) {\n        if (object.material.visible === false)\n          return;\n        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false)\n          return;\n        addObject(object);\n      }\n      const children = object.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i]);\n      }\n    }\n    function addObject(object) {\n      _object = getNextObjectInPool();\n      _object.id = object.id;\n      _object.object = object;\n      _vector3.setFromMatrixPosition(object.matrixWorld);\n      _vector3.applyMatrix4(_viewProjectionMatrix);\n      _object.z = _vector3.z;\n      _object.renderOrder = object.renderOrder;\n      _renderData.objects.push(_object);\n    }\n    this.projectScene = function(scene, camera, sortObjects, sortElements) {\n      _faceCount = 0;\n      _lineCount = 0;\n      _spriteCount = 0;\n      _renderData.elements.length = 0;\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\n      _objectCount = 0;\n      _renderData.objects.length = 0;\n      _renderData.lights.length = 0;\n      projectObject(scene);\n      if (sortObjects === true) {\n        _renderData.objects.sort(painterSort);\n      }\n      const objects = _renderData.objects;\n      for (let o = 0, ol = objects.length; o < ol; o++) {\n        const object = objects[o].object;\n        const geometry = object.geometry;\n        renderList.setObject(object);\n        _modelMatrix = object.matrixWorld;\n        _vertexCount = 0;\n        if (object.isMesh) {\n          let material = object.material;\n          const isMultiMaterial = Array.isArray(material);\n          const attributes = geometry.attributes;\n          const groups = geometry.groups;\n          if (attributes.position === void 0)\n            continue;\n          const positions = attributes.position.array;\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            let x = positions[i];\n            let y = positions[i + 1];\n            let z = positions[i + 2];\n            const morphTargets = geometry.morphAttributes.position;\n            if (morphTargets !== void 0) {\n              const morphTargetsRelative = geometry.morphTargetsRelative;\n              const morphInfluences = object.morphTargetInfluences;\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                const influence = morphInfluences[t];\n                if (influence === 0)\n                  continue;\n                const target = morphTargets[t];\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n            renderList.pushVertex(x, y, z);\n          }\n          if (attributes.normal !== void 0) {\n            const normals = attributes.normal.array;\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n          if (attributes.color !== void 0) {\n            const colors = attributes.color.array;\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n          if (attributes.uv !== void 0) {\n            const uvs = attributes.uv.array;\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n          if (geometry.index !== null) {\n            const indices = geometry.index.array;\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0)\n                  continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0)\n                  continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (object.isLine) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n            if (attributes.color !== void 0) {\n              const colors = attributes.color.array;\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n            if (geometry.index !== null) {\n              const indices = geometry.index.array;\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              const step = object.isLineSegments ? 2 : 1;\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (object.isPoints) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        } else if (object.isSprite) {\n          object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n          _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n          _vector4.applyMatrix4(_viewProjectionMatrix);\n          pushPoint(_vector4, object, camera);\n        }\n      }\n      if (sortElements === true) {\n        _renderData.elements.sort(painterSort);\n      }\n      return _renderData;\n    };\n    function pushPoint(_vector42, object, camera) {\n      const invW = 1 / _vector42.w;\n      _vector42.z *= invW;\n      if (_vector42.z >= -1 && _vector42.z <= 1) {\n        _sprite = getNextSpriteInPool();\n        _sprite.id = object.id;\n        _sprite.x = _vector42.x * invW;\n        _sprite.y = _vector42.y * invW;\n        _sprite.z = _vector42.z;\n        _sprite.renderOrder = object.renderOrder;\n        _sprite.object = object;\n        _sprite.rotation = object.rotation;\n        _sprite.scale.x = object.scale.x * Math.abs(\n          _sprite.x - (_vector42.x + camera.projectionMatrix.elements[0]) / (_vector42.w + camera.projectionMatrix.elements[12])\n        );\n        _sprite.scale.y = object.scale.y * Math.abs(\n          _sprite.y - (_vector42.y + camera.projectionMatrix.elements[5]) / (_vector42.w + camera.projectionMatrix.elements[13])\n        );\n        _sprite.material = object.material;\n        _renderData.elements.push(_sprite);\n      }\n    }\n    function getNextObjectInPool() {\n      if (_objectCount === _objectPoolLength) {\n        const object = new RenderableObject();\n        _objectPool.push(object);\n        _objectPoolLength++;\n        _objectCount++;\n        return object;\n      }\n      return _objectPool[_objectCount++];\n    }\n    function getNextVertexInPool() {\n      if (_vertexCount === _vertexPoolLength) {\n        const vertex = new RenderableVertex();\n        _vertexPool.push(vertex);\n        _vertexPoolLength++;\n        _vertexCount++;\n        return vertex;\n      }\n      return _vertexPool[_vertexCount++];\n    }\n    function getNextFaceInPool() {\n      if (_faceCount === _facePoolLength) {\n        const face = new RenderableFace();\n        _facePool.push(face);\n        _facePoolLength++;\n        _faceCount++;\n        return face;\n      }\n      return _facePool[_faceCount++];\n    }\n    function getNextLineInPool() {\n      if (_lineCount === _linePoolLength) {\n        const line = new RenderableLine();\n        _linePool.push(line);\n        _linePoolLength++;\n        _lineCount++;\n        return line;\n      }\n      return _linePool[_lineCount++];\n    }\n    function getNextSpriteInPool() {\n      if (_spriteCount === _spritePoolLength) {\n        const sprite = new RenderableSprite();\n        _spritePool.push(sprite);\n        _spritePoolLength++;\n        _spriteCount++;\n        return sprite;\n      }\n      return _spritePool[_spriteCount++];\n    }\n    function painterSort(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else if (a.id !== b.id) {\n        return a.id - b.id;\n      } else {\n        return 0;\n      }\n    }\n    function clipLine(s1, s2) {\n      let alpha1 = 0, alpha2 = 1;\n      const bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n      if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n        return true;\n      } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n        return false;\n      } else {\n        if (bc1near < 0) {\n          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n        } else if (bc2near < 0) {\n          alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n        }\n        if (bc1far < 0) {\n          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n        } else if (bc2far < 0) {\n          alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n        }\n        if (alpha2 < alpha1) {\n          return false;\n        } else {\n          s1.lerp(s2, alpha1);\n          s2.lerp(s1, 1 - alpha2);\n          return true;\n        }\n      }\n    }\n  }\n}\nexport {\n  Projector,\n  RenderableFace,\n  RenderableLine,\n  RenderableObject,\n  RenderableSprite,\n  RenderableVertex\n};\n"]},"metadata":{},"sourceType":"module"}