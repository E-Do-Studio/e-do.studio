{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as THREE from \"three\";\nvar PINCH_MAX = 0.05;\nvar PINCH_THRESHOLD = 0.02;\nvar PINCH_MIN = 0.01;\nvar POINTER_ADVANCE_MAX = 0.02;\nvar POINTER_OPACITY_MAX = 1;\nvar POINTER_OPACITY_MIN = 0.4;\nvar POINTER_FRONT_RADIUS = 2e-3;\nvar POINTER_REAR_RADIUS = 0.01;\nvar POINTER_REAR_RADIUS_MIN = 3e-3;\nvar POINTER_LENGTH = 0.035;\nvar POINTER_SEGMENTS = 16;\nvar POINTER_RINGS = 12;\nvar POINTER_HEMISPHERE_ANGLE = 110;\nvar YAXIS = /* @__PURE__ */new THREE.Vector3(0, 1, 0);\nvar ZAXIS = /* @__PURE__ */new THREE.Vector3(0, 0, 1);\nvar CURSOR_RADIUS = 0.02;\nvar CURSOR_MAX_DISTANCE = 1.5;\n\nvar OculusHandPointerModel = /*#__PURE__*/function (_THREE$Object3D) {\n  _inherits(OculusHandPointerModel, _THREE$Object3D);\n\n  var _super = _createSuper(OculusHandPointerModel);\n\n  function OculusHandPointerModel(hand, controller) {\n    var _this;\n\n    _classCallCheck(this, OculusHandPointerModel);\n\n    _this = _super.call(this);\n    _this.hand = hand;\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    _this.pointerGeometry = null;\n    _this.pointerMesh = null;\n    _this.pointerObject = null;\n    _this.pinched = false;\n    _this.attached = false;\n    _this.cursorObject = null;\n    _this.raycaster = null;\n    _this._onConnected = _this._onConnected.bind(_assertThisInitialized(_this));\n    _this._onDisconnected = _this._onDisconnected.bind(_assertThisInitialized(_this));\n\n    _this.hand.addEventListener(\"connected\", _this._onConnected);\n\n    _this.hand.addEventListener(\"disconnected\", _this._onDisconnected);\n\n    return _this;\n  }\n\n  _createClass(OculusHandPointerModel, [{\n    key: \"_onConnected\",\n    value: function _onConnected(event) {\n      var xrInputSource = event.data;\n\n      if (xrInputSource.hand) {\n        this.visible = true;\n        this.xrInputSource = xrInputSource;\n        this.createPointer();\n      }\n    }\n  }, {\n    key: \"_onDisconnected\",\n    value: function _onDisconnected() {\n      this.visible = false;\n      this.xrInputSource = null;\n      this.pointerGeometry.dispose();\n      this.pointerMesh.material.dispose();\n      this.clear();\n    }\n  }, {\n    key: \"_drawVerticesRing\",\n    value: function _drawVerticesRing(vertices, baseVector, ringIndex) {\n      var segmentVector = baseVector.clone();\n\n      for (var i = 0; i < POINTER_SEGMENTS; i++) {\n        segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n        var vid = ringIndex * POINTER_SEGMENTS + i;\n        vertices[3 * vid] = segmentVector.x;\n        vertices[3 * vid + 1] = segmentVector.y;\n        vertices[3 * vid + 2] = segmentVector.z;\n      }\n    }\n  }, {\n    key: \"_updatePointerVertices\",\n    value: function _updatePointerVertices(rearRadius) {\n      var vertices = this.pointerGeometry.attributes.position.array;\n      var frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n\n      this._drawVerticesRing(vertices, frontFaceBase, 0);\n\n      var rearBase = new THREE.Vector3(Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, 0);\n\n      for (var i = 0; i < POINTER_RINGS; i++) {\n        this._drawVerticesRing(vertices, rearBase, i + 1);\n\n        rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n      }\n\n      var frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n      var rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n      var frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n      vertices[frontCenterIndex * 3] = frontCenter.x;\n      vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n      vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n      var rearCenter = new THREE.Vector3(0, 0, rearRadius);\n      vertices[rearCenterIndex * 3] = rearCenter.x;\n      vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n      vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n      this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n    }\n  }, {\n    key: \"createPointer\",\n    value: function createPointer() {\n      var i, j;\n      var vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0);\n      var indices = [];\n      this.pointerGeometry = new THREE.BufferGeometry();\n      this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n\n      this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n      for (i = 0; i < POINTER_RINGS; i++) {\n        for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n          indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n          indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        }\n\n        indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n        indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      }\n\n      var frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n      var rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n\n      for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n        indices.push(frontCenterIndex, i + 1, i);\n        indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n      }\n\n      indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n      indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n      var material = new THREE.MeshBasicMaterial();\n      material.transparent = true;\n      material.opacity = POINTER_OPACITY_MIN;\n      this.pointerGeometry.setIndex(indices);\n      this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerObject = new THREE.Object3D();\n      this.pointerObject.add(this.pointerMesh);\n      this.raycaster = new THREE.Raycaster();\n      var cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n      var cursorMaterial = new THREE.MeshBasicMaterial();\n      cursorMaterial.transparent = true;\n      cursorMaterial.opacity = POINTER_OPACITY_MIN;\n      this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n      this.pointerObject.add(this.cursorObject);\n      this.add(this.pointerObject);\n    }\n  }, {\n    key: \"_updateRaycaster\",\n    value: function _updateRaycaster() {\n      if (this.raycaster) {\n        var pointerMatrix = this.pointerObject.matrixWorld;\n        var tempMatrix = new THREE.Matrix4();\n        tempMatrix.identity().extractRotation(pointerMatrix);\n        this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n        this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      }\n    }\n  }, {\n    key: \"_updatePointer\",\n    value: function _updatePointer() {\n      this.pointerObject.visible = this.controller.visible;\n      var indexTip = this.hand.joints[\"index-finger-tip\"];\n      var thumbTip = this.hand.joints[\"thumb-tip\"];\n      var distance = indexTip.position.distanceTo(thumbTip.position);\n      var position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n      this.pointerObject.position.copy(position);\n      this.pointerObject.quaternion.copy(this.controller.quaternion);\n      this.pinched = distance <= PINCH_THRESHOLD;\n      var pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n      var focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n\n      if (pinchScale > 1) {\n        this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n        this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      } else if (pinchScale > 0) {\n        var rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n\n        this._updatePointerVertices(rearRadius);\n\n        if (focusScale < 1) {\n          this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n          this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n        } else {\n          this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n          this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n        }\n      } else {\n        this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n\n        this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n      }\n\n      this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n    }\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(OculusHandPointerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (this.pointerGeometry) {\n        this._updatePointer();\n\n        this._updateRaycaster();\n      }\n    }\n  }, {\n    key: \"isPinched\",\n    value: function isPinched() {\n      return this.pinched;\n    }\n  }, {\n    key: \"setAttached\",\n    value: function setAttached(attached) {\n      this.attached = attached;\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached() {\n      return this.attached;\n    }\n  }, {\n    key: \"intersectObject\",\n    value: function intersectObject(object) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (this.raycaster) {\n        return this.raycaster.intersectObject(object, recursive);\n      }\n    }\n  }, {\n    key: \"intersectObjects\",\n    value: function intersectObjects(objects) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (this.raycaster) {\n        return this.raycaster.intersectObjects(objects, recursive);\n      }\n    }\n  }, {\n    key: \"checkIntersections\",\n    value: function checkIntersections(objects) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.raycaster && !this.attached) {\n        var intersections = this.raycaster.intersectObjects(objects, recursive);\n        var direction = new THREE.Vector3(0, 0, -1);\n\n        if (intersections.length > 0) {\n          var intersection = intersections[0];\n          var distance = intersection.distance;\n          this.cursorObject.position.copy(direction.multiplyScalar(distance));\n        } else {\n          this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n        }\n      }\n    }\n  }, {\n    key: \"setCursor\",\n    value: function setCursor(distance) {\n      var direction = new THREE.Vector3(0, 0, -1);\n\n      if (this.raycaster && !this.attached) {\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._onDisconnected();\n\n      this.hand.removeEventListener(\"connected\", this._onConnected);\n      this.hand.removeEventListener(\"disconnected\", this._onDisconnected);\n    }\n  }]);\n\n  return OculusHandPointerModel;\n}(THREE.Object3D);\n\nexport { OculusHandPointerModel };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/webxr/OculusHandPointerModel.js"],"names":["THREE","PINCH_MAX","PINCH_THRESHOLD","PINCH_MIN","POINTER_ADVANCE_MAX","POINTER_OPACITY_MAX","POINTER_OPACITY_MIN","POINTER_FRONT_RADIUS","POINTER_REAR_RADIUS","POINTER_REAR_RADIUS_MIN","POINTER_LENGTH","POINTER_SEGMENTS","POINTER_RINGS","POINTER_HEMISPHERE_ANGLE","YAXIS","Vector3","ZAXIS","CURSOR_RADIUS","CURSOR_MAX_DISTANCE","OculusHandPointerModel","hand","controller","motionController","envMap","mesh","pointerGeometry","pointerMesh","pointerObject","pinched","attached","cursorObject","raycaster","_onConnected","bind","_onDisconnected","addEventListener","event","xrInputSource","data","visible","createPointer","dispose","material","clear","vertices","baseVector","ringIndex","segmentVector","clone","i","applyAxisAngle","Math","PI","vid","x","y","z","rearRadius","attributes","position","array","frontFaceBase","_drawVerticesRing","rearBase","sin","cos","frontCenterIndex","rearCenterIndex","frontCenter","rearCenter","setAttribute","Float32BufferAttribute","j","Array","fill","indices","BufferGeometry","_updatePointerVertices","push","MeshBasicMaterial","transparent","opacity","setIndex","Mesh","set","Object3D","add","Raycaster","cursorGeometry","SphereGeometry","cursorMaterial","pointerMatrix","matrixWorld","tempMatrix","Matrix4","identity","extractRotation","ray","origin","setFromMatrixPosition","direction","applyMatrix4","indexTip","joints","thumbTip","distance","distanceTo","multiplyScalar","copy","quaternion","pinchScale","focusScale","force","_updatePointer","_updateRaycaster","object","recursive","intersectObject","objects","intersectObjects","intersections","length","intersection","removeEventListener"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nconst PINCH_MAX = 0.05;\nconst PINCH_THRESHOLD = 0.02;\nconst PINCH_MIN = 0.01;\nconst POINTER_ADVANCE_MAX = 0.02;\nconst POINTER_OPACITY_MAX = 1;\nconst POINTER_OPACITY_MIN = 0.4;\nconst POINTER_FRONT_RADIUS = 2e-3;\nconst POINTER_REAR_RADIUS = 0.01;\nconst POINTER_REAR_RADIUS_MIN = 3e-3;\nconst POINTER_LENGTH = 0.035;\nconst POINTER_SEGMENTS = 16;\nconst POINTER_RINGS = 12;\nconst POINTER_HEMISPHERE_ANGLE = 110;\nconst YAXIS = /* @__PURE__ */ new THREE.Vector3(0, 1, 0);\nconst ZAXIS = /* @__PURE__ */ new THREE.Vector3(0, 0, 1);\nconst CURSOR_RADIUS = 0.02;\nconst CURSOR_MAX_DISTANCE = 1.5;\nclass OculusHandPointerModel extends THREE.Object3D {\n  constructor(hand, controller) {\n    super();\n    this.hand = hand;\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.pointerGeometry = null;\n    this.pointerMesh = null;\n    this.pointerObject = null;\n    this.pinched = false;\n    this.attached = false;\n    this.cursorObject = null;\n    this.raycaster = null;\n    this._onConnected = this._onConnected.bind(this);\n    this._onDisconnected = this._onDisconnected.bind(this);\n    this.hand.addEventListener(\"connected\", this._onConnected);\n    this.hand.addEventListener(\"disconnected\", this._onDisconnected);\n  }\n  _onConnected(event) {\n    const xrInputSource = event.data;\n    if (xrInputSource.hand) {\n      this.visible = true;\n      this.xrInputSource = xrInputSource;\n      this.createPointer();\n    }\n  }\n  _onDisconnected() {\n    this.visible = false;\n    this.xrInputSource = null;\n    this.pointerGeometry.dispose();\n    this.pointerMesh.material.dispose();\n    this.clear();\n  }\n  _drawVerticesRing(vertices, baseVector, ringIndex) {\n    const segmentVector = baseVector.clone();\n    for (var i = 0; i < POINTER_SEGMENTS; i++) {\n      segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n      const vid = ringIndex * POINTER_SEGMENTS + i;\n      vertices[3 * vid] = segmentVector.x;\n      vertices[3 * vid + 1] = segmentVector.y;\n      vertices[3 * vid + 2] = segmentVector.z;\n    }\n  }\n  _updatePointerVertices(rearRadius) {\n    const vertices = this.pointerGeometry.attributes.position.array;\n    const frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n    this._drawVerticesRing(vertices, frontFaceBase, 0);\n    const rearBase = new THREE.Vector3(\n      Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius,\n      Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius,\n      0\n    );\n    for (var i = 0; i < POINTER_RINGS; i++) {\n      this._drawVerticesRing(vertices, rearBase, i + 1);\n      rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n    }\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    const frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n    vertices[frontCenterIndex * 3] = frontCenter.x;\n    vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n    vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n    const rearCenter = new THREE.Vector3(0, 0, rearRadius);\n    vertices[rearCenterIndex * 3] = rearCenter.x;\n    vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n    vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n    this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n  }\n  createPointer() {\n    var i, j;\n    const vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0);\n    const indices = [];\n    this.pointerGeometry = new THREE.BufferGeometry();\n    this.pointerGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n    this._updatePointerVertices(POINTER_REAR_RADIUS);\n    for (i = 0; i < POINTER_RINGS; i++) {\n      for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n        indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n      }\n      indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n    }\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n      indices.push(frontCenterIndex, i + 1, i);\n      indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n    }\n    indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n    indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n    const material = new THREE.MeshBasicMaterial();\n    material.transparent = true;\n    material.opacity = POINTER_OPACITY_MIN;\n    this.pointerGeometry.setIndex(indices);\n    this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n    this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n    this.pointerObject = new THREE.Object3D();\n    this.pointerObject.add(this.pointerMesh);\n    this.raycaster = new THREE.Raycaster();\n    const cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n    const cursorMaterial = new THREE.MeshBasicMaterial();\n    cursorMaterial.transparent = true;\n    cursorMaterial.opacity = POINTER_OPACITY_MIN;\n    this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n    this.pointerObject.add(this.cursorObject);\n    this.add(this.pointerObject);\n  }\n  _updateRaycaster() {\n    if (this.raycaster) {\n      const pointerMatrix = this.pointerObject.matrixWorld;\n      const tempMatrix = new THREE.Matrix4();\n      tempMatrix.identity().extractRotation(pointerMatrix);\n      this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n      this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    }\n  }\n  _updatePointer() {\n    this.pointerObject.visible = this.controller.visible;\n    const indexTip = this.hand.joints[\"index-finger-tip\"];\n    const thumbTip = this.hand.joints[\"thumb-tip\"];\n    const distance = indexTip.position.distanceTo(thumbTip.position);\n    const position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n    this.pointerObject.position.copy(position);\n    this.pointerObject.quaternion.copy(this.controller.quaternion);\n    this.pinched = distance <= PINCH_THRESHOLD;\n    const pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n    const focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n    if (pinchScale > 1) {\n      this._updatePointerVertices(POINTER_REAR_RADIUS);\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n    } else if (pinchScale > 0) {\n      const rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n      this._updatePointerVertices(rearRadius);\n      if (focusScale < 1) {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n      } else {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      }\n    } else {\n      this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n    }\n    this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.pointerGeometry) {\n      this._updatePointer();\n      this._updateRaycaster();\n    }\n  }\n  isPinched() {\n    return this.pinched;\n  }\n  setAttached(attached) {\n    this.attached = attached;\n  }\n  isAttached() {\n    return this.attached;\n  }\n  intersectObject(object, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObject(object, recursive);\n    }\n  }\n  intersectObjects(objects, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObjects(objects, recursive);\n    }\n  }\n  checkIntersections(objects, recursive = false) {\n    if (this.raycaster && !this.attached) {\n      const intersections = this.raycaster.intersectObjects(objects, recursive);\n      const direction = new THREE.Vector3(0, 0, -1);\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const distance = intersection.distance;\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      } else {\n        this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n      }\n    }\n  }\n  setCursor(distance) {\n    const direction = new THREE.Vector3(0, 0, -1);\n    if (this.raycaster && !this.attached) {\n      this.cursorObject.position.copy(direction.multiplyScalar(distance));\n    }\n  }\n  dispose() {\n    this._onDisconnected();\n    this.hand.removeEventListener(\"connected\", this._onConnected);\n    this.hand.removeEventListener(\"disconnected\", this._onDisconnected);\n  }\n}\nexport {\n  OculusHandPointerModel\n};\n"]},"metadata":{},"sourceType":"module"}