{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nvar a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = /* @__PURE__ */new Vector3();\nvar yAxis = /* @__PURE__ */new Vector3();\nvar zAxis = /* @__PURE__ */new Vector3();\nvar v1 = /* @__PURE__ */new Vector3();\nvar size = /* @__PURE__ */new Vector3();\nvar closestPoint = /* @__PURE__ */new Vector3();\nvar rotationMatrix = /* @__PURE__ */new Matrix3();\nvar aabb = /* @__PURE__ */new Box3();\nvar matrix = /* @__PURE__ */new Matrix4();\nvar inverse = /* @__PURE__ */new Matrix4();\nvar localRay = /* @__PURE__ */new Ray();\n\nvar OBB = /*#__PURE__*/function () {\n  function OBB() {\n    var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    var halfSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    var rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Matrix3();\n\n    _classCallCheck(this, OBB);\n\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n\n  _createClass(OBB, [{\n    key: \"set\",\n    value: function set(center, halfSize, rotation) {\n      this.center = center;\n      this.halfSize = halfSize;\n      this.rotation = rotation;\n      return this;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(obb2) {\n      this.center.copy(obb2.center);\n      this.halfSize.copy(obb2.halfSize);\n      this.rotation.copy(obb2.rotation);\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize(result) {\n      return result.copy(this.halfSize).multiplyScalar(2);\n    }\n    /**\n     * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n     * by Christer Ericson (chapter 5.1.4)\n     */\n\n  }, {\n    key: \"clampPoint\",\n    value: function clampPoint(point, result) {\n      var halfSize = this.halfSize;\n      v1.subVectors(point, this.center);\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      result.copy(this.center);\n      var x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n      result.add(xAxis.multiplyScalar(x));\n      var y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n      result.add(yAxis.multiplyScalar(y));\n      var z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n      result.add(zAxis.multiplyScalar(z));\n      return result;\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      v1.subVectors(point, this.center);\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n    }\n  }, {\n    key: \"intersectsBox3\",\n    value: function intersectsBox3(box3) {\n      return this.intersectsOBB(obb.fromBox3(box3));\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      this.clampPoint(sphere.center, closestPoint);\n      return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    }\n    /**\n     * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n     * by Christer Ericson (chapter 4.4.1)\n     *\n     */\n\n  }, {\n    key: \"intersectsOBB\",\n    value: function intersectsOBB(obb2) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.EPSILON;\n      a.c = this.center;\n      a.e[0] = this.halfSize.x;\n      a.e[1] = this.halfSize.y;\n      a.e[2] = this.halfSize.z;\n      this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n      b.c = obb2.center;\n      b.e[0] = obb2.halfSize.x;\n      b.e[1] = obb2.halfSize.y;\n      b.e[2] = obb2.halfSize.z;\n      obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          R[i][j] = a.u[i].dot(b.u[j]);\n        }\n      }\n\n      v1.subVectors(b.c, a.c);\n      t[0] = v1.dot(a.u[0]);\n      t[1] = v1.dot(a.u[1]);\n      t[2] = v1.dot(a.u[2]);\n\n      for (var _i = 0; _i < 3; _i++) {\n        for (var _j = 0; _j < 3; _j++) {\n          AbsR[_i][_j] = Math.abs(R[_i][_j]) + epsilon;\n        }\n      }\n\n      var ra, rb;\n\n      for (var _i2 = 0; _i2 < 3; _i2++) {\n        ra = a.e[_i2];\n        rb = b.e[0] * AbsR[_i2][0] + b.e[1] * AbsR[_i2][1] + b.e[2] * AbsR[_i2][2];\n        if (Math.abs(t[_i2]) > ra + rb) return false;\n      }\n\n      for (var _i3 = 0; _i3 < 3; _i3++) {\n        ra = a.e[0] * AbsR[0][_i3] + a.e[1] * AbsR[1][_i3] + a.e[2] * AbsR[2][_i3];\n        rb = b.e[_i3];\n        if (Math.abs(t[0] * R[0][_i3] + t[1] * R[1][_i3] + t[2] * R[2][_i3]) > ra + rb) return false;\n      }\n\n      ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n      rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n      if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false;\n      ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n      rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n      if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false;\n      ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n      rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n      if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n      rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n      if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n      rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n      if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n      rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n      if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n      rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n      if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n      rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n      if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n      rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n      if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false;\n      return true;\n    }\n    /**\n     * Reference: Testing Box Against Plane in Real-Time Collision Detection\n     * by Christer Ericson (chapter 5.2.3)\n     */\n\n  }, {\n    key: \"intersectsPlane\",\n    value: function intersectsPlane(plane) {\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      var r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n      var d = plane.normal.dot(this.center) - plane.constant;\n      return Math.abs(d) <= r;\n    }\n    /**\n     * Performs a ray/OBB intersection test and stores the intersection point\n     * to the given 3D vector. If no intersection is detected, *null* is returned.\n     */\n\n  }, {\n    key: \"intersectRay\",\n    value: function intersectRay(ray, result) {\n      this.getSize(size);\n      aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n      matrix.setFromMatrix3(this.rotation);\n      matrix.setPosition(this.center);\n      inverse.copy(matrix).invert();\n      localRay.copy(ray).applyMatrix4(inverse);\n\n      if (localRay.intersectBox(aabb, result)) {\n        return result.applyMatrix4(matrix);\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Performs a ray/OBB intersection test. Returns either true or false if\n     * there is a intersection or not.\n     */\n\n  }, {\n    key: \"intersectsRay\",\n    value: function intersectsRay(ray) {\n      return this.intersectRay(ray, v1) !== null;\n    }\n  }, {\n    key: \"fromBox3\",\n    value: function fromBox3(box3) {\n      box3.getCenter(this.center);\n      box3.getSize(this.halfSize).multiplyScalar(0.5);\n      this.rotation.identity();\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(obb2) {\n      return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n    }\n  }, {\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix2) {\n      var e = matrix2.elements;\n      var sx = v1.set(e[0], e[1], e[2]).length();\n      var sy = v1.set(e[4], e[5], e[6]).length();\n      var sz = v1.set(e[8], e[9], e[10]).length();\n      var det = matrix2.determinant();\n      if (det < 0) sx = -sx;\n      rotationMatrix.setFromMatrix4(matrix2);\n      var invSX = 1 / sx;\n      var invSY = 1 / sy;\n      var invSZ = 1 / sz;\n      rotationMatrix.elements[0] *= invSX;\n      rotationMatrix.elements[1] *= invSX;\n      rotationMatrix.elements[2] *= invSX;\n      rotationMatrix.elements[3] *= invSY;\n      rotationMatrix.elements[4] *= invSY;\n      rotationMatrix.elements[5] *= invSY;\n      rotationMatrix.elements[6] *= invSZ;\n      rotationMatrix.elements[7] *= invSZ;\n      rotationMatrix.elements[8] *= invSZ;\n      this.rotation.multiply(rotationMatrix);\n      this.halfSize.x *= sx;\n      this.halfSize.y *= sy;\n      this.halfSize.z *= sz;\n      v1.setFromMatrixPosition(matrix2);\n      this.center.add(v1);\n      return this;\n    }\n  }]);\n\n  return OBB;\n}();\n\nvar obb = /* @__PURE__ */new OBB();\nexport { OBB };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/math/OBB.js"],"names":["Vector3","Matrix3","Box3","Matrix4","Ray","MathUtils","a","c","u","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","aabb","matrix","inverse","localRay","OBB","center","halfSize","rotation","obb2","copy","constructor","result","multiplyScalar","point","subVectors","extractBasis","x","clamp","dot","add","y","z","Math","abs","box3","intersectsOBB","obb","fromBox3","sphere","clampPoint","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","plane","r","normal","d","constant","ray","getSize","setFromCenterAndSize","set","setFromMatrix3","setPosition","invert","applyMatrix4","intersectBox","intersectRay","getCenter","identity","equals","matrix2","elements","sx","length","sy","sz","det","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition"],"mappings":"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","sourcesContent":["import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nconst a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst R = [[], [], []];\nconst AbsR = [[], [], []];\nconst t = [];\nconst xAxis = /* @__PURE__ */ new Vector3();\nconst yAxis = /* @__PURE__ */ new Vector3();\nconst zAxis = /* @__PURE__ */ new Vector3();\nconst v1 = /* @__PURE__ */ new Vector3();\nconst size = /* @__PURE__ */ new Vector3();\nconst closestPoint = /* @__PURE__ */ new Vector3();\nconst rotationMatrix = /* @__PURE__ */ new Matrix3();\nconst aabb = /* @__PURE__ */ new Box3();\nconst matrix = /* @__PURE__ */ new Matrix4();\nconst inverse = /* @__PURE__ */ new Matrix4();\nconst localRay = /* @__PURE__ */ new Ray();\nclass OBB {\n  constructor(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n  set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  }\n  copy(obb2) {\n    this.center.copy(obb2.center);\n    this.halfSize.copy(obb2.halfSize);\n    this.rotation.copy(obb2.rotation);\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  }\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint(point, result) {\n    const halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    result.copy(this.center);\n    const x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    const y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    const z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  }\n  containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  }\n  intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  }\n  intersectsSphere(sphere) {\n    this.clampPoint(sphere.center, closestPoint);\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB(obb2, epsilon = Number.EPSILON) {\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb2.center;\n    b.e[0] = obb2.halfSize.x;\n    b.e[1] = obb2.halfSize.y;\n    b.e[2] = obb2.halfSize.z;\n    obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    }\n    v1.subVectors(b.c, a.c);\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n    let ra, rb;\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb)\n        return false;\n    }\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb)\n        return false;\n    }\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb)\n      return false;\n    return true;\n  }\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n    const d = plane.normal.dot(this.center) - plane.constant;\n    return Math.abs(d) <= r;\n  }\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay(ray, result) {\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n    matrix.setFromMatrix3(this.rotation);\n    matrix.setPosition(this.center);\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse);\n    if (localRay.intersectBox(aabb, result)) {\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  }\n  fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  }\n  equals(obb2) {\n    return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n  }\n  applyMatrix4(matrix2) {\n    const e = matrix2.elements;\n    let sx = v1.set(e[0], e[1], e[2]).length();\n    const sy = v1.set(e[4], e[5], e[6]).length();\n    const sz = v1.set(e[8], e[9], e[10]).length();\n    const det = matrix2.determinant();\n    if (det < 0)\n      sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix2);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix2);\n    this.center.add(v1);\n    return this;\n  }\n}\nconst obb = /* @__PURE__ */ new OBB();\nexport {\n  OBB\n};\n"]},"metadata":{},"sourceType":"module"}