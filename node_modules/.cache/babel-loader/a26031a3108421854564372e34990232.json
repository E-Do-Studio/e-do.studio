{"ast":null,"code":"import { Vector3, Color } from \"three\";\nvar ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(16777215)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"varying vec3 vRefract;\", \"void main() {\", \"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\", \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"\tvec3 I = worldPosition.xyz - cameraPosition;\", \"\tvRefract = refract( normalize( I ), worldNormal, 1.02 );\", \"\tgl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"varying vec3 vRefract;\", \"void main() {\", \"\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\", \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\", \"\tintensity += length(lightWeighting) * 0.2;\", \"\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );\", \"\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\", \"\tintensity = intensity * 0.2 + 0.3;\", \"\tif ( intensity < 0.50 ) {\", \"\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\", \"\t} else {\", \"\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\", \"}\", \"}\"].join(\"\\n\")\n};\nvar ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uLineColor1: {\n      value: /* @__PURE__ */new Color(8421504)\n    },\n    uLineColor2: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor3: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor4: {\n      value: /* @__PURE__ */new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\", \"\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\", \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\", \"\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\", \"\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );\", \"\t}\", \"\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\", \"\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );\", \"\t}\", \"}\"].join(\"\\n\")\n};\nvar ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(16777215)\n    },\n    uLineColor1: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor2: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor3: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor4: {\n      value: /* @__PURE__ */new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\", \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\", \"\tif ( length(lightWeighting) < 1.00 ) {\", \"\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.75 ) {\", \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.50 ) {\", \"\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.3465 ) {\", \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );\", \"\t}\", \"\t}\", \"}\"].join(\"\\n\")\n};\nvar ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(16777215)\n    },\n    uLineColor1: {\n      value: /* @__PURE__ */new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\", \"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"gl_FragColor = vec4( uBaseColor, 1.0 );\", \"if ( length(lightWeighting) < 1.00 ) {\", \"\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.50 ) {\", \"\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { ToonShader1, ToonShader2, ToonShaderDotted, ToonShaderHatching };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/shaders/ToonShader.js"],"names":["Vector3","Color","ToonShader1","uniforms","uDirLightPos","value","uDirLightColor","uAmbientLightColor","uBaseColor","vertexShader","join","fragmentShader","ToonShader2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","ToonShaderHatching","ToonShaderDotted"],"mappings":"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","sourcesContent":["import { Vector3, Color } from \"three\";\nconst ToonShader1 = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(16777215) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vRefract;\",\n    \"void main() {\",\n    \"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n    \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"\tvec3 I = worldPosition.xyz - cameraPosition;\",\n    \"\tvRefract = refract( normalize( I ), worldNormal, 1.02 );\",\n    \"\tgl_Position = projectionMatrix * mvPosition;\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vRefract;\",\n    \"void main() {\",\n    \"\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n    \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n    \"\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\",\n    \"\tintensity += length(lightWeighting) * 0.2;\",\n    \"\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );\",\n    \"\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\",\n    \"\tintensity = intensity * 0.2 + 0.3;\",\n    \"\tif ( intensity < 0.50 ) {\",\n    \"\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\",\n    \"\t} else {\",\n    \"\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\",\n    \"}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nconst ToonShader2 = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uLineColor1: { value: /* @__PURE__ */ new Color(8421504) },\n    uLineColor2: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor3: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor4: { value: /* @__PURE__ */ new Color(0) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uLineColor1;\",\n    \"uniform vec3 uLineColor2;\",\n    \"uniform vec3 uLineColor3;\",\n    \"uniform vec3 uLineColor4;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\",\n    \"\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n    \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n    \"\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\",\n    \"\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );\",\n    \"\t}\",\n    \"\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\",\n    \"\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nconst ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(16777215) },\n    uLineColor1: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor2: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor3: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor4: { value: /* @__PURE__ */ new Color(0) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uLineColor1;\",\n    \"uniform vec3 uLineColor2;\",\n    \"uniform vec3 uLineColor3;\",\n    \"uniform vec3 uLineColor4;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n    \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n    \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n    \"\tif ( length(lightWeighting) < 1.00 ) {\",\n    \"\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.75 ) {\",\n    \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.50 ) {\",\n    \"\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.3465 ) {\",\n    \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );\",\n    \"\t}\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nconst ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(16777215) },\n    uLineColor1: { value: /* @__PURE__ */ new Color(0) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uLineColor1;\",\n    \"uniform vec3 uLineColor2;\",\n    \"uniform vec3 uLineColor3;\",\n    \"uniform vec3 uLineColor4;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n    \"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n    \"gl_FragColor = vec4( uBaseColor, 1.0 );\",\n    \"if ( length(lightWeighting) < 1.00 ) {\",\n    \"\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.50 ) {\",\n    \"\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  ToonShader1,\n  ToonShader2,\n  ToonShaderDotted,\n  ToonShaderHatching\n};\n"]},"metadata":{},"sourceType":"module"}