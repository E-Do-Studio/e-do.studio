{"ast":null,"code":"import { Vector3, Loader, FileLoader, Group, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Material, PointsMaterial, MeshPhongMaterial, LineSegments, Points, Mesh } from \"three\";\nconst _object_pattern = /^[og]\\s*(.+)?/;\nconst _material_library_pattern = /^mtllib /;\nconst _material_use_pattern = /^usemtl /;\nconst _map_use_pattern = /^usemap /;\n\nconst _vA = /* @__PURE__ */new Vector3();\n\nconst _vB = /* @__PURE__ */new Vector3();\n\nconst _vC = /* @__PURE__ */new Vector3();\n\nconst _ab = /* @__PURE__ */new Vector3();\n\nconst _cb = /* @__PURE__ */new Vector3();\n\nfunction ParserState() {\n  const state = {\n    objects: [],\n    object: {},\n    vertices: [],\n    normals: [],\n    colors: [],\n    uvs: [],\n    materials: {},\n    materialLibraries: [],\n    startObject: function (name, fromDeclaration) {\n      if (this.object && this.object.fromDeclaration === false) {\n        this.object.name = name;\n        this.object.fromDeclaration = fromDeclaration !== false;\n        return;\n      }\n\n      const previousMaterial = this.object && typeof this.object.currentMaterial === \"function\" ? this.object.currentMaterial() : void 0;\n\n      if (this.object && typeof this.object._finalize === \"function\") {\n        this.object._finalize(true);\n      }\n\n      this.object = {\n        name: name || \"\",\n        fromDeclaration: fromDeclaration !== false,\n        geometry: {\n          vertices: [],\n          normals: [],\n          colors: [],\n          uvs: [],\n          hasUVIndices: false\n        },\n        materials: [],\n        smooth: true,\n        startMaterial: function (name2, libraries) {\n          const previous = this._finalize(false);\n\n          if (previous && (previous.inherited || previous.groupCount <= 0)) {\n            this.materials.splice(previous.index, 1);\n          }\n\n          const material = {\n            index: this.materials.length,\n            name: name2 || \"\",\n            mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : \"\",\n            smooth: previous !== void 0 ? previous.smooth : this.smooth,\n            groupStart: previous !== void 0 ? previous.groupEnd : 0,\n            groupEnd: -1,\n            groupCount: -1,\n            inherited: false,\n            clone: function (index) {\n              const cloned = {\n                index: typeof index === \"number\" ? index : this.index,\n                name: this.name,\n                mtllib: this.mtllib,\n                smooth: this.smooth,\n                groupStart: 0,\n                groupEnd: -1,\n                groupCount: -1,\n                inherited: false\n              };\n              cloned.clone = this.clone.bind(cloned);\n              return cloned;\n            }\n          };\n          this.materials.push(material);\n          return material;\n        },\n        currentMaterial: function () {\n          if (this.materials.length > 0) {\n            return this.materials[this.materials.length - 1];\n          }\n\n          return void 0;\n        },\n        _finalize: function (end) {\n          const lastMultiMaterial = this.currentMaterial();\n\n          if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n            lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n            lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n            lastMultiMaterial.inherited = false;\n          }\n\n          if (end && this.materials.length > 1) {\n            for (let mi = this.materials.length - 1; mi >= 0; mi--) {\n              if (this.materials[mi].groupCount <= 0) {\n                this.materials.splice(mi, 1);\n              }\n            }\n          }\n\n          if (end && this.materials.length === 0) {\n            this.materials.push({\n              name: \"\",\n              smooth: this.smooth\n            });\n          }\n\n          return lastMultiMaterial;\n        }\n      };\n\n      if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === \"function\") {\n        const declared = previousMaterial.clone(0);\n        declared.inherited = true;\n        this.object.materials.push(declared);\n      }\n\n      this.objects.push(this.object);\n    },\n    finalize: function () {\n      if (this.object && typeof this.object._finalize === \"function\") {\n        this.object._finalize(true);\n      }\n    },\n    parseVertexIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseNormalIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseUVIndex: function (value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 2) * 2;\n    },\n    addVertex: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addVertexPoint: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addVertexLine: function (a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addNormal: function (a, b, c) {\n      const src = this.normals;\n      const dst = this.object.geometry.normals;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addFaceNormal: function (a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.normals;\n\n      _vA.fromArray(src, a);\n\n      _vB.fromArray(src, b);\n\n      _vC.fromArray(src, c);\n\n      _cb.subVectors(_vC, _vB);\n\n      _ab.subVectors(_vA, _vB);\n\n      _cb.cross(_ab);\n\n      _cb.normalize();\n\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n    },\n    addColor: function (a, b, c) {\n      const src = this.colors;\n      const dst = this.object.geometry.colors;\n      if (src[a] !== void 0) dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      if (src[b] !== void 0) dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      if (src[c] !== void 0) dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addUV: function (a, b, c) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n      dst.push(src[b + 0], src[b + 1]);\n      dst.push(src[c + 0], src[c + 1]);\n    },\n    addDefaultUV: function () {\n      const dst = this.object.geometry.uvs;\n      dst.push(0, 0);\n      dst.push(0, 0);\n      dst.push(0, 0);\n    },\n    addUVLine: function (a) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n    },\n    addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n      const vLen = this.vertices.length;\n      let ia = this.parseVertexIndex(a, vLen);\n      let ib = this.parseVertexIndex(b, vLen);\n      let ic = this.parseVertexIndex(c, vLen);\n      this.addVertex(ia, ib, ic);\n      this.addColor(ia, ib, ic);\n\n      if (na !== void 0 && na !== \"\") {\n        const nLen = this.normals.length;\n        ia = this.parseNormalIndex(na, nLen);\n        ib = this.parseNormalIndex(nb, nLen);\n        ic = this.parseNormalIndex(nc, nLen);\n        this.addNormal(ia, ib, ic);\n      } else {\n        this.addFaceNormal(ia, ib, ic);\n      }\n\n      if (ua !== void 0 && ua !== \"\") {\n        const uvLen = this.uvs.length;\n        ia = this.parseUVIndex(ua, uvLen);\n        ib = this.parseUVIndex(ub, uvLen);\n        ic = this.parseUVIndex(uc, uvLen);\n        this.addUV(ia, ib, ic);\n        this.object.geometry.hasUVIndices = true;\n      } else {\n        this.addDefaultUV();\n      }\n    },\n    addPointGeometry: function (vertices) {\n      this.object.geometry.type = \"Points\";\n      const vLen = this.vertices.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        const index = this.parseVertexIndex(vertices[vi], vLen);\n        this.addVertexPoint(index);\n        this.addColor(index);\n      }\n    },\n    addLineGeometry: function (vertices, uvs) {\n      this.object.geometry.type = \"Line\";\n      const vLen = this.vertices.length;\n      const uvLen = this.uvs.length;\n\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n      }\n\n      for (let uvi = 0, l = uvs.length; uvi < l; uvi++) {\n        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n      }\n    }\n  };\n  state.startObject(\"\", false);\n  return state;\n}\n\nclass OBJLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = null;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setMaterials(materials) {\n    this.materials = materials;\n    return this;\n  }\n\n  parse(text) {\n    const state = new ParserState();\n\n    if (text.indexOf(\"\\r\\n\") !== -1) {\n      text = text.replace(/\\r\\n/g, \"\\n\");\n    }\n\n    if (text.indexOf(\"\\\\\\n\") !== -1) {\n      text = text.replace(/\\\\\\n/g, \"\");\n    }\n\n    const lines = text.split(\"\\n\");\n    let line = \"\",\n        lineFirstChar = \"\";\n    let lineLength = 0;\n    let result = [];\n    const trimLeft = typeof \"\".trimLeft === \"function\";\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      line = lines[i];\n      line = trimLeft ? line.trimLeft() : line.trim();\n      lineLength = line.length;\n      if (lineLength === 0) continue;\n      lineFirstChar = line.charAt(0);\n      if (lineFirstChar === \"#\") continue;\n\n      if (lineFirstChar === \"v\") {\n        const data = line.split(/\\s+/);\n\n        switch (data[0]) {\n          case \"v\":\n            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n\n            if (data.length >= 7) {\n              state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n            } else {\n              state.colors.push(void 0, void 0, void 0);\n            }\n\n            break;\n\n          case \"vn\":\n            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            break;\n\n          case \"vt\":\n            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n            break;\n        }\n      } else if (lineFirstChar === \"f\") {\n        const lineData = line.substr(1).trim();\n        const vertexData = lineData.split(/\\s+/);\n        const faceVertices = [];\n\n        for (let j = 0, jl = vertexData.length; j < jl; j++) {\n          const vertex = vertexData[j];\n\n          if (vertex.length > 0) {\n            const vertexParts = vertex.split(\"/\");\n            faceVertices.push(vertexParts);\n          }\n        }\n\n        const v1 = faceVertices[0];\n\n        for (let j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n          const v2 = faceVertices[j];\n          const v3 = faceVertices[j + 1];\n          state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n        }\n      } else if (lineFirstChar === \"l\") {\n        const lineParts = line.substring(1).trim().split(\" \");\n        let lineVertices = [];\n        const lineUVs = [];\n\n        if (line.indexOf(\"/\") === -1) {\n          lineVertices = lineParts;\n        } else {\n          for (let li = 0, llen = lineParts.length; li < llen; li++) {\n            const parts = lineParts[li].split(\"/\");\n            if (parts[0] !== \"\") lineVertices.push(parts[0]);\n            if (parts[1] !== \"\") lineUVs.push(parts[1]);\n          }\n        }\n\n        state.addLineGeometry(lineVertices, lineUVs);\n      } else if (lineFirstChar === \"p\") {\n        const lineData = line.substr(1).trim();\n        const pointData = lineData.split(\" \");\n        state.addPointGeometry(pointData);\n      } else if ((result = _object_pattern.exec(line)) !== null) {\n        const name = (\" \" + result[0].substr(1).trim()).substr(1);\n        state.startObject(name);\n      } else if (_material_use_pattern.test(line)) {\n        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n      } else if (_material_library_pattern.test(line)) {\n        state.materialLibraries.push(line.substring(7).trim());\n      } else if (_map_use_pattern.test(line)) {\n        console.warn('THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.');\n      } else if (lineFirstChar === \"s\") {\n        result = line.split(\" \");\n\n        if (result.length > 1) {\n          const value = result[1].trim().toLowerCase();\n          state.object.smooth = value !== \"0\" && value !== \"off\";\n        } else {\n          state.object.smooth = true;\n        }\n\n        const material = state.object.currentMaterial();\n        if (material) material.smooth = state.object.smooth;\n      } else {\n        if (line === \"\\0\") continue;\n        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n      }\n    }\n\n    state.finalize();\n    const container = new Group();\n    container.materialLibraries = [].concat(state.materialLibraries);\n    const hasPrimitives = !(state.objects.length === 1 && state.objects[0].geometry.vertices.length === 0);\n\n    if (hasPrimitives === true) {\n      for (let i = 0, l = state.objects.length; i < l; i++) {\n        const object = state.objects[i];\n        const geometry = object.geometry;\n        const materials = object.materials;\n        const isLine = geometry.type === \"Line\";\n        const isPoints = geometry.type === \"Points\";\n        let hasVertexColors = false;\n        if (geometry.vertices.length === 0) continue;\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute(\"position\", new Float32BufferAttribute(geometry.vertices, 3));\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.setAttribute(\"normal\", new Float32BufferAttribute(geometry.normals, 3));\n        }\n\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.setAttribute(\"color\", new Float32BufferAttribute(geometry.colors, 3));\n        }\n\n        if (geometry.hasUVIndices === true) {\n          buffergeometry.setAttribute(\"uv\", new Float32BufferAttribute(geometry.uvs, 2));\n        }\n\n        const createdMaterials = [];\n\n        for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          const sourceMaterial = materials[mi];\n          const materialHash = sourceMaterial.name + \"_\" + sourceMaterial.smooth + \"_\" + hasVertexColors;\n          let material = state.materials[materialHash];\n\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name);\n\n            if (isLine && material && !(material instanceof LineBasicMaterial)) {\n              const materialLine = new LineBasicMaterial();\n              Material.prototype.copy.call(materialLine, material);\n              materialLine.color.copy(material.color);\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof PointsMaterial)) {\n              const materialPoints = new PointsMaterial({\n                size: 10,\n                sizeAttenuation: false\n              });\n              Material.prototype.copy.call(materialPoints, material);\n              materialPoints.color.copy(material.color);\n              materialPoints.map = material.map;\n              material = materialPoints;\n            }\n          }\n\n          if (material === void 0) {\n            if (isLine) {\n              material = new LineBasicMaterial();\n            } else if (isPoints) {\n              material = new PointsMaterial({\n                size: 1,\n                sizeAttenuation: false\n              });\n            } else {\n              material = new MeshPhongMaterial();\n            }\n\n            material.name = sourceMaterial.name;\n            material.flatShading = sourceMaterial.smooth ? false : true;\n            material.vertexColors = hasVertexColors;\n            state.materials[materialHash] = material;\n          }\n\n          createdMaterials.push(material);\n        }\n\n        let mesh;\n\n        if (createdMaterials.length > 1) {\n          for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            const sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n    } else {\n      if (state.vertices.length > 0) {\n        const material = new PointsMaterial({\n          size: 1,\n          sizeAttenuation: false\n        });\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute(\"position\", new Float32BufferAttribute(state.vertices, 3));\n\n        if (state.colors.length > 0 && state.colors[0] !== void 0) {\n          buffergeometry.setAttribute(\"color\", new Float32BufferAttribute(state.colors, 3));\n          material.vertexColors = true;\n        }\n\n        const points = new Points(buffergeometry, material);\n        container.add(points);\n      }\n    }\n\n    return container;\n  }\n\n}\n\nexport { OBJLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/OBJLoader.js"],"names":["Vector3","Loader","FileLoader","Group","BufferGeometry","Float32BufferAttribute","LineBasicMaterial","Material","PointsMaterial","MeshPhongMaterial","LineSegments","Points","Mesh","_object_pattern","_material_library_pattern","_material_use_pattern","_map_use_pattern","_vA","_vB","_vC","_ab","_cb","ParserState","state","objects","object","vertices","normals","colors","uvs","materials","materialLibraries","startObject","name","fromDeclaration","previousMaterial","currentMaterial","_finalize","geometry","hasUVIndices","smooth","startMaterial","name2","libraries","previous","inherited","groupCount","splice","index","material","length","mtllib","Array","isArray","groupStart","groupEnd","clone","cloned","bind","push","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","value","len","parseInt","parseNormalIndex","parseUVIndex","addVertex","a","b","c","src","dst","addVertexPoint","addVertexLine","addNormal","addFaceNormal","fromArray","subVectors","cross","normalize","x","y","z","addColor","addUV","addDefaultUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ia","ib","ic","nLen","uvLen","addPointGeometry","type","vi","l","addLineGeometry","uvi","OBJLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterials","indexOf","replace","lines","split","line","lineFirstChar","lineLength","result","trimLeft","i","trim","charAt","data","parseFloat","lineData","substr","vertexData","faceVertices","j","jl","vertex","vertexParts","v1","v2","v3","lineParts","substring","lineVertices","lineUVs","li","llen","parts","pointData","exec","test","warn","toLowerCase","container","concat","hasPrimitives","isLine","isPoints","hasVertexColors","buffergeometry","setAttribute","createdMaterials","miLen","sourceMaterial","materialHash","create","materialLine","prototype","copy","call","color","materialPoints","size","sizeAttenuation","map","flatShading","vertexColors","mesh","addGroup","add","points"],"mappings":"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","sourcesContent":["import { Vector3, Loader, FileLoader, Group, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Material, PointsMaterial, MeshPhongMaterial, LineSegments, Points, Mesh } from \"three\";\nconst _object_pattern = /^[og]\\s*(.+)?/;\nconst _material_library_pattern = /^mtllib /;\nconst _material_use_pattern = /^usemtl /;\nconst _map_use_pattern = /^usemap /;\nconst _vA = /* @__PURE__ */ new Vector3();\nconst _vB = /* @__PURE__ */ new Vector3();\nconst _vC = /* @__PURE__ */ new Vector3();\nconst _ab = /* @__PURE__ */ new Vector3();\nconst _cb = /* @__PURE__ */ new Vector3();\nfunction ParserState() {\n  const state = {\n    objects: [],\n    object: {},\n    vertices: [],\n    normals: [],\n    colors: [],\n    uvs: [],\n    materials: {},\n    materialLibraries: [],\n    startObject: function(name, fromDeclaration) {\n      if (this.object && this.object.fromDeclaration === false) {\n        this.object.name = name;\n        this.object.fromDeclaration = fromDeclaration !== false;\n        return;\n      }\n      const previousMaterial = this.object && typeof this.object.currentMaterial === \"function\" ? this.object.currentMaterial() : void 0;\n      if (this.object && typeof this.object._finalize === \"function\") {\n        this.object._finalize(true);\n      }\n      this.object = {\n        name: name || \"\",\n        fromDeclaration: fromDeclaration !== false,\n        geometry: {\n          vertices: [],\n          normals: [],\n          colors: [],\n          uvs: [],\n          hasUVIndices: false\n        },\n        materials: [],\n        smooth: true,\n        startMaterial: function(name2, libraries) {\n          const previous = this._finalize(false);\n          if (previous && (previous.inherited || previous.groupCount <= 0)) {\n            this.materials.splice(previous.index, 1);\n          }\n          const material = {\n            index: this.materials.length,\n            name: name2 || \"\",\n            mtllib: Array.isArray(libraries) && libraries.length > 0 ? libraries[libraries.length - 1] : \"\",\n            smooth: previous !== void 0 ? previous.smooth : this.smooth,\n            groupStart: previous !== void 0 ? previous.groupEnd : 0,\n            groupEnd: -1,\n            groupCount: -1,\n            inherited: false,\n            clone: function(index) {\n              const cloned = {\n                index: typeof index === \"number\" ? index : this.index,\n                name: this.name,\n                mtllib: this.mtllib,\n                smooth: this.smooth,\n                groupStart: 0,\n                groupEnd: -1,\n                groupCount: -1,\n                inherited: false\n              };\n              cloned.clone = this.clone.bind(cloned);\n              return cloned;\n            }\n          };\n          this.materials.push(material);\n          return material;\n        },\n        currentMaterial: function() {\n          if (this.materials.length > 0) {\n            return this.materials[this.materials.length - 1];\n          }\n          return void 0;\n        },\n        _finalize: function(end) {\n          const lastMultiMaterial = this.currentMaterial();\n          if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n            lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n            lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n            lastMultiMaterial.inherited = false;\n          }\n          if (end && this.materials.length > 1) {\n            for (let mi = this.materials.length - 1; mi >= 0; mi--) {\n              if (this.materials[mi].groupCount <= 0) {\n                this.materials.splice(mi, 1);\n              }\n            }\n          }\n          if (end && this.materials.length === 0) {\n            this.materials.push({\n              name: \"\",\n              smooth: this.smooth\n            });\n          }\n          return lastMultiMaterial;\n        }\n      };\n      if (previousMaterial && previousMaterial.name && typeof previousMaterial.clone === \"function\") {\n        const declared = previousMaterial.clone(0);\n        declared.inherited = true;\n        this.object.materials.push(declared);\n      }\n      this.objects.push(this.object);\n    },\n    finalize: function() {\n      if (this.object && typeof this.object._finalize === \"function\") {\n        this.object._finalize(true);\n      }\n    },\n    parseVertexIndex: function(value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseNormalIndex: function(value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 3) * 3;\n    },\n    parseUVIndex: function(value, len) {\n      const index = parseInt(value, 10);\n      return (index >= 0 ? index - 1 : index + len / 2) * 2;\n    },\n    addVertex: function(a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addVertexPoint: function(a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addVertexLine: function(a) {\n      const src = this.vertices;\n      const dst = this.object.geometry.vertices;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n    },\n    addNormal: function(a, b, c) {\n      const src = this.normals;\n      const dst = this.object.geometry.normals;\n      dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addFaceNormal: function(a, b, c) {\n      const src = this.vertices;\n      const dst = this.object.geometry.normals;\n      _vA.fromArray(src, a);\n      _vB.fromArray(src, b);\n      _vC.fromArray(src, c);\n      _cb.subVectors(_vC, _vB);\n      _ab.subVectors(_vA, _vB);\n      _cb.cross(_ab);\n      _cb.normalize();\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n      dst.push(_cb.x, _cb.y, _cb.z);\n    },\n    addColor: function(a, b, c) {\n      const src = this.colors;\n      const dst = this.object.geometry.colors;\n      if (src[a] !== void 0)\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      if (src[b] !== void 0)\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n      if (src[c] !== void 0)\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n    },\n    addUV: function(a, b, c) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n      dst.push(src[b + 0], src[b + 1]);\n      dst.push(src[c + 0], src[c + 1]);\n    },\n    addDefaultUV: function() {\n      const dst = this.object.geometry.uvs;\n      dst.push(0, 0);\n      dst.push(0, 0);\n      dst.push(0, 0);\n    },\n    addUVLine: function(a) {\n      const src = this.uvs;\n      const dst = this.object.geometry.uvs;\n      dst.push(src[a + 0], src[a + 1]);\n    },\n    addFace: function(a, b, c, ua, ub, uc, na, nb, nc) {\n      const vLen = this.vertices.length;\n      let ia = this.parseVertexIndex(a, vLen);\n      let ib = this.parseVertexIndex(b, vLen);\n      let ic = this.parseVertexIndex(c, vLen);\n      this.addVertex(ia, ib, ic);\n      this.addColor(ia, ib, ic);\n      if (na !== void 0 && na !== \"\") {\n        const nLen = this.normals.length;\n        ia = this.parseNormalIndex(na, nLen);\n        ib = this.parseNormalIndex(nb, nLen);\n        ic = this.parseNormalIndex(nc, nLen);\n        this.addNormal(ia, ib, ic);\n      } else {\n        this.addFaceNormal(ia, ib, ic);\n      }\n      if (ua !== void 0 && ua !== \"\") {\n        const uvLen = this.uvs.length;\n        ia = this.parseUVIndex(ua, uvLen);\n        ib = this.parseUVIndex(ub, uvLen);\n        ic = this.parseUVIndex(uc, uvLen);\n        this.addUV(ia, ib, ic);\n        this.object.geometry.hasUVIndices = true;\n      } else {\n        this.addDefaultUV();\n      }\n    },\n    addPointGeometry: function(vertices) {\n      this.object.geometry.type = \"Points\";\n      const vLen = this.vertices.length;\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        const index = this.parseVertexIndex(vertices[vi], vLen);\n        this.addVertexPoint(index);\n        this.addColor(index);\n      }\n    },\n    addLineGeometry: function(vertices, uvs) {\n      this.object.geometry.type = \"Line\";\n      const vLen = this.vertices.length;\n      const uvLen = this.uvs.length;\n      for (let vi = 0, l = vertices.length; vi < l; vi++) {\n        this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n      }\n      for (let uvi = 0, l = uvs.length; uvi < l; uvi++) {\n        this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n      }\n    }\n  };\n  state.startObject(\"\", false);\n  return state;\n}\nclass OBJLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.materials = null;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  setMaterials(materials) {\n    this.materials = materials;\n    return this;\n  }\n  parse(text) {\n    const state = new ParserState();\n    if (text.indexOf(\"\\r\\n\") !== -1) {\n      text = text.replace(/\\r\\n/g, \"\\n\");\n    }\n    if (text.indexOf(\"\\\\\\n\") !== -1) {\n      text = text.replace(/\\\\\\n/g, \"\");\n    }\n    const lines = text.split(\"\\n\");\n    let line = \"\", lineFirstChar = \"\";\n    let lineLength = 0;\n    let result = [];\n    const trimLeft = typeof \"\".trimLeft === \"function\";\n    for (let i = 0, l = lines.length; i < l; i++) {\n      line = lines[i];\n      line = trimLeft ? line.trimLeft() : line.trim();\n      lineLength = line.length;\n      if (lineLength === 0)\n        continue;\n      lineFirstChar = line.charAt(0);\n      if (lineFirstChar === \"#\")\n        continue;\n      if (lineFirstChar === \"v\") {\n        const data = line.split(/\\s+/);\n        switch (data[0]) {\n          case \"v\":\n            state.vertices.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            if (data.length >= 7) {\n              state.colors.push(parseFloat(data[4]), parseFloat(data[5]), parseFloat(data[6]));\n            } else {\n              state.colors.push(void 0, void 0, void 0);\n            }\n            break;\n          case \"vn\":\n            state.normals.push(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n            break;\n          case \"vt\":\n            state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n            break;\n        }\n      } else if (lineFirstChar === \"f\") {\n        const lineData = line.substr(1).trim();\n        const vertexData = lineData.split(/\\s+/);\n        const faceVertices = [];\n        for (let j = 0, jl = vertexData.length; j < jl; j++) {\n          const vertex = vertexData[j];\n          if (vertex.length > 0) {\n            const vertexParts = vertex.split(\"/\");\n            faceVertices.push(vertexParts);\n          }\n        }\n        const v1 = faceVertices[0];\n        for (let j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n          const v2 = faceVertices[j];\n          const v3 = faceVertices[j + 1];\n          state.addFace(v1[0], v2[0], v3[0], v1[1], v2[1], v3[1], v1[2], v2[2], v3[2]);\n        }\n      } else if (lineFirstChar === \"l\") {\n        const lineParts = line.substring(1).trim().split(\" \");\n        let lineVertices = [];\n        const lineUVs = [];\n        if (line.indexOf(\"/\") === -1) {\n          lineVertices = lineParts;\n        } else {\n          for (let li = 0, llen = lineParts.length; li < llen; li++) {\n            const parts = lineParts[li].split(\"/\");\n            if (parts[0] !== \"\")\n              lineVertices.push(parts[0]);\n            if (parts[1] !== \"\")\n              lineUVs.push(parts[1]);\n          }\n        }\n        state.addLineGeometry(lineVertices, lineUVs);\n      } else if (lineFirstChar === \"p\") {\n        const lineData = line.substr(1).trim();\n        const pointData = lineData.split(\" \");\n        state.addPointGeometry(pointData);\n      } else if ((result = _object_pattern.exec(line)) !== null) {\n        const name = (\" \" + result[0].substr(1).trim()).substr(1);\n        state.startObject(name);\n      } else if (_material_use_pattern.test(line)) {\n        state.object.startMaterial(line.substring(7).trim(), state.materialLibraries);\n      } else if (_material_library_pattern.test(line)) {\n        state.materialLibraries.push(line.substring(7).trim());\n      } else if (_map_use_pattern.test(line)) {\n        console.warn(\n          'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.'\n        );\n      } else if (lineFirstChar === \"s\") {\n        result = line.split(\" \");\n        if (result.length > 1) {\n          const value = result[1].trim().toLowerCase();\n          state.object.smooth = value !== \"0\" && value !== \"off\";\n        } else {\n          state.object.smooth = true;\n        }\n        const material = state.object.currentMaterial();\n        if (material)\n          material.smooth = state.object.smooth;\n      } else {\n        if (line === \"\\0\")\n          continue;\n        console.warn('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n      }\n    }\n    state.finalize();\n    const container = new Group();\n    container.materialLibraries = [].concat(state.materialLibraries);\n    const hasPrimitives = !(state.objects.length === 1 && state.objects[0].geometry.vertices.length === 0);\n    if (hasPrimitives === true) {\n      for (let i = 0, l = state.objects.length; i < l; i++) {\n        const object = state.objects[i];\n        const geometry = object.geometry;\n        const materials = object.materials;\n        const isLine = geometry.type === \"Line\";\n        const isPoints = geometry.type === \"Points\";\n        let hasVertexColors = false;\n        if (geometry.vertices.length === 0)\n          continue;\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute(\"position\", new Float32BufferAttribute(geometry.vertices, 3));\n        if (geometry.normals.length > 0) {\n          buffergeometry.setAttribute(\"normal\", new Float32BufferAttribute(geometry.normals, 3));\n        }\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.setAttribute(\"color\", new Float32BufferAttribute(geometry.colors, 3));\n        }\n        if (geometry.hasUVIndices === true) {\n          buffergeometry.setAttribute(\"uv\", new Float32BufferAttribute(geometry.uvs, 2));\n        }\n        const createdMaterials = [];\n        for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          const sourceMaterial = materials[mi];\n          const materialHash = sourceMaterial.name + \"_\" + sourceMaterial.smooth + \"_\" + hasVertexColors;\n          let material = state.materials[materialHash];\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name);\n            if (isLine && material && !(material instanceof LineBasicMaterial)) {\n              const materialLine = new LineBasicMaterial();\n              Material.prototype.copy.call(materialLine, material);\n              materialLine.color.copy(material.color);\n              material = materialLine;\n            } else if (isPoints && material && !(material instanceof PointsMaterial)) {\n              const materialPoints = new PointsMaterial({ size: 10, sizeAttenuation: false });\n              Material.prototype.copy.call(materialPoints, material);\n              materialPoints.color.copy(material.color);\n              materialPoints.map = material.map;\n              material = materialPoints;\n            }\n          }\n          if (material === void 0) {\n            if (isLine) {\n              material = new LineBasicMaterial();\n            } else if (isPoints) {\n              material = new PointsMaterial({ size: 1, sizeAttenuation: false });\n            } else {\n              material = new MeshPhongMaterial();\n            }\n            material.name = sourceMaterial.name;\n            material.flatShading = sourceMaterial.smooth ? false : true;\n            material.vertexColors = hasVertexColors;\n            state.materials[materialHash] = material;\n          }\n          createdMaterials.push(material);\n        }\n        let mesh;\n        if (createdMaterials.length > 1) {\n          for (let mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            const sourceMaterial = materials[mi];\n            buffergeometry.addGroup(sourceMaterial.groupStart, sourceMaterial.groupCount, mi);\n          }\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n    } else {\n      if (state.vertices.length > 0) {\n        const material = new PointsMaterial({ size: 1, sizeAttenuation: false });\n        const buffergeometry = new BufferGeometry();\n        buffergeometry.setAttribute(\"position\", new Float32BufferAttribute(state.vertices, 3));\n        if (state.colors.length > 0 && state.colors[0] !== void 0) {\n          buffergeometry.setAttribute(\"color\", new Float32BufferAttribute(state.colors, 3));\n          material.vertexColors = true;\n        }\n        const points = new Points(buffergeometry, material);\n        container.add(points);\n      }\n    }\n    return container;\n  }\n}\nexport {\n  OBJLoader\n};\n"]},"metadata":{},"sourceType":"module"}