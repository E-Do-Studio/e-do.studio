{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from \"three\";\n\nvar DeviceOrientationControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(DeviceOrientationControls, _EventDispatcher);\n\n  var _super = _createSuper(DeviceOrientationControls);\n\n  // radians\n  function DeviceOrientationControls(object) {\n    var _this;\n\n    _classCallCheck(this, DeviceOrientationControls);\n\n    _this = _super.call(this);\n\n    __publicField(_assertThisInitialized(_this), \"object\");\n\n    __publicField(_assertThisInitialized(_this), \"changeEvent\", {\n      type: \"change\"\n    });\n\n    __publicField(_assertThisInitialized(_this), \"EPS\", 1e-6);\n\n    __publicField(_assertThisInitialized(_this), \"enabled\", true);\n\n    __publicField(_assertThisInitialized(_this), \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n\n    __publicField(_assertThisInitialized(_this), \"screenOrientation\", 0);\n\n    __publicField(_assertThisInitialized(_this), \"alphaOffset\", 0);\n\n    __publicField(_assertThisInitialized(_this), \"onDeviceOrientationChangeEvent\", function (event) {\n      _this.deviceOrientation = event;\n    });\n\n    __publicField(_assertThisInitialized(_this), \"onScreenOrientationChangeEvent\", function () {\n      _this.screenOrientation = window.orientation || 0;\n    }); // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\n    __publicField(_assertThisInitialized(_this), \"zee\", new Vector3(0, 0, 1));\n\n    __publicField(_assertThisInitialized(_this), \"euler\", new Euler());\n\n    __publicField(_assertThisInitialized(_this), \"q0\", new Quaternion());\n\n    __publicField(_assertThisInitialized(_this), \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5))); // - PI/2 around the x-axis\n\n\n    __publicField(_assertThisInitialized(_this), \"setObjectQuaternion\", function (quaternion, alpha, beta, gamma, orient) {\n      _this.euler.set(beta, alpha, -gamma, \"YXZ\");\n\n      quaternion.setFromEuler(_this.euler);\n      quaternion.multiply(_this.q1);\n      quaternion.multiply(_this.q0.setFromAxisAngle(_this.zee, -orient));\n    });\n\n    __publicField(_assertThisInitialized(_this), \"connect\", function () {\n      _this.onScreenOrientationChangeEvent();\n\n      if (window.DeviceOrientationEvent !== void 0 && // @ts-ignore\n      typeof window.DeviceOrientationEvent.requestPermission === \"function\") {\n        window.DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response == \"granted\") {\n            window.addEventListener(\"orientationchange\", _this.onScreenOrientationChangeEvent);\n            window.addEventListener(\"deviceorientation\", _this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(function (error) {\n          console.error(\"THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:\", error);\n        });\n      } else {\n        window.addEventListener(\"orientationchange\", _this.onScreenOrientationChangeEvent);\n        window.addEventListener(\"deviceorientation\", _this.onDeviceOrientationChangeEvent);\n      }\n\n      _this.enabled = true;\n    });\n\n    __publicField(_assertThisInitialized(_this), \"disconnect\", function () {\n      window.removeEventListener(\"orientationchange\", _this.onScreenOrientationChangeEvent);\n      window.removeEventListener(\"deviceorientation\", _this.onDeviceOrientationChangeEvent);\n      _this.enabled = false;\n    });\n\n    __publicField(_assertThisInitialized(_this), \"lastQuaternion\", new Quaternion());\n\n    __publicField(_assertThisInitialized(_this), \"update\", function () {\n      if (_this.enabled === false) return;\n      var device = _this.deviceOrientation;\n\n      if (device) {\n        var alpha = device.alpha ? MathUtils.degToRad(device.alpha) + _this.alphaOffset : 0;\n        var beta = device.beta ? MathUtils.degToRad(device.beta) : 0;\n        var gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0;\n        var orient = _this.screenOrientation ? MathUtils.degToRad(_this.screenOrientation) : 0;\n\n        _this.setObjectQuaternion(_this.object.quaternion, alpha, beta, gamma, orient);\n\n        if (8 * (1 - _this.lastQuaternion.dot(_this.object.quaternion)) > _this.EPS) {\n          _this.lastQuaternion.copy(_this.object.quaternion);\n\n          _this.dispatchEvent(_this.changeEvent);\n        }\n      }\n    });\n\n    __publicField(_assertThisInitialized(_this), \"dispose\", function () {\n      return _this.disconnect();\n    });\n\n    _this.object = object;\n\n    _this.object.rotation.reorder(\"YXZ\");\n\n    _this.connect();\n\n    return _this;\n  }\n\n  return DeviceOrientationControls;\n}(EventDispatcher);\n\nexport { DeviceOrientationControls };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/controls/DeviceOrientationControls.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","EventDispatcher","Vector3","Euler","Quaternion","MathUtils","DeviceOrientationControls","object","type","alpha","beta","gamma","event","deviceOrientation","screenOrientation","window","orientation","Math","sqrt","quaternion","orient","euler","set","setFromEuler","multiply","q1","q0","setFromAxisAngle","zee","onScreenOrientationChangeEvent","DeviceOrientationEvent","requestPermission","then","response","addEventListener","onDeviceOrientationChangeEvent","catch","error","console","enabled","removeEventListener","device","degToRad","alphaOffset","setObjectQuaternion","lastQuaternion","dot","EPS","copy","dispatchEvent","changeEvent","disconnect","rotation","reorder","connect"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from \"three\";\nclass DeviceOrientationControls extends EventDispatcher {\n  // radians\n  constructor(object) {\n    super();\n    __publicField(this, \"object\");\n    __publicField(this, \"changeEvent\", { type: \"change\" });\n    __publicField(this, \"EPS\", 1e-6);\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"deviceOrientation\", { alpha: 0, beta: 0, gamma: 0 });\n    __publicField(this, \"screenOrientation\", 0);\n    __publicField(this, \"alphaOffset\", 0);\n    __publicField(this, \"onDeviceOrientationChangeEvent\", (event) => {\n      this.deviceOrientation = event;\n    });\n    __publicField(this, \"onScreenOrientationChangeEvent\", () => {\n      this.screenOrientation = window.orientation || 0;\n    });\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n    __publicField(this, \"zee\", new Vector3(0, 0, 1));\n    __publicField(this, \"euler\", new Euler());\n    __publicField(this, \"q0\", new Quaternion());\n    __publicField(this, \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n    // - PI/2 around the x-axis\n    __publicField(this, \"setObjectQuaternion\", (quaternion, alpha, beta, gamma, orient) => {\n      this.euler.set(beta, alpha, -gamma, \"YXZ\");\n      quaternion.setFromEuler(this.euler);\n      quaternion.multiply(this.q1);\n      quaternion.multiply(this.q0.setFromAxisAngle(this.zee, -orient));\n    });\n    __publicField(this, \"connect\", () => {\n      this.onScreenOrientationChangeEvent();\n      if (window.DeviceOrientationEvent !== void 0 && // @ts-ignore\n      typeof window.DeviceOrientationEvent.requestPermission === \"function\") {\n        window.DeviceOrientationEvent.requestPermission().then((response) => {\n          if (response == \"granted\") {\n            window.addEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n            window.addEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n          }\n        }).catch((error) => {\n          console.error(\"THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:\", error);\n        });\n      } else {\n        window.addEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n        window.addEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n      }\n      this.enabled = true;\n    });\n    __publicField(this, \"disconnect\", () => {\n      window.removeEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n      window.removeEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n      this.enabled = false;\n    });\n    __publicField(this, \"lastQuaternion\", new Quaternion());\n    __publicField(this, \"update\", () => {\n      if (this.enabled === false)\n        return;\n      const device = this.deviceOrientation;\n      if (device) {\n        const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + this.alphaOffset : 0;\n        const beta = device.beta ? MathUtils.degToRad(device.beta) : 0;\n        const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0;\n        const orient = this.screenOrientation ? MathUtils.degToRad(this.screenOrientation) : 0;\n        this.setObjectQuaternion(this.object.quaternion, alpha, beta, gamma, orient);\n        if (8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n          this.lastQuaternion.copy(this.object.quaternion);\n          this.dispatchEvent(this.changeEvent);\n        }\n      }\n    });\n    __publicField(this, \"dispose\", () => this.disconnect());\n    this.object = object;\n    this.object.rotation.reorder(\"YXZ\");\n    this.connect();\n  }\n}\nexport {\n  DeviceOrientationControls\n};\n"]},"metadata":{},"sourceType":"module"}