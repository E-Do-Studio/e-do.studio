{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Color, UniformsUtils, ShaderMaterial, CustomBlending, AddEquation, OneFactor, SrcAlphaFactor, WebGLRenderTarget, HalfFloatType } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar SSAARenderPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SSAARenderPass, _Pass);\n\n  var _super = _createSuper(SSAARenderPass);\n\n  function SSAARenderPass(scene, camera, clearColor, clearAlpha) {\n    var _this;\n\n    _classCallCheck(this, SSAARenderPass);\n\n    _this = _super.call(this);\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.sampleLevel = 4;\n    _this.unbiased = true;\n    _this.clearColor = clearColor !== void 0 ? clearColor : 0;\n    _this.clearAlpha = clearAlpha !== void 0 ? clearAlpha : 0;\n    _this._oldClearColor = new Color();\n    var copyShader = CopyShader;\n    _this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: _this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      // do not use AdditiveBlending because it mixes the alpha channel instead of adding\n      blending: CustomBlending,\n      blendEquation: AddEquation,\n      blendDst: OneFactor,\n      blendDstAlpha: OneFactor,\n      blendSrc: SrcAlphaFactor,\n      blendSrcAlpha: OneFactor\n    });\n    _this.fsQuad = new FullScreenQuad(_this.copyMaterial);\n    return _this;\n  }\n\n  _createClass(SSAARenderPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.sampleRenderTarget) {\n        this.sampleRenderTarget.dispose();\n        this.sampleRenderTarget = null;\n      }\n\n      this.copyMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      if (this.sampleRenderTarget) this.sampleRenderTarget.setSize(width, height);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      if (!this.sampleRenderTarget) {\n        this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n          type: HalfFloatType\n        });\n        this.sampleRenderTarget.texture.name = \"SSAARenderPass.sample\";\n      }\n\n      var jitterOffsets = _JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];\n\n      var autoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.getClearColor(this._oldClearColor);\n      var oldClearAlpha = renderer.getClearAlpha();\n      var baseSampleWeight = 1 / jitterOffsets.length;\n      var roundingRange = 1 / 32;\n      this.copyUniforms[\"tDiffuse\"].value = this.sampleRenderTarget.texture;\n      var viewOffset = {\n        fullWidth: readBuffer.width,\n        fullHeight: readBuffer.height,\n        offsetX: 0,\n        offsetY: 0,\n        width: readBuffer.width,\n        height: readBuffer.height\n      };\n      var originalViewOffset = Object.assign({}, this.camera.view);\n      if (originalViewOffset.enabled) Object.assign(viewOffset, originalViewOffset);\n\n      for (var i = 0; i < jitterOffsets.length; i++) {\n        var jitterOffset = jitterOffsets[i];\n\n        if (this.camera.setViewOffset) {\n          this.camera.setViewOffset(viewOffset.fullWidth, viewOffset.fullHeight, viewOffset.offsetX + jitterOffset[0] * 0.0625, viewOffset.offsetY + jitterOffset[1] * 0.0625, // 0.0625 = 1 / 16\n          viewOffset.width, viewOffset.height);\n        }\n\n        var sampleWeight = baseSampleWeight;\n\n        if (this.unbiased) {\n          var uniformCenteredDistribution = -0.5 + (i + 0.5) / jitterOffsets.length;\n          sampleWeight += roundingRange * uniformCenteredDistribution;\n        }\n\n        this.copyUniforms[\"opacity\"].value = sampleWeight;\n        renderer.setClearColor(this.clearColor, this.clearAlpha);\n        renderer.setRenderTarget(this.sampleRenderTarget);\n        renderer.clear();\n        renderer.render(this.scene, this.camera);\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n\n        if (i === 0) {\n          renderer.setClearColor(0, 0);\n          renderer.clear();\n        }\n\n        this.fsQuad.render(renderer);\n      }\n\n      if (this.camera.setViewOffset && originalViewOffset.enabled) {\n        this.camera.setViewOffset(originalViewOffset.fullWidth, originalViewOffset.fullHeight, originalViewOffset.offsetX, originalViewOffset.offsetY, originalViewOffset.width, originalViewOffset.height);\n      } else if (this.camera.clearViewOffset) {\n        this.camera.clearViewOffset();\n      }\n\n      renderer.autoClear = autoClear;\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n  }]);\n\n  return SSAARenderPass;\n}(Pass);\n\nvar _JitterVectors = [[[0, 0]], [[4, 4], [-4, -4]], [[-2, -6], [6, -2], [-6, 2], [2, 6]], [[1, -3], [-1, 3], [5, 1], [-3, -5], [-5, 5], [-7, -1], [3, 7], [7, -7]], [[1, 1], [-1, -3], [-3, 2], [4, -1], [-5, -2], [2, 5], [5, 3], [3, -5], [-2, 6], [0, -7], [-4, -6], [-6, 4], [-8, 0], [7, -4], [6, 7], [-7, -8]], [[-4, -7], [-7, -5], [-3, -5], [-5, -4], [-1, -4], [-2, -2], [-6, -1], [-4, 0], [-7, 1], [-1, 2], [-6, 3], [-3, 3], [-7, 6], [-3, 6], [-5, 7], [-1, 7], [5, -7], [1, -6], [6, -5], [4, -4], [2, -3], [7, -2], [1, -1], [4, -1], [2, 1], [6, 2], [0, 4], [4, 4], [2, 5], [7, 5], [5, 6], [3, 7]]];\nexport { SSAARenderPass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/SSAARenderPass.js"],"names":["Color","UniformsUtils","ShaderMaterial","CustomBlending","AddEquation","OneFactor","SrcAlphaFactor","WebGLRenderTarget","HalfFloatType","Pass","FullScreenQuad","CopyShader","SSAARenderPass","scene","camera","clearColor","clearAlpha","sampleLevel","unbiased","_oldClearColor","copyShader","copyUniforms","clone","uniforms","copyMaterial","vertexShader","fragmentShader","transparent","depthTest","depthWrite","blending","blendEquation","blendDst","blendDstAlpha","blendSrc","blendSrcAlpha","fsQuad","sampleRenderTarget","dispose","width","height","setSize","renderer","writeBuffer","readBuffer","type","texture","name","jitterOffsets","_JitterVectors","Math","max","min","autoClear","getClearColor","oldClearAlpha","getClearAlpha","baseSampleWeight","length","roundingRange","value","viewOffset","fullWidth","fullHeight","offsetX","offsetY","originalViewOffset","Object","assign","view","enabled","i","jitterOffset","setViewOffset","sampleWeight","uniformCenteredDistribution","setClearColor","setRenderTarget","clear","render","renderToScreen","clearViewOffset"],"mappings":"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","sourcesContent":["import { Color, UniformsUtils, ShaderMaterial, CustomBlending, AddEquation, OneFactor, SrcAlphaFactor, WebGLRenderTarget, HalfFloatType } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nclass SSAARenderPass extends Pass {\n  constructor(scene, camera, clearColor, clearAlpha) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.sampleLevel = 4;\n    this.unbiased = true;\n    this.clearColor = clearColor !== void 0 ? clearColor : 0;\n    this.clearAlpha = clearAlpha !== void 0 ? clearAlpha : 0;\n    this._oldClearColor = new Color();\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      // do not use AdditiveBlending because it mixes the alpha channel instead of adding\n      blending: CustomBlending,\n      blendEquation: AddEquation,\n      blendDst: OneFactor,\n      blendDstAlpha: OneFactor,\n      blendSrc: SrcAlphaFactor,\n      blendSrcAlpha: OneFactor\n    });\n    this.fsQuad = new FullScreenQuad(this.copyMaterial);\n  }\n  dispose() {\n    if (this.sampleRenderTarget) {\n      this.sampleRenderTarget.dispose();\n      this.sampleRenderTarget = null;\n    }\n    this.copyMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    if (this.sampleRenderTarget)\n      this.sampleRenderTarget.setSize(width, height);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (!this.sampleRenderTarget) {\n      this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, { type: HalfFloatType });\n      this.sampleRenderTarget.texture.name = \"SSAARenderPass.sample\";\n    }\n    const jitterOffsets = _JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];\n    const autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const baseSampleWeight = 1 / jitterOffsets.length;\n    const roundingRange = 1 / 32;\n    this.copyUniforms[\"tDiffuse\"].value = this.sampleRenderTarget.texture;\n    const viewOffset = {\n      fullWidth: readBuffer.width,\n      fullHeight: readBuffer.height,\n      offsetX: 0,\n      offsetY: 0,\n      width: readBuffer.width,\n      height: readBuffer.height\n    };\n    const originalViewOffset = Object.assign({}, this.camera.view);\n    if (originalViewOffset.enabled)\n      Object.assign(viewOffset, originalViewOffset);\n    for (let i = 0; i < jitterOffsets.length; i++) {\n      const jitterOffset = jitterOffsets[i];\n      if (this.camera.setViewOffset) {\n        this.camera.setViewOffset(\n          viewOffset.fullWidth,\n          viewOffset.fullHeight,\n          viewOffset.offsetX + jitterOffset[0] * 0.0625,\n          viewOffset.offsetY + jitterOffset[1] * 0.0625,\n          // 0.0625 = 1 / 16\n          viewOffset.width,\n          viewOffset.height\n        );\n      }\n      let sampleWeight = baseSampleWeight;\n      if (this.unbiased) {\n        const uniformCenteredDistribution = -0.5 + (i + 0.5) / jitterOffsets.length;\n        sampleWeight += roundingRange * uniformCenteredDistribution;\n      }\n      this.copyUniforms[\"opacity\"].value = sampleWeight;\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n      renderer.setRenderTarget(this.sampleRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n      if (i === 0) {\n        renderer.setClearColor(0, 0);\n        renderer.clear();\n      }\n      this.fsQuad.render(renderer);\n    }\n    if (this.camera.setViewOffset && originalViewOffset.enabled) {\n      this.camera.setViewOffset(\n        originalViewOffset.fullWidth,\n        originalViewOffset.fullHeight,\n        originalViewOffset.offsetX,\n        originalViewOffset.offsetY,\n        originalViewOffset.width,\n        originalViewOffset.height\n      );\n    } else if (this.camera.clearViewOffset) {\n      this.camera.clearViewOffset();\n    }\n    renderer.autoClear = autoClear;\n    renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n  }\n}\nconst _JitterVectors = [\n  [\n    [0, 0]\n  ],\n  [\n    [4, 4],\n    [-4, -4]\n  ],\n  [\n    [-2, -6],\n    [6, -2],\n    [-6, 2],\n    [2, 6]\n  ],\n  [\n    [1, -3],\n    [-1, 3],\n    [5, 1],\n    [-3, -5],\n    [-5, 5],\n    [-7, -1],\n    [3, 7],\n    [7, -7]\n  ],\n  [\n    [1, 1],\n    [-1, -3],\n    [-3, 2],\n    [4, -1],\n    [-5, -2],\n    [2, 5],\n    [5, 3],\n    [3, -5],\n    [-2, 6],\n    [0, -7],\n    [-4, -6],\n    [-6, 4],\n    [-8, 0],\n    [7, -4],\n    [6, 7],\n    [-7, -8]\n  ],\n  [\n    [-4, -7],\n    [-7, -5],\n    [-3, -5],\n    [-5, -4],\n    [-1, -4],\n    [-2, -2],\n    [-6, -1],\n    [-4, 0],\n    [-7, 1],\n    [-1, 2],\n    [-6, 3],\n    [-3, 3],\n    [-7, 6],\n    [-3, 6],\n    [-5, 7],\n    [-1, 7],\n    [5, -7],\n    [1, -6],\n    [6, -5],\n    [4, -4],\n    [2, -3],\n    [7, -2],\n    [1, -1],\n    [4, -1],\n    [2, 1],\n    [6, 2],\n    [0, 4],\n    [4, 4],\n    [2, 5],\n    [7, 5],\n    [5, 6],\n    [3, 7]\n  ]\n];\nexport {\n  SSAARenderPass\n};\n"]},"metadata":{},"sourceType":"module"}