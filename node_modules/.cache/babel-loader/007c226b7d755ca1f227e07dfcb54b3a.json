{"ast":null,"code":"'use strict';\n\nvar packageInfo = require('../package.json');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar os = require('os');\n\nvar crypto = require('crypto');\n\nvar DataStream = require('./data-stream');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar shared = require('nodemailer-shared');\n\nmodule.exports = SMTPConnection;\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 25 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\n\nfunction SMTPConnection(options) {\n  EventEmitter.call(this);\n  this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n  this.stage = 'init';\n  this.options = options || {};\n  this.options.port = this.options.port || (this.options.secure ? 465 : 25);\n  this.options.host = this.options.host || 'localhost';\n  this.options.secure = !!this.options.secure;\n  this.options.name = this.options.name || this._getHostname();\n  this.logger = shared.getLogger(this.options);\n  /**\n   * Expose version nr, just for the reference\n   * @type {String}\n   */\n\n  this.version = packageInfo.version;\n  /**\n   * If true, then the user is authenticated\n   * @type {Boolean}\n   */\n\n  this.authenticated = false;\n  /**\n   * If set to true, this instance is no longer active\n   * @private\n   */\n\n  this.destroyed = false;\n  /**\n   * Defines if the current connection is secure or not. If not,\n   * STARTTLS can be used if available\n   * @private\n   */\n\n  this.secure = false;\n  /**\n   * Store incomplete messages coming from the server\n   * @private\n   */\n\n  this._remainder = '';\n  /**\n   * Unprocessed responses from the server\n   * @type {Array}\n   */\n\n  this._responseQueue = [];\n  /**\n   * The socket connecting to the server\n   * @publick\n   */\n\n  this._socket = false;\n  /**\n   * Lists supported auth mechanisms\n   * @private\n   */\n\n  this._supportedAuth = [];\n  /**\n   * Function to run if a data chunk comes from the server\n   * @private\n   */\n\n  this._currentAction = false;\n  /**\n   * Timeout variable for waiting the greeting\n   * @private\n   */\n\n  this._greetingTimeout = false;\n  /**\n   * Timeout variable for waiting the connection to start\n   * @private\n   */\n\n  this._connectionTimeout = false;\n  /**\n   * If the socket is deemed already closed\n   * @private\n   */\n\n  this._destroyed = false;\n  /**\n   * If the socket is already being closed\n   * @private\n   */\n\n  this._closing = false;\n\n  if (this.options.secure) {\n    this.secure = true;\n  }\n}\n\nutil.inherits(SMTPConnection, EventEmitter);\n/**\n * Creates a connection to a SMTP server and sets up connection\n * listener\n */\n\nSMTPConnection.prototype.connect = function (connectCallback) {\n  if (typeof connectCallback === 'function') {\n    this.once('connect', function () {\n      this.logger.debug('[%s] SMTP handshake finished', this.id);\n      connectCallback();\n    }.bind(this));\n  }\n\n  var opts = {\n    port: this.options.port,\n    host: this.options.host\n  };\n\n  if (this.options.localAddress) {\n    opts.localAddress = this.options.localAddress;\n  }\n\n  if (this.options.socket) {\n    this._socket = this.options.socket;\n\n    this._socket.connect(this.options.port, this.options.host, this._onConnect.bind(this));\n  } else if (this.options.secure) {\n    if (this.options.tls) {\n      Object.keys(this.options.tls).forEach(function (key) {\n        opts[key] = this.options.tls[key];\n      }.bind(this));\n    }\n\n    this._socket = tls.connect(this.options.port, this.options.host, opts, this._onConnect.bind(this));\n  } else {\n    this._socket = net.connect(opts, this._onConnect.bind(this));\n  }\n\n  this._connectionTimeout = setTimeout(function () {\n    this._onError('Connection timeout', 'ETIMEDOUT');\n  }.bind(this), this.options.connectionTimeout || 60 * 1000);\n\n  this._socket.on('error', this._onError.bind(this));\n};\n/**\n * Sends QUIT\n */\n\n\nSMTPConnection.prototype.quit = function () {\n  this._sendCommand('QUIT');\n\n  this._currentAction = this.close;\n};\n/**\n * Closes the connection to the server\n */\n\n\nSMTPConnection.prototype.close = function () {\n  clearTimeout(this._connectionTimeout);\n  clearTimeout(this._greetingTimeout); // allow to run this function only once\n\n  if (this._closing) {\n    return;\n  }\n\n  this._closing = true;\n  var closeMethod = 'end';\n\n  if (this.stage === 'init') {\n    // Close the socket immediately when connection timed out\n    closeMethod = 'destroy';\n  }\n\n  this.logger.debug('[%s] Closing connection to the server using \"%s\"', this.id, closeMethod);\n  var socket = this._socket && this._socket.socket || this._socket;\n\n  if (socket && !socket.destroyed) {\n    try {\n      this._socket[closeMethod]();\n    } catch (E) {// just ignore\n    }\n  }\n\n  this._destroy();\n};\n/**\n * Authenticate user\n */\n\n\nSMTPConnection.prototype.login = function (authData, callback) {\n  this._auth = authData || {};\n  this._user = this._auth.xoauth2 && this._auth.xoauth2.options && this._auth.xoauth2.options.user || this._auth.user || '';\n  var authMethod;\n\n  if (this._auth.xoauth2 && this._supportedAuth.indexOf('XOAUTH2') >= 0) {\n    authMethod = 'XOAUTH2';\n  } else if (this.options.authMethod) {\n    authMethod = this.options.authMethod.toUpperCase().trim();\n  } else {\n    // use first supported\n    authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n  }\n\n  switch (authMethod) {\n    case 'XOAUTH2':\n      this._handleXOauth2Token(false, callback);\n\n      return;\n\n    case 'LOGIN':\n      this._currentAction = function (str) {\n        this._actionAUTH_LOGIN_USER(str, callback);\n      }.bind(this);\n\n      this._sendCommand('AUTH LOGIN');\n\n      return;\n\n    case 'PLAIN':\n      this._currentAction = function (str) {\n        this._actionAUTHComplete(str, callback);\n      }.bind(this);\n\n      this._sendCommand('AUTH PLAIN ' + new Buffer( //this._auth.user+'\\u0000'+\n      '\\u0000' + // skip authorization identity as it causes problems with some servers\n      this._auth.user + '\\u0000' + this._auth.pass, 'utf-8').toString('base64'));\n\n      return;\n\n    case 'CRAM-MD5':\n      this._currentAction = function (str) {\n        this._actionAUTH_CRAM_MD5(str, callback);\n      }.bind(this);\n\n      this._sendCommand('AUTH CRAM-MD5');\n\n      return;\n  }\n\n  return callback(this._formatError('Unknown authentication method \"' + authMethod + '\"', 'EAUTH'));\n};\n/**\n * Sends a message\n *\n * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n * @param {Object} message String, Buffer or a Stream\n * @param {Function} callback Callback to return once sending is completed\n */\n\n\nSMTPConnection.prototype.send = function (envelope, message, done) {\n  if (!message) {\n    return done(this._formatError('Empty message', 'EMESSAGE'));\n  } // ensure that callback is only called once\n\n\n  var returned = false;\n\n  var callback = function () {\n    if (returned) {\n      return;\n    }\n\n    returned = true;\n    done.apply(null, Array.prototype.slice.call(arguments));\n  };\n\n  if (typeof message.on === 'function') {\n    message.on('error', function (err) {\n      return callback(this._formatError(err, 'ESTREAM'));\n    }.bind(this));\n  }\n\n  this._setEnvelope(envelope, function (err, info) {\n    if (err) {\n      return callback(err);\n    }\n\n    var stream = this._createSendStream(function (err, str) {\n      if (err) {\n        return callback(err);\n      }\n\n      info.response = str;\n      return callback(null, info);\n    });\n\n    if (typeof message.pipe === 'function') {\n      message.pipe(stream);\n    } else {\n      stream.write(message);\n      stream.end();\n    }\n  }.bind(this));\n};\n/**\n * Connection listener that is run when the connection to\n * the server is opened\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onConnect = function () {\n  clearTimeout(this._connectionTimeout);\n  this.logger.info('[%s] %s established to %s:%s', this.id, this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n\n  if (this._destroyed) {\n    // Connection was established after we already had canceled it\n    this.close();\n    return;\n  }\n\n  this.stage = 'connected';\n\n  this._socket.on('data', this._onData.bind(this));\n\n  this._socket.once('close', this._onClose.bind(this));\n\n  this._socket.once('end', this._onEnd.bind(this));\n\n  this._socket.setTimeout(this.options.socketTimeout || 10 * 60 * 1000); // 10 min.\n\n\n  this._socket.on('timeout', this._onTimeout.bind(this));\n\n  this._greetingTimeout = setTimeout(function () {\n    // if still waiting for greeting, give up\n    if (this._socket && !this._destroyed && this._currentAction === this._actionGreeting) {\n      this._onError('Greeting never received', 'ETIMEDOUT');\n    }\n  }.bind(this), this.options.greetingTimeout || 10000);\n  this._currentAction = this._actionGreeting;\n};\n/**\n * 'data' listener for data coming from the server\n *\n * @event\n * @param {Buffer} chunk Data chunk coming from the server\n */\n\n\nSMTPConnection.prototype._onData = function (chunk) {\n  if (this._destroyed || !chunk || !chunk.length) {\n    return;\n  }\n\n  var data = (chunk || '').toString('binary');\n  var lines = (this._remainder + data).split(/\\r?\\n/);\n  var lastline;\n  this._remainder = lines.pop();\n\n  for (var i = 0, len = lines.length; i < len; i++) {\n    if (this._responseQueue.length) {\n      lastline = this._responseQueue[this._responseQueue.length - 1];\n\n      if (/^\\d+\\-/.test(lastline.split('\\n').pop())) {\n        this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n        continue;\n      }\n    }\n\n    this._responseQueue.push(lines[i]);\n  }\n\n  this._processResponse();\n};\n/**\n * 'error' listener for the socket\n *\n * @event\n * @param {Error} err Error object\n * @param {String} type Error name\n */\n\n\nSMTPConnection.prototype._onError = function (err, type, data) {\n  clearTimeout(this._connectionTimeout);\n  clearTimeout(this._greetingTimeout);\n\n  if (this._destroyed) {\n    // just ignore, already closed\n    // this might happen when a socket is canceled because of reached timeout\n    // but the socket timeout error itself receives only after\n    return;\n  }\n\n  err = this._formatError(err, type, data);\n  this.logger.error('[%s] %s', this.id, err.message);\n  this.emit('error', err);\n  this.close();\n};\n\nSMTPConnection.prototype._formatError = function (message, type, response) {\n  var err;\n\n  if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n    err = message;\n  } else {\n    err = new Error(message);\n  }\n\n  if (type && type !== 'Error') {\n    err.code = type;\n  }\n\n  if (response) {\n    err.response = response;\n    err.message += ': ' + response;\n  }\n\n  var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n\n  if (responseCode) {\n    err.responseCode = responseCode;\n  }\n\n  return err;\n};\n/**\n * 'close' listener for the socket\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onClose = function () {\n  this.logger.info('[%s] Connection closed', this.id);\n\n  if ([this._actionGreeting, this.close].indexOf(this._currentAction) < 0 && !this._destroyed) {\n    return this._onError(new Error('Connection closed unexpectedly'));\n  }\n\n  this._destroy();\n};\n/**\n * 'end' listener for the socket\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onEnd = function () {\n  this._destroy();\n};\n/**\n * 'timeout' listener for the socket\n *\n * @event\n */\n\n\nSMTPConnection.prototype._onTimeout = function () {\n  return this._onError(new Error('Timeout'), 'ETIMEOUT');\n};\n/**\n * Destroys the client, emits 'end'\n */\n\n\nSMTPConnection.prototype._destroy = function () {\n  if (this._destroyed) {\n    return;\n  }\n\n  this._destroyed = true;\n  this.emit('end');\n};\n/**\n * Upgrades the connection to TLS\n *\n * @param {Function} callback Callback function to run when the connection\n *        has been secured\n */\n\n\nSMTPConnection.prototype._upgradeConnection = function (callback) {\n  // do not remove all listeners or it breaks node v0.10 as there's\n  // apparently a 'finish' event set that would be cleared as well\n  // we can safely keep 'error', 'end', 'close' etc. events\n  this._socket.removeAllListeners('data'); // incoming data is going to be gibberish from this point onwards\n\n\n  this._socket.removeAllListeners('timeout'); // timeout will be re-set for the new socket object\n\n\n  var socketPlain = this._socket;\n  var opts = {\n    socket: this._socket,\n    host: this.options.host\n  };\n  Object.keys(this.options.tls || {}).forEach(function (key) {\n    opts[key] = this.options.tls[key];\n  }.bind(this));\n  this._socket = tls.connect(opts, function () {\n    this.secure = true;\n\n    this._socket.on('data', this._onData.bind(this));\n\n    socketPlain.removeAllListeners('close');\n    socketPlain.removeAllListeners('end');\n    return callback(null, true);\n  }.bind(this));\n\n  this._socket.on('error', this._onError.bind(this));\n\n  this._socket.once('close', this._onClose.bind(this));\n\n  this._socket.once('end', this._onEnd.bind(this));\n\n  this._socket.setTimeout(this.options.socketTimeout || 10 * 60 * 1000); // 10 min.\n\n\n  this._socket.on('timeout', this._onTimeout.bind(this));\n};\n/**\n * Processes queued responses from the server\n *\n * @param {Boolean} force If true, ignores _processing flag\n */\n\n\nSMTPConnection.prototype._processResponse = function () {\n  if (!this._responseQueue.length) {\n    return false;\n  }\n\n  var str = (this._responseQueue.shift() || '').toString();\n\n  if (/^\\d+\\-/.test(str.split('\\n').pop())) {\n    // keep waiting for the final part of multiline response\n    return;\n  }\n\n  if (this.options.debug) {\n    this.logger.debug('[%s] S: %s', this.id, str.replace(/\\r?\\n$/, ''));\n  }\n\n  if (!str.trim()) {\n    // skip unexpected empty lines\n    setImmediate(this._processResponse.bind(this, true));\n  }\n\n  var action = this._currentAction;\n  this._currentAction = null;\n\n  if (typeof action === 'function') {\n    action.call(this, str);\n    setImmediate(this._processResponse.bind(this, true));\n  } else {\n    return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str);\n  }\n};\n/**\n * Send a command to the server, append \\r\\n\n *\n * @param {String} str String to be sent to the server\n */\n\n\nSMTPConnection.prototype._sendCommand = function (str) {\n  if (this._destroyed) {\n    // Connection already closed, can't send any more data\n    return;\n  }\n\n  if (this._socket.destroyed) {\n    return this.close();\n  }\n\n  if (this.options.debug) {\n    this.logger.debug('[%s] C: %s', this.id, (str || '').toString().replace(/\\r?\\n$/, ''));\n  }\n\n  this._socket.write(new Buffer(str + '\\r\\n', 'utf-8'));\n};\n/**\n * Initiates a new message by submitting envelope data, starting with\n * MAIL FROM: command\n *\n * @param {Object} envelope Envelope object in the form of\n *        {from:'...', to:['...']}\n *        or\n *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n */\n\n\nSMTPConnection.prototype._setEnvelope = function (envelope, callback) {\n  this._envelope = envelope || {};\n  this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n  this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n    return (to && to.address || to || '').toString().trim();\n  });\n\n  if (!this._envelope.to.length) {\n    return callback(this._formatError('No recipients defined', 'EENVELOPE'));\n  }\n\n  if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n    return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE'));\n  }\n\n  for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n    if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n      return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE'));\n    }\n  } // clone the recipients array for latter manipulation\n\n\n  this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n  this._envelope.rejected = [];\n  this._envelope.accepted = [];\n\n  this._currentAction = function (str) {\n    this._actionMAIL(str, callback);\n  }.bind(this);\n\n  this._sendCommand('MAIL FROM:<' + this._envelope.from + '>');\n};\n\nSMTPConnection.prototype._createSendStream = function (callback) {\n  var dataStream = new DataStream();\n  var logStream;\n\n  this._currentAction = function (str) {\n    this._actionStream(str, callback);\n  }.bind(this);\n\n  dataStream.pipe(this._socket, {\n    end: false\n  });\n\n  if (this.options.debug) {\n    logStream = new PassThrough();\n    logStream.on('readable', function () {\n      var chunk;\n\n      while (chunk = logStream.read()) {\n        this.logger.debug('[%s] C: %s', this.id, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n      }\n    }.bind(this));\n    dataStream.pipe(logStream);\n  }\n\n  dataStream.once('end', function () {\n    this.logger.info('[%s] C: <%s bytes encoded mime message (source size %s bytes)>', this.id, dataStream.outByteCount, dataStream.inByteCount);\n  }.bind(this));\n  return dataStream;\n};\n/** ACTIONS **/\n\n/**\n * Will be run after the connection is created and the server sends\n * a greeting. If the incoming message starts with 220 initiate\n * SMTP session by sending EHLO command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionGreeting = function (str) {\n  clearTimeout(this._greetingTimeout);\n\n  if (str.substr(0, 3) !== '220') {\n    this._onError(new Error('Invalid greeting from server:\\n' + str), 'EPROTOCOL', str);\n\n    return;\n  }\n\n  if (this.options.lmtp) {\n    this._currentAction = this._actionLHLO;\n\n    this._sendCommand('LHLO ' + this.options.name);\n  } else {\n    this._currentAction = this._actionEHLO;\n\n    this._sendCommand('EHLO ' + this.options.name);\n  }\n};\n/**\n * Handles server response for LHLO command. If it yielded in\n * error, emit 'error', otherwise treat this as an EHLO response\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionLHLO = function (str) {\n  if (str.charAt(0) !== '2') {\n    this._onError(new Error('Invalid response for LHLO:\\n' + str), 'EPROTOCOL', str);\n\n    return;\n  }\n\n  this._actionEHLO(str);\n};\n/**\n * Handles server response for EHLO command. If it yielded in\n * error, try HELO instead, otherwise initiate TLS negotiation\n * if STARTTLS is supported by the server or move into the\n * authentication phase.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionEHLO = function (str) {\n  if (str.substr(0, 3) === '421') {\n    this._onError(new Error('Server terminates connection:\\n' + str), 'ECONNECTION', str);\n\n    return;\n  }\n\n  if (str.charAt(0) !== '2') {\n    if (this.options.requireTLS) {\n      this._onError(new Error('EHLO failed but HELO does not support required STARTTLS:\\n' + str), 'ECONNECTION', str);\n\n      return;\n    } // Try HELO instead\n\n\n    this._currentAction = this._actionHELO;\n\n    this._sendCommand('HELO ' + this.options.name);\n\n    return;\n  } // Detect if the server supports STARTTLS\n\n\n  if (!this.secure && !this.options.ignoreTLS && (/[ \\-]STARTTLS\\r?$/mi.test(str) || this.options.requireTLS)) {\n    this._sendCommand('STARTTLS');\n\n    this._currentAction = this._actionSTARTTLS;\n    return;\n  } // Detect if the server supports PLAIN auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i)) {\n    this._supportedAuth.push('PLAIN');\n  } // Detect if the server supports LOGIN auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i)) {\n    this._supportedAuth.push('LOGIN');\n  } // Detect if the server supports CRAM-MD5 auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i)) {\n    this._supportedAuth.push('CRAM-MD5');\n  } // Detect if the server supports XOAUTH2 auth\n\n\n  if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i)) {\n    this._supportedAuth.push('XOAUTH2');\n  }\n\n  this.emit('connect');\n};\n/**\n * Handles server response for HELO command. If it yielded in\n * error, emit 'error', otherwise move into the authentication phase.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionHELO = function (str) {\n  if (str.charAt(0) !== '2') {\n    this._onError(new Error('Invalid response for EHLO/HELO:\\n' + str), 'EPROTOCOL', str);\n\n    return;\n  }\n\n  this.emit('connect');\n};\n/**\n * Handles server response for STARTTLS command. If there's an error\n * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n * succeedes restart the EHLO\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionSTARTTLS = function (str) {\n  if (str.charAt(0) !== '2') {\n    this._onError(new Error('Error upgrading connection with STARTTLS', 'ETLS', str));\n\n    return;\n  }\n\n  this._upgradeConnection(function (err, secured) {\n    if (err) {\n      this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS');\n\n      return;\n    }\n\n    this.logger.info('[%s] Connection upgraded with STARTTLS', this.id);\n\n    if (secured) {\n      // restart session\n      this._currentAction = this._actionEHLO;\n\n      this._sendCommand('EHLO ' + this.options.name);\n    } else {\n      this.emit('connect');\n    }\n  }.bind(this));\n};\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n * response needs to be base64 encoded username.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_LOGIN_USER = function (str, callback) {\n  if (str !== '334 VXNlcm5hbWU6') {\n    callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str));\n    return;\n  }\n\n  this._currentAction = function (str) {\n    this._actionAUTH_LOGIN_PASS(str, callback);\n  }.bind(this);\n\n  this._sendCommand(new Buffer(this._auth.user + '', 'utf-8').toString('base64'));\n};\n/**\n * Handle the response for AUTH CRAM-MD5 command. We are expecting\n * '334 <challenge string>'. Data to be sent as response needs to be\n * base64 decoded challenge string, MD5 hashed using the password as\n * a HMAC key, prefixed by the username and a space, and finally all\n * base64 encoded again.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_CRAM_MD5 = function (str, callback) {\n  var challengeMatch = str.match(/^334\\s+(.+)$/);\n  var challengeString = '';\n\n  if (!challengeMatch) {\n    return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str));\n  } else {\n    challengeString = challengeMatch[1];\n  } // Decode from base64\n\n\n  var base64decoded = new Buffer(challengeString, 'base64').toString('ascii'),\n      hmac_md5 = crypto.createHmac('md5', this._auth.pass);\n  hmac_md5.update(base64decoded);\n  var hex_hmac = hmac_md5.digest('hex'),\n      prepended = this._auth.user + ' ' + hex_hmac;\n\n  this._currentAction = function (str) {\n    this._actionAUTH_CRAM_MD5_PASS(str, callback);\n  }.bind(this);\n\n  this._sendCommand(new Buffer(prepended).toString('base64'));\n};\n/**\n * Handles the response to CRAM-MD5 authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_CRAM_MD5_PASS = function (str, callback) {\n  if (!str.match(/^235\\s+/)) {\n    return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str));\n  }\n\n  this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n  this.authenticated = true;\n  callback(null, true);\n};\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n * response needs to be base64 encoded password.\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTH_LOGIN_PASS = function (str, callback) {\n  if (str !== '334 UGFzc3dvcmQ6') {\n    return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str));\n  }\n\n  this._currentAction = function (str) {\n    this._actionAUTHComplete(str, callback);\n  }.bind(this);\n\n  this._sendCommand(new Buffer(this._auth.pass + '', 'utf-8').toString('base64'));\n};\n/**\n * Handles the response for authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionAUTHComplete = function (str, isRetry, callback) {\n  if (!callback && typeof isRetry === 'function') {\n    callback = isRetry;\n    isRetry = undefined;\n  }\n\n  if (str.substr(0, 3) === '334') {\n    this._currentAction = function (str) {\n      if (isRetry || !this._auth.xoauth2 || typeof this._auth.xoauth2 !== 'object') {\n        this._actionAUTHComplete(str, true, callback);\n      } else {\n        setTimeout(this._handleXOauth2Token.bind(this, true, callback), Math.random() * 4000 + 1000);\n      }\n    }.bind(this);\n\n    this._sendCommand('');\n\n    return;\n  }\n\n  if (str.charAt(0) !== '2') {\n    this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n    return callback(this._formatError('Invalid login', 'EAUTH', str));\n  }\n\n  this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n  this.authenticated = true;\n  callback(null, true);\n};\n/**\n * Handle response for a MAIL FROM: command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionMAIL = function (str, callback) {\n  if (Number(str.charAt(0)) !== 2) {\n    return callback(this._formatError('Mail command failed', 'EENVELOPE', str));\n  }\n\n  if (!this._envelope.rcptQueue.length) {\n    return callback(this._formatError('Can\\'t send mail - no recipients defined', 'EENVELOPE'));\n  } else {\n    this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n\n    this._currentAction = function (str) {\n      this._actionRCPT(str, callback);\n    }.bind(this);\n\n    this._sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>');\n  }\n};\n/**\n * Handle response for a RCPT TO: command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionRCPT = function (str, callback) {\n  if (Number(str.charAt(0)) !== 2) {\n    // this is a soft error\n    this._envelope.rejected.push(this._envelope.curRecipient);\n  } else {\n    this._envelope.accepted.push(this._envelope.curRecipient);\n  }\n\n  if (!this._envelope.rcptQueue.length) {\n    if (this._envelope.rejected.length < this._envelope.to.length) {\n      this._currentAction = function (str) {\n        this._actionDATA(str, callback);\n      }.bind(this);\n\n      this._sendCommand('DATA');\n    } else {\n      return callback(this._formatError('Can\\'t send mail - all recipients were rejected', 'EENVELOPE', str));\n    }\n  } else {\n    this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n\n    this._currentAction = function (str) {\n      this._actionRCPT(str, callback);\n    }.bind(this);\n\n    this._sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>');\n  }\n};\n/**\n * Handle response for a DATA command\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionDATA = function (str, callback) {\n  // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n  // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n  if ([2, 3].indexOf(Number(str.charAt(0))) < 0) {\n    return callback(this._formatError('Data command failed', 'EENVELOPE', str));\n  }\n\n  callback(null, {\n    accepted: this._envelope.accepted,\n    rejected: this._envelope.rejected\n  });\n};\n/**\n * Handle response for a DATA stream\n *\n * @param {String} str Message from the server\n */\n\n\nSMTPConnection.prototype._actionStream = function (str, callback) {\n  if (Number(str.charAt(0)) !== 2) {\n    // Message failed\n    return callback(this._formatError('Message failed', 'EMESSAGE', str));\n  } else {\n    // Message sent succesfully\n    return callback(null, str);\n  }\n};\n\nSMTPConnection.prototype._handleXOauth2Token = function (isRetry, callback) {\n  this._currentAction = function (str) {\n    this._actionAUTHComplete(str, isRetry, callback);\n  }.bind(this);\n\n  if (this._auth.xoauth2 && typeof this._auth.xoauth2 === 'object') {\n    this._auth.xoauth2[isRetry ? 'generateToken' : 'getToken'](function (err, token) {\n      if (err) {\n        this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n        return callback(this._formatError(err, 'EAUTH'));\n      }\n\n      this._sendCommand('AUTH XOAUTH2 ' + token);\n    }.bind(this));\n  } else {\n    this._sendCommand('AUTH XOAUTH2 ' + this._buildXOAuth2Token(this._auth.user, this._auth.xoauth2));\n  }\n};\n/**\n * Builds a login token for XOAUTH2 authentication command\n *\n * @param {String} user E-mail address of the user\n * @param {String} token Valid access token for the user\n * @return {String} Base64 formatted login token\n */\n\n\nSMTPConnection.prototype._buildXOAuth2Token = function (user, token) {\n  var authData = ['user=' + (user || ''), 'auth=Bearer ' + token, '', ''];\n  return new Buffer(authData.join('\\x01')).toString('base64');\n};\n\nSMTPConnection.prototype._getHostname = function () {\n  // defaul hostname is machine hostname or [IP]\n  var defaultHostname = os.hostname() || ''; // ignore if not FQDN\n\n  if (defaultHostname.indexOf('.') < 0) {\n    defaultHostname = '[127.0.0.1]';\n  } // IP should be enclosed in []\n\n\n  if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n    defaultHostname = '[' + defaultHostname + ']';\n  }\n\n  return defaultHostname;\n};","map":{"version":3,"sources":["/Users/theodaguier/e-do/node_modules/nodemailer-smtp-pool/node_modules/smtp-connection/lib/smtp-connection.js"],"names":["packageInfo","require","EventEmitter","util","net","tls","os","crypto","DataStream","PassThrough","shared","module","exports","SMTPConnection","options","call","id","randomBytes","toString","replace","stage","port","secure","host","name","_getHostname","logger","getLogger","version","authenticated","destroyed","_remainder","_responseQueue","_socket","_supportedAuth","_currentAction","_greetingTimeout","_connectionTimeout","_destroyed","_closing","inherits","prototype","connect","connectCallback","once","debug","bind","opts","localAddress","socket","_onConnect","Object","keys","forEach","key","setTimeout","_onError","connectionTimeout","on","quit","_sendCommand","close","clearTimeout","closeMethod","E","_destroy","login","authData","callback","_auth","_user","xoauth2","user","authMethod","indexOf","toUpperCase","trim","_handleXOauth2Token","str","_actionAUTH_LOGIN_USER","_actionAUTHComplete","Buffer","pass","_actionAUTH_CRAM_MD5","_formatError","send","envelope","message","done","returned","apply","Array","slice","arguments","err","_setEnvelope","info","stream","_createSendStream","response","pipe","write","end","remoteAddress","remotePort","_onData","_onClose","_onEnd","socketTimeout","_onTimeout","_actionGreeting","greetingTimeout","chunk","length","data","lines","split","lastline","pop","i","len","test","push","_processResponse","type","error","emit","Error","code","responseCode","Number","match","_upgradeConnection","removeAllListeners","socketPlain","shift","setImmediate","action","_envelope","from","address","to","concat","map","JSON","stringify","rcptQueue","parse","rejected","accepted","_actionMAIL","dataStream","logStream","_actionStream","read","outByteCount","inByteCount","substr","lmtp","_actionLHLO","_actionEHLO","charAt","requireTLS","_actionHELO","ignoreTLS","_actionSTARTTLS","secured","_actionAUTH_LOGIN_PASS","challengeMatch","challengeString","base64decoded","hmac_md5","createHmac","update","hex_hmac","digest","prepended","_actionAUTH_CRAM_MD5_PASS","isRetry","undefined","Math","random","curRecipient","_actionRCPT","_actionDATA","token","_buildXOAuth2Token","join","defaultHostname","hostname"],"mappings":"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","sourcesContent":["'use strict';\n\nvar packageInfo = require('../package.json');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar net = require('net');\nvar tls = require('tls');\nvar os = require('os');\nvar crypto = require('crypto');\nvar DataStream = require('./data-stream');\nvar PassThrough = require('stream').PassThrough;\nvar shared = require('nodemailer-shared');\n\nmodule.exports = SMTPConnection;\n\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 25 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */\nfunction SMTPConnection(options) {\n    EventEmitter.call(this);\n\n    this.id = crypto.randomBytes(8).toString('base64').replace(/\\W/g, '');\n    this.stage = 'init';\n\n    this.options = options || {};\n\n    this.options.port = this.options.port || (this.options.secure ? 465 : 25);\n    this.options.host = this.options.host || 'localhost';\n    this.options.secure = !!this.options.secure;\n\n    this.options.name = this.options.name || this._getHostname();\n\n    this.logger = shared.getLogger(this.options);\n\n    /**\n     * Expose version nr, just for the reference\n     * @type {String}\n     */\n    this.version = packageInfo.version;\n\n    /**\n     * If true, then the user is authenticated\n     * @type {Boolean}\n     */\n    this.authenticated = false;\n\n    /**\n     * If set to true, this instance is no longer active\n     * @private\n     */\n    this.destroyed = false;\n\n    /**\n     * Defines if the current connection is secure or not. If not,\n     * STARTTLS can be used if available\n     * @private\n     */\n    this.secure = false;\n\n    /**\n     * Store incomplete messages coming from the server\n     * @private\n     */\n    this._remainder = '';\n\n    /**\n     * Unprocessed responses from the server\n     * @type {Array}\n     */\n    this._responseQueue = [];\n\n    /**\n     * The socket connecting to the server\n     * @publick\n     */\n    this._socket = false;\n\n    /**\n     * Lists supported auth mechanisms\n     * @private\n     */\n    this._supportedAuth = [];\n\n    /**\n     * Function to run if a data chunk comes from the server\n     * @private\n     */\n    this._currentAction = false;\n\n    /**\n     * Timeout variable for waiting the greeting\n     * @private\n     */\n    this._greetingTimeout = false;\n\n    /**\n     * Timeout variable for waiting the connection to start\n     * @private\n     */\n    this._connectionTimeout = false;\n\n    /**\n     * If the socket is deemed already closed\n     * @private\n     */\n    this._destroyed = false;\n\n    /**\n     * If the socket is already being closed\n     * @private\n     */\n    this._closing = false;\n\n    if (this.options.secure) {\n        this.secure = true;\n    }\n}\nutil.inherits(SMTPConnection, EventEmitter);\n\n/**\n * Creates a connection to a SMTP server and sets up connection\n * listener\n */\nSMTPConnection.prototype.connect = function (connectCallback) {\n    if (typeof connectCallback === 'function') {\n        this.once('connect', function () {\n            this.logger.debug('[%s] SMTP handshake finished', this.id);\n            connectCallback();\n        }.bind(this));\n    }\n\n    var opts = {\n        port: this.options.port,\n        host: this.options.host\n    };\n\n    if (this.options.localAddress) {\n        opts.localAddress = this.options.localAddress;\n    }\n\n    if (this.options.socket) {\n        this._socket = this.options.socket;\n        this._socket.connect(this.options.port, this.options.host, this._onConnect.bind(this));\n    } else if (this.options.secure) {\n        if (this.options.tls) {\n            Object.keys(this.options.tls).forEach((function (key) {\n                opts[key] = this.options.tls[key];\n            }).bind(this));\n        }\n        this._socket = tls.connect(this.options.port, this.options.host, opts, this._onConnect.bind(this));\n    } else {\n        this._socket = net.connect(opts, this._onConnect.bind(this));\n    }\n\n    this._connectionTimeout = setTimeout((function () {\n        this._onError('Connection timeout', 'ETIMEDOUT');\n    }).bind(this), this.options.connectionTimeout || 60 * 1000);\n\n    this._socket.on('error', this._onError.bind(this));\n};\n\n/**\n * Sends QUIT\n */\nSMTPConnection.prototype.quit = function () {\n    this._sendCommand('QUIT');\n    this._currentAction = this.close;\n};\n\n/**\n * Closes the connection to the server\n */\nSMTPConnection.prototype.close = function () {\n    clearTimeout(this._connectionTimeout);\n    clearTimeout(this._greetingTimeout);\n\n    // allow to run this function only once\n    if (this._closing) {\n        return;\n    }\n    this._closing = true;\n\n    var closeMethod = 'end';\n\n    if (this.stage === 'init') {\n        // Close the socket immediately when connection timed out\n        closeMethod = 'destroy';\n    }\n\n    this.logger.debug('[%s] Closing connection to the server using \"%s\"', this.id, closeMethod);\n\n    var socket = this._socket && this._socket.socket || this._socket;\n\n    if (socket && !socket.destroyed) {\n        try {\n            this._socket[closeMethod]();\n        } catch (E) {\n            // just ignore\n        }\n    }\n\n    this._destroy();\n};\n\n/**\n * Authenticate user\n */\nSMTPConnection.prototype.login = function (authData, callback) {\n    this._auth = authData || {};\n    this._user = this._auth.xoauth2 && this._auth.xoauth2.options && this._auth.xoauth2.options.user || this._auth.user || '';\n\n    var authMethod;\n    if (this._auth.xoauth2 && this._supportedAuth.indexOf('XOAUTH2') >= 0) {\n        authMethod = 'XOAUTH2';\n    } else if (this.options.authMethod) {\n        authMethod = this.options.authMethod.toUpperCase().trim();\n    } else {\n        // use first supported\n        authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();\n    }\n\n    switch (authMethod) {\n        case 'XOAUTH2':\n            this._handleXOauth2Token(false, callback);\n            return;\n        case 'LOGIN':\n            this._currentAction = function (str) {\n                this._actionAUTH_LOGIN_USER(str, callback);\n            }.bind(this);\n            this._sendCommand('AUTH LOGIN');\n            return;\n        case 'PLAIN':\n            this._currentAction = function (str) {\n                this._actionAUTHComplete(str, callback);\n            }.bind(this);\n            this._sendCommand('AUTH PLAIN ' + new Buffer(\n                //this._auth.user+'\\u0000'+\n                '\\u0000' + // skip authorization identity as it causes problems with some servers\n                this._auth.user + '\\u0000' +\n                this._auth.pass, 'utf-8').toString('base64'));\n            return;\n        case 'CRAM-MD5':\n            this._currentAction = function (str) {\n                this._actionAUTH_CRAM_MD5(str, callback);\n            }.bind(this);\n            this._sendCommand('AUTH CRAM-MD5');\n            return;\n    }\n\n    return callback(this._formatError('Unknown authentication method \"' + authMethod + '\"', 'EAUTH'));\n};\n\n/**\n * Sends a message\n *\n * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n * @param {Object} message String, Buffer or a Stream\n * @param {Function} callback Callback to return once sending is completed\n */\nSMTPConnection.prototype.send = function (envelope, message, done) {\n    if (!message) {\n        return done(this._formatError('Empty message', 'EMESSAGE'));\n    }\n\n    // ensure that callback is only called once\n    var returned = false;\n    var callback = function () {\n        if (returned) {\n            return;\n        }\n        returned = true;\n\n        done.apply(null, Array.prototype.slice.call(arguments));\n    };\n\n    if (typeof message.on === 'function') {\n        message.on('error', function (err) {\n            return callback(this._formatError(err, 'ESTREAM'));\n        }.bind(this));\n    }\n\n    this._setEnvelope(envelope, function (err, info) {\n        if (err) {\n            return callback(err);\n        }\n        var stream = this._createSendStream(function (err, str) {\n            if (err) {\n                return callback(err);\n            }\n            info.response = str;\n            return callback(null, info);\n        });\n        if (typeof message.pipe === 'function') {\n            message.pipe(stream);\n        } else {\n            stream.write(message);\n            stream.end();\n        }\n\n    }.bind(this));\n};\n\n/**\n * Connection listener that is run when the connection to\n * the server is opened\n *\n * @event\n */\nSMTPConnection.prototype._onConnect = function () {\n    clearTimeout(this._connectionTimeout);\n\n    this.logger.info('[%s] %s established to %s:%s', this.id, this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);\n\n    if (this._destroyed) {\n        // Connection was established after we already had canceled it\n        this.close();\n        return;\n    }\n\n    this.stage = 'connected';\n\n    this._socket.on('data', this._onData.bind(this));\n    this._socket.once('close', this._onClose.bind(this));\n    this._socket.once('end', this._onEnd.bind(this));\n\n    this._socket.setTimeout(this.options.socketTimeout || (10 * 60 * 1000)); // 10 min.\n    this._socket.on('timeout', this._onTimeout.bind(this));\n\n    this._greetingTimeout = setTimeout((function () {\n        // if still waiting for greeting, give up\n        if (this._socket && !this._destroyed && this._currentAction === this._actionGreeting) {\n            this._onError('Greeting never received', 'ETIMEDOUT');\n        }\n    }).bind(this), this.options.greetingTimeout || 10000);\n\n    this._currentAction = this._actionGreeting;\n};\n\n/**\n * 'data' listener for data coming from the server\n *\n * @event\n * @param {Buffer} chunk Data chunk coming from the server\n */\nSMTPConnection.prototype._onData = function (chunk) {\n    if (this._destroyed || !chunk || !chunk.length) {\n        return;\n    }\n\n    var data = (chunk || '').toString('binary');\n    var lines = (this._remainder + data).split(/\\r?\\n/);\n    var lastline;\n\n    this._remainder = lines.pop();\n\n    for (var i = 0, len = lines.length; i < len; i++) {\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+\\-/.test(lastline.split('\\n').pop())) {\n                this._responseQueue[this._responseQueue.length - 1] += '\\n' + lines[i];\n                continue;\n            }\n        }\n        this._responseQueue.push(lines[i]);\n    }\n\n    this._processResponse();\n};\n\n/**\n * 'error' listener for the socket\n *\n * @event\n * @param {Error} err Error object\n * @param {String} type Error name\n */\nSMTPConnection.prototype._onError = function (err, type, data) {\n    clearTimeout(this._connectionTimeout);\n    clearTimeout(this._greetingTimeout);\n\n    if (this._destroyed) {\n        // just ignore, already closed\n        // this might happen when a socket is canceled because of reached timeout\n        // but the socket timeout error itself receives only after\n        return;\n    }\n\n    err = this._formatError(err, type, data);\n\n    this.logger.error('[%s] %s', this.id, err.message);\n\n    this.emit('error', err);\n    this.close();\n};\n\nSMTPConnection.prototype._formatError = function (message, type, response) {\n    var err;\n\n    if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n        err = message;\n    } else {\n        err = new Error(message);\n    }\n\n    if (type && type !== 'Error') {\n        err.code = type;\n    }\n\n    if (response) {\n        err.response = response;\n        err.message += ': ' + response;\n    }\n\n    var responseCode = typeof response === 'string' && Number((response.match(/^\\d+/) || [])[0]) || false;\n    if (responseCode) {\n        err.responseCode = responseCode;\n    }\n\n    return err;\n};\n\n/**\n * 'close' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onClose = function () {\n    this.logger.info('[%s] Connection closed', this.id);\n\n    if ([this._actionGreeting, this.close].indexOf(this._currentAction) < 0 && !this._destroyed) {\n        return this._onError(new Error('Connection closed unexpectedly'));\n    }\n\n    this._destroy();\n};\n\n/**\n * 'end' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onEnd = function () {\n    this._destroy();\n};\n\n/**\n * 'timeout' listener for the socket\n *\n * @event\n */\nSMTPConnection.prototype._onTimeout = function () {\n    return this._onError(new Error('Timeout'), 'ETIMEOUT');\n};\n\n/**\n * Destroys the client, emits 'end'\n */\nSMTPConnection.prototype._destroy = function () {\n    if (this._destroyed) {\n        return;\n    }\n    this._destroyed = true;\n    this.emit('end');\n};\n\n/**\n * Upgrades the connection to TLS\n *\n * @param {Function} callback Callback function to run when the connection\n *        has been secured\n */\nSMTPConnection.prototype._upgradeConnection = function (callback) {\n    // do not remove all listeners or it breaks node v0.10 as there's\n    // apparently a 'finish' event set that would be cleared as well\n\n    // we can safely keep 'error', 'end', 'close' etc. events\n    this._socket.removeAllListeners('data'); // incoming data is going to be gibberish from this point onwards\n    this._socket.removeAllListeners('timeout'); // timeout will be re-set for the new socket object\n\n    var socketPlain = this._socket;\n    var opts = {\n        socket: this._socket,\n        host: this.options.host\n    };\n\n    Object.keys(this.options.tls || {}).forEach((function (key) {\n        opts[key] = this.options.tls[key];\n    }).bind(this));\n\n    this._socket = tls.connect(opts, function () {\n        this.secure = true;\n        this._socket.on('data', this._onData.bind(this));\n\n        socketPlain.removeAllListeners('close');\n        socketPlain.removeAllListeners('end');\n\n        return callback(null, true);\n    }.bind(this));\n\n    this._socket.on('error', this._onError.bind(this));\n    this._socket.once('close', this._onClose.bind(this));\n    this._socket.once('end', this._onEnd.bind(this));\n\n    this._socket.setTimeout(this.options.socketTimeout || (10 * 60 * 1000)); // 10 min.\n    this._socket.on('timeout', this._onTimeout.bind(this));\n};\n\n/**\n * Processes queued responses from the server\n *\n * @param {Boolean} force If true, ignores _processing flag\n */\nSMTPConnection.prototype._processResponse = function () {\n    if (!this._responseQueue.length) {\n        return false;\n    }\n\n    var str = (this._responseQueue.shift() || '').toString();\n\n    if (/^\\d+\\-/.test(str.split('\\n').pop())) {\n        // keep waiting for the final part of multiline response\n        return;\n    }\n\n    if (this.options.debug) {\n        this.logger.debug('[%s] S: %s', this.id, str.replace(/\\r?\\n$/, ''));\n    }\n\n    if (!str.trim()) { // skip unexpected empty lines\n        setImmediate(this._processResponse.bind(this, true));\n    }\n\n    var action = this._currentAction;\n    this._currentAction = null;\n\n    if (typeof action === 'function') {\n        action.call(this, str);\n        setImmediate(this._processResponse.bind(this, true));\n    } else {\n        return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str);\n    }\n};\n\n/**\n * Send a command to the server, append \\r\\n\n *\n * @param {String} str String to be sent to the server\n */\nSMTPConnection.prototype._sendCommand = function (str) {\n    if (this._destroyed) {\n        // Connection already closed, can't send any more data\n        return;\n    }\n\n    if (this._socket.destroyed) {\n        return this.close();\n    }\n\n    if (this.options.debug) {\n        this.logger.debug('[%s] C: %s', this.id, (str || '').toString().replace(/\\r?\\n$/, ''));\n    }\n\n    this._socket.write(new Buffer(str + '\\r\\n', 'utf-8'));\n};\n\n/**\n * Initiates a new message by submitting envelope data, starting with\n * MAIL FROM: command\n *\n * @param {Object} envelope Envelope object in the form of\n *        {from:'...', to:['...']}\n *        or\n *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n */\nSMTPConnection.prototype._setEnvelope = function (envelope, callback) {\n    this._envelope = envelope || {};\n    this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();\n\n    this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {\n        return (to && to.address || to || '').toString().trim();\n    });\n\n    if (!this._envelope.to.length) {\n        return callback(this._formatError('No recipients defined', 'EENVELOPE'));\n    }\n\n    if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n        return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE'));\n    }\n\n    for (var i = 0, len = this._envelope.to.length; i < len; i++) {\n        if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n            return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE'));\n        }\n    }\n\n    // clone the recipients array for latter manipulation\n    this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n    this._envelope.rejected = [];\n    this._envelope.accepted = [];\n\n    this._currentAction = function (str) {\n        this._actionMAIL(str, callback);\n    }.bind(this);\n    this._sendCommand('MAIL FROM:<' + (this._envelope.from) + '>');\n};\n\nSMTPConnection.prototype._createSendStream = function (callback) {\n    var dataStream = new DataStream();\n    var logStream;\n\n    this._currentAction = function (str) {\n        this._actionStream(str, callback);\n    }.bind(this);\n\n    dataStream.pipe(this._socket, {\n        end: false\n    });\n\n    if (this.options.debug) {\n        logStream = new PassThrough();\n        logStream.on('readable', function () {\n            var chunk;\n            while ((chunk = logStream.read())) {\n                this.logger.debug('[%s] C: %s', this.id, chunk.toString('binary').replace(/\\r?\\n$/, ''));\n            }\n        }.bind(this));\n        dataStream.pipe(logStream);\n    }\n\n    dataStream.once('end', function () {\n        this.logger.info('[%s] C: <%s bytes encoded mime message (source size %s bytes)>', this.id, dataStream.outByteCount, dataStream.inByteCount);\n    }.bind(this));\n\n    return dataStream;\n};\n\n/** ACTIONS **/\n\n/**\n * Will be run after the connection is created and the server sends\n * a greeting. If the incoming message starts with 220 initiate\n * SMTP session by sending EHLO command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionGreeting = function (str) {\n    clearTimeout(this._greetingTimeout);\n\n    if (str.substr(0, 3) !== '220') {\n        this._onError(new Error('Invalid greeting from server:\\n' + str), 'EPROTOCOL', str);\n        return;\n    }\n\n    if (this.options.lmtp) {\n        this._currentAction = this._actionLHLO;\n        this._sendCommand('LHLO ' + this.options.name);\n    } else {\n        this._currentAction = this._actionEHLO;\n        this._sendCommand('EHLO ' + this.options.name);\n    }\n};\n\n/**\n * Handles server response for LHLO command. If it yielded in\n * error, emit 'error', otherwise treat this as an EHLO response\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionLHLO = function (str) {\n    if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid response for LHLO:\\n' + str), 'EPROTOCOL', str);\n        return;\n    }\n\n    this._actionEHLO(str);\n};\n\n/**\n * Handles server response for EHLO command. If it yielded in\n * error, try HELO instead, otherwise initiate TLS negotiation\n * if STARTTLS is supported by the server or move into the\n * authentication phase.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionEHLO = function (str) {\n    if (str.substr(0, 3) === '421') {\n        this._onError(new Error('Server terminates connection:\\n' + str), 'ECONNECTION', str);\n        return;\n    }\n\n    if (str.charAt(0) !== '2') {\n        if (this.options.requireTLS) {\n            this._onError(new Error('EHLO failed but HELO does not support required STARTTLS:\\n' + str), 'ECONNECTION', str);\n            return;\n        }\n\n        // Try HELO instead\n        this._currentAction = this._actionHELO;\n        this._sendCommand('HELO ' + this.options.name);\n        return;\n    }\n\n    // Detect if the server supports STARTTLS\n    if (!this.secure && !this.options.ignoreTLS && (/[ \\-]STARTTLS\\r?$/mi.test(str) || this.options.requireTLS)) {\n        this._sendCommand('STARTTLS');\n        this._currentAction = this._actionSTARTTLS;\n        return;\n    }\n\n    // Detect if the server supports PLAIN auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i)) {\n        this._supportedAuth.push('PLAIN');\n    }\n\n    // Detect if the server supports LOGIN auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i)) {\n        this._supportedAuth.push('LOGIN');\n    }\n\n    // Detect if the server supports CRAM-MD5 auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i)) {\n        this._supportedAuth.push('CRAM-MD5');\n    }\n\n    // Detect if the server supports XOAUTH2 auth\n    if (str.match(/AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i)) {\n        this._supportedAuth.push('XOAUTH2');\n    }\n\n    this.emit('connect');\n};\n\n/**\n * Handles server response for HELO command. If it yielded in\n * error, emit 'error', otherwise move into the authentication phase.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionHELO = function (str) {\n    if (str.charAt(0) !== '2') {\n        this._onError(new Error('Invalid response for EHLO/HELO:\\n' + str), 'EPROTOCOL', str);\n        return;\n    }\n\n    this.emit('connect');\n};\n\n/**\n * Handles server response for STARTTLS command. If there's an error\n * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n * succeedes restart the EHLO\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionSTARTTLS = function (str) {\n    if (str.charAt(0) !== '2') {\n        this._onError(new Error('Error upgrading connection with STARTTLS', 'ETLS', str));\n        return;\n    }\n\n    this._upgradeConnection((function (err, secured) {\n        if (err) {\n            this._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS');\n            return;\n        }\n\n        this.logger.info('[%s] Connection upgraded with STARTTLS', this.id);\n\n        if (secured) {\n            // restart session\n            this._currentAction = this._actionEHLO;\n            this._sendCommand('EHLO ' + this.options.name);\n        } else {\n            this.emit('connect');\n        }\n    }).bind(this));\n};\n\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n * response needs to be base64 encoded username.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_LOGIN_USER = function (str, callback) {\n    if (str !== '334 VXNlcm5hbWU6') {\n        callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', 'EAUTH', str));\n        return;\n    }\n\n    this._currentAction = function (str) {\n        this._actionAUTH_LOGIN_PASS(str, callback);\n    }.bind(this);\n\n    this._sendCommand(new Buffer(this._auth.user + '', 'utf-8').toString('base64'));\n};\n\n/**\n * Handle the response for AUTH CRAM-MD5 command. We are expecting\n * '334 <challenge string>'. Data to be sent as response needs to be\n * base64 decoded challenge string, MD5 hashed using the password as\n * a HMAC key, prefixed by the username and a space, and finally all\n * base64 encoded again.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_CRAM_MD5 = function (str, callback) {\n    var challengeMatch = str.match(/^334\\s+(.+)$/);\n    var challengeString = '';\n\n    if (!challengeMatch) {\n        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str));\n    } else {\n        challengeString = challengeMatch[1];\n    }\n\n    // Decode from base64\n    var base64decoded = new Buffer(challengeString, 'base64').toString('ascii'),\n        hmac_md5 = crypto.createHmac('md5', this._auth.pass);\n\n    hmac_md5.update(base64decoded);\n\n    var hex_hmac = hmac_md5.digest('hex'),\n        prepended = this._auth.user + ' ' + hex_hmac;\n\n    this._currentAction = function (str) {\n        this._actionAUTH_CRAM_MD5_PASS(str, callback);\n    }.bind(this);\n\n\n    this._sendCommand(new Buffer(prepended).toString('base64'));\n};\n\n/**\n * Handles the response to CRAM-MD5 authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_CRAM_MD5_PASS = function (str, callback) {\n    if (!str.match(/^235\\s+/)) {\n        return callback(this._formatError('Invalid login sequence while waiting for \"235\"', 'EAUTH', str));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handle the response for AUTH LOGIN command. We are expecting\n * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n * response needs to be base64 encoded password.\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTH_LOGIN_PASS = function (str, callback) {\n    if (str !== '334 UGFzc3dvcmQ6') {\n        return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', 'EAUTH', str));\n    }\n\n    this._currentAction = function (str) {\n        this._actionAUTHComplete(str, callback);\n    }.bind(this);\n\n    this._sendCommand(new Buffer(this._auth.pass + '', 'utf-8').toString('base64'));\n};\n\n/**\n * Handles the response for authentication, if there's no error,\n * the user can be considered logged in. Start waiting for a message to send\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionAUTHComplete = function (str, isRetry, callback) {\n    if (!callback && typeof isRetry === 'function') {\n        callback = isRetry;\n        isRetry = undefined;\n    }\n\n    if (str.substr(0, 3) === '334') {\n        this._currentAction = function (str) {\n            if (isRetry || !this._auth.xoauth2 || typeof this._auth.xoauth2 !== 'object') {\n                this._actionAUTHComplete(str, true, callback);\n            } else {\n                setTimeout(this._handleXOauth2Token.bind(this, true, callback), Math.random() * 4000 + 1000);\n            }\n        }.bind(this);\n        this._sendCommand('');\n        return;\n    }\n\n    if (str.charAt(0) !== '2') {\n        this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n        return callback(this._formatError('Invalid login', 'EAUTH', str));\n    }\n\n    this.logger.info('[%s] User %s authenticated', this.id, JSON.stringify(this._user));\n    this.authenticated = true;\n    callback(null, true);\n};\n\n/**\n * Handle response for a MAIL FROM: command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionMAIL = function (str, callback) {\n    if (Number(str.charAt(0)) !== 2) {\n        return callback(this._formatError('Mail command failed', 'EENVELOPE', str));\n    }\n\n    if (!this._envelope.rcptQueue.length) {\n        return callback(this._formatError('Can\\'t send mail - no recipients defined', 'EENVELOPE'));\n    } else {\n        this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n        this._currentAction = function (str) {\n            this._actionRCPT(str, callback);\n        }.bind(this);\n        this._sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>');\n    }\n};\n\n/**\n * Handle response for a RCPT TO: command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionRCPT = function (str, callback) {\n    if (Number(str.charAt(0)) !== 2) {\n        // this is a soft error\n        this._envelope.rejected.push(this._envelope.curRecipient);\n    } else {\n        this._envelope.accepted.push(this._envelope.curRecipient);\n    }\n\n    if (!this._envelope.rcptQueue.length) {\n        if (this._envelope.rejected.length < this._envelope.to.length) {\n            this._currentAction = function (str) {\n                this._actionDATA(str, callback);\n            }.bind(this);\n            this._sendCommand('DATA');\n        } else {\n            return callback(this._formatError('Can\\'t send mail - all recipients were rejected', 'EENVELOPE', str));\n        }\n    } else {\n        this._envelope.curRecipient = this._envelope.rcptQueue.shift();\n        this._currentAction = function (str) {\n            this._actionRCPT(str, callback);\n        }.bind(this);\n        this._sendCommand('RCPT TO:<' + this._envelope.curRecipient + '>');\n    }\n};\n\n/**\n * Handle response for a DATA command\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionDATA = function (str, callback) {\n    // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n    // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n    if ([2, 3].indexOf(Number(str.charAt(0))) < 0) {\n        return callback(this._formatError('Data command failed', 'EENVELOPE', str));\n    }\n\n    callback(null, {\n        accepted: this._envelope.accepted,\n        rejected: this._envelope.rejected\n    });\n};\n\n/**\n * Handle response for a DATA stream\n *\n * @param {String} str Message from the server\n */\nSMTPConnection.prototype._actionStream = function (str, callback) {\n    if (Number(str.charAt(0)) !== 2) {\n        // Message failed\n        return callback(this._formatError('Message failed', 'EMESSAGE', str));\n    } else {\n        // Message sent succesfully\n        return callback(null, str);\n    }\n};\n\nSMTPConnection.prototype._handleXOauth2Token = function (isRetry, callback) {\n    this._currentAction = function (str) {\n        this._actionAUTHComplete(str, isRetry, callback);\n    }.bind(this);\n\n    if (this._auth.xoauth2 && typeof this._auth.xoauth2 === 'object') {\n        this._auth.xoauth2[isRetry ? 'generateToken' : 'getToken'](function (err, token) {\n            if (err) {\n                this.logger.info('[%s] User %s failed to authenticate', this.id, JSON.stringify(this._user));\n                return callback(this._formatError(err, 'EAUTH'));\n            }\n            this._sendCommand('AUTH XOAUTH2 ' + token);\n        }.bind(this));\n    } else {\n        this._sendCommand('AUTH XOAUTH2 ' + this._buildXOAuth2Token(this._auth.user, this._auth.xoauth2));\n    }\n};\n\n/**\n * Builds a login token for XOAUTH2 authentication command\n *\n * @param {String} user E-mail address of the user\n * @param {String} token Valid access token for the user\n * @return {String} Base64 formatted login token\n */\nSMTPConnection.prototype._buildXOAuth2Token = function (user, token) {\n    var authData = [\n        'user=' + (user || ''),\n        'auth=Bearer ' + token,\n        '',\n        ''\n    ];\n    return new Buffer(authData.join('\\x01')).toString('base64');\n};\n\nSMTPConnection.prototype._getHostname = function () {\n    // defaul hostname is machine hostname or [IP]\n    var defaultHostname = os.hostname() || '';\n\n    // ignore if not FQDN\n    if (defaultHostname.indexOf('.') < 0) {\n        defaultHostname = '[127.0.0.1]';\n    }\n\n    // IP should be enclosed in []\n    if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n        defaultHostname = '[' + defaultHostname + ']';\n    }\n\n    return defaultHostname;\n};\n"]},"metadata":{},"sourceType":"script"}