{"ast":null,"code":"const BleachBypassShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    opacity: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 base = texture2D( tDiffuse, vUv );\", \"\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\", \"\tfloat lum = dot( lumCoeff, base.rgb );\", \"\tvec3 blend = vec3( lum );\", \"\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\", \"\tvec3 result1 = 2.0 * base.rgb * blend;\", \"\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\", \"\tvec3 newColor = mix( result1, result2, L );\", \"\tfloat A2 = opacity * base.a;\", \"\tvec3 mixRGB = A2 * newColor.rgb;\", \"\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\", \"\tgl_FragColor = vec4( mixRGB, base.a );\", \"}\"].join(\"\\n\")\n};\nexport { BleachBypassShader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/shaders/BleachBypassShader.js"],"names":["BleachBypassShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG;AACzBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,OAAO,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT;AAFD,GADe;AAKzBE,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CALW;AAYzBC,EAAAA,cAAc,EAAE,CACd,wBADc,EAEd,6BAFc,EAGd,mBAHc,EAId,eAJc,EAKd,0CALc,EAMd,2CANc,EAOd,yCAPc,EAQd,4BARc,EASd,2DATc,EAUd,yCAVc,EAWd,mEAXc,EAYd,8CAZc,EAad,+BAbc,EAcd,mCAdc,EAed,yCAfc,EAgBd,yCAhBc,EAiBd,GAjBc,EAkBdD,IAlBc,CAkBT,IAlBS;AAZS,CAA3B;AAgCA,SACEN,kBADF","sourcesContent":["const BleachBypassShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    opacity: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform float opacity;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec4 base = texture2D( tDiffuse, vUv );\",\n    \"\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\n    \"\tfloat lum = dot( lumCoeff, base.rgb );\",\n    \"\tvec3 blend = vec3( lum );\",\n    \"\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\n    \"\tvec3 result1 = 2.0 * base.rgb * blend;\",\n    \"\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\n    \"\tvec3 newColor = mix( result1, result2, L );\",\n    \"\tfloat A2 = opacity * base.a;\",\n    \"\tvec3 mixRGB = A2 * newColor.rgb;\",\n    \"\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\n    \"\tgl_FragColor = vec4( mixRGB, base.a );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  BleachBypassShader\n};\n"]},"metadata":{},"sourceType":"module"}