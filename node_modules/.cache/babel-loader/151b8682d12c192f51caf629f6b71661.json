{"ast":null,"code":"import { Vector3, Quaternion, Object3D } from \"three\";\n\nconst _translationObject = /* @__PURE__ */new Vector3();\n\nconst _quaternionObject = /* @__PURE__ */new Quaternion();\n\nconst _scaleObject = /* @__PURE__ */new Vector3();\n\nconst _translationWorld = /* @__PURE__ */new Vector3();\n\nconst _quaternionWorld = /* @__PURE__ */new Quaternion();\n\nconst _scaleWorld = /* @__PURE__ */new Vector3();\n\nclass Gyroscope extends Object3D {\n  constructor() {\n    super();\n  }\n\n  updateMatrixWorld(force) {\n    this.matrixAutoUpdate && this.updateMatrix();\n\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent !== null) {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        this.matrixWorld.decompose(_translationWorld, _quaternionWorld, _scaleWorld);\n        this.matrix.decompose(_translationObject, _quaternionObject, _scaleObject);\n        this.matrixWorld.compose(_translationWorld, _quaternionObject, _scaleWorld);\n      } else {\n        this.matrixWorld.copy(this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    }\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  }\n\n}\n\nexport { Gyroscope };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/misc/Gyroscope.js"],"names":["Vector3","Quaternion","Object3D","_translationObject","_quaternionObject","_scaleObject","_translationWorld","_quaternionWorld","_scaleWorld","Gyroscope","constructor","updateMatrixWorld","force","matrixAutoUpdate","updateMatrix","matrixWorldNeedsUpdate","parent","matrixWorld","multiplyMatrices","matrix","decompose","compose","copy","i","l","children","length"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,UAAlB,EAA8BC,QAA9B,QAA8C,OAA9C;;AACA,MAAMC,kBAAkB,GAAG,eAAgB,IAAIH,OAAJ,EAA3C;;AACA,MAAMI,iBAAiB,GAAG,eAAgB,IAAIH,UAAJ,EAA1C;;AACA,MAAMI,YAAY,GAAG,eAAgB,IAAIL,OAAJ,EAArC;;AACA,MAAMM,iBAAiB,GAAG,eAAgB,IAAIN,OAAJ,EAA1C;;AACA,MAAMO,gBAAgB,GAAG,eAAgB,IAAIN,UAAJ,EAAzC;;AACA,MAAMO,WAAW,GAAG,eAAgB,IAAIR,OAAJ,EAApC;;AACA,MAAMS,SAAN,SAAwBP,QAAxB,CAAiC;AAC/BQ,EAAAA,WAAW,GAAG;AACZ;AACD;;AACDC,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACvB,SAAKC,gBAAL,IAAyB,KAAKC,YAAL,EAAzB;;AACA,QAAI,KAAKC,sBAAL,IAA+BH,KAAnC,EAA0C;AACxC,UAAI,KAAKI,MAAL,KAAgB,IAApB,EAA0B;AACxB,aAAKC,WAAL,CAAiBC,gBAAjB,CAAkC,KAAKF,MAAL,CAAYC,WAA9C,EAA2D,KAAKE,MAAhE;AACA,aAAKF,WAAL,CAAiBG,SAAjB,CAA2Bd,iBAA3B,EAA8CC,gBAA9C,EAAgEC,WAAhE;AACA,aAAKW,MAAL,CAAYC,SAAZ,CAAsBjB,kBAAtB,EAA0CC,iBAA1C,EAA6DC,YAA7D;AACA,aAAKY,WAAL,CAAiBI,OAAjB,CAAyBf,iBAAzB,EAA4CF,iBAA5C,EAA+DI,WAA/D;AACD,OALD,MAKO;AACL,aAAKS,WAAL,CAAiBK,IAAjB,CAAsB,KAAKH,MAA3B;AACD;;AACD,WAAKJ,sBAAL,GAA8B,KAA9B;AACAH,MAAAA,KAAK,GAAG,IAAR;AACD;;AACD,SAAK,IAAIW,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CH,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,WAAKE,QAAL,CAAcF,CAAd,EAAiBZ,iBAAjB,CAAmCC,KAAnC;AACD;AACF;;AArB8B;;AAuBjC,SACEH,SADF","sourcesContent":["import { Vector3, Quaternion, Object3D } from \"three\";\nconst _translationObject = /* @__PURE__ */ new Vector3();\nconst _quaternionObject = /* @__PURE__ */ new Quaternion();\nconst _scaleObject = /* @__PURE__ */ new Vector3();\nconst _translationWorld = /* @__PURE__ */ new Vector3();\nconst _quaternionWorld = /* @__PURE__ */ new Quaternion();\nconst _scaleWorld = /* @__PURE__ */ new Vector3();\nclass Gyroscope extends Object3D {\n  constructor() {\n    super();\n  }\n  updateMatrixWorld(force) {\n    this.matrixAutoUpdate && this.updateMatrix();\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent !== null) {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        this.matrixWorld.decompose(_translationWorld, _quaternionWorld, _scaleWorld);\n        this.matrix.decompose(_translationObject, _quaternionObject, _scaleObject);\n        this.matrixWorld.compose(_translationWorld, _quaternionObject, _scaleWorld);\n      } else {\n        this.matrixWorld.copy(this.matrix);\n      }\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    }\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  }\n}\nexport {\n  Gyroscope\n};\n"]},"metadata":{},"sourceType":"module"}