{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from \"three\";\n\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n\n\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage(\"3DS file version: \" + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage(\"Unknown main chunk: \" + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n\n    this.debugMessage(\"Parsed \" + this.meshes.length + \" meshes\");\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage(\"Mesh Version: \" + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage(\"Master scale: \" + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage(\"Named Object\");\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage(\"Material\");\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage(\"Unknown MDATA chunk: \" + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n\n\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage(\"Unknown named object chunk: \" + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n\n\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage(\"   Name: \" + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage(\"   Wireframe\");\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage(\"   Wireframe Thickness: \" + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage(\"   DoubleSided\");\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage(\"   Additive Blending\");\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage(\"   Diffuse Color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage(\"   Specular Color\");\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage(\"   Ambient color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage(\"   Shininess : \" + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage(\"  Transparency : \" + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage(\"   ColorMap\");\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage(\"   BumpMap\");\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage(\"   OpacityMap\");\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage(\"   SpecularMap\");\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage(\"   Unknown material chunk: \" + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n\n\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = \"mesh\";\n\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage(\"   Vertex: \" + points);\n        const vertices = [];\n\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage(\"   UV: \" + texels);\n        const uvs = [];\n\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage(\"   Tranformation Matrix (TODO)\");\n        const values = [];\n\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n\n        const matrix = new Matrix4();\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9];\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11];\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10];\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage(\"   Unknown mesh chunk: \" + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n\n\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage(\"   Faces: \" + faces);\n    const index = [];\n\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data);\n    }\n\n    mesh.geometry.setIndex(index);\n    let materialIndex = 0;\n    let start = 0;\n\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage(\"      Material Group\");\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3;\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n        if (material !== void 0) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage(\"      Unknown face array chunk: \" + subchunk.toString(16));\n      }\n\n      this.endChunk(subchunk);\n    }\n\n    if (mesh.material.length === 1) mesh.material = mesh.material[0];\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n\n\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage(\"      File: \" + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage(\"      OffsetX: \" + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage(\"      OffsetY: \" + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage(\"      RepeatX: \" + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage(\"      RepeatY: \" + texture.repeat.y);\n      } else {\n        this.debugMessage(\"      Unknown map chunk: \" + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n\n\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage(\"         Name: \" + name);\n    this.debugMessage(\"         Faces: \" + numFaces);\n    const index = [];\n\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n\n    return {\n      name,\n      index\n    };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n\n\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else {\n      this.debugMessage(\"      Unknown color chunk: \" + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n\n\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n\n\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n\n\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage(\"Unable to read chunk at \" + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n\n\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + \" \" + this.position + \" \" + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n\n\n  readString(data, maxLength) {\n    let s = \"\";\n\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n\n      if (!c) {\n        break;\n      }\n\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n\n\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n\n      default:\n        this.debugMessage(\"      Unknown percentage chunk: \" + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n\n\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n\n}\n\nconst M3DMAGIC = 19789;\nconst MLIBMAGIC = 15786;\nconst CMAGIC = 49725;\nconst M3D_VERSION = 2;\nconst COLOR_F = 16;\nconst COLOR_24 = 17;\nconst LIN_COLOR_24 = 18;\nconst LIN_COLOR_F = 19;\nconst INT_PERCENTAGE = 48;\nconst FLOAT_PERCENTAGE = 49;\nconst MDATA = 15677;\nconst MESH_VERSION = 15678;\nconst MASTER_SCALE = 256;\nconst MAT_ENTRY = 45055;\nconst MAT_NAME = 40960;\nconst MAT_AMBIENT = 40976;\nconst MAT_DIFFUSE = 40992;\nconst MAT_SPECULAR = 41008;\nconst MAT_SHININESS = 41024;\nconst MAT_TRANSPARENCY = 41040;\nconst MAT_TWO_SIDE = 41089;\nconst MAT_ADDITIVE = 41091;\nconst MAT_WIRE = 41093;\nconst MAT_WIRE_SIZE = 41095;\nconst MAT_TEXMAP = 41472;\nconst MAT_OPACMAP = 41488;\nconst MAT_BUMPMAP = 41520;\nconst MAT_SPECMAP = 41476;\nconst MAT_MAPNAME = 41728;\nconst MAT_MAP_USCALE = 41812;\nconst MAT_MAP_VSCALE = 41814;\nconst MAT_MAP_UOFFSET = 41816;\nconst MAT_MAP_VOFFSET = 41818;\nconst NAMED_OBJECT = 16384;\nconst N_TRI_OBJECT = 16640;\nconst POINT_ARRAY = 16656;\nconst FACE_ARRAY = 16672;\nconst MSH_MAT_GROUP = 16688;\nconst TEX_VERTS = 16704;\nconst MESH_MATRIX = 16736;\nexport { TDSLoader };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/TDSLoader.js"],"names":["Loader","LoaderUtils","FileLoader","Group","MeshPhongMaterial","DoubleSide","AdditiveBlending","BufferGeometry","Mesh","Float32BufferAttribute","Matrix4","TextureLoader","Color","TDSLoader","constructor","manager","debug","group","position","materials","meshes","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","POINT_ARRAY","points","readWord","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","uvs","MESH_MATRIX","values","matrix","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","end","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","INT_PERCENTAGE","FLOAT_PERCENTAGE","message","log"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from \"three\";\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(data) {\n        try {\n          onLoad(scope.parse(data, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage(\"3DS file version: \" + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage(\"Unknown main chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    this.debugMessage(\"Parsed \" + this.meshes.length + \" meshes\");\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage(\"Mesh Version: \" + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage(\"Master scale: \" + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage(\"Named Object\");\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage(\"Material\");\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage(\"Unknown MDATA chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage(\"Unknown named object chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage(\"   Name: \" + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage(\"   Wireframe\");\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage(\"   Wireframe Thickness: \" + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage(\"   DoubleSided\");\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage(\"   Additive Blending\");\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage(\"   Diffuse Color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage(\"   Specular Color\");\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage(\"   Ambient color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage(\"   Shininess : \" + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage(\"  Transparency : \" + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage(\"   ColorMap\");\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage(\"   BumpMap\");\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage(\"   OpacityMap\");\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage(\"   SpecularMap\");\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage(\"   Unknown material chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = \"mesh\";\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage(\"   Vertex: \" + points);\n        const vertices = [];\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage(\"   UV: \" + texels);\n        const uvs = [];\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage(\"   Tranformation Matrix (TODO)\");\n        const values = [];\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n        const matrix = new Matrix4();\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9];\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11];\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10];\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage(\"   Unknown mesh chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage(\"   Faces: \" + faces);\n    const index = [];\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data);\n    }\n    mesh.geometry.setIndex(index);\n    let materialIndex = 0;\n    let start = 0;\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage(\"      Material Group\");\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3;\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false)\n          mesh.material = [];\n        if (material !== void 0) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage(\"      Unknown face array chunk: \" + subchunk.toString(16));\n      }\n      this.endChunk(subchunk);\n    }\n    if (mesh.material.length === 1)\n      mesh.material = mesh.material[0];\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage(\"      File: \" + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage(\"      OffsetX: \" + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage(\"      OffsetY: \" + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage(\"      RepeatX: \" + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage(\"      RepeatY: \" + texture.repeat.y);\n      } else {\n        this.debugMessage(\"      Unknown map chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage(\"         Name: \" + name);\n    this.debugMessage(\"         Faces: \" + numFaces);\n    const index = [];\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n    return { name, index };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else {\n      this.debugMessage(\"      Unknown color chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n    this.position = chunk.cur;\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage(\"Unable to read chunk at \" + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + \" \" + this.position + \" \" + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString(data, maxLength) {\n    let s = \"\";\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n      if (!c) {\n        break;\n      }\n      s += String.fromCharCode(c);\n    }\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n      default:\n        this.debugMessage(\"      Unknown percentage chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}\nconst M3DMAGIC = 19789;\nconst MLIBMAGIC = 15786;\nconst CMAGIC = 49725;\nconst M3D_VERSION = 2;\nconst COLOR_F = 16;\nconst COLOR_24 = 17;\nconst LIN_COLOR_24 = 18;\nconst LIN_COLOR_F = 19;\nconst INT_PERCENTAGE = 48;\nconst FLOAT_PERCENTAGE = 49;\nconst MDATA = 15677;\nconst MESH_VERSION = 15678;\nconst MASTER_SCALE = 256;\nconst MAT_ENTRY = 45055;\nconst MAT_NAME = 40960;\nconst MAT_AMBIENT = 40976;\nconst MAT_DIFFUSE = 40992;\nconst MAT_SPECULAR = 41008;\nconst MAT_SHININESS = 41024;\nconst MAT_TRANSPARENCY = 41040;\nconst MAT_TWO_SIDE = 41089;\nconst MAT_ADDITIVE = 41091;\nconst MAT_WIRE = 41093;\nconst MAT_WIRE_SIZE = 41095;\nconst MAT_TEXMAP = 41472;\nconst MAT_OPACMAP = 41488;\nconst MAT_BUMPMAP = 41520;\nconst MAT_SPECMAP = 41476;\nconst MAT_MAPNAME = 41728;\nconst MAT_MAP_USCALE = 41812;\nconst MAT_MAP_VSCALE = 41814;\nconst MAT_MAP_UOFFSET = 41816;\nconst MAT_MAP_VOFFSET = 41818;\nconst NAMED_OBJECT = 16384;\nconst N_TRI_OBJECT = 16640;\nconst POINT_ARRAY = 16656;\nconst FACE_ARRAY = 16672;\nconst MSH_MAT_GROUP = 16688;\nconst TEX_VERTS = 16704;\nconst MESH_MATRIX = 16736;\nexport {\n  TDSLoader\n};\n"]},"metadata":{},"sourceType":"module"}