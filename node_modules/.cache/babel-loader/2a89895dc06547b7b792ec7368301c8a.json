{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = \"index-finger-tip\";\n\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n\n    __publicField(this, \"controller\");\n\n    __publicField(this, \"motionController\");\n\n    __publicField(this, \"envMap\");\n\n    __publicField(this, \"mesh\");\n\n    __publicField(this, \"xrInputSource\");\n\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener(\"connected\", event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, void 0, xrInputSource.handedness, xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n      this.dispose();\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n\n}\n\nexport { OculusHandModel };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/webxr/OculusHandModel.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","constructor","controller","leftModelPath","rightModelPath","motionController","envMap","mesh","xrInputSource","addEventListener","event","data","hand","handedness","dispose","updateMatrixWorld","force","updateMesh","getPointerPosition","indexFingerTip","joints","position","intersectBoxObject","boxObject","pointerPosition","indexSphere","box","setFromObject","intersectsBox","checkButton","button","onPress","onClear","isPressed","whilePressed","clear"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = \"index-finger-tip\";\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n    __publicField(this, \"controller\");\n    __publicField(this, \"motionController\");\n    __publicField(this, \"envMap\");\n    __publicField(this, \"mesh\");\n    __publicField(this, \"xrInputSource\");\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener(\"connected\", (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(\n          this,\n          controller,\n          void 0,\n          xrInputSource.handedness,\n          xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath\n        );\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n      this.dispose();\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n}\nexport {\n  OculusHandModel\n};\n"]},"metadata":{},"sourceType":"module"}