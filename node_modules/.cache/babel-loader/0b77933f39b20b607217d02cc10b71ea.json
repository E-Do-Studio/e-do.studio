{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Color } from \"three\";\nimport { Pass } from \"./Pass.js\";\n\nclass RenderPass extends Pass {\n  constructor(scene, camera, overrideMaterial, clearColor, clearAlpha = 0) {\n    super();\n\n    __publicField(this, \"scene\");\n\n    __publicField(this, \"camera\");\n\n    __publicField(this, \"overrideMaterial\");\n\n    __publicField(this, \"clearColor\");\n\n    __publicField(this, \"clearAlpha\");\n\n    __publicField(this, \"clearDepth\", false);\n\n    __publicField(this, \"_oldClearColor\", new Color());\n\n    this.scene = scene;\n    this.camera = camera;\n    this.overrideMaterial = overrideMaterial;\n    this.clearColor = clearColor;\n    this.clearAlpha = clearAlpha;\n    this.clear = true;\n    this.needsSwap = false;\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    let oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    let oldClearAlpha;\n    let oldOverrideMaterial = null;\n\n    if (this.overrideMaterial !== void 0) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor);\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n\n    if (this.overrideMaterial !== void 0) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n\n    renderer.autoClear = oldAutoClear;\n  }\n\n}\n\nexport { RenderPass };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/postprocessing/RenderPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","Pass","RenderPass","constructor","scene","camera","overrideMaterial","clearColor","clearAlpha","clear","needsSwap","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","_oldClearColor","getClearAlpha","setClearColor","clearDepth","setRenderTarget","renderToScreen","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color } from \"three\";\nimport { Pass } from \"./Pass.js\";\nclass RenderPass extends Pass {\n  constructor(scene, camera, overrideMaterial, clearColor, clearAlpha = 0) {\n    super();\n    __publicField(this, \"scene\");\n    __publicField(this, \"camera\");\n    __publicField(this, \"overrideMaterial\");\n    __publicField(this, \"clearColor\");\n    __publicField(this, \"clearAlpha\");\n    __publicField(this, \"clearDepth\", false);\n    __publicField(this, \"_oldClearColor\", new Color());\n    this.scene = scene;\n    this.camera = camera;\n    this.overrideMaterial = overrideMaterial;\n    this.clearColor = clearColor;\n    this.clearAlpha = clearAlpha;\n    this.clear = true;\n    this.needsSwap = false;\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    let oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    let oldClearAlpha;\n    let oldOverrideMaterial = null;\n    if (this.overrideMaterial !== void 0) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor);\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear)\n      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n    if (this.overrideMaterial !== void 0) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n    renderer.autoClear = oldAutoClear;\n  }\n}\nexport {\n  RenderPass\n};\n"]},"metadata":{},"sourceType":"module"}