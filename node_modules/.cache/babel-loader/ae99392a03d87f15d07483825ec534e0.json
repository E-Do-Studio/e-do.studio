{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Vector3, Quaternion, Matrix4 } from \"three\";\nimport { CharsetEncoder } from \"mmd-parser\";\n\nclass MMDExporter {\n  constructor() {\n    // Unicode to Shift_JIS table\n    __publicField(this, \"u2sTable\");\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n\n\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\");\n      return null;\n    }\n\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6) num = 0;\n      let a = num.toString();\n\n      if (a.indexOf(\".\") === -1) {\n        a += \".\";\n      }\n\n      a += \"000000\";\n      const index = a.indexOf(\".\");\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + \".\" + p;\n    }\n\n    function toStringsFromArray(array2) {\n      const a = [];\n\n      for (let i = 0, il = array2.length; i < il; i++) {\n        a.push(toStringsFromNumber(array2[i]));\n      }\n\n      return a.join(\",\");\n    }\n\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push(\"Vocaloid Pose Data file\");\n    array.push(\"\");\n    array.push((skin.name !== \"\" ? skin.name.replace(/\\s/g, \"_\") : \"skin\") + \".osm;\");\n    array.push(bones.length + \";\");\n    array.push(\"\");\n\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n\n      if (useOriginalBones === true && bone.userData.ik !== void 0 && bone.userData.ik.originalMatrix !== void 0) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push(\"Bone\" + i + \"{\" + bone.name);\n      array.push(\"  \" + toStringsFromArray(pArray) + \";\");\n      array.push(\"  \" + toStringsFromArray(qArray) + \";\");\n      array.push(\"}\");\n      array.push(\"\");\n    }\n\n    array.push(\"\");\n    const lines = array.join(\"\\n\");\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  }\n\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === void 0) {\n      const encoder = new CharsetEncoder();\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n\n    const array = [];\n\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n\n      if (value === void 0) {\n        throw \"cannot convert charcode 0x\" + code.toString(16);\n      } else if (value > 255) {\n        array.push(value >> 8 & 255);\n        array.push(value & 255);\n      } else {\n        array.push(value & 255);\n      }\n    }\n\n    return new Uint8Array(array);\n  }\n\n  getBindBones(skin) {\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n\n}\n\nexport { MMDExporter };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/exporters/MMDExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Quaternion","Matrix4","CharsetEncoder","MMDExporter","constructor","parseVpd","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array2","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","array","name","replace","bone","bone2","userData","ik","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","table","s2uTable","keys","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Quaternion, Matrix4 } from \"three\";\nimport { CharsetEncoder } from \"mmd-parser\";\nclass MMDExporter {\n  constructor() {\n    // Unicode to Shift_JIS table\n    __publicField(this, \"u2sTable\");\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\");\n      return null;\n    }\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6)\n        num = 0;\n      let a = num.toString();\n      if (a.indexOf(\".\") === -1) {\n        a += \".\";\n      }\n      a += \"000000\";\n      const index = a.indexOf(\".\");\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + \".\" + p;\n    }\n    function toStringsFromArray(array2) {\n      const a = [];\n      for (let i = 0, il = array2.length; i < il; i++) {\n        a.push(toStringsFromNumber(array2[i]));\n      }\n      return a.join(\",\");\n    }\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push(\"Vocaloid Pose Data file\");\n    array.push(\"\");\n    array.push((skin.name !== \"\" ? skin.name.replace(/\\s/g, \"_\") : \"skin\") + \".osm;\");\n    array.push(bones.length + \";\");\n    array.push(\"\");\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      if (useOriginalBones === true && bone.userData.ik !== void 0 && bone.userData.ik.originalMatrix !== void 0) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push(\"Bone\" + i + \"{\" + bone.name);\n      array.push(\"  \" + toStringsFromArray(pArray) + \";\");\n      array.push(\"  \" + toStringsFromArray(qArray) + \";\");\n      array.push(\"}\");\n      array.push(\"\");\n    }\n    array.push(\"\");\n    const lines = array.join(\"\\n\");\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  }\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === void 0) {\n      const encoder = new CharsetEncoder();\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n    const array = [];\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n      if (value === void 0) {\n        throw \"cannot convert charcode 0x\" + code.toString(16);\n      } else if (value > 255) {\n        array.push(value >> 8 & 255);\n        array.push(value & 255);\n      } else {\n        array.push(value & 255);\n      }\n    }\n    return new Uint8Array(array);\n  }\n  getBindBones(skin) {\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n}\nexport {\n  MMDExporter\n};\n"]},"metadata":{},"sourceType":"module"}