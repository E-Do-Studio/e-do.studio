{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useMemo } from \"react\";\nimport { BoxBufferGeometry, Mesh, MeshBasicMaterial, TextureLoader } from \"three\";\nimport image from \"./test.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Photo = /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n\n  const texture = useMemo(() => {\n    const loader = new TextureLoader(); // Créer une texture vide en attendant le chargement de l'image\n\n    const placeholderTexture = loader.load(\"\"); // Charger l'image avec la texture finale\n\n    loader.load(image, loadedTexture => {\n      // Mettre à jour la texture avec l'image chargée\n      placeholderTexture.image = loadedTexture.image;\n      placeholderTexture.needsUpdate = true;\n    }, undefined, error => {\n      console.error(\"Erreur lors du chargement de l'image\", error);\n    });\n    return placeholderTexture;\n  }, [image]); // Récupérer les dimensions de l'image une fois qu'elle est chargée\n\n  const width = texture.image ? texture.image.width : 0;\n  const height = texture.image ? texture.image.height : 0;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [width, height, 0.1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      attach: \"material\",\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}, \"8gOnhTeB3QuUGmcnMJiK9AvHfoY=\"));\n_c2 = Photo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Photo$memo\");\n$RefreshReg$(_c2, \"Photo\");","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/src/Views/TestAccroche/Photo.jsx"],"names":["memo","useMemo","BoxBufferGeometry","Mesh","MeshBasicMaterial","TextureLoader","image","Photo","texture","loader","placeholderTexture","load","loadedTexture","needsUpdate","undefined","error","console","width","height"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,OAAf,QAA8B,OAA9B;AACA,SACEC,iBADF,EAEEC,IAFF,EAGEC,iBAHF,EAIEC,aAJF,QAKO,OALP;AAMA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,OAAO,MAAMC,KAAK,gBAAGP,IAAI,SAAC,MAAM;AAAA;;AAC9B,QAAMQ,OAAO,GAAGP,OAAO,CAAC,MAAM;AAC5B,UAAMQ,MAAM,GAAG,IAAIJ,aAAJ,EAAf,CAD4B,CAG5B;;AACA,UAAMK,kBAAkB,GAAGD,MAAM,CAACE,IAAP,CAAY,EAAZ,CAA3B,CAJ4B,CAM5B;;AACAF,IAAAA,MAAM,CAACE,IAAP,CACEL,KADF,EAEGM,aAAD,IAAmB;AACjB;AACAF,MAAAA,kBAAkB,CAACJ,KAAnB,GAA2BM,aAAa,CAACN,KAAzC;AACAI,MAAAA,kBAAkB,CAACG,WAAnB,GAAiC,IAAjC;AACD,KANH,EAOEC,SAPF,EAQGC,KAAD,IAAW;AACTC,MAAAA,OAAO,CAACD,KAAR,CAAc,sCAAd,EAAsDA,KAAtD;AACD,KAVH;AAaA,WAAOL,kBAAP;AACD,GArBsB,EAqBpB,CAACJ,KAAD,CArBoB,CAAvB,CAD8B,CAwB9B;;AACA,QAAMW,KAAK,GAAGT,OAAO,CAACF,KAAR,GAAgBE,OAAO,CAACF,KAAR,CAAcW,KAA9B,GAAsC,CAApD;AACA,QAAMC,MAAM,GAAGV,OAAO,CAACF,KAAR,GAAgBE,OAAO,CAACF,KAAR,CAAcY,MAA9B,GAAuC,CAAtD;AAEA,sBACE;AAAA,4BACE;AAAmB,MAAA,IAAI,EAAE,CAACD,KAAD,EAAQC,MAAR,EAAgB,GAAhB;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAmB,MAAA,MAAM,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAEV;AAA1C;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAlCwB,kCAAlB;MAAMD,K","sourcesContent":["import { memo, useMemo } from \"react\";\nimport {\n  BoxBufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  TextureLoader,\n} from \"three\";\nimport image from \"./test.png\";\n\nexport const Photo = memo(() => {\n  const texture = useMemo(() => {\n    const loader = new TextureLoader();\n\n    // Créer une texture vide en attendant le chargement de l'image\n    const placeholderTexture = loader.load(\"\");\n\n    // Charger l'image avec la texture finale\n    loader.load(\n      image,\n      (loadedTexture) => {\n        // Mettre à jour la texture avec l'image chargée\n        placeholderTexture.image = loadedTexture.image;\n        placeholderTexture.needsUpdate = true;\n      },\n      undefined,\n      (error) => {\n        console.error(\"Erreur lors du chargement de l'image\", error);\n      }\n    );\n\n    return placeholderTexture;\n  }, [image]);\n\n  // Récupérer les dimensions de l'image une fois qu'elle est chargée\n  const width = texture.image ? texture.image.width : 0;\n  const height = texture.image ? texture.image.height : 0;\n\n  return (\n    <mesh>\n      <boxBufferGeometry args={[width, height, 0.1]} />\n      <meshBasicMaterial attach=\"material\" map={texture} />\n    </mesh>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}