{"ast":null,"code":"import { WebGLCubeRenderTarget, Group, LightProbe, DirectionalLight } from \"three\";\n\nclass SessionLightProbe {\n  constructor(xrLight, renderer, lightProbe, environmentEstimation, estimationStartCallback) {\n    this.xrLight = xrLight;\n    this.renderer = renderer;\n    this.lightProbe = lightProbe;\n    this.xrWebGLBinding = null;\n    this.estimationStartCallback = estimationStartCallback;\n    this.frameCallback = this.onXRFrame.bind(this);\n    const session = renderer.xr.getSession();\n\n    if (environmentEstimation && \"XRWebGLBinding\" in window) {\n      const cubeRenderTarget = new WebGLCubeRenderTarget(16);\n      xrLight.environment = cubeRenderTarget.texture;\n      const gl = renderer.getContext();\n\n      switch (session.preferredReflectionFormat) {\n        case \"srgba8\":\n          gl.getExtension(\"EXT_sRGB\");\n          break;\n\n        case \"rgba16f\":\n          gl.getExtension(\"OES_texture_half_float\");\n          break;\n      }\n\n      this.xrWebGLBinding = new XRWebGLBinding(session, gl);\n      this.lightProbe.addEventListener(\"reflectionchange\", () => {\n        this.updateReflection();\n      });\n    }\n\n    session.requestAnimationFrame(this.frameCallback);\n  }\n\n  updateReflection() {\n    const textureProperties = this.renderer.properties.get(this.xrLight.environment);\n\n    if (textureProperties) {\n      const cubeMap = this.xrWebGLBinding.getReflectionCubeMap(this.lightProbe);\n\n      if (cubeMap) {\n        textureProperties.__webglTexture = cubeMap;\n        this.xrLight.environment.needsPMREMUpdate = true;\n      }\n    }\n  }\n\n  onXRFrame(time, xrFrame) {\n    if (!this.xrLight) {\n      return;\n    }\n\n    const session = xrFrame.session;\n    session.requestAnimationFrame(this.frameCallback);\n    const lightEstimate = xrFrame.getLightEstimate(this.lightProbe);\n\n    if (lightEstimate) {\n      this.xrLight.lightProbe.sh.fromArray(lightEstimate.sphericalHarmonicsCoefficients);\n      this.xrLight.lightProbe.intensity = 1;\n      const intensityScalar = Math.max(1, Math.max(lightEstimate.primaryLightIntensity.x, Math.max(lightEstimate.primaryLightIntensity.y, lightEstimate.primaryLightIntensity.z)));\n      this.xrLight.directionalLight.color.setRGB(lightEstimate.primaryLightIntensity.x / intensityScalar, lightEstimate.primaryLightIntensity.y / intensityScalar, lightEstimate.primaryLightIntensity.z / intensityScalar);\n      this.xrLight.directionalLight.intensity = intensityScalar;\n      this.xrLight.directionalLight.position.copy(lightEstimate.primaryLightDirection);\n\n      if (this.estimationStartCallback) {\n        this.estimationStartCallback();\n        this.estimationStartCallback = null;\n      }\n    }\n  }\n\n  dispose() {\n    this.xrLight = null;\n    this.renderer = null;\n    this.lightProbe = null;\n    this.xrWebGLBinding = null;\n  }\n\n}\n\nclass XREstimatedLight extends Group {\n  constructor(renderer, environmentEstimation = true) {\n    super();\n    this.lightProbe = new LightProbe();\n    this.lightProbe.intensity = 0;\n    this.add(this.lightProbe);\n    this.directionalLight = new DirectionalLight();\n    this.directionalLight.intensity = 0;\n    this.add(this.directionalLight);\n    this.environment = null;\n    let sessionLightProbe = null;\n    let estimationStarted = false;\n    renderer.xr.addEventListener(\"sessionstart\", () => {\n      const session = renderer.xr.getSession();\n\n      if (\"requestLightProbe\" in session) {\n        session.requestLightProbe({\n          reflectionFormat: session.preferredReflectionFormat\n        }).then(probe => {\n          sessionLightProbe = new SessionLightProbe(this, renderer, probe, environmentEstimation, () => {\n            estimationStarted = true;\n            this.dispatchEvent({\n              type: \"estimationstart\"\n            });\n          });\n        });\n      }\n    });\n    renderer.xr.addEventListener(\"sessionend\", () => {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n\n      if (estimationStarted) {\n        this.dispatchEvent({\n          type: \"estimationend\"\n        });\n      }\n    });\n\n    this.dispose = () => {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n\n      this.remove(this.lightProbe);\n      this.lightProbe = null;\n      this.remove(this.directionalLight);\n      this.directionalLight = null;\n      this.environment = null;\n    };\n  }\n\n}\n\nexport { XREstimatedLight };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/webxr/XREstimatedLight.js"],"names":["WebGLCubeRenderTarget","Group","LightProbe","DirectionalLight","SessionLightProbe","constructor","xrLight","renderer","lightProbe","environmentEstimation","estimationStartCallback","xrWebGLBinding","frameCallback","onXRFrame","bind","session","xr","getSession","window","cubeRenderTarget","environment","texture","gl","getContext","preferredReflectionFormat","getExtension","XRWebGLBinding","addEventListener","updateReflection","requestAnimationFrame","textureProperties","properties","get","cubeMap","getReflectionCubeMap","__webglTexture","needsPMREMUpdate","time","xrFrame","lightEstimate","getLightEstimate","sh","fromArray","sphericalHarmonicsCoefficients","intensity","intensityScalar","Math","max","primaryLightIntensity","x","y","z","directionalLight","color","setRGB","position","copy","primaryLightDirection","dispose","XREstimatedLight","add","sessionLightProbe","estimationStarted","requestLightProbe","reflectionFormat","then","probe","dispatchEvent","type","remove"],"mappings":"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","sourcesContent":["import { WebGLCubeRenderTarget, Group, LightProbe, DirectionalLight } from \"three\";\nclass SessionLightProbe {\n  constructor(xrLight, renderer, lightProbe, environmentEstimation, estimationStartCallback) {\n    this.xrLight = xrLight;\n    this.renderer = renderer;\n    this.lightProbe = lightProbe;\n    this.xrWebGLBinding = null;\n    this.estimationStartCallback = estimationStartCallback;\n    this.frameCallback = this.onXRFrame.bind(this);\n    const session = renderer.xr.getSession();\n    if (environmentEstimation && \"XRWebGLBinding\" in window) {\n      const cubeRenderTarget = new WebGLCubeRenderTarget(16);\n      xrLight.environment = cubeRenderTarget.texture;\n      const gl = renderer.getContext();\n      switch (session.preferredReflectionFormat) {\n        case \"srgba8\":\n          gl.getExtension(\"EXT_sRGB\");\n          break;\n        case \"rgba16f\":\n          gl.getExtension(\"OES_texture_half_float\");\n          break;\n      }\n      this.xrWebGLBinding = new XRWebGLBinding(session, gl);\n      this.lightProbe.addEventListener(\"reflectionchange\", () => {\n        this.updateReflection();\n      });\n    }\n    session.requestAnimationFrame(this.frameCallback);\n  }\n  updateReflection() {\n    const textureProperties = this.renderer.properties.get(this.xrLight.environment);\n    if (textureProperties) {\n      const cubeMap = this.xrWebGLBinding.getReflectionCubeMap(this.lightProbe);\n      if (cubeMap) {\n        textureProperties.__webglTexture = cubeMap;\n        this.xrLight.environment.needsPMREMUpdate = true;\n      }\n    }\n  }\n  onXRFrame(time, xrFrame) {\n    if (!this.xrLight) {\n      return;\n    }\n    const session = xrFrame.session;\n    session.requestAnimationFrame(this.frameCallback);\n    const lightEstimate = xrFrame.getLightEstimate(this.lightProbe);\n    if (lightEstimate) {\n      this.xrLight.lightProbe.sh.fromArray(lightEstimate.sphericalHarmonicsCoefficients);\n      this.xrLight.lightProbe.intensity = 1;\n      const intensityScalar = Math.max(\n        1,\n        Math.max(\n          lightEstimate.primaryLightIntensity.x,\n          Math.max(lightEstimate.primaryLightIntensity.y, lightEstimate.primaryLightIntensity.z)\n        )\n      );\n      this.xrLight.directionalLight.color.setRGB(\n        lightEstimate.primaryLightIntensity.x / intensityScalar,\n        lightEstimate.primaryLightIntensity.y / intensityScalar,\n        lightEstimate.primaryLightIntensity.z / intensityScalar\n      );\n      this.xrLight.directionalLight.intensity = intensityScalar;\n      this.xrLight.directionalLight.position.copy(lightEstimate.primaryLightDirection);\n      if (this.estimationStartCallback) {\n        this.estimationStartCallback();\n        this.estimationStartCallback = null;\n      }\n    }\n  }\n  dispose() {\n    this.xrLight = null;\n    this.renderer = null;\n    this.lightProbe = null;\n    this.xrWebGLBinding = null;\n  }\n}\nclass XREstimatedLight extends Group {\n  constructor(renderer, environmentEstimation = true) {\n    super();\n    this.lightProbe = new LightProbe();\n    this.lightProbe.intensity = 0;\n    this.add(this.lightProbe);\n    this.directionalLight = new DirectionalLight();\n    this.directionalLight.intensity = 0;\n    this.add(this.directionalLight);\n    this.environment = null;\n    let sessionLightProbe = null;\n    let estimationStarted = false;\n    renderer.xr.addEventListener(\"sessionstart\", () => {\n      const session = renderer.xr.getSession();\n      if (\"requestLightProbe\" in session) {\n        session.requestLightProbe({\n          reflectionFormat: session.preferredReflectionFormat\n        }).then((probe) => {\n          sessionLightProbe = new SessionLightProbe(this, renderer, probe, environmentEstimation, () => {\n            estimationStarted = true;\n            this.dispatchEvent({ type: \"estimationstart\" });\n          });\n        });\n      }\n    });\n    renderer.xr.addEventListener(\"sessionend\", () => {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n      if (estimationStarted) {\n        this.dispatchEvent({ type: \"estimationend\" });\n      }\n    });\n    this.dispose = () => {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n      this.remove(this.lightProbe);\n      this.lightProbe = null;\n      this.remove(this.directionalLight);\n      this.directionalLight = null;\n      this.environment = null;\n    };\n  }\n}\nexport {\n  XREstimatedLight\n};\n"]},"metadata":{},"sourceType":"module"}