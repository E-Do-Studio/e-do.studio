{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\n\nvar HDRCubeTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(HDRCubeTextureLoader, _Loader);\n\n  var _super = _createSuper(HDRCubeTextureLoader);\n\n  function HDRCubeTextureLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, HDRCubeTextureLoader);\n\n    _this = _super.call(this, manager);\n    _this.hdrLoader = new RGBELoader();\n    _this.type = HalfFloatType;\n    return _this;\n  }\n\n  _createClass(HDRCubeTextureLoader, [{\n    key: \"load\",\n    value: function load(urls, onLoad, onProgress, onError) {\n      if (!Array.isArray(urls)) {\n        console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n        this.setDataType(urls);\n        urls = onLoad;\n        onLoad = onProgress;\n        onProgress = onError;\n        onError = arguments[4];\n      }\n\n      var texture = new CubeTexture();\n      texture.type = this.type;\n\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          break;\n      }\n\n      var scope = this;\n      var loaded = 0;\n\n      function loadHDRData(i, onLoad2, onProgress2, onError2) {\n        new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n          loaded++;\n          var texData = scope.hdrLoader.parse(buffer);\n          if (!texData) return;\n\n          if (texData.data !== void 0) {\n            var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad2) onLoad2(texture);\n          }\n        }, onProgress2, onError2);\n      }\n\n      for (var i = 0; i < urls.length; i++) {\n        loadHDRData(i, onLoad, onProgress, onError);\n      }\n\n      return texture;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      this.hdrLoader.setDataType(value);\n      return this;\n    }\n  }]);\n\n  return HDRCubeTextureLoader;\n}(Loader);\n\nexport { HDRCubeTextureLoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"names":["Loader","HalfFloatType","CubeTexture","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","manager","hdrLoader","type","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","colorSpace","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","onLoad2","onProgress2","onError2","setPath","path","setResponseType","setWithCredentials","withCredentials","load","buffer","texData","parse","data","dataTexture","width","height","format","images","needsUpdate","length","value"],"mappings":"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","sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if (\"colorSpace\" in texture)\n          texture.colorSpace = \"srgb-linear\";\n        else\n          texture.encoding = 3e3;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad2, onProgress2, onError2) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(\n        urls[i],\n        function(buffer) {\n          loaded++;\n          const texData = scope.hdrLoader.parse(buffer);\n          if (!texData)\n            return;\n          if (texData.data !== void 0) {\n            const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad2)\n              onLoad2(texture);\n          }\n        },\n        onProgress2,\n        onError2\n      );\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport {\n  HDRCubeTextureLoader\n};\n"]},"metadata":{},"sourceType":"module"}