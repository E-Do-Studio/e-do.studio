{"ast":null,"code":"import _objectSpread from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from \"three\";\n\nvar ColladaExporter = /*#__PURE__*/function () {\n  function ColladaExporter() {\n    _classCallCheck(this, ColladaExporter);\n\n    __publicField(this, \"options\");\n\n    __publicField(this, \"geometryInfo\");\n\n    __publicField(this, \"materialMap\");\n\n    __publicField(this, \"imageMap\");\n\n    __publicField(this, \"textures\");\n\n    __publicField(this, \"libraryImages\");\n\n    __publicField(this, \"libraryGeometries\");\n\n    __publicField(this, \"libraryEffects\");\n\n    __publicField(this, \"libraryMaterials\");\n\n    __publicField(this, \"canvas\");\n\n    __publicField(this, \"ctx\");\n\n    __publicField(this, \"transMat\");\n\n    __publicField(this, \"getFuncs\", [\"getX\", \"getY\", \"getZ\", \"getW\"]);\n\n    this.options = {\n      version: \"1.4.1\",\n      author: null,\n      textureDirectory: \"\",\n      upAxis: \"Y_UP\",\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = /* @__PURE__ */new WeakMap();\n    this.materialMap = /* @__PURE__ */new WeakMap();\n    this.imageMap = /* @__PURE__ */new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n\n  _createClass(ColladaExporter, [{\n    key: \"parse\",\n    value: function parse(object, onDone) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.options = _objectSpread(_objectSpread({}, this.options), options);\n\n      if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n        console.error(\"ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.\");\n        return null;\n      }\n\n      if (this.options.unitName !== null && this.options.unitMeter === null) {\n        console.error(\"ColladaExporter: unitMeter needs to be specified if unitName is specified.\");\n        return null;\n      }\n\n      if (this.options.unitMeter !== null && this.options.unitName === null) {\n        console.error(\"ColladaExporter: unitName needs to be specified if unitMeter is specified.\");\n        return null;\n      }\n\n      if (this.options.textureDirectory !== \"\") {\n        this.options.textureDirectory = \"\".concat(this.options.textureDirectory, \"/\").replace(/\\\\/g, \"/\").replace(/\\/+/g, \"/\");\n      }\n\n      if (this.options.version !== \"1.4.1\" && this.options.version !== \"1.5.0\") {\n        console.warn(\"ColladaExporter : Version \".concat(this.options.version, \" not supported for export. Only 1.4.1 and 1.5.0.\"));\n        return null;\n      }\n\n      var libraryVisualScenes = this.processObject(object);\n      var specLink = this.options.version === \"1.4.1\" ? \"http://www.collada.org/2005/11/COLLADASchema\" : \"https://www.khronos.org/collada/\";\n      var dae = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\" ?>\".concat(\"<COLLADA xmlns=\\\"\".concat(specLink, \"\\\" version=\\\"\").concat(this.options.version, \"\\\">\"), \"<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>\", this.options.author !== null ? \"<author>\".concat(this.options.author, \"</author>\") : \"\", \"</contributor>\", \"<created>\".concat( /* @__PURE__ */new Date().toISOString(), \"</created>\"), \"<modified>\".concat( /* @__PURE__ */new Date().toISOString(), \"</modified>\"), \"<up_axis>Y_UP</up_axis></asset>\");\n      dae += \"<library_images>\".concat(this.libraryImages.join(\"\"), \"</library_images>\");\n      dae += \"<library_effects>\".concat(this.libraryEffects.join(\"\"), \"</library_effects>\");\n      dae += \"<library_materials>\".concat(this.libraryMaterials.join(\"\"), \"</library_materials>\");\n      dae += \"<library_geometries>\".concat(this.libraryGeometries.join(\"\"), \"</library_geometries>\");\n      dae += \"<library_visual_scenes><visual_scene id=\\\"Scene\\\" name=\\\"scene\\\">\".concat(libraryVisualScenes, \"</visual_scene></library_visual_scenes>\");\n      dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n      dae += \"</COLLADA>\";\n      var res = {\n        data: this.format(dae),\n        textures: this.textures\n      };\n\n      if (typeof onDone === \"function\") {\n        requestAnimationFrame(function () {\n          return onDone(res);\n        });\n      }\n\n      return res;\n    } // Convert the urdf xml into a well-formatted, indented format\n\n  }, {\n    key: \"format\",\n    value: function format(urdf) {\n      var _a, _b;\n\n      var IS_END_TAG = /^<\\//;\n      var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n      var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n      var pad = function pad(ch, num) {\n        return num > 0 ? ch + pad(ch, num - 1) : \"\";\n      };\n\n      var tagnum = 0;\n      return (_b = (_a = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) == null ? void 0 : _a.map(function (tag) {\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n          tagnum--;\n        }\n\n        var res = \"\".concat(pad(\"  \", tagnum)).concat(tag);\n\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n          tagnum++;\n        }\n\n        return res;\n      }).join(\"\\n\")) != null ? _b : \"\";\n    } // Convert an image into a png format for saving\n\n  }, {\n    key: \"base64ToBuffer\",\n    value: function base64ToBuffer(str) {\n      var b = atob(str);\n      var buf = new Uint8Array(b.length);\n\n      for (var i = 0, l = buf.length; i < l; i++) {\n        buf[i] = b.charCodeAt(i);\n      }\n\n      return buf;\n    }\n  }, {\n    key: \"imageToData\",\n    value: function imageToData(image, ext) {\n      var _a;\n\n      this.canvas = this.canvas || document.createElement(\"canvas\");\n      this.ctx = this.ctx || this.canvas.getContext(\"2d\");\n      this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n      this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n      (_a = this.ctx) == null ? void 0 : _a.drawImage(image, 0, 0);\n      var base64data = this.canvas.toDataURL(\"image/\".concat(ext), 1).replace(/^data:image\\/(png|jpg);base64,/, \"\");\n      return this.base64ToBuffer(base64data);\n    } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n  }, {\n    key: \"attrBufferToArray\",\n    value: function attrBufferToArray(attr) {\n      if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n        var TypedArrayConstructor = attr.array.constructor;\n        var arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n        var size = attr.itemSize;\n\n        for (var i = 0, l = attr.count; i < l; i++) {\n          for (var j = 0; j < size; j++) {\n            arr[i * size + j] = attr[this.getFuncs[j]](i);\n          }\n        }\n\n        return arr;\n      } else {\n        return attr.array;\n      }\n    } // Returns an array of the same type starting at the `st` index,\n    // and `ct` length\n\n  }, {\n    key: \"subArray\",\n    value: function subArray(arr, st, ct) {\n      if (Array.isArray(arr)) {\n        return arr.slice(st, st + ct);\n      } else {\n        var TypedArrayConstructor = arr.constructor;\n        return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n      }\n    } // Returns the string for a geometry's attribute\n\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attr, name, params, type) {\n      var array = this.attrBufferToArray(attr);\n      var res = Array.isArray(array) ? \"\".concat(\"<source id=\\\"\".concat(name, \"\\\"><float_array id=\\\"\").concat(name, \"-array\\\" count=\\\"\").concat(array.length, \"\\\">\") + array.join(\" \"), \"</float_array><technique_common>\", \"<accessor source=\\\"#\".concat(name, \"-array\\\" count=\\\"\").concat(Math.floor(array.length / attr.itemSize), \"\\\" stride=\\\"\").concat(attr.itemSize, \"\\\">\")).concat(params.map(function (n) {\n        return \"<param name=\\\"\".concat(n, \"\\\" type=\\\"\").concat(type, \"\\\" />\");\n      }).join(\"\"), \"</accessor></technique_common></source>\") : \"\";\n      return res;\n    } // Returns the string for a node's transform information\n\n  }, {\n    key: \"getTransform\",\n    value: function getTransform(o) {\n      o.updateMatrix();\n      this.transMat = this.transMat || new Matrix4();\n      this.transMat.copy(o.matrix);\n      this.transMat.transpose();\n      return \"<matrix>\".concat(this.transMat.toArray().join(\" \"), \"</matrix>\");\n    } // Process the given piece of geometry into the geometry library\n    // Returns the mesh id\n\n  }, {\n    key: \"processGeometry\",\n    value: function processGeometry(g) {\n      var info = this.geometryInfo.get(g);\n\n      if (!info) {\n        var bufferGeometry = g;\n\n        if (!bufferGeometry.isBufferGeometry) {\n          throw new Error(\"THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n\n        var meshid = \"Mesh\".concat(this.libraryGeometries.length + 1);\n        var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n        var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n          start: 0,\n          count: indexCount,\n          materialIndex: 0\n        }];\n        var gname = g.name ? \" name=\\\"\".concat(g.name, \"\\\"\") : \"\";\n        var gnode = \"<geometry id=\\\"\".concat(meshid, \"\\\"\").concat(gname, \"><mesh>\");\n        var posName = \"\".concat(meshid, \"-position\");\n        var vertName = \"\".concat(meshid, \"-vertices\");\n        gnode += this.getAttribute(bufferGeometry.attributes.position, posName, [\"X\", \"Y\", \"Z\"], \"float\");\n        gnode += \"<vertices id=\\\"\".concat(vertName, \"\\\"><input semantic=\\\"POSITION\\\" source=\\\"#\").concat(posName, \"\\\" /></vertices>\");\n        var triangleInputs = \"<input semantic=\\\"VERTEX\\\" source=\\\"#\".concat(vertName, \"\\\" offset=\\\"0\\\" />\");\n\n        if (\"normal\" in bufferGeometry.attributes) {\n          var normName = \"\".concat(meshid, \"-normal\");\n          gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, [\"X\", \"Y\", \"Z\"], \"float\");\n          triangleInputs += \"<input semantic=\\\"NORMAL\\\" source=\\\"#\".concat(normName, \"\\\" offset=\\\"0\\\" />\");\n        }\n\n        if (\"uv\" in bufferGeometry.attributes) {\n          var uvName = \"\".concat(meshid, \"-texcoord\");\n          gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, [\"S\", \"T\"], \"float\");\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(uvName, \"\\\" offset=\\\"0\\\" set=\\\"0\\\" />\");\n        }\n\n        if (\"uv2\" in bufferGeometry.attributes) {\n          var _uvName = \"\".concat(meshid, \"-texcoord2\");\n\n          gnode += this.getAttribute(bufferGeometry.attributes.uv2, _uvName, [\"S\", \"T\"], \"float\");\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(_uvName, \"\\\" offset=\\\"0\\\" set=\\\"1\\\" />\");\n        }\n\n        if (\"color\" in bufferGeometry.attributes) {\n          var colName = \"\".concat(meshid, \"-color\");\n          gnode += this.getAttribute(bufferGeometry.attributes.color, colName, [\"X\", \"Y\", \"Z\"], \"uint8\");\n          triangleInputs += \"<input semantic=\\\"COLOR\\\" source=\\\"#\".concat(colName, \"\\\" offset=\\\"0\\\" />\");\n        }\n\n        var indexArray = null;\n\n        if (bufferGeometry.index) {\n          indexArray = this.attrBufferToArray(bufferGeometry.index);\n        } else {\n          indexArray = new Array(indexCount);\n\n          for (var i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++) {\n            indexArray[i] = i;\n          }\n        }\n\n        for (var _i = 0, _l = groups.length; _i < _l; _i++) {\n          var group = groups[_i];\n          var subarr = this.subArray(indexArray, group.start, group.count);\n          var polycount = subarr.length / 3;\n          gnode += \"<triangles material=\\\"MESH_MATERIAL_\".concat(group.materialIndex, \"\\\" count=\\\"\").concat(polycount, \"\\\">\");\n          gnode += triangleInputs;\n          gnode += \"<p>\".concat(subarr.join(\" \"), \"</p>\");\n          gnode += \"</triangles>\";\n        }\n\n        gnode += \"</mesh></geometry>\";\n        this.libraryGeometries.push(gnode);\n        info = {\n          meshid: meshid,\n          bufferGeometry: bufferGeometry\n        };\n        this.geometryInfo.set(g, info);\n      }\n\n      return info;\n    } // Process the given texture into the image library\n    // Returns the image library\n\n  }, {\n    key: \"processTexture\",\n    value: function processTexture(tex) {\n      var texid = this.imageMap.get(tex);\n\n      if (texid == null) {\n        texid = \"image-\".concat(this.libraryImages.length + 1);\n        var ext = \"png\";\n        var name = tex.name || texid;\n        var imageNode = \"<image id=\\\"\".concat(texid, \"\\\" name=\\\"\").concat(name, \"\\\">\");\n\n        if (this.options.version === \"1.5.0\") {\n          imageNode += \"<init_from><ref>\".concat(this.options.textureDirectory).concat(name, \".\").concat(ext, \"</ref></init_from>\");\n        } else {\n          imageNode += \"<init_from>\".concat(this.options.textureDirectory).concat(name, \".\").concat(ext, \"</init_from>\");\n        }\n\n        imageNode += \"</image>\";\n        this.libraryImages.push(imageNode);\n        this.imageMap.set(tex, texid);\n        this.textures.push({\n          directory: this.options.textureDirectory,\n          name: name,\n          ext: ext,\n          data: this.imageToData(tex.image, ext),\n          original: tex\n        });\n      }\n\n      return texid;\n    } // Process the given material into the material and effect libraries\n    // Returns the material id\n\n  }, {\n    key: \"processMaterial\",\n    value: function processMaterial(m) {\n      var matid = this.materialMap.get(m);\n\n      if (matid == null) {\n        matid = \"Mat\".concat(this.libraryEffects.length + 1);\n        var type = \"phong\";\n\n        if (m instanceof MeshLambertMaterial) {\n          type = \"lambert\";\n        } else if (m instanceof MeshBasicMaterial) {\n          type = \"constant\";\n\n          if (m.map !== null) {\n            console.warn(\"ColladaExporter: Texture maps not supported with MeshBasicMaterial.\");\n          }\n        }\n\n        if (m instanceof MeshPhongMaterial) {\n          var emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n          var diffuse = m.color ? m.color : new Color(0, 0, 0);\n          var specular = m.specular ? m.specular : new Color(1, 1, 1);\n          var shininess = m.shininess || 0;\n          var reflectivity = m.reflectivity || 0;\n          var transparencyNode = \"\";\n\n          if (m.transparent) {\n            transparencyNode += \"<transparent>\".concat(m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : \"<float>1</float>\", \"</transparent>\");\n\n            if (m.opacity < 1) {\n              transparencyNode += \"<transparency><float>\".concat(m.opacity, \"</float></transparency>\");\n            }\n          }\n\n          var techniqueNode = \"\".concat(\"<technique sid=\\\"common\\\"><\".concat(type, \">\"), \"<emission>\", m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"emission\\\">\".concat(emissive.r, \" \").concat(emissive.g, \" \").concat(emissive.b, \" 1</color>\"), \"</emission>\").concat(type !== \"constant\" ? \"<diffuse>\".concat(m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"diffuse\\\">\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color>\"), \"</diffuse>\") : \"\").concat(type !== \"constant\" ? \"<bump>\".concat(m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : \"\", \"</bump>\") : \"\").concat(type === \"phong\" ? \"\".concat(\"<specular><color sid=\\\"specular\\\">\".concat(specular.r, \" \").concat(specular.g, \" \").concat(specular.b, \" 1</color></specular>\"), \"<shininess>\", m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : \"<float sid=\\\"shininess\\\">\".concat(shininess, \"</float>\"), \"</shininess>\") : \"\", \"<reflective><color>\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color></reflective>\"), \"<reflectivity><float>\".concat(reflectivity, \"</float></reflectivity>\")).concat(transparencyNode, \"</\".concat(type, \"></technique>\"));\n          var effectnode = \"\".concat(\"<effect id=\\\"\".concat(matid, \"-effect\\\">\"), \"<profile_COMMON>\", m.map ? \"<newparam sid=\\\"diffuse-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.map), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"diffuse-sampler\\\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>\") : \"\").concat(m.specularMap ? \"<newparam sid=\\\"specular-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.specularMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"specular-sampler\\\"><sampler2D><source>specular-surface</source></sampler2D></newparam>\") : \"\").concat(m.emissiveMap ? \"<newparam sid=\\\"emissive-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.emissiveMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"emissive-sampler\\\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>\") : \"\").concat(m.normalMap ? \"<newparam sid=\\\"bump-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.normalMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"bump-sampler\\\"><sampler2D><source>bump-surface</source></sampler2D></newparam>\") : \"\").concat(techniqueNode).concat(m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : \"\", \"</profile_COMMON></effect>\");\n          var materialName = m.name ? \" name=\\\"\".concat(m.name, \"\\\"\") : \"\";\n          var materialNode = \"<material id=\\\"\".concat(matid, \"\\\"\").concat(materialName, \"><instance_effect url=\\\"#\").concat(matid, \"-effect\\\" /></material>\");\n          this.libraryMaterials.push(materialNode);\n          this.libraryEffects.push(effectnode);\n          this.materialMap.set(m, matid);\n        }\n      }\n\n      return matid;\n    } // Recursively process the object into a scene\n\n  }, {\n    key: \"processObject\",\n    value: function processObject(o) {\n      var _this = this;\n\n      var node = \"<node name=\\\"\".concat(o.name, \"\\\">\");\n      node += this.getTransform(o);\n      var a = new Mesh();\n      a.geometry;\n\n      if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n        var geomInfo = this.processGeometry(o.geometry);\n        var meshid = geomInfo.meshid;\n        var geometry = geomInfo.bufferGeometry;\n        var matids = null;\n        var matidsArray;\n        var mat = o.material || new MeshBasicMaterial();\n        var materials = Array.isArray(mat) ? mat : [mat];\n\n        if (geometry.groups.length > materials.length) {\n          matidsArray = new Array(geometry.groups.length);\n        } else {\n          matidsArray = new Array(materials.length);\n        }\n\n        matids = matidsArray.fill(null).map(function (_, i) {\n          return _this.processMaterial(materials[i % materials.length]);\n        });\n        node += \"\".concat(\"<instance_geometry url=\\\"#\".concat(meshid, \"\\\">\") + (matids != null ? \"<bind_material><technique_common>\".concat(matids.map(function (id, i) {\n          return \"\".concat(\"<instance_material symbol=\\\"MESH_MATERIAL_\".concat(i, \"\\\" target=\\\"#\").concat(id, \"\\\" >\"), \"<bind_vertex_input semantic=\\\"TEXCOORD\\\" input_semantic=\\\"TEXCOORD\\\" input_set=\\\"0\\\" /></instance_material>\");\n        }).join(\"\"), \"</technique_common></bind_material>\") : \"\"), \"</instance_geometry>\");\n      }\n\n      o.children.forEach(function (c) {\n        return node += _this.processObject(c);\n      });\n      node += \"</node>\";\n      return node;\n    }\n  }]);\n\n  return ColladaExporter;\n}();\n\nexport { ColladaExporter };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/exporters/ColladaExporter.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","InterleavedBufferAttribute","Matrix4","MeshLambertMaterial","MeshBasicMaterial","MeshPhongMaterial","Color","DoubleSide","Mesh","ColladaExporter","options","version","author","textureDirectory","upAxis","unitName","unitMeter","geometryInfo","WeakMap","materialMap","imageMap","textures","libraryImages","libraryGeometries","libraryEffects","libraryMaterials","canvas","ctx","transMat","object","onDone","match","console","error","replace","warn","libraryVisualScenes","processObject","specLink","dae","Date","toISOString","join","res","data","format","requestAnimationFrame","urdf","_a","_b","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","ch","num","tagnum","map","tag","test","str","b","atob","buf","Uint8Array","length","i","l","charCodeAt","image","ext","document","createElement","getContext","width","SVGAnimatedLength","height","drawImage","base64data","toDataURL","base64ToBuffer","attr","isInterleavedBufferAttribute","TypedArrayConstructor","array","constructor","arr","count","itemSize","size","j","getFuncs","st","ct","Array","isArray","slice","buffer","BYTES_PER_ELEMENT","name","params","type","attrBufferToArray","Math","floor","n","o","updateMatrix","copy","matrix","transpose","toArray","g","info","get","bufferGeometry","isBufferGeometry","Error","meshid","indexCount","index","attributes","position","groups","start","materialIndex","gname","gnode","posName","vertName","getAttribute","triangleInputs","normName","normal","uvName","uv","uv2","colName","color","indexArray","group","subarr","subArray","polycount","push","set","tex","texid","imageNode","directory","imageToData","original","m","matid","emissive","diffuse","specular","shininess","reflectivity","transparencyNode","transparent","opacity","techniqueNode","emissiveMap","r","normalMap","specularMap","effectnode","processTexture","side","materialName","materialNode","node","getTransform","a","geometry","isMesh","geomInfo","processGeometry","matids","matidsArray","mat","material","materials","fill","_","processMaterial","id","children","forEach","c"],"mappings":";;;AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAvB;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAWC,KAAX;AAAA,SAAqBD,GAAG,IAAID,GAAP,GAAaJ,SAAS,CAACI,GAAD,EAAMC,GAAN,EAAW;AAAEE,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,YAAY,EAAE,IAAlC;AAAwCC,IAAAA,QAAQ,EAAE,IAAlD;AAAwDH,IAAAA,KAAK,EAALA;AAAxD,GAAX,CAAtB,GAAoGF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAApI;AAAA,CAAtB;;AACA,IAAII,aAAa,GAAG,SAAhBA,aAAgB,CAACN,GAAD,EAAMC,GAAN,EAAWC,KAAX,EAAqB;AACvCH,EAAAA,eAAe,CAACC,GAAD,EAAM,OAAOC,GAAP,KAAe,QAAf,GAA0BA,GAAG,GAAG,EAAhC,GAAqCA,GAA3C,EAAgDC,KAAhD,CAAf;;AACA,SAAOA,KAAP;AACD,CAHD;;AAIA,SAASK,0BAAT,EAAqCC,OAArC,EAA8CC,mBAA9C,EAAmEC,iBAAnE,EAAsFC,iBAAtF,EAAyGC,KAAzG,EAAgHC,UAAhH,EAA4HC,IAA5H,QAAwI,OAAxI;;IACMC,e;AACJ,6BAAc;AAAA;;AACZT,IAAAA,aAAa,CAAC,IAAD,EAAO,SAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,cAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,aAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,eAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,mBAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,gBAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,kBAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,QAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,KAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,CAAb;;AACAA,IAAAA,aAAa,CAAC,IAAD,EAAO,UAAP,EAAmB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAnB,CAAb;;AACA,SAAKU,OAAL,GAAe;AACbC,MAAAA,OAAO,EAAE,OADI;AAEbC,MAAAA,MAAM,EAAE,IAFK;AAGbC,MAAAA,gBAAgB,EAAE,EAHL;AAIbC,MAAAA,MAAM,EAAE,MAJK;AAKbC,MAAAA,QAAQ,EAAE,IALG;AAMbC,MAAAA,SAAS,EAAE;AANE,KAAf;AAQA,SAAKC,YAAL,GAAoB,eAAgB,IAAIC,OAAJ,EAApC;AACA,SAAKC,WAAL,GAAmB,eAAgB,IAAID,OAAJ,EAAnC;AACA,SAAKE,QAAL,GAAgB,eAAgB,IAAIF,OAAJ,EAAhC;AACA,SAAKG,QAAL,GAAgB,EAAhB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,GAAL,GAAW,IAAX;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACD;;;;WACD,eAAMC,MAAN,EAAcC,MAAd,EAAoC;AAAA,UAAdpB,OAAc,uEAAJ,EAAI;AAClC,WAAKA,OAAL,mCAAoB,KAAKA,OAAzB,GAAqCA,OAArC;;AACA,UAAI,KAAKA,OAAL,CAAaI,MAAb,CAAoBiB,KAApB,CAA0B,YAA1B,MAA4C,IAAhD,EAAsD;AACpDC,QAAAA,OAAO,CAACC,KAAR,CAAc,uEAAd;AACA,eAAO,IAAP;AACD;;AACD,UAAI,KAAKvB,OAAL,CAAaK,QAAb,KAA0B,IAA1B,IAAkC,KAAKL,OAAL,CAAaM,SAAb,KAA2B,IAAjE,EAAuE;AACrEgB,QAAAA,OAAO,CAACC,KAAR,CAAc,4EAAd;AACA,eAAO,IAAP;AACD;;AACD,UAAI,KAAKvB,OAAL,CAAaM,SAAb,KAA2B,IAA3B,IAAmC,KAAKN,OAAL,CAAaK,QAAb,KAA0B,IAAjE,EAAuE;AACrEiB,QAAAA,OAAO,CAACC,KAAR,CAAc,4EAAd;AACA,eAAO,IAAP;AACD;;AACD,UAAI,KAAKvB,OAAL,CAAaG,gBAAb,KAAkC,EAAtC,EAA0C;AACxC,aAAKH,OAAL,CAAaG,gBAAb,GAAgC,UAAG,KAAKH,OAAL,CAAaG,gBAAhB,OAAoCqB,OAApC,CAA4C,KAA5C,EAAmD,GAAnD,EAAwDA,OAAxD,CAAgE,MAAhE,EAAwE,GAAxE,CAAhC;AACD;;AACD,UAAI,KAAKxB,OAAL,CAAaC,OAAb,KAAyB,OAAzB,IAAoC,KAAKD,OAAL,CAAaC,OAAb,KAAyB,OAAjE,EAA0E;AACxEqB,QAAAA,OAAO,CAACG,IAAR,qCAA0C,KAAKzB,OAAL,CAAaC,OAAvD;AACA,eAAO,IAAP;AACD;;AACD,UAAMyB,mBAAmB,GAAG,KAAKC,aAAL,CAAmBR,MAAnB,CAA5B;AACA,UAAMS,QAAQ,GAAG,KAAK5B,OAAL,CAAaC,OAAb,KAAyB,OAAzB,GAAmC,8CAAnC,GAAoF,kCAArG;AACA,UAAI4B,GAAG,qGAAgFD,QAAhF,0BAAsG,KAAK5B,OAAL,CAAaC,OAAnH,4FAA+M,KAAKD,OAAL,CAAaE,MAAb,KAAwB,IAAxB,qBAA0C,KAAKF,OAAL,CAAaE,MAAvD,iBAA2E,EAA1R,uCAAyT,CAAC,eAAgB,IAAI4B,IAAJ,EAAjB,CAA6BC,WAA7B,EAAzT,qCAA+X,CAAC,eAAgB,IAAID,IAAJ,EAAjB,CAA6BC,WAA7B,EAA/X,oDAAP;AACAF,MAAAA,GAAG,8BAAuB,KAAKjB,aAAL,CAAmBoB,IAAnB,CAAwB,EAAxB,CAAvB,sBAAH;AACAH,MAAAA,GAAG,+BAAwB,KAAKf,cAAL,CAAoBkB,IAApB,CAAyB,EAAzB,CAAxB,uBAAH;AACAH,MAAAA,GAAG,iCAA0B,KAAKd,gBAAL,CAAsBiB,IAAtB,CAA2B,EAA3B,CAA1B,yBAAH;AACAH,MAAAA,GAAG,kCAA2B,KAAKhB,iBAAL,CAAuBmB,IAAvB,CAA4B,EAA5B,CAA3B,0BAAH;AACAH,MAAAA,GAAG,+EAAoEH,mBAApE,4CAAH;AACAG,MAAAA,GAAG,IAAI,sDAAP;AACAA,MAAAA,GAAG,IAAI,YAAP;AACA,UAAMI,GAAG,GAAG;AACVC,QAAAA,IAAI,EAAE,KAAKC,MAAL,CAAYN,GAAZ,CADI;AAEVlB,QAAAA,QAAQ,EAAE,KAAKA;AAFL,OAAZ;;AAIA,UAAI,OAAOS,MAAP,KAAkB,UAAtB,EAAkC;AAChCgB,QAAAA,qBAAqB,CAAC;AAAA,iBAAMhB,MAAM,CAACa,GAAD,CAAZ;AAAA,SAAD,CAArB;AACD;;AACD,aAAOA,GAAP;AACD,K,CACD;;;;WACA,gBAAOI,IAAP,EAAa;AACX,UAAIC,EAAJ,EAAQC,EAAR;;AACA,UAAMC,UAAU,GAAG,MAAnB;AACA,UAAMC,eAAe,GAAG,eAAxB;AACA,UAAMC,QAAQ,GAAG,uBAAjB;;AACA,UAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,EAAD,EAAKC,GAAL;AAAA,eAAaA,GAAG,GAAG,CAAN,GAAUD,EAAE,GAAGD,GAAG,CAACC,EAAD,EAAKC,GAAG,GAAG,CAAX,CAAlB,GAAkC,EAA/C;AAAA,OAAZ;;AACA,UAAIC,MAAM,GAAG,CAAb;AACA,aAAO,CAACP,EAAE,GAAG,CAACD,EAAE,GAAGD,IAAI,CAAChB,KAAL,CAAW,oCAAX,CAAN,KAA2D,IAA3D,GAAkE,KAAK,CAAvE,GAA2EiB,EAAE,CAACS,GAAH,CAAO,UAACC,GAAD,EAAS;AACtG,YAAI,CAACN,QAAQ,CAACO,IAAT,CAAcD,GAAd,CAAD,IAAuB,CAACP,eAAe,CAACQ,IAAhB,CAAqBD,GAArB,CAAxB,IAAqDR,UAAU,CAACS,IAAX,CAAgBD,GAAhB,CAAzD,EAA+E;AAC7EF,UAAAA,MAAM;AACP;;AACD,YAAMb,GAAG,aAAMU,GAAG,CAAC,IAAD,EAAOG,MAAP,CAAT,SAA0BE,GAA1B,CAAT;;AACA,YAAI,CAACN,QAAQ,CAACO,IAAT,CAAcD,GAAd,CAAD,IAAuB,CAACP,eAAe,CAACQ,IAAhB,CAAqBD,GAArB,CAAxB,IAAqD,CAACR,UAAU,CAACS,IAAX,CAAgBD,GAAhB,CAA1D,EAAgF;AAC9EF,UAAAA,MAAM;AACP;;AACD,eAAOb,GAAP;AACD,OATuF,EASrFD,IATqF,CAShF,IATgF,CAAjF,KASW,IATX,GASkBO,EATlB,GASuB,EAT9B;AAUD,K,CACD;;;;WACA,wBAAeW,GAAf,EAAoB;AAClB,UAAMC,CAAC,GAAGC,IAAI,CAACF,GAAD,CAAd;AACA,UAAMG,GAAG,GAAG,IAAIC,UAAJ,CAAeH,CAAC,CAACI,MAAjB,CAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,GAAG,CAACE,MAAxB,EAAgCC,CAAC,GAAGC,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CH,QAAAA,GAAG,CAACG,CAAD,CAAH,GAASL,CAAC,CAACO,UAAF,CAAaF,CAAb,CAAT;AACD;;AACD,aAAOH,GAAP;AACD;;;WACD,qBAAYM,KAAZ,EAAmBC,GAAnB,EAAwB;AACtB,UAAItB,EAAJ;;AACA,WAAKtB,MAAL,GAAc,KAAKA,MAAL,IAAe6C,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA7B;AACA,WAAK7C,GAAL,GAAW,KAAKA,GAAL,IAAY,KAAKD,MAAL,CAAY+C,UAAZ,CAAuB,IAAvB,CAAvB;AACA,WAAK/C,MAAL,CAAYgD,KAAZ,GAAoBL,KAAK,CAACK,KAAN,YAAuBC,iBAAvB,GAA2C,CAA3C,GAA+CN,KAAK,CAACK,KAAzE;AACA,WAAKhD,MAAL,CAAYkD,MAAZ,GAAqBP,KAAK,CAACO,MAAN,YAAwBD,iBAAxB,GAA4C,CAA5C,GAAgDN,KAAK,CAACO,MAA3E;AACA,OAAC5B,EAAE,GAAG,KAAKrB,GAAX,KAAmB,IAAnB,GAA0B,KAAK,CAA/B,GAAmCqB,EAAE,CAAC6B,SAAH,CAAaR,KAAb,EAAoB,CAApB,EAAuB,CAAvB,CAAnC;AACA,UAAMS,UAAU,GAAG,KAAKpD,MAAL,CAAYqD,SAAZ,iBAA+BT,GAA/B,GAAsC,CAAtC,EAAyCpC,OAAzC,CAAiD,gCAAjD,EAAmF,EAAnF,CAAnB;AACA,aAAO,KAAK8C,cAAL,CAAoBF,UAApB,CAAP;AACD,K,CACD;;;;WACA,2BAAkBG,IAAlB,EAAwB;AACtB,UAAIA,IAAI,YAAYhF,0BAAhB,IAA8CgF,IAAI,CAACC,4BAAvD,EAAqF;AACnF,YAAMC,qBAAqB,GAAGF,IAAI,CAACG,KAAL,CAAWC,WAAzC;AACA,YAAMC,GAAG,GAAG,IAAIH,qBAAJ,CAA0BF,IAAI,CAACM,KAAL,GAAaN,IAAI,CAACO,QAA5C,CAAZ;AACA,YAAMC,IAAI,GAAGR,IAAI,CAACO,QAAlB;;AACA,aAAK,IAAItB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGc,IAAI,CAACM,KAAzB,EAAgCrB,CAAC,GAAGC,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,eAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7BJ,YAAAA,GAAG,CAACpB,CAAC,GAAGuB,IAAJ,GAAWC,CAAZ,CAAH,GAAoBT,IAAI,CAAC,KAAKU,QAAL,CAAcD,CAAd,CAAD,CAAJ,CAAuBxB,CAAvB,CAApB;AACD;AACF;;AACD,eAAOoB,GAAP;AACD,OAVD,MAUO;AACL,eAAOL,IAAI,CAACG,KAAZ;AACD;AACF,K,CACD;AACA;;;;WACA,kBAASE,GAAT,EAAcM,EAAd,EAAkBC,EAAlB,EAAsB;AACpB,UAAIC,KAAK,CAACC,OAAN,CAAcT,GAAd,CAAJ,EAAwB;AACtB,eAAOA,GAAG,CAACU,KAAJ,CAAUJ,EAAV,EAAcA,EAAE,GAAGC,EAAnB,CAAP;AACD,OAFD,MAEO;AACL,YAAMV,qBAAqB,GAAGG,GAAG,CAACD,WAAlC;AACA,eAAO,IAAIF,qBAAJ,CAA0BG,GAAG,CAACW,MAA9B,EAAsCL,EAAE,GAAGN,GAAG,CAACY,iBAA/C,EAAkEL,EAAlE,CAAP;AACD;AACF,K,CACD;;;;WACA,sBAAaZ,IAAb,EAAmBkB,IAAnB,EAAyBC,MAAzB,EAAiCC,IAAjC,EAAuC;AACrC,UAAMjB,KAAK,GAAG,KAAKkB,iBAAL,CAAuBrB,IAAvB,CAAd;AACA,UAAMtC,GAAG,GAAGmD,KAAK,CAACC,OAAN,CAAcX,KAAd,cAA0B,uBAAee,IAAf,kCAAyCA,IAAzC,8BAA+Df,KAAK,CAACnB,MAArE,WAAkFmB,KAAK,CAAC1C,IAAN,CAAW,GAAX,CAA5G,oEAAoLyD,IAApL,8BAA0MI,IAAI,CAACC,KAAL,CACpNpB,KAAK,CAACnB,MAAN,GAAegB,IAAI,CAACO,QADgM,CAA1M,yBAEEP,IAAI,CAACO,QAFP,iBAEsBY,MAAM,CAAC3C,GAAP,CAAW,UAACgD,CAAD;AAAA,uCAAuBA,CAAvB,uBAAmCJ,IAAnC;AAAA,OAAX,EAA0D3D,IAA1D,CAA+D,EAA/D,CAFtB,+CAEoI,EAFhJ;AAGA,aAAOC,GAAP;AACD,K,CACD;;;;WACA,sBAAa+D,CAAb,EAAgB;AACdA,MAAAA,CAAC,CAACC,YAAF;AACA,WAAK/E,QAAL,GAAgB,KAAKA,QAAL,IAAiB,IAAI1B,OAAJ,EAAjC;AACA,WAAK0B,QAAL,CAAcgF,IAAd,CAAmBF,CAAC,CAACG,MAArB;AACA,WAAKjF,QAAL,CAAckF,SAAd;AACA,+BAAkB,KAAKlF,QAAL,CAAcmF,OAAd,GAAwBrE,IAAxB,CAA6B,GAA7B,CAAlB;AACD,K,CACD;AACA;;;;WACA,yBAAgBsE,CAAhB,EAAmB;AACjB,UAAIC,IAAI,GAAG,KAAKhG,YAAL,CAAkBiG,GAAlB,CAAsBF,CAAtB,CAAX;;AACA,UAAI,CAACC,IAAL,EAAW;AACT,YAAME,cAAc,GAAGH,CAAvB;;AACA,YAAI,CAACG,cAAc,CAACC,gBAApB,EAAsC;AACpC,gBAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AACD,YAAMC,MAAM,iBAAU,KAAK/F,iBAAL,CAAuB0C,MAAvB,GAAgC,CAA1C,CAAZ;AACA,YAAMsD,UAAU,GAAGJ,cAAc,CAACK,KAAf,GAAuBL,cAAc,CAACK,KAAf,CAAqBjC,KAArB,GAA6B4B,cAAc,CAACK,KAAf,CAAqBhC,QAAzE,GAAoF2B,cAAc,CAACM,UAAf,CAA0BC,QAA1B,CAAmCnC,KAA1I;AACA,YAAMoC,MAAM,GAAGR,cAAc,CAACQ,MAAf,IAAyB,IAAzB,IAAiCR,cAAc,CAACQ,MAAf,CAAsB1D,MAAtB,KAAiC,CAAlE,GAAsEkD,cAAc,CAACQ,MAArF,GAA8F,CAAC;AAAEC,UAAAA,KAAK,EAAE,CAAT;AAAYrC,UAAAA,KAAK,EAAEgC,UAAnB;AAA+BM,UAAAA,aAAa,EAAE;AAA9C,SAAD,CAA7G;AACA,YAAMC,KAAK,GAAGd,CAAC,CAACb,IAAF,qBAAmBa,CAAC,CAACb,IAArB,UAA+B,EAA7C;AACA,YAAI4B,KAAK,4BAAoBT,MAApB,eAA8BQ,KAA9B,YAAT;AACA,YAAME,OAAO,aAAMV,MAAN,cAAb;AACA,YAAMW,QAAQ,aAAMX,MAAN,cAAd;AACAS,QAAAA,KAAK,IAAI,KAAKG,YAAL,CAAkBf,cAAc,CAACM,UAAf,CAA0BC,QAA5C,EAAsDM,OAAtD,EAA+D,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/D,EAAgF,OAAhF,CAAT;AACAD,QAAAA,KAAK,6BAAqBE,QAArB,uDAAsED,OAAtE,qBAAL;AACA,YAAIG,cAAc,kDAAwCF,QAAxC,uBAAlB;;AACA,YAAI,YAAYd,cAAc,CAACM,UAA/B,EAA2C;AACzC,cAAMW,QAAQ,aAAMd,MAAN,YAAd;AACAS,UAAAA,KAAK,IAAI,KAAKG,YAAL,CAAkBf,cAAc,CAACM,UAAf,CAA0BY,MAA5C,EAAoDD,QAApD,EAA8D,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA9D,EAA+E,OAA/E,CAAT;AACAD,UAAAA,cAAc,mDAAyCC,QAAzC,uBAAd;AACD;;AACD,YAAI,QAAQjB,cAAc,CAACM,UAA3B,EAAuC;AACrC,cAAMa,MAAM,aAAMhB,MAAN,cAAZ;AACAS,UAAAA,KAAK,IAAI,KAAKG,YAAL,CAAkBf,cAAc,CAACM,UAAf,CAA0Bc,EAA5C,EAAgDD,MAAhD,EAAwD,CAAC,GAAD,EAAM,GAAN,CAAxD,EAAoE,OAApE,CAAT;AACAH,UAAAA,cAAc,qDAA2CG,MAA3C,iCAAd;AACD;;AACD,YAAI,SAASnB,cAAc,CAACM,UAA5B,EAAwC;AACtC,cAAMa,OAAM,aAAMhB,MAAN,eAAZ;;AACAS,UAAAA,KAAK,IAAI,KAAKG,YAAL,CAAkBf,cAAc,CAACM,UAAf,CAA0Be,GAA5C,EAAiDF,OAAjD,EAAyD,CAAC,GAAD,EAAM,GAAN,CAAzD,EAAqE,OAArE,CAAT;AACAH,UAAAA,cAAc,qDAA2CG,OAA3C,iCAAd;AACD;;AACD,YAAI,WAAWnB,cAAc,CAACM,UAA9B,EAA0C;AACxC,cAAMgB,OAAO,aAAMnB,MAAN,WAAb;AACAS,UAAAA,KAAK,IAAI,KAAKG,YAAL,CAAkBf,cAAc,CAACM,UAAf,CAA0BiB,KAA5C,EAAmDD,OAAnD,EAA4D,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA5D,EAA6E,OAA7E,CAAT;AACAN,UAAAA,cAAc,kDAAwCM,OAAxC,uBAAd;AACD;;AACD,YAAIE,UAAU,GAAG,IAAjB;;AACA,YAAIxB,cAAc,CAACK,KAAnB,EAA0B;AACxBmB,UAAAA,UAAU,GAAG,KAAKrC,iBAAL,CAAuBa,cAAc,CAACK,KAAtC,CAAb;AACD,SAFD,MAEO;AACLmB,UAAAA,UAAU,GAAG,IAAI7C,KAAJ,CAAUyB,UAAV,CAAb;;AACA,eAAK,IAAIrD,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwE,UAAU,CAAC1E,MAA/B,EAAuCC,CAAC,GAAGC,CAAJ,IAAS2B,KAAK,CAACC,OAAN,CAAc4C,UAAd,CAAhD,EAA2EzE,CAAC,EAA5E;AACEyE,YAAAA,UAAU,CAACzE,CAAD,CAAV,GAAgBA,CAAhB;AADF;AAED;;AACD,aAAK,IAAIA,EAAC,GAAG,CAAR,EAAWC,EAAC,GAAGwD,MAAM,CAAC1D,MAA3B,EAAmCC,EAAC,GAAGC,EAAvC,EAA0CD,EAAC,EAA3C,EAA+C;AAC7C,cAAM0E,KAAK,GAAGjB,MAAM,CAACzD,EAAD,CAApB;AACA,cAAM2E,MAAM,GAAG,KAAKC,QAAL,CAAcH,UAAd,EAA0BC,KAAK,CAAChB,KAAhC,EAAuCgB,KAAK,CAACrD,KAA7C,CAAf;AACA,cAAMwD,SAAS,GAAGF,MAAM,CAAC5E,MAAP,GAAgB,CAAlC;AACA8D,UAAAA,KAAK,kDAA0Ca,KAAK,CAACf,aAAhD,wBAAyEkB,SAAzE,QAAL;AACAhB,UAAAA,KAAK,IAAII,cAAT;AACAJ,UAAAA,KAAK,iBAAUc,MAAM,CAACnG,IAAP,CAAY,GAAZ,CAAV,SAAL;AACAqF,UAAAA,KAAK,IAAI,cAAT;AACD;;AACDA,QAAAA,KAAK,IAAI,oBAAT;AACA,aAAKxG,iBAAL,CAAuByH,IAAvB,CAA4BjB,KAA5B;AACAd,QAAAA,IAAI,GAAG;AAAEK,UAAAA,MAAM,EAANA,MAAF;AAAUH,UAAAA,cAAc,EAAdA;AAAV,SAAP;AACA,aAAKlG,YAAL,CAAkBgI,GAAlB,CAAsBjC,CAAtB,EAAyBC,IAAzB;AACD;;AACD,aAAOA,IAAP;AACD,K,CACD;AACA;;;;WACA,wBAAeiC,GAAf,EAAoB;AAClB,UAAIC,KAAK,GAAG,KAAK/H,QAAL,CAAc8F,GAAd,CAAkBgC,GAAlB,CAAZ;;AACA,UAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBA,QAAAA,KAAK,mBAAY,KAAK7H,aAAL,CAAmB2C,MAAnB,GAA4B,CAAxC,CAAL;AACA,YAAMK,GAAG,GAAG,KAAZ;AACA,YAAM6B,IAAI,GAAG+C,GAAG,CAAC/C,IAAJ,IAAYgD,KAAzB;AACA,YAAIC,SAAS,yBAAiBD,KAAjB,uBAAiChD,IAAjC,QAAb;;AACA,YAAI,KAAKzF,OAAL,CAAaC,OAAb,KAAyB,OAA7B,EAAsC;AACpCyI,UAAAA,SAAS,8BAAuB,KAAK1I,OAAL,CAAaG,gBAApC,SAAuDsF,IAAvD,cAA+D7B,GAA/D,uBAAT;AACD,SAFD,MAEO;AACL8E,UAAAA,SAAS,yBAAkB,KAAK1I,OAAL,CAAaG,gBAA/B,SAAkDsF,IAAlD,cAA0D7B,GAA1D,iBAAT;AACD;;AACD8E,QAAAA,SAAS,IAAI,UAAb;AACA,aAAK9H,aAAL,CAAmB0H,IAAnB,CAAwBI,SAAxB;AACA,aAAKhI,QAAL,CAAc6H,GAAd,CAAkBC,GAAlB,EAAuBC,KAAvB;AACA,aAAK9H,QAAL,CAAc2H,IAAd,CAAmB;AACjBK,UAAAA,SAAS,EAAE,KAAK3I,OAAL,CAAaG,gBADP;AAEjBsF,UAAAA,IAAI,EAAJA,IAFiB;AAGjB7B,UAAAA,GAAG,EAAHA,GAHiB;AAIjB1B,UAAAA,IAAI,EAAE,KAAK0G,WAAL,CAAiBJ,GAAG,CAAC7E,KAArB,EAA4BC,GAA5B,CAJW;AAKjBiF,UAAAA,QAAQ,EAAEL;AALO,SAAnB;AAOD;;AACD,aAAOC,KAAP;AACD,K,CACD;AACA;;;;WACA,yBAAgBK,CAAhB,EAAmB;AACjB,UAAIC,KAAK,GAAG,KAAKtI,WAAL,CAAiB+F,GAAjB,CAAqBsC,CAArB,CAAZ;;AACA,UAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBA,QAAAA,KAAK,gBAAS,KAAKjI,cAAL,CAAoByC,MAApB,GAA6B,CAAtC,CAAL;AACA,YAAIoC,IAAI,GAAG,OAAX;;AACA,YAAImD,CAAC,YAAYrJ,mBAAjB,EAAsC;AACpCkG,UAAAA,IAAI,GAAG,SAAP;AACD,SAFD,MAEO,IAAImD,CAAC,YAAYpJ,iBAAjB,EAAoC;AACzCiG,UAAAA,IAAI,GAAG,UAAP;;AACA,cAAImD,CAAC,CAAC/F,GAAF,KAAU,IAAd,EAAoB;AAClBzB,YAAAA,OAAO,CAACG,IAAR,CAAa,qEAAb;AACD;AACF;;AACD,YAAIqH,CAAC,YAAYnJ,iBAAjB,EAAoC;AAClC,cAAMqJ,QAAQ,GAAGF,CAAC,CAACE,QAAF,GAAaF,CAAC,CAACE,QAAf,GAA0B,IAAIpJ,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAA3C;AACA,cAAMqJ,OAAO,GAAGH,CAAC,CAACd,KAAF,GAAUc,CAAC,CAACd,KAAZ,GAAoB,IAAIpI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAApC;AACA,cAAMsJ,QAAQ,GAAGJ,CAAC,CAACI,QAAF,GAAaJ,CAAC,CAACI,QAAf,GAA0B,IAAItJ,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAA3C;AACA,cAAMuJ,SAAS,GAAGL,CAAC,CAACK,SAAF,IAAe,CAAjC;AACA,cAAMC,YAAY,GAAGN,CAAC,CAACM,YAAF,IAAkB,CAAvC;AACA,cAAIC,gBAAgB,GAAG,EAAvB;;AACA,cAAIP,CAAC,CAACQ,WAAN,EAAmB;AACjBD,YAAAA,gBAAgB,2BAAoBP,CAAC,CAAC/F,GAAF,GAAQ,+CAAR,GAA0D,kBAA9E,mBAAhB;;AACA,gBAAI+F,CAAC,CAACS,OAAF,GAAY,CAAhB,EAAmB;AACjBF,cAAAA,gBAAgB,mCAA4BP,CAAC,CAACS,OAA9B,4BAAhB;AACD;AACF;;AACD,cAAMC,aAAa,kDAAkC7D,IAAlC,sBAAsDmD,CAAC,CAACW,WAAF,GAAgB,4DAAhB,qCAAwGT,QAAQ,CAACU,CAAjH,cAAsHV,QAAQ,CAAC1C,CAA/H,cAAoI0C,QAAQ,CAAC7F,CAA7I,eAAtD,wBAA8NwC,IAAI,KAAK,UAAT,sBAAkCmD,CAAC,CAAC/F,GAAF,GAAQ,2DAAR,oCAA8FkG,OAAO,CAACS,CAAtG,cAA2GT,OAAO,CAAC3C,CAAnH,cAAwH2C,OAAO,CAAC9F,CAAhI,eAAlC,kBAA8L,EAA5Z,SAAiawC,IAAI,KAAK,UAAT,mBAA+BmD,CAAC,CAACa,SAAF,GAAc,wDAAd,GAAyE,EAAxG,eAAsH,EAAvhB,SAA4hBhE,IAAI,KAAK,OAAT,yDAAyDuD,QAAQ,CAACQ,CAAlE,cAAuER,QAAQ,CAAC5C,CAAhF,cAAqF4C,QAAQ,CAAC/F,CAA9F,2CAAoI2F,CAAC,CAACc,WAAF,GAAgB,4DAAhB,sCAAyGT,SAAzG,aAApI,oBAAiR,EAA7yB,+BAAw0BF,OAAO,CAACS,CAAh1B,cAAq1BT,OAAO,CAAC3C,CAA71B,cAAk2B2C,OAAO,CAAC9F,CAA12B,6DAA+5BiG,YAA/5B,qCAAu8BC,gBAAv8B,cAA+9B1D,IAA/9B,mBAAnB;AACA,cAAMkE,UAAU,oCAAqBd,KAArB,qCAAwDD,CAAC,CAAC/F,GAAF,yFAA4E,KAAK+G,cAAL,CAClJhB,CAAC,CAAC/F,GADgJ,CAA5E,kJAEmE,EAF3H,SAEgI+F,CAAC,CAACc,WAAF,0FAAqF,KAAKE,cAAL,CACnOhB,CAAC,CAACc,WADiO,CAArF,oJAEH,EAJ7H,SAIkId,CAAC,CAACW,WAAF,0FAAqF,KAAKK,cAAL,CACrOhB,CAAC,CAACW,WADmO,CAArF,oJAEL,EAN7H,SAMkIX,CAAC,CAACa,SAAF,sFAA+E,KAAKG,cAAL,CAC/NhB,CAAC,CAACa,SAD6N,CAA/E,4IAEb,EARrH,SAQ0HH,aAR1H,SAQ0IV,CAAC,CAACiB,IAAF,KAAWlK,UAAX,GAAwB,sHAAxB,GAAiJ,EAR3R,+BAAhB;AASA,cAAMmK,YAAY,GAAGlB,CAAC,CAACrD,IAAF,qBAAmBqD,CAAC,CAACrD,IAArB,UAA+B,EAApD;AACA,cAAMwE,YAAY,4BAAoBlB,KAApB,eAA6BiB,YAA7B,sCAAoEjB,KAApE,4BAAlB;AACA,eAAKhI,gBAAL,CAAsBuH,IAAtB,CAA2B2B,YAA3B;AACA,eAAKnJ,cAAL,CAAoBwH,IAApB,CAAyBuB,UAAzB;AACA,eAAKpJ,WAAL,CAAiB8H,GAAjB,CAAqBO,CAArB,EAAwBC,KAAxB;AACD;AACF;;AACD,aAAOA,KAAP;AACD,K,CACD;;;;WACA,uBAAc/C,CAAd,EAAiB;AAAA;;AACf,UAAIkE,IAAI,0BAAkBlE,CAAC,CAACP,IAApB,QAAR;AACAyE,MAAAA,IAAI,IAAI,KAAKC,YAAL,CAAkBnE,CAAlB,CAAR;AACA,UAAMoE,CAAC,GAAG,IAAItK,IAAJ,EAAV;AACAsK,MAAAA,CAAC,CAACC,QAAF;;AACA,UAAIrE,CAAC,YAAYlG,IAAb,IAAqBkG,CAAC,CAACsE,MAAvB,IAAiCtE,CAAC,CAACqE,QAAF,KAAe,IAApD,EAA0D;AACxD,YAAME,QAAQ,GAAG,KAAKC,eAAL,CAAqBxE,CAAC,CAACqE,QAAvB,CAAjB;AACA,YAAMzD,MAAM,GAAG2D,QAAQ,CAAC3D,MAAxB;AACA,YAAMyD,QAAQ,GAAGE,QAAQ,CAAC9D,cAA1B;AACA,YAAIgE,MAAM,GAAG,IAAb;AACA,YAAIC,WAAJ;AACA,YAAMC,GAAG,GAAG3E,CAAC,CAAC4E,QAAF,IAAc,IAAIlL,iBAAJ,EAA1B;AACA,YAAMmL,SAAS,GAAGzF,KAAK,CAACC,OAAN,CAAcsF,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA7C;;AACA,YAAIN,QAAQ,CAACpD,MAAT,CAAgB1D,MAAhB,GAAyBsH,SAAS,CAACtH,MAAvC,EAA+C;AAC7CmH,UAAAA,WAAW,GAAG,IAAItF,KAAJ,CAAUiF,QAAQ,CAACpD,MAAT,CAAgB1D,MAA1B,CAAd;AACD,SAFD,MAEO;AACLmH,UAAAA,WAAW,GAAG,IAAItF,KAAJ,CAAUyF,SAAS,CAACtH,MAApB,CAAd;AACD;;AACDkH,QAAAA,MAAM,GAAGC,WAAW,CAACI,IAAZ,CAAiB,IAAjB,EAAuB/H,GAAvB,CAA2B,UAACgI,CAAD,EAAIvH,CAAJ;AAAA,iBAAU,KAAI,CAACwH,eAAL,CAAqBH,SAAS,CAACrH,CAAC,GAAGqH,SAAS,CAACtH,MAAf,CAA9B,CAAV;AAAA,SAA3B,CAAT;AACA2G,QAAAA,IAAI,cAAO,oCAA4BtD,MAA5B,YAA0C6D,MAAM,IAAI,IAAV,8CAAqDA,MAAM,CAAC1H,GAAP,CACxG,UAACkI,EAAD,EAAKzH,CAAL;AAAA,+EAA0DA,CAA1D,0BAAyEyH,EAAzE;AAAA,SADwG,EAExGjJ,IAFwG,CAEnG,EAFmG,CAArD,2CAEH,EAFvC,CAAP,yBAAJ;AAGD;;AACDgE,MAAAA,CAAC,CAACkF,QAAF,CAAWC,OAAX,CAAmB,UAACC,CAAD;AAAA,eAAOlB,IAAI,IAAI,KAAI,CAACvI,aAAL,CAAmByJ,CAAnB,CAAf;AAAA,OAAnB;AACAlB,MAAAA,IAAI,IAAI,SAAR;AACA,aAAOA,IAAP;AACD;;;;;;AAEH,SACEnK,eADF","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from \"three\";\nclass ColladaExporter {\n  constructor() {\n    __publicField(this, \"options\");\n    __publicField(this, \"geometryInfo\");\n    __publicField(this, \"materialMap\");\n    __publicField(this, \"imageMap\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"libraryImages\");\n    __publicField(this, \"libraryGeometries\");\n    __publicField(this, \"libraryEffects\");\n    __publicField(this, \"libraryMaterials\");\n    __publicField(this, \"canvas\");\n    __publicField(this, \"ctx\");\n    __publicField(this, \"transMat\");\n    __publicField(this, \"getFuncs\", [\"getX\", \"getY\", \"getZ\", \"getW\"]);\n    this.options = {\n      version: \"1.4.1\",\n      author: null,\n      textureDirectory: \"\",\n      upAxis: \"Y_UP\",\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = /* @__PURE__ */ new WeakMap();\n    this.materialMap = /* @__PURE__ */ new WeakMap();\n    this.imageMap = /* @__PURE__ */ new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n  parse(object, onDone, options = {}) {\n    this.options = { ...this.options, ...options };\n    if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n      console.error(\"ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.\");\n      return null;\n    }\n    if (this.options.unitName !== null && this.options.unitMeter === null) {\n      console.error(\"ColladaExporter: unitMeter needs to be specified if unitName is specified.\");\n      return null;\n    }\n    if (this.options.unitMeter !== null && this.options.unitName === null) {\n      console.error(\"ColladaExporter: unitName needs to be specified if unitMeter is specified.\");\n      return null;\n    }\n    if (this.options.textureDirectory !== \"\") {\n      this.options.textureDirectory = `${this.options.textureDirectory}/`.replace(/\\\\/g, \"/\").replace(/\\/+/g, \"/\");\n    }\n    if (this.options.version !== \"1.4.1\" && this.options.version !== \"1.5.0\") {\n      console.warn(`ColladaExporter : Version ${this.options.version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    }\n    const libraryVisualScenes = this.processObject(object);\n    const specLink = this.options.version === \"1.4.1\" ? \"http://www.collada.org/2005/11/COLLADASchema\" : \"https://www.khronos.org/collada/\";\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${this.options.version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${this.options.author !== null ? `<author>${this.options.author}</author>` : \"\"}</contributor>${`<created>${(/* @__PURE__ */ new Date()).toISOString()}</created>`}${`<modified>${(/* @__PURE__ */ new Date()).toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${this.libraryImages.join(\"\")}</library_images>`;\n    dae += `<library_effects>${this.libraryEffects.join(\"\")}</library_effects>`;\n    dae += `<library_materials>${this.libraryMaterials.join(\"\")}</library_materials>`;\n    dae += `<library_geometries>${this.libraryGeometries.join(\"\")}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += \"</COLLADA>\";\n    const res = {\n      data: this.format(dae),\n      textures: this.textures\n    };\n    if (typeof onDone === \"function\") {\n      requestAnimationFrame(() => onDone(res));\n    }\n    return res;\n  }\n  // Convert the urdf xml into a well-formatted, indented format\n  format(urdf) {\n    var _a, _b;\n    const IS_END_TAG = /^<\\//;\n    const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n    const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n    const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : \"\";\n    let tagnum = 0;\n    return (_b = (_a = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) == null ? void 0 : _a.map((tag) => {\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n        tagnum--;\n      }\n      const res = `${pad(\"  \", tagnum)}${tag}`;\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n        tagnum++;\n      }\n      return res;\n    }).join(\"\\n\")) != null ? _b : \"\";\n  }\n  // Convert an image into a png format for saving\n  base64ToBuffer(str) {\n    const b = atob(str);\n    const buf = new Uint8Array(b.length);\n    for (let i = 0, l = buf.length; i < l; i++) {\n      buf[i] = b.charCodeAt(i);\n    }\n    return buf;\n  }\n  imageToData(image, ext) {\n    var _a;\n    this.canvas = this.canvas || document.createElement(\"canvas\");\n    this.ctx = this.ctx || this.canvas.getContext(\"2d\");\n    this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n    this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n    (_a = this.ctx) == null ? void 0 : _a.drawImage(image, 0, 0);\n    const base64data = this.canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, \"\");\n    return this.base64ToBuffer(base64data);\n  }\n  // gets the attribute array. Generate a new array if the attribute is interleaved\n  attrBufferToArray(attr) {\n    if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n      const TypedArrayConstructor = attr.array.constructor;\n      const arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n      const size = attr.itemSize;\n      for (let i = 0, l = attr.count; i < l; i++) {\n        for (let j = 0; j < size; j++) {\n          arr[i * size + j] = attr[this.getFuncs[j]](i);\n        }\n      }\n      return arr;\n    } else {\n      return attr.array;\n    }\n  }\n  // Returns an array of the same type starting at the `st` index,\n  // and `ct` length\n  subArray(arr, st, ct) {\n    if (Array.isArray(arr)) {\n      return arr.slice(st, st + ct);\n    } else {\n      const TypedArrayConstructor = arr.constructor;\n      return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    }\n  }\n  // Returns the string for a geometry's attribute\n  getAttribute(attr, name, params, type) {\n    const array = this.attrBufferToArray(attr);\n    const res = Array.isArray(array) ? `${`<source id=\"${name}\"><float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(\" \")}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(\n      array.length / attr.itemSize\n    )}\" stride=\"${attr.itemSize}\">`}${params.map((n) => `<param name=\"${n}\" type=\"${type}\" />`).join(\"\")}</accessor></technique_common></source>` : \"\";\n    return res;\n  }\n  // Returns the string for a node's transform information\n  getTransform(o) {\n    o.updateMatrix();\n    this.transMat = this.transMat || new Matrix4();\n    this.transMat.copy(o.matrix);\n    this.transMat.transpose();\n    return `<matrix>${this.transMat.toArray().join(\" \")}</matrix>`;\n  }\n  // Process the given piece of geometry into the geometry library\n  // Returns the mesh id\n  processGeometry(g) {\n    let info = this.geometryInfo.get(g);\n    if (!info) {\n      const bufferGeometry = g;\n      if (!bufferGeometry.isBufferGeometry) {\n        throw new Error(\"THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.\");\n      }\n      const meshid = `Mesh${this.libraryGeometries.length + 1}`;\n      const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n      const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{ start: 0, count: indexCount, materialIndex: 0 }];\n      const gname = g.name ? ` name=\"${g.name}\"` : \"\";\n      let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`;\n      const posName = `${meshid}-position`;\n      const vertName = `${meshid}-vertices`;\n      gnode += this.getAttribute(bufferGeometry.attributes.position, posName, [\"X\", \"Y\", \"Z\"], \"float\");\n      gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`;\n      let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n      if (\"normal\" in bufferGeometry.attributes) {\n        const normName = `${meshid}-normal`;\n        gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, [\"X\", \"Y\", \"Z\"], \"float\");\n        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n      }\n      if (\"uv\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n      }\n      if (\"uv2\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord2`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv2, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n      }\n      if (\"color\" in bufferGeometry.attributes) {\n        const colName = `${meshid}-color`;\n        gnode += this.getAttribute(bufferGeometry.attributes.color, colName, [\"X\", \"Y\", \"Z\"], \"uint8\");\n        triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n      }\n      let indexArray = null;\n      if (bufferGeometry.index) {\n        indexArray = this.attrBufferToArray(bufferGeometry.index);\n      } else {\n        indexArray = new Array(indexCount);\n        for (let i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++)\n          indexArray[i] = i;\n      }\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        const subarr = this.subArray(indexArray, group.start, group.count);\n        const polycount = subarr.length / 3;\n        gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n        gnode += triangleInputs;\n        gnode += `<p>${subarr.join(\" \")}</p>`;\n        gnode += \"</triangles>\";\n      }\n      gnode += \"</mesh></geometry>\";\n      this.libraryGeometries.push(gnode);\n      info = { meshid, bufferGeometry };\n      this.geometryInfo.set(g, info);\n    }\n    return info;\n  }\n  // Process the given texture into the image library\n  // Returns the image library\n  processTexture(tex) {\n    let texid = this.imageMap.get(tex);\n    if (texid == null) {\n      texid = `image-${this.libraryImages.length + 1}`;\n      const ext = \"png\";\n      const name = tex.name || texid;\n      let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n      if (this.options.version === \"1.5.0\") {\n        imageNode += `<init_from><ref>${this.options.textureDirectory}${name}.${ext}</ref></init_from>`;\n      } else {\n        imageNode += `<init_from>${this.options.textureDirectory}${name}.${ext}</init_from>`;\n      }\n      imageNode += \"</image>\";\n      this.libraryImages.push(imageNode);\n      this.imageMap.set(tex, texid);\n      this.textures.push({\n        directory: this.options.textureDirectory,\n        name,\n        ext,\n        data: this.imageToData(tex.image, ext),\n        original: tex\n      });\n    }\n    return texid;\n  }\n  // Process the given material into the material and effect libraries\n  // Returns the material id\n  processMaterial(m) {\n    let matid = this.materialMap.get(m);\n    if (matid == null) {\n      matid = `Mat${this.libraryEffects.length + 1}`;\n      let type = \"phong\";\n      if (m instanceof MeshLambertMaterial) {\n        type = \"lambert\";\n      } else if (m instanceof MeshBasicMaterial) {\n        type = \"constant\";\n        if (m.map !== null) {\n          console.warn(\"ColladaExporter: Texture maps not supported with MeshBasicMaterial.\");\n        }\n      }\n      if (m instanceof MeshPhongMaterial) {\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0;\n        let transparencyNode = \"\";\n        if (m.transparent) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : \"<float>1</float>\"}</transparent>`;\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== \"constant\" ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : \"\"}${type !== \"constant\" ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : \"\"}</bump>` : \"\"}${type === \"phong\" ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : \"\"}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.map\n        )}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : \"\"}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.specularMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : \"\"}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.emissiveMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : \"\"}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.normalMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : \"\"}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : \"\"}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : \"\";\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        this.libraryMaterials.push(materialNode);\n        this.libraryEffects.push(effectnode);\n        this.materialMap.set(m, matid);\n      }\n    }\n    return matid;\n  }\n  // Recursively process the object into a scene\n  processObject(o) {\n    let node = `<node name=\"${o.name}\">`;\n    node += this.getTransform(o);\n    const a = new Mesh();\n    a.geometry;\n    if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n      const geomInfo = this.processGeometry(o.geometry);\n      const meshid = geomInfo.meshid;\n      const geometry = geomInfo.bufferGeometry;\n      let matids = null;\n      let matidsArray;\n      const mat = o.material || new MeshBasicMaterial();\n      const materials = Array.isArray(mat) ? mat : [mat];\n      if (geometry.groups.length > materials.length) {\n        matidsArray = new Array(geometry.groups.length);\n      } else {\n        matidsArray = new Array(materials.length);\n      }\n      matids = matidsArray.fill(null).map((_, i) => this.processMaterial(materials[i % materials.length]));\n      node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map(\n        (id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`\n      ).join(\"\")}</technique_common></bind_material>` : \"\")}</instance_geometry>`;\n    }\n    o.children.forEach((c) => node += this.processObject(c));\n    node += \"</node>\";\n    return node;\n  }\n}\nexport {\n  ColladaExporter\n};\n"]},"metadata":{},"sourceType":"module"}