{"ast":null,"code":"const FilmShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    nIntensity: {\n      value: 0.5\n    },\n    sIntensity: {\n      value: 0.05\n    },\n    sCount: {\n      value: 4096\n    },\n    grayscale: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", // control parameter\n  \"uniform float time;\", \"uniform bool grayscale;\", // noise effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float nIntensity;\", // scanlines effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float sIntensity;\", // scanlines effect count value (0 = no effect, 4096 = full effect)\n  \"uniform float sCount;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", // sample the source\n  \"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\", // make some noise\n  \"\tfloat dx = rand( vUv + time );\", // add noise\n  \"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\", // get us a sine and cosine\n  \"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\", // add scanlines\n  \"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\", // interpolate between source and result by intensity\n  \"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\", // convert to grayscale if desired\n  \"\tif( grayscale ) {\", \"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\", \"\t}\", \"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\", \"}\"].join(\"\\n\")\n};\nexport { FilmShader };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/shaders/FilmShader.js"],"names":["FilmShader","uniforms","tDiffuse","value","time","nIntensity","sIntensity","sCount","grayscale","vertexShader","join","fragmentShader"],"mappings":"AAAA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,IAAI,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KAFE;AAGRE,IAAAA,UAAU,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAHJ;AAIRG,IAAAA,UAAU,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAJJ;AAKRI,IAAAA,MAAM,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KALA;AAMRK,IAAAA,SAAS,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT;AANH,GADO;AASjBM,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CATG;AAgBjBC,EAAAA,cAAc,EAAE,CACd,mBADc,EAEd;AACA,uBAHc,EAId,yBAJc,EAKd;AACA,6BANc,EAOd;AACA,6BARc,EASd;AACA,yBAVc,EAWd,6BAXc,EAYd,mBAZc,EAad,eAbc,EAcd;AACA,sDAfc,EAgBd;AACA,mCAjBc,EAkBd;AACA,0FAnBc,EAoBd;AACA,oEArBc,EAsBd;AACA,2EAvBc,EAwBd;AACA,oGAzBc,EA0Bd;AACA,sBA3Bc,EA4Bd,4EA5Bc,EA6Bd,IA7Bc,EA8Bd,qDA9Bc,EA+Bd,GA/Bc,EAgCdD,IAhCc,CAgCT,IAhCS;AAhBC,CAAnB;AAkDA,SACEV,UADF","sourcesContent":["const FilmShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    time: { value: 0 },\n    nIntensity: { value: 0.5 },\n    sIntensity: { value: 0.05 },\n    sCount: { value: 4096 },\n    grayscale: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    // control parameter\n    \"uniform float time;\",\n    \"uniform bool grayscale;\",\n    // noise effect intensity value (0 = no effect, 1 = full effect)\n    \"uniform float nIntensity;\",\n    // scanlines effect intensity value (0 = no effect, 1 = full effect)\n    \"uniform float sIntensity;\",\n    // scanlines effect count value (0 = no effect, 4096 = full effect)\n    \"uniform float sCount;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    // sample the source\n    \"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n    // make some noise\n    \"\tfloat dx = rand( vUv + time );\",\n    // add noise\n    \"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n    // get us a sine and cosine\n    \"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n    // add scanlines\n    \"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n    // interpolate between source and result by intensity\n    \"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n    // convert to grayscale if desired\n    \"\tif( grayscale ) {\",\n    \"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\n    \"\t}\",\n    \"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  FilmShader\n};\n"]},"metadata":{},"sourceType":"module"}