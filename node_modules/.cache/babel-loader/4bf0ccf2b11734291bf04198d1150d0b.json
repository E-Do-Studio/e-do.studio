{"ast":null,"code":"import { Vector2 } from \"three\";\nconst DotScreenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tSize: {\n      value: /* @__PURE__ */new Vector2(256, 256)\n    },\n    center: {\n      value: /* @__PURE__ */new Vector2(0.5, 0.5)\n    },\n    angle: {\n      value: 1.57\n    },\n    scale: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec2 center;\", \"uniform float angle;\", \"uniform float scale;\", \"uniform vec2 tSize;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"float pattern() {\", \"\tfloat s = sin( angle ), c = cos( angle );\", \"\tvec2 tex = vUv * tSize - center;\", \"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\", \"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\", \"}\", \"void main() {\", \"\tvec4 color = texture2D( tDiffuse, vUv );\", \"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\", \"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\", \"}\"].join(\"\\n\")\n};\nexport { DotScreenShader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/shaders/DotScreenShader.js"],"names":["Vector2","DotScreenShader","uniforms","tDiffuse","value","tSize","center","angle","scale","vertexShader","join","fragmentShader"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAE,eAAgB,IAAIJ,OAAJ,CAAY,GAAZ,EAAiB,GAAjB;AAAzB,KAFC;AAGRM,IAAAA,MAAM,EAAE;AAAEF,MAAAA,KAAK,EAAE,eAAgB,IAAIJ,OAAJ,CAAY,GAAZ,EAAiB,GAAjB;AAAzB,KAHA;AAIRO,IAAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAJC;AAKRI,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT;AALC,GADY;AAQtBK,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CARQ;AAetBC,EAAAA,cAAc,EAAE,CACd,sBADc,EAEd,sBAFc,EAGd,sBAHc,EAId,qBAJc,EAKd,6BALc,EAMd,mBANc,EAOd,mBAPc,EAQd,4CARc,EASd,mCATc,EAUd,6EAVc,EAWd,oDAXc,EAYd,GAZc,EAad,eAbc,EAcd,2CAdc,EAed,yDAfc,EAgBd,4EAhBc,EAiBd,GAjBc,EAkBdD,IAlBc,CAkBT,IAlBS;AAfM,CAAxB;AAmCA,SACET,eADF","sourcesContent":["import { Vector2 } from \"three\";\nconst DotScreenShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    tSize: { value: /* @__PURE__ */ new Vector2(256, 256) },\n    center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },\n    angle: { value: 1.57 },\n    scale: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec2 center;\",\n    \"uniform float angle;\",\n    \"uniform float scale;\",\n    \"uniform vec2 tSize;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"float pattern() {\",\n    \"\tfloat s = sin( angle ), c = cos( angle );\",\n    \"\tvec2 tex = vUv * tSize - center;\",\n    \"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\n    \"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\n    \"}\",\n    \"void main() {\",\n    \"\tvec4 color = texture2D( tDiffuse, vUv );\",\n    \"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\",\n    \"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  DotScreenShader\n};\n"]},"metadata":{},"sourceType":"module"}