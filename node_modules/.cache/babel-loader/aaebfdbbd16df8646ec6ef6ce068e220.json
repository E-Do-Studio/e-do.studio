{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from \"three\";\n\nclass PDBLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  } // Based on CanvasMol PDB parser\n\n\n  parse(text) {\n    function trim(text2) {\n      return text2.replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\n    }\n\n    function capitalize(text2) {\n      return text2.charAt(0).toUpperCase() + text2.substr(1).toLowerCase();\n    }\n\n    function hash(s, e) {\n      return \"s\" + Math.min(s, e) + \"e\" + Math.max(s, e);\n    }\n\n    function parseBond(start, length, satom, i) {\n      const eatom = parseInt(lines[i].substr(start, length));\n\n      if (eatom) {\n        const h = hash(satom, eatom);\n\n        if (_bhash[h] === void 0) {\n          _bonds.push([satom - 1, eatom - 1, 1]);\n\n          _bhash[h] = _bonds.length - 1;\n        } else {}\n      }\n    }\n\n    function buildGeometry() {\n      const build = {\n        geometryAtoms: new BufferGeometry(),\n        geometryBonds: new BufferGeometry(),\n        json: {\n          atoms\n        }\n      };\n      const geometryAtoms = build.geometryAtoms;\n      const geometryBonds = build.geometryBonds;\n      const verticesAtoms = [];\n      const colorsAtoms = [];\n      const verticesBonds = [];\n\n      for (let i = 0, l = atoms.length; i < l; i++) {\n        const atom = atoms[i];\n        const x = atom[0];\n        const y = atom[1];\n        const z = atom[2];\n        verticesAtoms.push(x, y, z);\n        const r = atom[3][0] / 255;\n        const g = atom[3][1] / 255;\n        const b = atom[3][2] / 255;\n        colorsAtoms.push(r, g, b);\n      }\n\n      for (let i = 0, l = _bonds.length; i < l; i++) {\n        const bond = _bonds[i];\n        const start = bond[0];\n        const end = bond[1];\n        const startAtom = _atomMap[start];\n        const endAtom = _atomMap[end];\n        let x = startAtom[0];\n        let y = startAtom[1];\n        let z = startAtom[2];\n        verticesBonds.push(x, y, z);\n        x = endAtom[0];\n        y = endAtom[1];\n        z = endAtom[2];\n        verticesBonds.push(x, y, z);\n      }\n\n      geometryAtoms.setAttribute(\"position\", new Float32BufferAttribute(verticesAtoms, 3));\n      geometryAtoms.setAttribute(\"color\", new Float32BufferAttribute(colorsAtoms, 3));\n      geometryBonds.setAttribute(\"position\", new Float32BufferAttribute(verticesBonds, 3));\n      return build;\n    }\n\n    const CPK = {\n      h: [255, 255, 255],\n      he: [217, 255, 255],\n      li: [204, 128, 255],\n      be: [194, 255, 0],\n      b: [255, 181, 181],\n      c: [144, 144, 144],\n      n: [48, 80, 248],\n      o: [255, 13, 13],\n      f: [144, 224, 80],\n      ne: [179, 227, 245],\n      na: [171, 92, 242],\n      mg: [138, 255, 0],\n      al: [191, 166, 166],\n      si: [240, 200, 160],\n      p: [255, 128, 0],\n      s: [255, 255, 48],\n      cl: [31, 240, 31],\n      ar: [128, 209, 227],\n      k: [143, 64, 212],\n      ca: [61, 255, 0],\n      sc: [230, 230, 230],\n      ti: [191, 194, 199],\n      v: [166, 166, 171],\n      cr: [138, 153, 199],\n      mn: [156, 122, 199],\n      fe: [224, 102, 51],\n      co: [240, 144, 160],\n      ni: [80, 208, 80],\n      cu: [200, 128, 51],\n      zn: [125, 128, 176],\n      ga: [194, 143, 143],\n      ge: [102, 143, 143],\n      as: [189, 128, 227],\n      se: [255, 161, 0],\n      br: [166, 41, 41],\n      kr: [92, 184, 209],\n      rb: [112, 46, 176],\n      sr: [0, 255, 0],\n      y: [148, 255, 255],\n      zr: [148, 224, 224],\n      nb: [115, 194, 201],\n      mo: [84, 181, 181],\n      tc: [59, 158, 158],\n      ru: [36, 143, 143],\n      rh: [10, 125, 140],\n      pd: [0, 105, 133],\n      ag: [192, 192, 192],\n      cd: [255, 217, 143],\n      in: [166, 117, 115],\n      sn: [102, 128, 128],\n      sb: [158, 99, 181],\n      te: [212, 122, 0],\n      i: [148, 0, 148],\n      xe: [66, 158, 176],\n      cs: [87, 23, 143],\n      ba: [0, 201, 0],\n      la: [112, 212, 255],\n      ce: [255, 255, 199],\n      pr: [217, 255, 199],\n      nd: [199, 255, 199],\n      pm: [163, 255, 199],\n      sm: [143, 255, 199],\n      eu: [97, 255, 199],\n      gd: [69, 255, 199],\n      tb: [48, 255, 199],\n      dy: [31, 255, 199],\n      ho: [0, 255, 156],\n      er: [0, 230, 117],\n      tm: [0, 212, 82],\n      yb: [0, 191, 56],\n      lu: [0, 171, 36],\n      hf: [77, 194, 255],\n      ta: [77, 166, 255],\n      w: [33, 148, 214],\n      re: [38, 125, 171],\n      os: [38, 102, 150],\n      ir: [23, 84, 135],\n      pt: [208, 208, 224],\n      au: [255, 209, 35],\n      hg: [184, 184, 208],\n      tl: [166, 84, 77],\n      pb: [87, 89, 97],\n      bi: [158, 79, 181],\n      po: [171, 92, 0],\n      at: [117, 79, 69],\n      rn: [66, 130, 150],\n      fr: [66, 0, 102],\n      ra: [0, 125, 0],\n      ac: [112, 171, 250],\n      th: [0, 186, 255],\n      pa: [0, 161, 255],\n      u: [0, 143, 255],\n      np: [0, 128, 255],\n      pu: [0, 107, 255],\n      am: [84, 92, 242],\n      cm: [120, 92, 227],\n      bk: [138, 79, 227],\n      cf: [161, 54, 212],\n      es: [179, 31, 212],\n      fm: [179, 31, 186],\n      md: [179, 13, 166],\n      no: [189, 13, 135],\n      lr: [199, 0, 102],\n      rf: [204, 0, 89],\n      db: [209, 0, 79],\n      sg: [217, 0, 69],\n      bh: [224, 0, 56],\n      hs: [230, 0, 46],\n      mt: [235, 0, 38],\n      ds: [235, 0, 38],\n      rg: [235, 0, 38],\n      cn: [235, 0, 38],\n      uut: [235, 0, 38],\n      uuq: [235, 0, 38],\n      uup: [235, 0, 38],\n      uuh: [235, 0, 38],\n      uus: [235, 0, 38],\n      uuo: [235, 0, 38]\n    };\n    const atoms = [];\n    const _bonds = [];\n    const _bhash = {};\n    const _atomMap = {};\n    const lines = text.split(\"\\n\");\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      if (lines[i].substr(0, 4) === \"ATOM\" || lines[i].substr(0, 6) === \"HETATM\") {\n        const x = parseFloat(lines[i].substr(30, 7));\n        const y = parseFloat(lines[i].substr(38, 7));\n        const z = parseFloat(lines[i].substr(46, 7));\n        const index = parseInt(lines[i].substr(6, 5)) - 1;\n        let e = trim(lines[i].substr(76, 2)).toLowerCase();\n\n        if (e === \"\") {\n          e = trim(lines[i].substr(12, 2)).toLowerCase();\n        }\n\n        const atomData = [x, y, z, CPK[e], capitalize(e)];\n        atoms.push(atomData);\n        _atomMap[index] = atomData;\n      } else if (lines[i].substr(0, 6) === \"CONECT\") {\n        const satom = parseInt(lines[i].substr(6, 5));\n        parseBond(11, 5, satom, i);\n        parseBond(16, 5, satom, i);\n        parseBond(21, 5, satom, i);\n        parseBond(26, 5, satom, i);\n      }\n    }\n\n    return buildGeometry();\n  }\n\n}\n\nexport { PDBLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/PDBLoader.js"],"names":["Loader","FileLoader","BufferGeometry","Float32BufferAttribute","PDBLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","trim","text2","replace","capitalize","charAt","toUpperCase","substr","toLowerCase","hash","s","Math","min","max","parseBond","start","length","satom","i","eatom","parseInt","lines","h","_bhash","_bonds","push","buildGeometry","build","geometryAtoms","geometryBonds","json","atoms","verticesAtoms","colorsAtoms","verticesBonds","l","atom","x","y","z","r","g","b","bond","end","startAtom","_atomMap","endAtom","setAttribute","CPK","he","li","be","c","n","o","f","ne","na","mg","al","si","p","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cn","uut","uuq","uup","uuh","uus","uuo","split","parseFloat","index","atomData"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass PDBLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  // Based on CanvasMol PDB parser\n  parse(text) {\n    function trim(text2) {\n      return text2.replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\n    }\n    function capitalize(text2) {\n      return text2.charAt(0).toUpperCase() + text2.substr(1).toLowerCase();\n    }\n    function hash(s, e) {\n      return \"s\" + Math.min(s, e) + \"e\" + Math.max(s, e);\n    }\n    function parseBond(start, length, satom, i) {\n      const eatom = parseInt(lines[i].substr(start, length));\n      if (eatom) {\n        const h = hash(satom, eatom);\n        if (_bhash[h] === void 0) {\n          _bonds.push([satom - 1, eatom - 1, 1]);\n          _bhash[h] = _bonds.length - 1;\n        } else {\n        }\n      }\n    }\n    function buildGeometry() {\n      const build = {\n        geometryAtoms: new BufferGeometry(),\n        geometryBonds: new BufferGeometry(),\n        json: {\n          atoms\n        }\n      };\n      const geometryAtoms = build.geometryAtoms;\n      const geometryBonds = build.geometryBonds;\n      const verticesAtoms = [];\n      const colorsAtoms = [];\n      const verticesBonds = [];\n      for (let i = 0, l = atoms.length; i < l; i++) {\n        const atom = atoms[i];\n        const x = atom[0];\n        const y = atom[1];\n        const z = atom[2];\n        verticesAtoms.push(x, y, z);\n        const r = atom[3][0] / 255;\n        const g = atom[3][1] / 255;\n        const b = atom[3][2] / 255;\n        colorsAtoms.push(r, g, b);\n      }\n      for (let i = 0, l = _bonds.length; i < l; i++) {\n        const bond = _bonds[i];\n        const start = bond[0];\n        const end = bond[1];\n        const startAtom = _atomMap[start];\n        const endAtom = _atomMap[end];\n        let x = startAtom[0];\n        let y = startAtom[1];\n        let z = startAtom[2];\n        verticesBonds.push(x, y, z);\n        x = endAtom[0];\n        y = endAtom[1];\n        z = endAtom[2];\n        verticesBonds.push(x, y, z);\n      }\n      geometryAtoms.setAttribute(\"position\", new Float32BufferAttribute(verticesAtoms, 3));\n      geometryAtoms.setAttribute(\"color\", new Float32BufferAttribute(colorsAtoms, 3));\n      geometryBonds.setAttribute(\"position\", new Float32BufferAttribute(verticesBonds, 3));\n      return build;\n    }\n    const CPK = {\n      h: [255, 255, 255],\n      he: [217, 255, 255],\n      li: [204, 128, 255],\n      be: [194, 255, 0],\n      b: [255, 181, 181],\n      c: [144, 144, 144],\n      n: [48, 80, 248],\n      o: [255, 13, 13],\n      f: [144, 224, 80],\n      ne: [179, 227, 245],\n      na: [171, 92, 242],\n      mg: [138, 255, 0],\n      al: [191, 166, 166],\n      si: [240, 200, 160],\n      p: [255, 128, 0],\n      s: [255, 255, 48],\n      cl: [31, 240, 31],\n      ar: [128, 209, 227],\n      k: [143, 64, 212],\n      ca: [61, 255, 0],\n      sc: [230, 230, 230],\n      ti: [191, 194, 199],\n      v: [166, 166, 171],\n      cr: [138, 153, 199],\n      mn: [156, 122, 199],\n      fe: [224, 102, 51],\n      co: [240, 144, 160],\n      ni: [80, 208, 80],\n      cu: [200, 128, 51],\n      zn: [125, 128, 176],\n      ga: [194, 143, 143],\n      ge: [102, 143, 143],\n      as: [189, 128, 227],\n      se: [255, 161, 0],\n      br: [166, 41, 41],\n      kr: [92, 184, 209],\n      rb: [112, 46, 176],\n      sr: [0, 255, 0],\n      y: [148, 255, 255],\n      zr: [148, 224, 224],\n      nb: [115, 194, 201],\n      mo: [84, 181, 181],\n      tc: [59, 158, 158],\n      ru: [36, 143, 143],\n      rh: [10, 125, 140],\n      pd: [0, 105, 133],\n      ag: [192, 192, 192],\n      cd: [255, 217, 143],\n      in: [166, 117, 115],\n      sn: [102, 128, 128],\n      sb: [158, 99, 181],\n      te: [212, 122, 0],\n      i: [148, 0, 148],\n      xe: [66, 158, 176],\n      cs: [87, 23, 143],\n      ba: [0, 201, 0],\n      la: [112, 212, 255],\n      ce: [255, 255, 199],\n      pr: [217, 255, 199],\n      nd: [199, 255, 199],\n      pm: [163, 255, 199],\n      sm: [143, 255, 199],\n      eu: [97, 255, 199],\n      gd: [69, 255, 199],\n      tb: [48, 255, 199],\n      dy: [31, 255, 199],\n      ho: [0, 255, 156],\n      er: [0, 230, 117],\n      tm: [0, 212, 82],\n      yb: [0, 191, 56],\n      lu: [0, 171, 36],\n      hf: [77, 194, 255],\n      ta: [77, 166, 255],\n      w: [33, 148, 214],\n      re: [38, 125, 171],\n      os: [38, 102, 150],\n      ir: [23, 84, 135],\n      pt: [208, 208, 224],\n      au: [255, 209, 35],\n      hg: [184, 184, 208],\n      tl: [166, 84, 77],\n      pb: [87, 89, 97],\n      bi: [158, 79, 181],\n      po: [171, 92, 0],\n      at: [117, 79, 69],\n      rn: [66, 130, 150],\n      fr: [66, 0, 102],\n      ra: [0, 125, 0],\n      ac: [112, 171, 250],\n      th: [0, 186, 255],\n      pa: [0, 161, 255],\n      u: [0, 143, 255],\n      np: [0, 128, 255],\n      pu: [0, 107, 255],\n      am: [84, 92, 242],\n      cm: [120, 92, 227],\n      bk: [138, 79, 227],\n      cf: [161, 54, 212],\n      es: [179, 31, 212],\n      fm: [179, 31, 186],\n      md: [179, 13, 166],\n      no: [189, 13, 135],\n      lr: [199, 0, 102],\n      rf: [204, 0, 89],\n      db: [209, 0, 79],\n      sg: [217, 0, 69],\n      bh: [224, 0, 56],\n      hs: [230, 0, 46],\n      mt: [235, 0, 38],\n      ds: [235, 0, 38],\n      rg: [235, 0, 38],\n      cn: [235, 0, 38],\n      uut: [235, 0, 38],\n      uuq: [235, 0, 38],\n      uup: [235, 0, 38],\n      uuh: [235, 0, 38],\n      uus: [235, 0, 38],\n      uuo: [235, 0, 38]\n    };\n    const atoms = [];\n    const _bonds = [];\n    const _bhash = {};\n    const _atomMap = {};\n    const lines = text.split(\"\\n\");\n    for (let i = 0, l = lines.length; i < l; i++) {\n      if (lines[i].substr(0, 4) === \"ATOM\" || lines[i].substr(0, 6) === \"HETATM\") {\n        const x = parseFloat(lines[i].substr(30, 7));\n        const y = parseFloat(lines[i].substr(38, 7));\n        const z = parseFloat(lines[i].substr(46, 7));\n        const index = parseInt(lines[i].substr(6, 5)) - 1;\n        let e = trim(lines[i].substr(76, 2)).toLowerCase();\n        if (e === \"\") {\n          e = trim(lines[i].substr(12, 2)).toLowerCase();\n        }\n        const atomData = [x, y, z, CPK[e], capitalize(e)];\n        atoms.push(atomData);\n        _atomMap[index] = atomData;\n      } else if (lines[i].substr(0, 6) === \"CONECT\") {\n        const satom = parseInt(lines[i].substr(6, 5));\n        parseBond(11, 5, satom, i);\n        parseBond(16, 5, satom, i);\n        parseBond(21, 5, satom, i);\n        parseBond(26, 5, satom, i);\n      }\n    }\n    return buildGeometry();\n  }\n}\nexport {\n  PDBLoader\n};\n"]},"metadata":{},"sourceType":"module"}