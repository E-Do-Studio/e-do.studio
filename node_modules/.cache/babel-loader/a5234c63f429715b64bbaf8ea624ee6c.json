{"ast":null,"code":"import { Loader, FileLoader, LoaderUtils, MeshPhongMaterial, Color, Group, Float32BufferAttribute, BufferGeometry, Mesh } from \"three\";\nimport { unzipSync } from \"fflate\";\n\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function loadDocument(data2) {\n      let view = new DataView(data2);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === \"PK\") {\n        let zip = null;\n        let file = null;\n        console.log(\"THREE.AMFLoader: Loading Zip\");\n\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === \".amf\") {\n            break;\n          }\n        }\n\n        console.log(\"THREE.AMFLoader: Trying to load file asset: \" + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData2 = new DOMParser().parseFromString(fileText, \"application/xml\");\n\n      if (xmlData2.documentElement.nodeName.toLowerCase() !== \"amf\") {\n        console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\");\n        return null;\n      }\n\n      return xmlData2;\n    }\n\n    function loadDocumentScale(node) {\n      let scale = 1;\n      let unit = \"millimeter\";\n\n      if (node.documentElement.attributes.unit !== void 0) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      const scaleUnits = {\n        millimeter: 1,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1e3,\n        micron: 1e-3\n      };\n\n      if (scaleUnits[unit] !== void 0) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log(\"THREE.AMFLoader: Unit scale: \" + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      let matName = \"AMF Material\";\n      const matId = node.attributes.id.textContent;\n      let color = {\n        r: 1,\n        g: 1,\n        b: 1,\n        a: 1\n      };\n      let loadedMaterial = null;\n\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matChildEl = node.childNodes[i2];\n\n        if (matChildEl.nodeName === \"metadata\" && matChildEl.attributes.type !== void 0) {\n          if (matChildEl.attributes.type.value === \"name\") {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === \"color\") {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      const color = {\n        r: 1,\n        g: 1,\n        b: 1,\n        a: 1\n      };\n\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matColor = node.childNodes[i2];\n\n        if (matColor.nodeName === \"r\") {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === \"g\") {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === \"b\") {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === \"a\") {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      const volume = {\n        name: \"\",\n        triangles: [],\n        materialid: null\n      };\n      let currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== void 0) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === \"metadata\") {\n          if (currVolumeNode.attributes.type !== void 0) {\n            if (currVolumeNode.attributes.type.value === \"name\") {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === \"triangle\") {\n          const v1 = currVolumeNode.getElementsByTagName(\"v1\")[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName(\"v2\")[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName(\"v3\")[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === \"vertex\") {\n          let vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === \"coordinates\") {\n              const x = vNode.getElementsByTagName(\"x\")[0].textContent;\n              const y = vNode.getElementsByTagName(\"y\")[0].textContent;\n              const z = vNode.getElementsByTagName(\"z\")[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === \"normal\") {\n              const nx = vNode.getElementsByTagName(\"nx\")[0].textContent;\n              const ny = vNode.getElementsByTagName(\"ny\")[0].textContent;\n              const nz = vNode.getElementsByTagName(\"nz\")[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = {\n        name: \"amfobject\",\n        meshes: []\n      };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === \"metadata\") {\n          if (currObjNode.attributes.type !== void 0) {\n            if (currObjNode.attributes.type.value === \"name\") {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === \"color\") {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === \"mesh\") {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === \"vertices\") {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === \"volume\") {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    const xmlData = loadDocument(data);\n    let amfName = \"\";\n    let amfAuthor = \"\";\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n\n      if (child.nodeName === \"metadata\") {\n        if (child.attributes.type !== void 0) {\n          if (child.attributes.type.value === \"name\") {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === \"author\") {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === \"material\") {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === \"object\") {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({\n      color: 11184895,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = \"AMF\";\n\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || \"\";\n\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        const volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute(\"position\", vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute(\"normal\", normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== void 0) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n\n}\n\nexport { AMFLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/AMFLoader.js"],"names":["Loader","FileLoader","LoaderUtils","MeshPhongMaterial","Color","Group","Float32BufferAttribute","BufferGeometry","Mesh","unzipSync","AMFLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadDocument","data2","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData2","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i2","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","xmlData","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","i","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, LoaderUtils, MeshPhongMaterial, Color, Group, Float32BufferAttribute, BufferGeometry, Mesh } from \"three\";\nimport { unzipSync } from \"fflate\";\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    function loadDocument(data2) {\n      let view = new DataView(data2);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n      if (magic === \"PK\") {\n        let zip = null;\n        let file = null;\n        console.log(\"THREE.AMFLoader: Loading Zip\");\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === \".amf\") {\n            break;\n          }\n        }\n        console.log(\"THREE.AMFLoader: Trying to load file asset: \" + file);\n        view = new DataView(zip[file].buffer);\n      }\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData2 = new DOMParser().parseFromString(fileText, \"application/xml\");\n      if (xmlData2.documentElement.nodeName.toLowerCase() !== \"amf\") {\n        console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\");\n        return null;\n      }\n      return xmlData2;\n    }\n    function loadDocumentScale(node) {\n      let scale = 1;\n      let unit = \"millimeter\";\n      if (node.documentElement.attributes.unit !== void 0) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n      const scaleUnits = {\n        millimeter: 1,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1e3,\n        micron: 1e-3\n      };\n      if (scaleUnits[unit] !== void 0) {\n        scale = scaleUnits[unit];\n      }\n      console.log(\"THREE.AMFLoader: Unit scale: \" + scale);\n      return scale;\n    }\n    function loadMaterials(node) {\n      let matName = \"AMF Material\";\n      const matId = node.attributes.id.textContent;\n      let color = { r: 1, g: 1, b: 1, a: 1 };\n      let loadedMaterial = null;\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matChildEl = node.childNodes[i2];\n        if (matChildEl.nodeName === \"metadata\" && matChildEl.attributes.type !== void 0) {\n          if (matChildEl.attributes.type.value === \"name\") {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === \"color\") {\n          color = loadColor(matChildEl);\n        }\n      }\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n      if (color.a !== 1) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n      return { id: matId, material: loadedMaterial };\n    }\n    function loadColor(node) {\n      const color = { r: 1, g: 1, b: 1, a: 1 };\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matColor = node.childNodes[i2];\n        if (matColor.nodeName === \"r\") {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === \"g\") {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === \"b\") {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === \"a\") {\n          color.a = matColor.textContent;\n        }\n      }\n      return color;\n    }\n    function loadMeshVolume(node) {\n      const volume = { name: \"\", triangles: [], materialid: null };\n      let currVolumeNode = node.firstElementChild;\n      if (node.attributes.materialid !== void 0) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === \"metadata\") {\n          if (currVolumeNode.attributes.type !== void 0) {\n            if (currVolumeNode.attributes.type.value === \"name\") {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === \"triangle\") {\n          const v1 = currVolumeNode.getElementsByTagName(\"v1\")[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName(\"v2\")[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName(\"v3\")[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n      return volume;\n    }\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === \"vertex\") {\n          let vNode = currVerticesNode.firstElementChild;\n          while (vNode) {\n            if (vNode.nodeName === \"coordinates\") {\n              const x = vNode.getElementsByTagName(\"x\")[0].textContent;\n              const y = vNode.getElementsByTagName(\"y\")[0].textContent;\n              const z = vNode.getElementsByTagName(\"z\")[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === \"normal\") {\n              const nx = vNode.getElementsByTagName(\"nx\")[0].textContent;\n              const ny = vNode.getElementsByTagName(\"ny\")[0].textContent;\n              const nz = vNode.getElementsByTagName(\"nz\")[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n            vNode = vNode.nextElementSibling;\n          }\n        }\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n      return { vertices: vertArray, normals: normalArray };\n    }\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = { name: \"amfobject\", meshes: [] };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n      while (currObjNode) {\n        if (currObjNode.nodeName === \"metadata\") {\n          if (currObjNode.attributes.type !== void 0) {\n            if (currObjNode.attributes.type.value === \"name\") {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === \"color\") {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === \"mesh\") {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === \"vertices\") {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === \"volume\") {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n          loadedObject.meshes.push(mesh);\n        }\n        currObjNode = currObjNode.nextElementSibling;\n      }\n      return { id: objId, obj: loadedObject };\n    }\n    const xmlData = loadDocument(data);\n    let amfName = \"\";\n    let amfAuthor = \"\";\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n      if (child.nodeName === \"metadata\") {\n        if (child.attributes.type !== void 0) {\n          if (child.attributes.type.value === \"name\") {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === \"author\") {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === \"material\") {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === \"object\") {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({ color: 11184895, flatShading: true });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = \"AMF\";\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || \"\";\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n          if (color.a !== 1) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n        const volumes = mesh.volumes;\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute(\"position\", vertices.clone());\n          if (normals) {\n            newGeometry.setAttribute(\"normal\", normals.clone());\n          }\n          if (amfMaterials[volume.materialId] !== void 0) {\n            material = amfMaterials[volume.materialId];\n          }\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n      sceneObject.add(newObject);\n    }\n    return sceneObject;\n  }\n}\nexport {\n  AMFLoader\n};\n"]},"metadata":{},"sourceType":"module"}