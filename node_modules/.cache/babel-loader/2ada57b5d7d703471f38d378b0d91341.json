{"ast":null,"code":"import { Matrix3, OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\n\nclass AnaglyphEffect {\n  constructor(renderer, width = 512, height = 512) {\n    this.colorMatrixLeft = new Matrix3().fromArray([0.4561, -0.0400822, -0.0152161, 0.500484, -0.0378246, -0.0205971, 0.176381, -0.0157589, -546856e-8]);\n    this.colorMatrixRight = new Matrix3().fromArray([-0.0434706, 0.378476, -0.0721527, -0.0879388, 0.73364, -0.112961, -155529e-8, -0.0184503, 1.2264]);\n\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n    const _scene = new Scene();\n\n    const _stereo = new StereoCamera();\n\n    const _params = {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    };\n\n    const _renderTargetL = new WebGLRenderTarget(width, height, _params);\n\n    const _renderTargetR = new WebGLRenderTarget(width, height, _params);\n\n    const _material = new ShaderMaterial({\n      uniforms: {\n        mapLeft: {\n          value: _renderTargetL.texture\n        },\n        mapRight: {\n          value: _renderTargetR.texture\n        },\n        colorMatrixLeft: {\n          value: this.colorMatrixLeft\n        },\n        colorMatrixRight: {\n          value: this.colorMatrixRight\n        }\n      },\n      vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = vec2( uv.x, uv.y );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n      fragmentShader: [\"uniform sampler2D mapLeft;\", \"uniform sampler2D mapRight;\", \"varying vec2 vUv;\", \"uniform mat3 colorMatrixLeft;\", \"uniform mat3 colorMatrixRight;\", \"void main() {\", \"\tvec2 uv = vUv;\", \"\tvec4 colorL = texture2D( mapLeft, uv );\", \"\tvec4 colorR = texture2D( mapRight, uv );\", \"\tvec3 color = clamp(\", \"\t\t\tcolorMatrixLeft * colorL.rgb +\", \"\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );\", \"\tgl_FragColor = vec4(\", \"\t\t\tcolor.r, color.g, color.b,\", \"\t\t\tmax( colorL.a, colorR.a ) );\", \"\t#include <tonemapping_fragment>\", \"\t#include <encodings_fragment>\", \"}\"].join(\"\\n\")\n    });\n\n    const _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n\n    _scene.add(_mesh);\n\n    this.setSize = function (width2, height2) {\n      renderer.setSize(width2, height2);\n      const pixelRatio = renderer.getPixelRatio();\n\n      _renderTargetL.setSize(width2 * pixelRatio, height2 * pixelRatio);\n\n      _renderTargetR.setSize(width2 * pixelRatio, height2 * pixelRatio);\n    };\n\n    this.render = function (scene, camera) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n\n      _stereo.update(camera);\n\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    };\n\n    this.dispose = function () {\n      _renderTargetL.dispose();\n\n      _renderTargetR.dispose();\n\n      _mesh.geometry.dispose();\n\n      _mesh.material.dispose();\n    };\n  }\n\n}\n\nexport { AnaglyphEffect };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/effects/AnaglyphEffect.js"],"names":["Matrix3","OrthographicCamera","Scene","StereoCamera","LinearFilter","NearestFilter","RGBAFormat","WebGLRenderTarget","ShaderMaterial","Mesh","PlaneGeometry","AnaglyphEffect","constructor","renderer","width","height","colorMatrixLeft","fromArray","colorMatrixRight","_camera","_scene","_stereo","_params","minFilter","magFilter","format","_renderTargetL","_renderTargetR","_material","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","_mesh","add","setSize","width2","height2","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry","material"],"mappings":"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","sourcesContent":["import { Matrix3, OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\nclass AnaglyphEffect {\n  constructor(renderer, width = 512, height = 512) {\n    this.colorMatrixLeft = new Matrix3().fromArray([\n      0.4561,\n      -0.0400822,\n      -0.0152161,\n      0.500484,\n      -0.0378246,\n      -0.0205971,\n      0.176381,\n      -0.0157589,\n      -546856e-8\n    ]);\n    this.colorMatrixRight = new Matrix3().fromArray([\n      -0.0434706,\n      0.378476,\n      -0.0721527,\n      -0.0879388,\n      0.73364,\n      -0.112961,\n      -155529e-8,\n      -0.0184503,\n      1.2264\n    ]);\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const _scene = new Scene();\n    const _stereo = new StereoCamera();\n    const _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n    const _renderTargetL = new WebGLRenderTarget(width, height, _params);\n    const _renderTargetR = new WebGLRenderTarget(width, height, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        mapLeft: { value: _renderTargetL.texture },\n        mapRight: { value: _renderTargetR.texture },\n        colorMatrixLeft: { value: this.colorMatrixLeft },\n        colorMatrixRight: { value: this.colorMatrixRight }\n      },\n      vertexShader: [\n        \"varying vec2 vUv;\",\n        \"void main() {\",\n        \"\tvUv = vec2( uv.x, uv.y );\",\n        \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n        \"}\"\n      ].join(\"\\n\"),\n      fragmentShader: [\n        \"uniform sampler2D mapLeft;\",\n        \"uniform sampler2D mapRight;\",\n        \"varying vec2 vUv;\",\n        \"uniform mat3 colorMatrixLeft;\",\n        \"uniform mat3 colorMatrixRight;\",\n        \"void main() {\",\n        \"\tvec2 uv = vUv;\",\n        \"\tvec4 colorL = texture2D( mapLeft, uv );\",\n        \"\tvec4 colorR = texture2D( mapRight, uv );\",\n        \"\tvec3 color = clamp(\",\n        \"\t\t\tcolorMatrixLeft * colorL.rgb +\",\n        \"\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );\",\n        \"\tgl_FragColor = vec4(\",\n        \"\t\t\tcolor.r, color.g, color.b,\",\n        \"\t\t\tmax( colorL.a, colorR.a ) );\",\n        \"\t#include <tonemapping_fragment>\",\n        \"\t#include <encodings_fragment>\",\n        \"}\"\n      ].join(\"\\n\")\n    });\n    const _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n    _scene.add(_mesh);\n    this.setSize = function(width2, height2) {\n      renderer.setSize(width2, height2);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width2 * pixelRatio, height2 * pixelRatio);\n      _renderTargetR.setSize(width2 * pixelRatio, height2 * pixelRatio);\n    };\n    this.render = function(scene, camera) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    };\n    this.dispose = function() {\n      _renderTargetL.dispose();\n      _renderTargetR.dispose();\n      _mesh.geometry.dispose();\n      _mesh.material.dispose();\n    };\n  }\n}\nexport {\n  AnaglyphEffect\n};\n"]},"metadata":{},"sourceType":"module"}