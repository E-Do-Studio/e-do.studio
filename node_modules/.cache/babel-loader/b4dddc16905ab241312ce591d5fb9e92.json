{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\n\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super();\n\n    __publicField(this, \"renderTargetX\");\n\n    __publicField(this, \"renderTargetY\");\n\n    __publicField(this, \"materialCombine\");\n\n    __publicField(this, \"materialConvolution\");\n\n    __publicField(this, \"fsQuad\");\n\n    __publicField(this, \"combineUniforms\");\n\n    __publicField(this, \"convolutionUniforms\");\n\n    __publicField(this, \"blurX\", new Vector2(1953125e-9, 0));\n\n    __publicField(this, \"blurY\", new Vector2(0, 1953125e-9));\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = \"BloomPass.x\";\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = \"BloomPass.y\";\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms[\"strength\"].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0) console.error(\"BloomPass relies on ConvolutionShader\");\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false);\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n  /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\nexport { BloomPass };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/postprocessing/BloomPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","constructor","strength","kernelSize","sigma","resolution","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","materialCombine","vertexShader","fragmentShader","blending","transparent","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","tDiffuse"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super();\n    __publicField(this, \"renderTargetX\");\n    __publicField(this, \"renderTargetY\");\n    __publicField(this, \"materialCombine\");\n    __publicField(this, \"materialConvolution\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"combineUniforms\");\n    __publicField(this, \"convolutionUniforms\");\n    __publicField(this, \"blurX\", new Vector2(1953125e-9, 0));\n    __publicField(this, \"blurY\", new Vector2(0, 1953125e-9));\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = \"BloomPass.x\";\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = \"BloomPass.y\";\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms[\"strength\"].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0)\n      console.error(\"BloomPass relies on ConvolutionShader\");\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(false);\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear)\n      renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n}\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n  )\n};\nexport {\n  BloomPass\n};\n"]},"metadata":{},"sourceType":"module"}