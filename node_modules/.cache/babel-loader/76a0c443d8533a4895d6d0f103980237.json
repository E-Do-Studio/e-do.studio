{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  smooth = true,\n  color = '#000000',\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]);\n  const blurShadows = React.useCallback(blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  }, []);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/@react-three/drei/core/ContactShadows.js"],"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","color","props","ref","scene","gl","shadowCamera","useRef","Array","isArray","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","useMemo","WebGLRenderTarget","texture","generateMipmaps","PlaneBufferGeometry","rotateX","Math","PI","Mesh","MeshDepthMaterial","depthTest","depthWrite","onBeforeCompile","shader","uniforms","ucolor","value","Color","convertSRGBToLinear","fragmentShader","replace","ShaderMaterial","blurShadows","useCallback","visible","material","tDiffuse","h","setRenderTarget","render","current","v","count","initialBackground","background","initialOverrideMaterial","overrideMaterial","createElement","geometry","rotation","map","transparent","args"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  smooth = true,\n  color = '#000000',\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]);\n  const blurShadows = React.useCallback(blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  }, []);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"]},"metadata":{},"sourceType":"module"}