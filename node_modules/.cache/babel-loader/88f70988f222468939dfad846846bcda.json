{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/Repositories/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\n\nvar RGBELoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(RGBELoader, _DataTextureLoader);\n\n  var _super = _createSuper(RGBELoader);\n\n  function RGBELoader(manager) {\n    var _this;\n\n    _classCallCheck(this, RGBELoader);\n\n    _this = _super.call(this, manager);\n    _this.type = HalfFloatType;\n    return _this;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  _createClass(RGBELoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var RGBE_RETURN_FAILURE = -1,\n          rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function rgbe_error(rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n            break;\n\n          case rgbe_write_error:\n            console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n            break;\n\n          case rgbe_format_error:\n            console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n            break;\n\n          default:\n          case rgbe_memory_error:\n            console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n        }\n\n        return RGBE_RETURN_FAILURE;\n      },\n          RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = \"\\n\",\n          fgets = function fgets(buffer2, lineLimit, consume) {\n        var chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        var p = buffer2.pos,\n            i = -1,\n            len = 0,\n            s = \"\",\n            chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n        }\n\n        if (-1 < i) {\n          if (false !== consume) buffer2.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n\n        return false;\n      },\n          RGBE_ReadHeader = function RGBE_ReadHeader(buffer2) {\n        var magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            header = {\n          valid: 0,\n          string: \"\",\n          comments: \"\",\n          programtype: \"RGBE\",\n          format: \"\",\n          gamma: 1,\n          exposure: 1,\n          width: 0,\n          height: 0\n        };\n        var line, match;\n\n        if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n          return rgbe_error(rgbe_read_error, \"no header found\");\n        }\n\n        if (!(match = line.match(magic_token_re))) {\n          return rgbe_error(rgbe_format_error, \"bad initial token\");\n        }\n\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + \"\\n\";\n\n        while (true) {\n          line = fgets(buffer2);\n          if (false === line) break;\n          header.string += line + \"\\n\";\n\n          if (\"#\" === line.charAt(0)) {\n            header.comments += line + \"\\n\";\n            continue;\n          }\n\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1]);\n          }\n\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1]);\n          }\n\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1];\n          }\n\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          return rgbe_error(rgbe_format_error, \"missing format specifier\");\n        }\n\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n        }\n\n        return header;\n      },\n          RGBE_ReadPixels_RLE = function RGBE_ReadPixels_RLE(buffer2, w, h) {\n        var scanline_width = w;\n\n        if ( // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 || // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128) {\n          return new Uint8Array(buffer2);\n        }\n\n        if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n          return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n        }\n\n        var data_rgba = new Uint8Array(4 * w * h);\n\n        if (!data_rgba.length) {\n          return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n        }\n\n        var offset = 0,\n            pos = 0;\n        var ptr_end = 4 * scanline_width;\n        var rgbeStart = new Uint8Array(4);\n        var scanline_buffer = new Uint8Array(ptr_end);\n        var num_scanlines = h;\n\n        while (num_scanlines > 0 && pos < buffer2.byteLength) {\n          if (pos + 4 > buffer2.byteLength) {\n            return rgbe_error(rgbe_read_error);\n          }\n\n          rgbeStart[0] = buffer2[pos++];\n          rgbeStart[1] = buffer2[pos++];\n          rgbeStart[2] = buffer2[pos++];\n          rgbeStart[3] = buffer2[pos++];\n\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n          }\n\n          var ptr = 0,\n              count = void 0;\n\n          while (ptr < ptr_end && pos < buffer2.byteLength) {\n            count = buffer2[pos++];\n            var isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n\n            if (0 === count || ptr + count > ptr_end) {\n              return rgbe_error(rgbe_format_error, \"bad scanline data\");\n            }\n\n            if (isEncodedRun) {\n              var byteValue = buffer2[pos++];\n\n              for (var i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              }\n            } else {\n              scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          }\n\n          var l = scanline_width;\n\n          for (var _i = 0; _i < l; _i++) {\n            var off = 0;\n            data_rgba[offset] = scanline_buffer[_i + off];\n            off += scanline_width;\n            data_rgba[offset + 1] = scanline_buffer[_i + off];\n            off += scanline_width;\n            data_rgba[offset + 2] = scanline_buffer[_i + off];\n            off += scanline_width;\n            data_rgba[offset + 3] = scanline_buffer[_i + off];\n            offset += 4;\n          }\n\n          num_scanlines--;\n        }\n\n        return data_rgba;\n      };\n\n      var RGBEByteToRGBFloat = function RGBEByteToRGBFloat(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2, e - 128) / 255;\n        destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n        destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n        destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n        destArray[destOffset + 3] = 1;\n      };\n\n      var RGBEByteToRGBHalf = function RGBEByteToRGBHalf(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2, e - 128) / 255;\n        destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n        destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n        destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n        destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n      };\n\n      var byteArray = new Uint8Array(buffer);\n      byteArray.pos = 0;\n      var rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n      if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n        var w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n        if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n          var data, type;\n          var numElements;\n\n          switch (this.type) {\n            case FloatType:\n              numElements = image_rgba_data.length / 4;\n              var floatArray = new Float32Array(numElements * 4);\n\n              for (var j = 0; j < numElements; j++) {\n                RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n              }\n\n              data = floatArray;\n              type = FloatType;\n              break;\n\n            case HalfFloatType:\n              numElements = image_rgba_data.length / 4;\n              var halfArray = new Uint16Array(numElements * 4);\n\n              for (var _j = 0; _j < numElements; _j++) {\n                RGBEByteToRGBHalf(image_rgba_data, _j * 4, halfArray, _j * 4);\n              }\n\n              data = halfArray;\n              type = HalfFloatType;\n              break;\n\n            default:\n              console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n              break;\n          }\n\n          return {\n            width: w,\n            height: h,\n            data: data,\n            header: rgbe_header_info.string,\n            gamma: rgbe_header_info.gamma,\n            exposure: rgbe_header_info.exposure,\n            type: type\n          };\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      function onLoadCallback(texture, texData) {\n        switch (texture.type) {\n          case FloatType:\n          case HalfFloatType:\n            if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n        }\n\n        if (onLoad) onLoad(texture, texData);\n      }\n\n      return _get(_getPrototypeOf(RGBELoader.prototype), \"load\", this).call(this, url, onLoadCallback, onProgress, onError);\n    }\n  }]);\n\n  return RGBELoader;\n}(DataTextureLoader);\n\nexport { RGBELoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/RGBELoader.js"],"names":["DataTextureLoader","HalfFloatType","DataUtils","FloatType","LinearFilter","RGBELoader","manager","type","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","buffer2","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","value","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","colorSpace","encoding","minFilter","magFilter","generateMipmaps","flipY"],"mappings":"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","sourcesContent":["import { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const RGBE_RETURN_FAILURE = -1, rgbe_read_error = 1, rgbe_write_error = 2, rgbe_format_error = 3, rgbe_memory_error = 4, rgbe_error = function(rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n          break;\n        case rgbe_write_error:\n          console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n          break;\n        case rgbe_format_error:\n          console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n          break;\n        default:\n        case rgbe_memory_error:\n          console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n      }\n      return RGBE_RETURN_FAILURE;\n    }, RGBE_VALID_PROGRAMTYPE = 1, RGBE_VALID_FORMAT = 2, RGBE_VALID_DIMENSIONS = 4, NEWLINE = \"\\n\", fgets = function(buffer2, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer2.pos, i = -1, len = 0, s = \"\", chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      }\n      if (-1 < i) {\n        if (false !== consume)\n          buffer2.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n      return false;\n    }, RGBE_ReadHeader = function(buffer2) {\n      const magic_token_re = /^#\\?(\\S+)/, gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, format_re = /^\\s*FORMAT=(\\S+)\\s*$/, dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/, header = {\n        valid: 0,\n        string: \"\",\n        comments: \"\",\n        programtype: \"RGBE\",\n        format: \"\",\n        gamma: 1,\n        exposure: 1,\n        width: 0,\n        height: 0\n      };\n      let line, match;\n      if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n        return rgbe_error(rgbe_read_error, \"no header found\");\n      }\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, \"bad initial token\");\n      }\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + \"\\n\";\n      while (true) {\n        line = fgets(buffer2);\n        if (false === line)\n          break;\n        header.string += line + \"\\n\";\n        if (\"#\" === line.charAt(0)) {\n          header.comments += line + \"\\n\";\n          continue;\n        }\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1];\n        }\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS)\n          break;\n      }\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, \"missing format specifier\");\n      }\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n      }\n      return header;\n    }, RGBE_ReadPixels_RLE = function(buffer2, w, h) {\n      const scanline_width = w;\n      if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 || // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128\n      ) {\n        return new Uint8Array(buffer2);\n      }\n      if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n        return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n      }\n      const data_rgba = new Uint8Array(4 * w * h);\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n      }\n      let offset = 0, pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h;\n      while (num_scanlines > 0 && pos < buffer2.byteLength) {\n        if (pos + 4 > buffer2.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n        rgbeStart[0] = buffer2[pos++];\n        rgbeStart[1] = buffer2[pos++];\n        rgbeStart[2] = buffer2[pos++];\n        rgbeStart[3] = buffer2[pos++];\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n        }\n        let ptr = 0, count;\n        while (ptr < ptr_end && pos < buffer2.byteLength) {\n          count = buffer2[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun)\n            count -= 128;\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, \"bad scanline data\");\n          }\n          if (isEncodedRun) {\n            const byteValue = buffer2[pos++];\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            }\n          } else {\n            scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        }\n        const l = scanline_width;\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n        num_scanlines--;\n      }\n      return data_rgba;\n    };\n    const RGBEByteToRGBFloat = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width, h = rgbe_header_info.height, image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n            data = floatArray;\n            type = FloatType;\n            break;\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n          default:\n            console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type\n        };\n      }\n    }\n    return null;\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture)\n            texture.colorSpace = \"srgb-linear\";\n          else\n            texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad)\n        onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport {\n  RGBELoader\n};\n"]},"metadata":{},"sourceType":"module"}