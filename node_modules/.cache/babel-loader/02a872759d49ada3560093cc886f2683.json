{"ast":null,"code":"import _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, LoaderUtils, FileLoader, TextureLoader, Vector3, Quaternion, Matrix4, Bone, Skeleton, BufferGeometry, MeshLambertMaterial, BufferAttribute, Mesh, SkinnedMesh, Color, Object3D, MeshPhongMaterial } from \"three\";\n\nvar AssimpLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(AssimpLoader, _Loader);\n\n  var _super = _createSuper(AssimpLoader);\n\n  function AssimpLoader() {\n    _classCallCheck(this, AssimpLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AssimpLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer, path) {\n      var textureLoader = new TextureLoader(this.manager);\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      var Virtulous = {};\n\n      Virtulous.KeyFrame = /*#__PURE__*/function () {\n        function _class(time, matrix) {\n          _classCallCheck(this, _class);\n\n          this.time = time;\n          this.matrix = matrix.clone();\n          this.position = new Vector3();\n          this.quaternion = new Quaternion();\n          this.scale = new Vector3(1, 1, 1);\n          this.matrix.decompose(this.position, this.quaternion, this.scale);\n\n          this.clone = function () {\n            var n = new Virtulous.KeyFrame(this.time, this.matrix);\n            return n;\n          };\n\n          this.lerp = function (nextKey, time2) {\n            time2 -= this.time;\n            var dist = nextKey.time - this.time;\n            var l = time2 / dist;\n            var l2 = 1 - l;\n            var keypos = this.position;\n            var keyrot = this.quaternion;\n            var key2pos = nextKey.position;\n            var key2rot = nextKey.quaternion;\n            Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n            Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n            Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n            Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n            Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n            return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n          };\n        }\n\n        return _class;\n      }();\n\n      Virtulous.KeyFrame.tempAniPos = new Vector3();\n      Virtulous.KeyFrame.tempAniQuat = new Quaternion();\n      Virtulous.KeyFrame.tempAniScale = new Vector3(1, 1, 1);\n      Virtulous.KeyFrame.tempAniMatrix = new Matrix4();\n\n      Virtulous.KeyFrameTrack = function () {\n        this.keys = [];\n        this.target = null;\n        this.time = 0;\n        this.length = 0;\n        this._accelTable = {};\n        this.fps = 20;\n\n        this.addKey = function (key) {\n          this.keys.push(key);\n        };\n\n        this.init = function () {\n          this.sortKeys();\n          if (this.keys.length > 0) this.length = this.keys[this.keys.length - 1].time;else this.length = 0;\n          if (!this.fps) return;\n\n          for (var j = 0; j < this.length * this.fps; j++) {\n            for (var i = 0; i < this.keys.length; i++) {\n              if (this.keys[i].time == j) {\n                this._accelTable[j] = i;\n                break;\n              } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n                this._accelTable[j] = i;\n                break;\n              }\n            }\n          }\n        };\n\n        this.parseFromThree = function (data) {\n          var fps = data.fps;\n          this.target = data.node;\n          var track = data.hierarchy[0].keys;\n\n          for (var i = 0; i < track.length; i++) {\n            this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n          }\n\n          this.init();\n        };\n\n        this.parseFromCollada = function (data) {\n          var track = data.keys;\n          var fps = this.fps;\n\n          for (var i = 0; i < track.length; i++) {\n            this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n          }\n\n          this.init();\n        };\n\n        this.sortKeys = function () {\n          this.keys.sort(this.keySortFunc);\n        };\n\n        this.keySortFunc = function (a, b) {\n          return a.time - b.time;\n        };\n\n        this.clone = function () {\n          var t = new Virtulous.KeyFrameTrack();\n          t.target = this.target;\n          t.time = this.time;\n          t.length = this.length;\n\n          for (var i = 0; i < this.keys.length; i++) {\n            t.addKey(this.keys[i].clone());\n          }\n\n          t.init();\n          return t;\n        };\n\n        this.reTarget = function (root, compareitor) {\n          if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n          this.target = compareitor(root, this.target);\n        };\n\n        this.keySearchAccel = function (time) {\n          time *= this.fps;\n          time = Math.floor(time);\n          return this._accelTable[time] || 0;\n        };\n\n        this.setTime = function (time) {\n          time = Math.abs(time);\n          if (this.length) time = time % this.length + 0.05;\n          var key0 = null;\n          var key1 = null;\n\n          for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {\n            if (this.keys[i].time == time) {\n              key0 = this.keys[i];\n              key1 = this.keys[i];\n              break;\n            } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n              key0 = this.keys[i];\n              key1 = this.keys[i + 1];\n              break;\n            } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n              key0 = this.keys[i];\n              key1 = this.keys[0].clone();\n              key1.time += this.length + 0.05;\n              break;\n            }\n          }\n\n          if (key0 && key1 && key0 !== key1) {\n            this.target.matrixAutoUpdate = false;\n            this.target.matrix.copy(key0.lerp(key1, time));\n            this.target.matrixWorldNeedsUpdate = true;\n            return;\n          }\n\n          if (key0 && key1 && key0 == key1) {\n            this.target.matrixAutoUpdate = false;\n            this.target.matrix.copy(key0.matrix);\n            this.target.matrixWorldNeedsUpdate = true;\n            return;\n          }\n        };\n      };\n\n      Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n        function find(node, name) {\n          if (node.name == name) return node;\n\n          for (var i = 0; i < node.children.length; i++) {\n            var r = find(node.children[i], name);\n            if (r) return r;\n          }\n\n          return null;\n        }\n\n        return find(root, target.name);\n      };\n\n      Virtulous.Animation = function () {\n        this.tracks = [];\n        this.length = 0;\n\n        this.addTrack = function (track) {\n          this.tracks.push(track);\n          this.length = Math.max(track.length, this.length);\n        };\n\n        this.setTime = function (time) {\n          this.time = time;\n\n          for (var i = 0; i < this.tracks.length; i++) {\n            this.tracks[i].setTime(time);\n          }\n        };\n\n        this.clone = function (target, compareitor) {\n          if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n          var n = new Virtulous.Animation();\n          n.target = target;\n\n          for (var i = 0; i < this.tracks.length; i++) {\n            var track = this.tracks[i].clone();\n            track.reTarget(target, compareitor);\n            n.addTrack(track);\n          }\n\n          return n;\n        };\n      };\n\n      var ASSBIN_CHUNK_AICAMERA = 4660;\n      var ASSBIN_CHUNK_AILIGHT = 4661;\n      var ASSBIN_CHUNK_AITEXTURE = 4662;\n      var ASSBIN_CHUNK_AIMESH = 4663;\n      var ASSBIN_CHUNK_AINODEANIM = 4664;\n      var ASSBIN_CHUNK_AISCENE = 4665;\n      var ASSBIN_CHUNK_AIBONE = 4666;\n      var ASSBIN_CHUNK_AIANIMATION = 4667;\n      var ASSBIN_CHUNK_AINODE = 4668;\n      var ASSBIN_CHUNK_AIMATERIAL = 4669;\n      var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n      var ASSBIN_MESH_HAS_POSITIONS = 1;\n      var ASSBIN_MESH_HAS_NORMALS = 2;\n      var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n      var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n      var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n      var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n      var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4; //! A directional light source has a well-defined direction\n      //! but is infinitely far away. That's quite a good\n      //! approximation for sun light.\n\n      var aiLightSource_DIRECTIONAL = 1; //! A point light source has a well-defined position\n      //! in space but no direction - it emits light in all\n      //! directions. A normal bulb is a point light.\n      //! A spot light source emits light in a specific\n      //! angle. It has a position and a direction it is pointing to.\n      //! A good example for a spot light is a light spot in\n      //! sport arenas.\n\n      var aiLightSource_SPOT = 3; //! The generic light level of the world, including the bounces\n      //! of all other lightsources.\n      //! Typically, there's at most one ambient light in a scene.\n      //! This light type doesn't have a valid position, direction, or\n      //! other properties, just a color.\n\n      var aiTextureType_DIFFUSE = 1;\n      var aiTextureType_NORMALS = 6;\n      var aiTextureType_OPACITY = 8;\n      var aiTextureType_LIGHTMAP = 10;\n      var BONESPERVERT = 4;\n\n      function ASSBIN_MESH_HAS_TEXCOORD(n) {\n        return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n      }\n\n      function ASSBIN_MESH_HAS_COLOR(n) {\n        return ASSBIN_MESH_HAS_COLOR_BASE << n;\n      }\n\n      function markBones(scene) {\n        for (var i in scene.mMeshes) {\n          var mesh = scene.mMeshes[i];\n\n          for (var k in mesh.mBones) {\n            var boneNode = scene.findNode(mesh.mBones[k].mName);\n            if (boneNode) boneNode.isBone = true;\n          }\n        }\n      }\n\n      function cloneTreeToBones(root, scene) {\n        var rootBone = new Bone();\n        rootBone.matrix.copy(root.matrix);\n        rootBone.matrixWorld.copy(root.matrixWorld);\n        rootBone.position.copy(root.position);\n        rootBone.quaternion.copy(root.quaternion);\n        rootBone.scale.copy(root.scale);\n        scene.nodeCount++;\n        rootBone.name = \"bone_\" + root.name + scene.nodeCount.toString();\n        if (!scene.nodeToBoneMap[root.name]) scene.nodeToBoneMap[root.name] = [];\n        scene.nodeToBoneMap[root.name].push(rootBone);\n\n        for (var i in root.children) {\n          var child = cloneTreeToBones(root.children[i], scene);\n          rootBone.add(child);\n        }\n\n        return rootBone;\n      }\n\n      function sortWeights(indexes, weights) {\n        var pairs = [];\n\n        for (var i = 0; i < indexes.length; i++) {\n          pairs.push({\n            i: indexes[i],\n            w: weights[i]\n          });\n        }\n\n        pairs.sort(function (a, b) {\n          return b.w - a.w;\n        });\n\n        while (pairs.length < 4) {\n          pairs.push({\n            i: 0,\n            w: 0\n          });\n        }\n\n        if (pairs.length > 4) pairs.length = 4;\n        var sum = 0;\n\n        for (var _i = 0; _i < 4; _i++) {\n          sum += pairs[_i].w * pairs[_i].w;\n        }\n\n        sum = Math.sqrt(sum);\n\n        for (var _i2 = 0; _i2 < 4; _i2++) {\n          pairs[_i2].w = pairs[_i2].w / sum;\n          indexes[_i2] = pairs[_i2].i;\n          weights[_i2] = pairs[_i2].w;\n        }\n      }\n\n      function findMatchingBone(root, name) {\n        if (root.name.indexOf(\"bone_\" + name) == 0) return root;\n\n        for (var i in root.children) {\n          var ret = findMatchingBone(root.children[i], name);\n          if (ret) return ret;\n        }\n\n        return void 0;\n      }\n\n      var aiMesh = function aiMesh() {\n        _classCallCheck(this, aiMesh);\n\n        this.mPrimitiveTypes = 0;\n        this.mNumVertices = 0;\n        this.mNumFaces = 0;\n        this.mNumBones = 0;\n        this.mMaterialIndex = 0;\n        this.mVertices = [];\n        this.mNormals = [];\n        this.mTangents = [];\n        this.mBitangents = [];\n        this.mColors = [[]];\n        this.mTextureCoords = [[]];\n        this.mFaces = [];\n        this.mBones = [];\n\n        this.hookupSkeletons = function (scene) {\n          if (this.mBones.length == 0) return;\n          var allBones = [];\n          var offsetMatrix = [];\n          var skeletonRoot = scene.findNode(this.mBones[0].mName);\n\n          while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n            skeletonRoot = skeletonRoot.mParent;\n          }\n\n          var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n          var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n          this.threeNode.add(threeSkeletonRootBone);\n\n          for (var i = 0; i < this.mBones.length; i++) {\n            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n\n            if (bone) {\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            } else {\n              var skeletonRoot = scene.findNode(this.mBones[i].mName);\n              if (!skeletonRoot) return;\n              var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n              var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n              this.threeNode.add(threeSkeletonRootBone);\n              var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            }\n          }\n\n          var skeleton = new Skeleton(allBones, offsetMatrix);\n          this.threeNode.bind(skeleton, new Matrix4());\n          this.threeNode.material.skinning = true;\n        };\n\n        this.toTHREE = function (scene) {\n          if (this.threeNode) return this.threeNode;\n          var geometry = new BufferGeometry();\n          var mat;\n          if (scene.mMaterials[this.mMaterialIndex]) mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);else mat = new MeshLambertMaterial();\n          geometry.setIndex(new BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n          geometry.setAttribute(\"position\", new BufferAttribute(this.mVertexBuffer, 3));\n\n          if (this.mNormalBuffer && this.mNormalBuffer.length > 0) {\n            geometry.setAttribute(\"normal\", new BufferAttribute(this.mNormalBuffer, 3));\n          }\n\n          if (this.mColorBuffer && this.mColorBuffer.length > 0) {\n            geometry.setAttribute(\"color\", new BufferAttribute(this.mColorBuffer, 4));\n          }\n\n          if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0) {\n            geometry.setAttribute(\"uv\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n          }\n\n          if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0) {\n            geometry.setAttribute(\"uv1\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n          }\n\n          if (this.mTangentBuffer && this.mTangentBuffer.length > 0) {\n            geometry.setAttribute(\"tangents\", new BufferAttribute(this.mTangentBuffer, 3));\n          }\n\n          if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0) {\n            geometry.setAttribute(\"bitangents\", new BufferAttribute(this.mBitangentBuffer, 3));\n          }\n\n          if (this.mBones.length > 0) {\n            var weights = [];\n            var bones = [];\n\n            for (var i = 0; i < this.mBones.length; i++) {\n              for (var j = 0; j < this.mBones[i].mWeights.length; j++) {\n                var weight = this.mBones[i].mWeights[j];\n\n                if (weight) {\n                  if (!weights[weight.mVertexId]) weights[weight.mVertexId] = [];\n                  if (!bones[weight.mVertexId]) bones[weight.mVertexId] = [];\n                  weights[weight.mVertexId].push(weight.mWeight);\n                  bones[weight.mVertexId].push(parseInt(i));\n                }\n              }\n            }\n\n            for (var _i3 in bones) {\n              sortWeights(bones[_i3], weights[_i3]);\n            }\n\n            var _weights = [];\n            var _bones = [];\n\n            for (var _i4 = 0; _i4 < weights.length; _i4++) {\n              for (var _j = 0; _j < 4; _j++) {\n                if (weights[_i4] && bones[_i4]) {\n                  _weights.push(weights[_i4][_j]);\n\n                  _bones.push(bones[_i4][_j]);\n                } else {\n                  _weights.push(0);\n\n                  _bones.push(0);\n                }\n              }\n            }\n\n            geometry.setAttribute(\"skinWeight\", new BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n            geometry.setAttribute(\"skinIndex\", new BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n          }\n\n          var mesh;\n          if (this.mBones.length == 0) mesh = new Mesh(geometry, mat);\n\n          if (this.mBones.length > 0) {\n            mesh = new SkinnedMesh(geometry, mat);\n            mesh.normalizeSkinWeights();\n          }\n\n          this.threeNode = mesh;\n          return mesh;\n        };\n      };\n\n      var aiFace = function aiFace() {\n        _classCallCheck(this, aiFace);\n\n        this.mNumIndices = 0;\n        this.mIndices = [];\n      };\n\n      var aiVector3D = function aiVector3D() {\n        _classCallCheck(this, aiVector3D);\n\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n\n        this.toTHREE = function () {\n          return new Vector3(this.x, this.y, this.z);\n        };\n      };\n\n      var aiColor3D = function aiColor3D() {\n        _classCallCheck(this, aiColor3D);\n\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n\n        this.toTHREE = function () {\n          return new Color(this.r, this.g, this.b);\n        };\n      };\n\n      var aiQuaternion = function aiQuaternion() {\n        _classCallCheck(this, aiQuaternion);\n\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n\n        this.toTHREE = function () {\n          return new Quaternion(this.x, this.y, this.z, this.w);\n        };\n      };\n\n      var aiVertexWeight = function aiVertexWeight() {\n        _classCallCheck(this, aiVertexWeight);\n\n        this.mVertexId = 0;\n        this.mWeight = 0;\n      };\n\n      var aiString = function aiString() {\n        _classCallCheck(this, aiString);\n\n        this.data = [];\n\n        this.toString = function () {\n          var str = \"\";\n          this.data.forEach(function (i) {\n            str += String.fromCharCode(i);\n          });\n          return str.replace(/[^\\x20-\\x7E]+/g, \"\");\n        };\n      };\n\n      var aiVectorKey = function aiVectorKey() {\n        _classCallCheck(this, aiVectorKey);\n\n        this.mTime = 0;\n        this.mValue = null;\n      };\n\n      var aiQuatKey = function aiQuatKey() {\n        _classCallCheck(this, aiQuatKey);\n\n        this.mTime = 0;\n        this.mValue = null;\n      };\n\n      var aiNode = function aiNode() {\n        _classCallCheck(this, aiNode);\n\n        this.mName = \"\";\n        this.mTransformation = [];\n        this.mNumChildren = 0;\n        this.mNumMeshes = 0;\n        this.mMeshes = [];\n        this.mChildren = [];\n\n        this.toTHREE = function (scene) {\n          if (this.threeNode) return this.threeNode;\n          var o = new Object3D();\n          o.name = this.mName;\n          o.matrix = this.mTransformation.toTHREE();\n\n          for (var i = 0; i < this.mChildren.length; i++) {\n            o.add(this.mChildren[i].toTHREE(scene));\n          }\n\n          for (var _i5 = 0; _i5 < this.mMeshes.length; _i5++) {\n            o.add(scene.mMeshes[this.mMeshes[_i5]].toTHREE(scene));\n          }\n\n          this.threeNode = o;\n          o.matrix.decompose(o.position, o.quaternion, o.scale);\n          return o;\n        };\n      };\n\n      var aiBone = function aiBone() {\n        _classCallCheck(this, aiBone);\n\n        this.mName = \"\";\n        this.mNumWeights = 0;\n        this.mOffsetMatrix = 0;\n      };\n\n      var aiMaterialProperty = function aiMaterialProperty() {\n        _classCallCheck(this, aiMaterialProperty);\n\n        this.mKey = \"\";\n        this.mSemantic = 0;\n        this.mIndex = 0;\n        this.mData = [];\n        this.mDataLength = 0;\n        this.mType = 0;\n\n        this.dataAsColor = function () {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          var g = reader.getFloat32(4, true);\n          var b = reader.getFloat32(8, true);\n          return new Color(r, g, b);\n        };\n\n        this.dataAsFloat = function () {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return r;\n        };\n\n        this.dataAsBool = function () {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return !!r;\n        };\n\n        this.dataAsString = function () {\n          var s = new aiString();\n          s.data = this.mData;\n          return s.toString();\n        };\n\n        this.dataAsMap = function () {\n          var s = new aiString();\n          s.data = this.mData;\n          var path2 = s.toString();\n          path2 = path2.replace(/\\\\/g, \"/\");\n\n          if (path2.indexOf(\"/\") != -1) {\n            path2 = path2.substr(path2.lastIndexOf(\"/\") + 1);\n          }\n\n          return textureLoader.load(path2);\n        };\n      };\n\n      var namePropMapping = {\n        \"?mat.name\": \"name\",\n        \"$mat.shadingm\": \"shading\",\n        \"$mat.twosided\": \"twoSided\",\n        \"$mat.wireframe\": \"wireframe\",\n        \"$clr.ambient\": \"ambient\",\n        \"$clr.diffuse\": \"color\",\n        \"$clr.specular\": \"specular\",\n        \"$clr.emissive\": \"emissive\",\n        \"$clr.transparent\": \"transparent\",\n        \"$clr.reflective\": \"reflect\",\n        \"$mat.shininess\": \"shininess\",\n        \"$mat.reflectivity\": \"reflectivity\",\n        \"$mat.refracti\": \"refraction\",\n        \"$tex.file\": \"map\"\n      };\n      var nameTypeMapping = {\n        \"?mat.name\": \"string\",\n        \"$mat.shadingm\": \"bool\",\n        \"$mat.twosided\": \"bool\",\n        \"$mat.wireframe\": \"bool\",\n        \"$clr.ambient\": \"color\",\n        \"$clr.diffuse\": \"color\",\n        \"$clr.specular\": \"color\",\n        \"$clr.emissive\": \"color\",\n        \"$clr.transparent\": \"color\",\n        \"$clr.reflective\": \"color\",\n        \"$mat.shininess\": \"float\",\n        \"$mat.reflectivity\": \"float\",\n        \"$mat.refracti\": \"float\",\n        \"$tex.file\": \"map\"\n      };\n\n      var aiMaterial = function aiMaterial() {\n        _classCallCheck(this, aiMaterial);\n\n        this.mNumAllocated = 0;\n        this.mNumProperties = 0;\n        this.mProperties = [];\n\n        this.toTHREE = function () {\n          var mat = new MeshPhongMaterial();\n\n          for (var i = 0; i < this.mProperties.length; i++) {\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"float\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n            }\n\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"color\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n            }\n\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"bool\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n            }\n\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"string\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n            }\n\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"map\") {\n              var prop = this.mProperties[i];\n              if (prop.mSemantic == aiTextureType_DIFFUSE) mat.map = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_NORMALS) mat.normalMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_LIGHTMAP) mat.lightMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_OPACITY) mat.alphaMap = this.mProperties[i].dataAsMap();\n            }\n          }\n\n          mat.ambient.r = 0.53;\n          mat.ambient.g = 0.53;\n          mat.ambient.b = 0.53;\n          mat.color.r = 1;\n          mat.color.g = 1;\n          mat.color.b = 1;\n          return mat;\n        };\n      };\n\n      function veclerp(v1, v2, l) {\n        var v = new Vector3();\n        var lm1 = 1 - l;\n        v.x = v1.x * l + v2.x * lm1;\n        v.y = v1.y * l + v2.y * lm1;\n        v.z = v1.z * l + v2.z * lm1;\n        return v;\n      }\n\n      function quatlerp(q1, q2, l) {\n        return q1.clone().slerp(q2, 1 - l);\n      }\n\n      function sampleTrack(keys, time, lne, lerp) {\n        if (keys.length == 1) return keys[0].mValue.toTHREE();\n        var dist = Infinity;\n        var key = null;\n        var nextKey = null;\n\n        for (var i = 0; i < keys.length; i++) {\n          var timeDist = Math.abs(keys[i].mTime - time);\n\n          if (timeDist < dist && keys[i].mTime <= time) {\n            dist = timeDist;\n            key = keys[i];\n            nextKey = keys[i + 1];\n          }\n        }\n\n        if (!key) {\n          return null;\n        } else if (nextKey) {\n          var dT = nextKey.mTime - key.mTime;\n          var T = key.mTime - time;\n          var l = T / dT;\n          return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n        } else {\n          nextKey = keys[0].clone();\n          nextKey.mTime += lne;\n          var dT = nextKey.mTime - key.mTime;\n          var T = key.mTime - time;\n          var l = T / dT;\n          return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n        }\n      }\n\n      var aiNodeAnim = function aiNodeAnim() {\n        _classCallCheck(this, aiNodeAnim);\n\n        this.mNodeName = \"\";\n        this.mNumPositionKeys = 0;\n        this.mNumRotationKeys = 0;\n        this.mNumScalingKeys = 0;\n        this.mPositionKeys = [];\n        this.mRotationKeys = [];\n        this.mScalingKeys = [];\n        this.mPreState = \"\";\n        this.mPostState = \"\";\n\n        this.init = function (tps) {\n          if (!tps) tps = 1;\n\n          function t(t2) {\n            t2.mTime /= tps;\n          }\n\n          this.mPositionKeys.forEach(t);\n          this.mRotationKeys.forEach(t);\n          this.mScalingKeys.forEach(t);\n        };\n\n        this.sortKeys = function () {\n          function comp(a, b) {\n            return a.mTime - b.mTime;\n          }\n\n          this.mPositionKeys.sort(comp);\n          this.mRotationKeys.sort(comp);\n          this.mScalingKeys.sort(comp);\n        };\n\n        this.getLength = function () {\n          return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n            return a.mTime;\n          })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n            return a.mTime;\n          })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n            return a.mTime;\n          })));\n        };\n\n        this.toTHREE = function (o) {\n          this.sortKeys();\n          var length = this.getLength();\n          var track = new Virtulous.KeyFrameTrack();\n\n          for (var i = 0; i < length; i += 0.05) {\n            var matrix = new Matrix4();\n            var time = i;\n            var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n            var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n            var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n            matrix.compose(pos, rotation, scale);\n            var key = new Virtulous.KeyFrame(time, matrix);\n            track.addKey(key);\n          }\n\n          track.target = o.findNode(this.mNodeName).toTHREE();\n          var tracks = [track];\n\n          if (o.nodeToBoneMap[this.mNodeName]) {\n            for (var _i6 = 0; _i6 < o.nodeToBoneMap[this.mNodeName].length; _i6++) {\n              var t2 = track.clone();\n              t2.target = o.nodeToBoneMap[this.mNodeName][_i6];\n              tracks.push(t2);\n            }\n          }\n\n          return tracks;\n        };\n      };\n\n      var aiAnimation = function aiAnimation() {\n        _classCallCheck(this, aiAnimation);\n\n        this.mName = \"\";\n        this.mDuration = 0;\n        this.mTicksPerSecond = 0;\n        this.mNumChannels = 0;\n        this.mChannels = [];\n\n        this.toTHREE = function (root) {\n          var animationHandle = new Virtulous.Animation();\n\n          for (var i in this.mChannels) {\n            this.mChannels[i].init(this.mTicksPerSecond);\n            var tracks = this.mChannels[i].toTHREE(root);\n\n            for (var j in tracks) {\n              tracks[j].init();\n              animationHandle.addTrack(tracks[j]);\n            }\n          }\n\n          animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n            return e.length;\n          }));\n          return animationHandle;\n        };\n      };\n\n      var aiTexture = function aiTexture() {\n        _classCallCheck(this, aiTexture);\n\n        this.mWidth = 0;\n        this.mHeight = 0;\n        this.texAchFormatHint = [];\n        this.pcData = [];\n      };\n\n      var aiLight = function aiLight() {\n        _classCallCheck(this, aiLight);\n\n        this.mName = \"\";\n        this.mType = 0;\n        this.mAttenuationConstant = 0;\n        this.mAttenuationLinear = 0;\n        this.mAttenuationQuadratic = 0;\n        this.mAngleInnerCone = 0;\n        this.mAngleOuterCone = 0;\n        this.mColorDiffuse = null;\n        this.mColorSpecular = null;\n        this.mColorAmbient = null;\n      };\n\n      var aiCamera = function aiCamera() {\n        _classCallCheck(this, aiCamera);\n\n        this.mName = \"\";\n        this.mPosition = null;\n        this.mLookAt = null;\n        this.mUp = null;\n        this.mHorizontalFOV = 0;\n        this.mClipPlaneNear = 0;\n        this.mClipPlaneFar = 0;\n        this.mAspect = 0;\n      };\n\n      var aiScene = function aiScene() {\n        _classCallCheck(this, aiScene);\n\n        this.versionMajor = 0;\n        this.versionMinor = 0;\n        this.versionRevision = 0;\n        this.compileFlags = 0;\n        this.mFlags = 0;\n        this.mNumMeshes = 0;\n        this.mNumMaterials = 0;\n        this.mNumAnimations = 0;\n        this.mNumTextures = 0;\n        this.mNumLights = 0;\n        this.mNumCameras = 0;\n        this.mRootNode = null;\n        this.mMeshes = [];\n        this.mMaterials = [];\n        this.mAnimations = [];\n        this.mLights = [];\n        this.mCameras = [];\n        this.nodeToBoneMap = {};\n\n        this.findNode = function (name, root) {\n          if (!root) {\n            root = this.mRootNode;\n          }\n\n          if (root.mName == name) {\n            return root;\n          }\n\n          for (var i = 0; i < root.mChildren.length; i++) {\n            var ret = this.findNode(name, root.mChildren[i]);\n            if (ret) return ret;\n          }\n\n          return null;\n        };\n\n        this.toTHREE = function () {\n          this.nodeCount = 0;\n          markBones(this);\n          var o = this.mRootNode.toTHREE(this);\n\n          for (var i in this.mMeshes) {\n            this.mMeshes[i].hookupSkeletons(this);\n          }\n\n          if (this.mAnimations.length > 0) {\n            var a = this.mAnimations[0].toTHREE(this);\n          }\n\n          return {\n            object: o,\n            animation: a\n          };\n        };\n      };\n\n      var aiMatrix4 = function aiMatrix4() {\n        _classCallCheck(this, aiMatrix4);\n\n        this.elements = [[], [], [], []];\n\n        this.toTHREE = function () {\n          var m = new Matrix4();\n\n          for (var i = 0; i < 4; ++i) {\n            for (var i2 = 0; i2 < 4; ++i2) {\n              m.elements[i * 4 + i2] = this.elements[i2][i];\n            }\n          }\n\n          return m;\n        };\n      };\n\n      var littleEndian = true;\n\n      function readFloat(dataview) {\n        var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n        dataview.readOffset += 4;\n        return val;\n      }\n\n      function Read_double(dataview) {\n        var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n        dataview.readOffset += 8;\n        return val;\n      }\n\n      function Read_uint8_t(dataview) {\n        var val = dataview.getUint8(dataview.readOffset);\n        dataview.readOffset += 1;\n        return val;\n      }\n\n      function Read_uint16_t(dataview) {\n        var val = dataview.getUint16(dataview.readOffset, littleEndian);\n        dataview.readOffset += 2;\n        return val;\n      }\n\n      function Read_unsigned_int(dataview) {\n        var val = dataview.getUint32(dataview.readOffset, littleEndian);\n        dataview.readOffset += 4;\n        return val;\n      }\n\n      function Read_uint32_t(dataview) {\n        var val = dataview.getUint32(dataview.readOffset, littleEndian);\n        dataview.readOffset += 4;\n        return val;\n      }\n\n      function Read_aiVector3D(stream) {\n        var v = new aiVector3D();\n        v.x = readFloat(stream);\n        v.y = readFloat(stream);\n        v.z = readFloat(stream);\n        return v;\n      }\n\n      function Read_aiColor3D(stream) {\n        var c = new aiColor3D();\n        c.r = readFloat(stream);\n        c.g = readFloat(stream);\n        c.b = readFloat(stream);\n        return c;\n      }\n\n      function Read_aiQuaternion(stream) {\n        var v = new aiQuaternion();\n        v.w = readFloat(stream);\n        v.x = readFloat(stream);\n        v.y = readFloat(stream);\n        v.z = readFloat(stream);\n        return v;\n      }\n\n      function Read_aiString(stream) {\n        var s = new aiString();\n        var stringlengthbytes = Read_unsigned_int(stream);\n        stream.ReadBytes(s.data, 1, stringlengthbytes);\n        return s.toString();\n      }\n\n      function Read_aiVertexWeight(stream) {\n        var w = new aiVertexWeight();\n        w.mVertexId = Read_unsigned_int(stream);\n        w.mWeight = readFloat(stream);\n        return w;\n      }\n\n      function Read_aiMatrix4x4(stream) {\n        var m = new aiMatrix4();\n\n        for (var i = 0; i < 4; ++i) {\n          for (var i2 = 0; i2 < 4; ++i2) {\n            m.elements[i][i2] = readFloat(stream);\n          }\n        }\n\n        return m;\n      }\n\n      function Read_aiVectorKey(stream) {\n        var v = new aiVectorKey();\n        v.mTime = Read_double(stream);\n        v.mValue = Read_aiVector3D(stream);\n        return v;\n      }\n\n      function Read_aiQuatKey(stream) {\n        var v = new aiQuatKey();\n        v.mTime = Read_double(stream);\n        v.mValue = Read_aiQuaternion(stream);\n        return v;\n      }\n\n      function ReadArray_aiVertexWeight(stream, data, size) {\n        for (var i = 0; i < size; i++) {\n          data[i] = Read_aiVertexWeight(stream);\n        }\n      }\n\n      function ReadArray_aiVectorKey(stream, data, size) {\n        for (var i = 0; i < size; i++) {\n          data[i] = Read_aiVectorKey(stream);\n        }\n      }\n\n      function ReadArray_aiQuatKey(stream, data, size) {\n        for (var i = 0; i < size; i++) {\n          data[i] = Read_aiQuatKey(stream);\n        }\n      }\n\n      function ReadBounds(stream, T, n) {\n        return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n      }\n\n      function ai_assert(bool) {\n        if (!bool) throw \"asset failed\";\n      }\n\n      function ReadBinaryNode(stream, parent, depth) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n        Read_uint32_t(stream);\n        var node = new aiNode();\n        node.mParent = parent;\n        node.mDepth = depth;\n        node.mName = Read_aiString(stream);\n        node.mTransformation = Read_aiMatrix4x4(stream);\n        node.mNumChildren = Read_unsigned_int(stream);\n        node.mNumMeshes = Read_unsigned_int(stream);\n\n        if (node.mNumMeshes) {\n          node.mMeshes = [];\n\n          for (var i = 0; i < node.mNumMeshes; ++i) {\n            node.mMeshes[i] = Read_unsigned_int(stream);\n          }\n        }\n\n        if (node.mNumChildren) {\n          node.mChildren = [];\n\n          for (var _i7 = 0; _i7 < node.mNumChildren; ++_i7) {\n            var node2 = ReadBinaryNode(stream, node, depth++);\n            node.mChildren[_i7] = node2;\n          }\n        }\n\n        return node;\n      }\n\n      function ReadBinaryBone(stream, b) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n        Read_uint32_t(stream);\n        b.mName = Read_aiString(stream);\n        b.mNumWeights = Read_unsigned_int(stream);\n        b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n\n        if (shortened) {\n          ReadBounds(stream, b.mWeights, b.mNumWeights);\n        } else {\n          b.mWeights = [];\n          ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n        }\n\n        return b;\n      }\n\n      function ReadBinaryMesh(stream, mesh) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n        Read_uint32_t(stream);\n        mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n        mesh.mNumVertices = Read_unsigned_int(stream);\n        mesh.mNumFaces = Read_unsigned_int(stream);\n        mesh.mNumBones = Read_unsigned_int(stream);\n        mesh.mMaterialIndex = Read_unsigned_int(stream);\n        mesh.mNumUVComponents = [];\n        var c = Read_unsigned_int(stream);\n\n        if (c & ASSBIN_MESH_HAS_POSITIONS) {\n          if (shortened) {\n            ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n          } else {\n            mesh.mVertices = [];\n            mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n            stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          }\n        }\n\n        if (c & ASSBIN_MESH_HAS_NORMALS) {\n          if (shortened) {\n            ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n          } else {\n            mesh.mNormals = [];\n            mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n            stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          }\n        }\n\n        if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n          if (shortened) {\n            ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n            ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n          } else {\n            mesh.mTangents = [];\n            mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n            stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n            mesh.mBitangents = [];\n            mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n            stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          }\n        }\n\n        for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n          if (!(c & ASSBIN_MESH_HAS_COLOR(n))) break;\n\n          if (shortened) {\n            ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n          } else {\n            mesh.mColors[n] = [];\n            mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n            stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n          }\n        }\n\n        mesh.mTexCoordsBuffers = [];\n\n        for (var _n = 0; _n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++_n) {\n          if (!(c & ASSBIN_MESH_HAS_TEXCOORD(_n))) break;\n          mesh.mNumUVComponents[_n] = Read_unsigned_int(stream);\n\n          if (shortened) {\n            ReadBounds(stream, mesh.mTextureCoords[_n], mesh.mNumVertices);\n          } else {\n            mesh.mTextureCoords[_n] = [];\n            mesh.mTexCoordsBuffers[_n] = [];\n\n            for (var uv = 0; uv < mesh.mNumVertices; uv++) {\n              mesh.mTexCoordsBuffers[_n].push(readFloat(stream));\n\n              mesh.mTexCoordsBuffers[_n].push(readFloat(stream));\n\n              readFloat(stream);\n            }\n          }\n        }\n\n        if (shortened) {\n          Read_unsigned_int(stream);\n        } else {\n          mesh.mFaces = [];\n          mesh.mIndexArray = [];\n\n          for (var i = 0; i < mesh.mNumFaces; ++i) {\n            var f = mesh.mFaces[i] = new aiFace();\n            f.mNumIndices = Read_uint16_t(stream);\n            f.mIndices = [];\n\n            for (var a = 0; a < f.mNumIndices; ++a) {\n              if (mesh.mNumVertices < 1 << 16) {\n                f.mIndices[a] = Read_uint16_t(stream);\n              } else {\n                f.mIndices[a] = Read_unsigned_int(stream);\n              }\n            }\n\n            if (f.mNumIndices === 3) {\n              mesh.mIndexArray.push(f.mIndices[0]);\n              mesh.mIndexArray.push(f.mIndices[1]);\n              mesh.mIndexArray.push(f.mIndices[2]);\n            } else if (f.mNumIndices === 4) {\n              mesh.mIndexArray.push(f.mIndices[0]);\n              mesh.mIndexArray.push(f.mIndices[1]);\n              mesh.mIndexArray.push(f.mIndices[2]);\n              mesh.mIndexArray.push(f.mIndices[2]);\n              mesh.mIndexArray.push(f.mIndices[3]);\n              mesh.mIndexArray.push(f.mIndices[0]);\n            } else {\n              throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n            }\n          }\n        }\n\n        if (mesh.mNumBones) {\n          mesh.mBones = [];\n\n          for (var _a = 0; _a < mesh.mNumBones; ++_a) {\n            mesh.mBones[_a] = new aiBone();\n            ReadBinaryBone(stream, mesh.mBones[_a]);\n          }\n        }\n      }\n\n      function ReadBinaryMaterialProperty(stream, prop) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n        Read_uint32_t(stream);\n        prop.mKey = Read_aiString(stream);\n        prop.mSemantic = Read_unsigned_int(stream);\n        prop.mIndex = Read_unsigned_int(stream);\n        prop.mDataLength = Read_unsigned_int(stream);\n        prop.mType = Read_unsigned_int(stream);\n        prop.mData = [];\n        stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n      }\n\n      function ReadBinaryMaterial(stream, mat) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n        Read_uint32_t(stream);\n        mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n\n        if (mat.mNumProperties) {\n          if (mat.mProperties) {\n            delete mat.mProperties;\n          }\n\n          mat.mProperties = [];\n\n          for (var i = 0; i < mat.mNumProperties; ++i) {\n            mat.mProperties[i] = new aiMaterialProperty();\n            ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n          }\n        }\n      }\n\n      function ReadBinaryNodeAnim(stream, nd) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n        Read_uint32_t(stream);\n        nd.mNodeName = Read_aiString(stream);\n        nd.mNumPositionKeys = Read_unsigned_int(stream);\n        nd.mNumRotationKeys = Read_unsigned_int(stream);\n        nd.mNumScalingKeys = Read_unsigned_int(stream);\n        nd.mPreState = Read_unsigned_int(stream);\n        nd.mPostState = Read_unsigned_int(stream);\n\n        if (nd.mNumPositionKeys) {\n          if (shortened) {\n            ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n          } else {\n            nd.mPositionKeys = [];\n            ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n          }\n        }\n\n        if (nd.mNumRotationKeys) {\n          if (shortened) {\n            ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n          } else {\n            nd.mRotationKeys = [];\n            ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n          }\n        }\n\n        if (nd.mNumScalingKeys) {\n          if (shortened) {\n            ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n          } else {\n            nd.mScalingKeys = [];\n            ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n          }\n        }\n      }\n\n      function ReadBinaryAnim(stream, anim) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n        Read_uint32_t(stream);\n        anim.mName = Read_aiString(stream);\n        anim.mDuration = Read_double(stream);\n        anim.mTicksPerSecond = Read_double(stream);\n        anim.mNumChannels = Read_unsigned_int(stream);\n\n        if (anim.mNumChannels) {\n          anim.mChannels = [];\n\n          for (var a = 0; a < anim.mNumChannels; ++a) {\n            anim.mChannels[a] = new aiNodeAnim();\n            ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n          }\n        }\n      }\n\n      function ReadBinaryTexture(stream, tex) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n        Read_uint32_t(stream);\n        tex.mWidth = Read_unsigned_int(stream);\n        tex.mHeight = Read_unsigned_int(stream);\n        stream.ReadBytes(tex.achFormatHint, 1, 4);\n\n        if (!shortened) {\n          if (!tex.mHeight) {\n            tex.pcData = [];\n            stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n          } else {\n            tex.pcData = [];\n            stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n          }\n        }\n      }\n\n      function ReadBinaryLight(stream, l) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n        Read_uint32_t(stream);\n        l.mName = Read_aiString(stream);\n        l.mType = Read_unsigned_int(stream);\n\n        if (l.mType != aiLightSource_DIRECTIONAL) {\n          l.mAttenuationConstant = readFloat(stream);\n          l.mAttenuationLinear = readFloat(stream);\n          l.mAttenuationQuadratic = readFloat(stream);\n        }\n\n        l.mColorDiffuse = Read_aiColor3D(stream);\n        l.mColorSpecular = Read_aiColor3D(stream);\n        l.mColorAmbient = Read_aiColor3D(stream);\n\n        if (l.mType == aiLightSource_SPOT) {\n          l.mAngleInnerCone = readFloat(stream);\n          l.mAngleOuterCone = readFloat(stream);\n        }\n      }\n\n      function ReadBinaryCamera(stream, cam) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n        Read_uint32_t(stream);\n        cam.mName = Read_aiString(stream);\n        cam.mPosition = Read_aiVector3D(stream);\n        cam.mLookAt = Read_aiVector3D(stream);\n        cam.mUp = Read_aiVector3D(stream);\n        cam.mHorizontalFOV = readFloat(stream);\n        cam.mClipPlaneNear = readFloat(stream);\n        cam.mClipPlaneFar = readFloat(stream);\n        cam.mAspect = readFloat(stream);\n      }\n\n      function ReadBinaryScene(stream, scene) {\n        var chunkID = Read_uint32_t(stream);\n        ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n        Read_uint32_t(stream);\n        scene.mFlags = Read_unsigned_int(stream);\n        scene.mNumMeshes = Read_unsigned_int(stream);\n        scene.mNumMaterials = Read_unsigned_int(stream);\n        scene.mNumAnimations = Read_unsigned_int(stream);\n        scene.mNumTextures = Read_unsigned_int(stream);\n        scene.mNumLights = Read_unsigned_int(stream);\n        scene.mNumCameras = Read_unsigned_int(stream);\n        scene.mRootNode = new aiNode();\n        scene.mRootNode = ReadBinaryNode(stream, null, 0);\n\n        if (scene.mNumMeshes) {\n          scene.mMeshes = [];\n\n          for (var i = 0; i < scene.mNumMeshes; ++i) {\n            scene.mMeshes[i] = new aiMesh();\n            ReadBinaryMesh(stream, scene.mMeshes[i]);\n          }\n        }\n\n        if (scene.mNumMaterials) {\n          scene.mMaterials = [];\n\n          for (var _i8 = 0; _i8 < scene.mNumMaterials; ++_i8) {\n            scene.mMaterials[_i8] = new aiMaterial();\n            ReadBinaryMaterial(stream, scene.mMaterials[_i8]);\n          }\n        }\n\n        if (scene.mNumAnimations) {\n          scene.mAnimations = [];\n\n          for (var _i9 = 0; _i9 < scene.mNumAnimations; ++_i9) {\n            scene.mAnimations[_i9] = new aiAnimation();\n            ReadBinaryAnim(stream, scene.mAnimations[_i9]);\n          }\n        }\n\n        if (scene.mNumTextures) {\n          scene.mTextures = [];\n\n          for (var _i10 = 0; _i10 < scene.mNumTextures; ++_i10) {\n            scene.mTextures[_i10] = new aiTexture();\n            ReadBinaryTexture(stream, scene.mTextures[_i10]);\n          }\n        }\n\n        if (scene.mNumLights) {\n          scene.mLights = [];\n\n          for (var _i11 = 0; _i11 < scene.mNumLights; ++_i11) {\n            scene.mLights[_i11] = new aiLight();\n            ReadBinaryLight(stream, scene.mLights[_i11]);\n          }\n        }\n\n        if (scene.mNumCameras) {\n          scene.mCameras = [];\n\n          for (var _i12 = 0; _i12 < scene.mNumCameras; ++_i12) {\n            scene.mCameras[_i12] = new aiCamera();\n            ReadBinaryCamera(stream, scene.mCameras[_i12]);\n          }\n        }\n      }\n\n      var aiOrigin_CUR = 0;\n      var aiOrigin_BEG = 1;\n\n      function extendStream(stream) {\n        stream.readOffset = 0;\n\n        stream.Seek = function (off, ori) {\n          if (ori == aiOrigin_CUR) {\n            stream.readOffset += off;\n          }\n\n          if (ori == aiOrigin_BEG) {\n            stream.readOffset = off;\n          }\n        };\n\n        stream.ReadBytes = function (buff, size, n) {\n          var bytes = size * n;\n\n          for (var i = 0; i < bytes; i++) {\n            buff[i] = Read_uint8_t(this);\n          }\n        };\n\n        stream.subArray32 = function (start, end) {\n          var buff = this.buffer;\n          var newbuff = buff.slice(start, end);\n          return new Float32Array(newbuff);\n        };\n\n        stream.subArrayUint16 = function (start, end) {\n          var buff = this.buffer;\n          var newbuff = buff.slice(start, end);\n          return new Uint16Array(newbuff);\n        };\n\n        stream.subArrayUint8 = function (start, end) {\n          var buff = this.buffer;\n          var newbuff = buff.slice(start, end);\n          return new Uint8Array(newbuff);\n        };\n\n        stream.subArrayUint32 = function (start, end) {\n          var buff = this.buffer;\n          var newbuff = buff.slice(start, end);\n          return new Uint32Array(newbuff);\n        };\n      }\n\n      var shortened, compressed;\n\n      function InternReadFile(pFiledata) {\n        var pScene = new aiScene();\n        var stream = new DataView(pFiledata);\n        extendStream(stream);\n        stream.Seek(44, aiOrigin_CUR);\n        pScene.versionMajor = Read_unsigned_int(stream);\n        pScene.versionMinor = Read_unsigned_int(stream);\n        pScene.versionRevision = Read_unsigned_int(stream);\n        pScene.compileFlags = Read_unsigned_int(stream);\n        shortened = Read_uint16_t(stream) > 0;\n        compressed = Read_uint16_t(stream) > 0;\n        if (shortened) throw \"Shortened binaries are not supported!\";\n        stream.Seek(256, aiOrigin_CUR);\n        stream.Seek(128, aiOrigin_CUR);\n        stream.Seek(64, aiOrigin_CUR);\n\n        if (compressed) {\n          var uncompressedSize = Read_uint32_t(stream);\n          var compressedSize = stream.FileSize() - stream.Tell();\n          var compressedData = [];\n          stream.Read(compressedData, 1, compressedSize);\n          var uncompressedData = [];\n          uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n          var buff = new ArrayBuffer(uncompressedData);\n          ReadBinaryScene(buff, pScene);\n        } else {\n          ReadBinaryScene(stream, pScene);\n        }\n\n        return pScene.toTHREE();\n      }\n\n      return InternReadFile(buffer);\n    }\n  }]);\n\n  return AssimpLoader;\n}(Loader);\n\nexport { AssimpLoader };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/loaders/AssimpLoader.js"],"names":["Loader","LoaderUtils","FileLoader","TextureLoader","Vector3","Quaternion","Matrix4","Bone","Skeleton","BufferGeometry","MeshLambertMaterial","BufferAttribute","Mesh","SkinnedMesh","Color","Object3D","MeshPhongMaterial","AssimpLoader","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","manager","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","textureLoader","resourcePath","setCrossOrigin","crossOrigin","Virtulous","KeyFrame","time","matrix","clone","position","quaternion","scale","decompose","n","lerp","nextKey","time2","dist","l","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","x","y","z","tempAniQuat","set","w","slerp","tempAniMatrix","compose","tempAniScale","KeyFrameTrack","keys","target","length","_accelTable","fps","addKey","key","push","init","sortKeys","j","i","parseFromThree","data","node","track","hierarchy","targets","parseFromCollada","sort","keySortFunc","a","b","t","reTarget","root","compareitor","TrackTargetNodeNameCompare","keySearchAccel","Math","floor","setTime","abs","key0","key1","matrixAutoUpdate","copy","matrixWorldNeedsUpdate","find","name","children","r","Animation","tracks","addTrack","max","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","markBones","scene","mMeshes","mesh","k","mBones","boneNode","findNode","mName","isBone","cloneTreeToBones","rootBone","matrixWorld","nodeCount","toString","nodeToBoneMap","child","add","sortWeights","indexes","weights","pairs","sum","sqrt","findMatchingBone","indexOf","ret","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","mParent","threeSkeletonRoot","toTHREE","threeSkeletonRootBone","threeNode","bone","tbone","mOffsetMatrix","skeleton","bind","material","skinning","geometry","mat","mMaterials","setIndex","Uint32Array","mIndexArray","setAttribute","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","Float32Array","mTangentBuffer","mBitangentBuffer","bones","mWeights","weight","mVertexId","mWeight","parseInt","_weights","_bones","normalizeSkinWeights","aiFace","mNumIndices","mIndices","aiVector3D","aiColor3D","g","aiQuaternion","aiVertexWeight","aiString","str","forEach","String","fromCharCode","replace","aiVectorKey","mTime","mValue","aiQuatKey","aiNode","mTransformation","mNumChildren","mNumMeshes","mChildren","o","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","array","Uint8Array","reader","DataView","getFloat32","dataAsFloat","dataAsBool","dataAsString","s","dataAsMap","path2","substr","lastIndexOf","namePropMapping","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","prop","map","normalMap","lightMap","alphaMap","ambient","color","veclerp","v1","v2","v","lm1","quatlerp","q1","q2","sampleTrack","lne","Infinity","timeDist","dT","T","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","t2","comp","getLength","apply","pos","rotation","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","aiScene","versionMajor","versionMinor","versionRevision","compileFlags","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","mAnimations","mLights","mCameras","object","animation","aiMatrix4","elements","m","i2","littleEndian","readFloat","dataview","val","readOffset","Read_double","getFloat64","Read_uint8_t","getUint8","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","c","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVertexWeight","size","ReadArray_aiVectorKey","ReadArray_aiQuatKey","ReadBounds","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryNode","parent","depth","chunkID","mDepth","node2","ReadBinaryBone","shortened","ReadBinaryMesh","mNumUVComponents","subArray32","uv","f","Error","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","nd","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mTextures","aiOrigin_BEG","extendStream","off","ori","buff","bytes","start","end","newbuff","slice","subArrayUint16","Uint16Array","subArrayUint8","subArrayUint32","compressed","InternReadFile","pFiledata","pScene","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","ArrayBuffer"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, Vector3, Quaternion, Matrix4, Bone, Skeleton, BufferGeometry, MeshLambertMaterial, BufferAttribute, Mesh, SkinnedMesh, Color, Object3D, MeshPhongMaterial } from \"three\";\nclass AssimpLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(buffer, path) {\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var Virtulous = {};\n    Virtulous.KeyFrame = class {\n      constructor(time, matrix) {\n        this.time = time;\n        this.matrix = matrix.clone();\n        this.position = new Vector3();\n        this.quaternion = new Quaternion();\n        this.scale = new Vector3(1, 1, 1);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n        this.clone = function() {\n          var n = new Virtulous.KeyFrame(this.time, this.matrix);\n          return n;\n        };\n        this.lerp = function(nextKey, time2) {\n          time2 -= this.time;\n          var dist = nextKey.time - this.time;\n          var l = time2 / dist;\n          var l2 = 1 - l;\n          var keypos = this.position;\n          var keyrot = this.quaternion;\n          var key2pos = nextKey.position;\n          var key2rot = nextKey.quaternion;\n          Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n          Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n          Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n          Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n          Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n          return Virtulous.KeyFrame.tempAniMatrix.compose(\n            Virtulous.KeyFrame.tempAniPos,\n            Virtulous.KeyFrame.tempAniQuat,\n            Virtulous.KeyFrame.tempAniScale\n          );\n        };\n      }\n    };\n    Virtulous.KeyFrame.tempAniPos = new Vector3();\n    Virtulous.KeyFrame.tempAniQuat = new Quaternion();\n    Virtulous.KeyFrame.tempAniScale = new Vector3(1, 1, 1);\n    Virtulous.KeyFrame.tempAniMatrix = new Matrix4();\n    Virtulous.KeyFrameTrack = function() {\n      this.keys = [];\n      this.target = null;\n      this.time = 0;\n      this.length = 0;\n      this._accelTable = {};\n      this.fps = 20;\n      this.addKey = function(key) {\n        this.keys.push(key);\n      };\n      this.init = function() {\n        this.sortKeys();\n        if (this.keys.length > 0)\n          this.length = this.keys[this.keys.length - 1].time;\n        else\n          this.length = 0;\n        if (!this.fps)\n          return;\n        for (let j = 0; j < this.length * this.fps; j++) {\n          for (let i = 0; i < this.keys.length; i++) {\n            if (this.keys[i].time == j) {\n              this._accelTable[j] = i;\n              break;\n            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n              this._accelTable[j] = i;\n              break;\n            }\n          }\n        }\n      };\n      this.parseFromThree = function(data) {\n        var fps = data.fps;\n        this.target = data.node;\n        var track = data.hierarchy[0].keys;\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n        }\n        this.init();\n      };\n      this.parseFromCollada = function(data) {\n        var track = data.keys;\n        var fps = this.fps;\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n        }\n        this.init();\n      };\n      this.sortKeys = function() {\n        this.keys.sort(this.keySortFunc);\n      };\n      this.keySortFunc = function(a, b) {\n        return a.time - b.time;\n      };\n      this.clone = function() {\n        var t = new Virtulous.KeyFrameTrack();\n        t.target = this.target;\n        t.time = this.time;\n        t.length = this.length;\n        for (let i = 0; i < this.keys.length; i++) {\n          t.addKey(this.keys[i].clone());\n        }\n        t.init();\n        return t;\n      };\n      this.reTarget = function(root, compareitor) {\n        if (!compareitor)\n          compareitor = Virtulous.TrackTargetNodeNameCompare;\n        this.target = compareitor(root, this.target);\n      };\n      this.keySearchAccel = function(time) {\n        time *= this.fps;\n        time = Math.floor(time);\n        return this._accelTable[time] || 0;\n      };\n      this.setTime = function(time) {\n        time = Math.abs(time);\n        if (this.length)\n          time = time % this.length + 0.05;\n        var key0 = null;\n        var key1 = null;\n        for (let i = this.keySearchAccel(time); i < this.keys.length; i++) {\n          if (this.keys[i].time == time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i];\n            break;\n          } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i + 1];\n            break;\n          } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n            key0 = this.keys[i];\n            key1 = this.keys[0].clone();\n            key1.time += this.length + 0.05;\n            break;\n          }\n        }\n        if (key0 && key1 && key0 !== key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.lerp(key1, time));\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n        if (key0 && key1 && key0 == key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.matrix);\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n      };\n    };\n    Virtulous.TrackTargetNodeNameCompare = function(root, target) {\n      function find(node, name) {\n        if (node.name == name)\n          return node;\n        for (let i = 0; i < node.children.length; i++) {\n          var r = find(node.children[i], name);\n          if (r)\n            return r;\n        }\n        return null;\n      }\n      return find(root, target.name);\n    };\n    Virtulous.Animation = function() {\n      this.tracks = [];\n      this.length = 0;\n      this.addTrack = function(track) {\n        this.tracks.push(track);\n        this.length = Math.max(track.length, this.length);\n      };\n      this.setTime = function(time) {\n        this.time = time;\n        for (let i = 0; i < this.tracks.length; i++)\n          this.tracks[i].setTime(time);\n      };\n      this.clone = function(target, compareitor) {\n        if (!compareitor)\n          compareitor = Virtulous.TrackTargetNodeNameCompare;\n        var n = new Virtulous.Animation();\n        n.target = target;\n        for (let i = 0; i < this.tracks.length; i++) {\n          var track = this.tracks[i].clone();\n          track.reTarget(target, compareitor);\n          n.addTrack(track);\n        }\n        return n;\n      };\n    };\n    var ASSBIN_CHUNK_AICAMERA = 4660;\n    var ASSBIN_CHUNK_AILIGHT = 4661;\n    var ASSBIN_CHUNK_AITEXTURE = 4662;\n    var ASSBIN_CHUNK_AIMESH = 4663;\n    var ASSBIN_CHUNK_AINODEANIM = 4664;\n    var ASSBIN_CHUNK_AISCENE = 4665;\n    var ASSBIN_CHUNK_AIBONE = 4666;\n    var ASSBIN_CHUNK_AIANIMATION = 4667;\n    var ASSBIN_CHUNK_AINODE = 4668;\n    var ASSBIN_CHUNK_AIMATERIAL = 4669;\n    var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n    var ASSBIN_MESH_HAS_POSITIONS = 1;\n    var ASSBIN_MESH_HAS_NORMALS = 2;\n    var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n    var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n    var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n    var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n    var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n    //! A directional light source has a well-defined direction\n    //! but is infinitely far away. That's quite a good\n    //! approximation for sun light.\n    var aiLightSource_DIRECTIONAL = 1;\n    //! A point light source has a well-defined position\n    //! in space but no direction - it emits light in all\n    //! directions. A normal bulb is a point light.\n    //! A spot light source emits light in a specific\n    //! angle. It has a position and a direction it is pointing to.\n    //! A good example for a spot light is a light spot in\n    //! sport arenas.\n    var aiLightSource_SPOT = 3;\n    //! The generic light level of the world, including the bounces\n    //! of all other lightsources.\n    //! Typically, there's at most one ambient light in a scene.\n    //! This light type doesn't have a valid position, direction, or\n    //! other properties, just a color.\n    var aiTextureType_DIFFUSE = 1;\n    var aiTextureType_NORMALS = 6;\n    var aiTextureType_OPACITY = 8;\n    var aiTextureType_LIGHTMAP = 10;\n    var BONESPERVERT = 4;\n    function ASSBIN_MESH_HAS_TEXCOORD(n) {\n      return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n    }\n    function ASSBIN_MESH_HAS_COLOR(n) {\n      return ASSBIN_MESH_HAS_COLOR_BASE << n;\n    }\n    function markBones(scene) {\n      for (let i in scene.mMeshes) {\n        var mesh = scene.mMeshes[i];\n        for (let k in mesh.mBones) {\n          var boneNode = scene.findNode(mesh.mBones[k].mName);\n          if (boneNode)\n            boneNode.isBone = true;\n        }\n      }\n    }\n    function cloneTreeToBones(root, scene) {\n      var rootBone = new Bone();\n      rootBone.matrix.copy(root.matrix);\n      rootBone.matrixWorld.copy(root.matrixWorld);\n      rootBone.position.copy(root.position);\n      rootBone.quaternion.copy(root.quaternion);\n      rootBone.scale.copy(root.scale);\n      scene.nodeCount++;\n      rootBone.name = \"bone_\" + root.name + scene.nodeCount.toString();\n      if (!scene.nodeToBoneMap[root.name])\n        scene.nodeToBoneMap[root.name] = [];\n      scene.nodeToBoneMap[root.name].push(rootBone);\n      for (let i in root.children) {\n        var child = cloneTreeToBones(root.children[i], scene);\n        rootBone.add(child);\n      }\n      return rootBone;\n    }\n    function sortWeights(indexes, weights) {\n      var pairs = [];\n      for (let i = 0; i < indexes.length; i++) {\n        pairs.push({\n          i: indexes[i],\n          w: weights[i]\n        });\n      }\n      pairs.sort(function(a, b) {\n        return b.w - a.w;\n      });\n      while (pairs.length < 4) {\n        pairs.push({\n          i: 0,\n          w: 0\n        });\n      }\n      if (pairs.length > 4)\n        pairs.length = 4;\n      var sum = 0;\n      for (let i = 0; i < 4; i++) {\n        sum += pairs[i].w * pairs[i].w;\n      }\n      sum = Math.sqrt(sum);\n      for (let i = 0; i < 4; i++) {\n        pairs[i].w = pairs[i].w / sum;\n        indexes[i] = pairs[i].i;\n        weights[i] = pairs[i].w;\n      }\n    }\n    function findMatchingBone(root, name) {\n      if (root.name.indexOf(\"bone_\" + name) == 0)\n        return root;\n      for (let i in root.children) {\n        var ret = findMatchingBone(root.children[i], name);\n        if (ret)\n          return ret;\n      }\n      return void 0;\n    }\n    class aiMesh {\n      constructor() {\n        this.mPrimitiveTypes = 0;\n        this.mNumVertices = 0;\n        this.mNumFaces = 0;\n        this.mNumBones = 0;\n        this.mMaterialIndex = 0;\n        this.mVertices = [];\n        this.mNormals = [];\n        this.mTangents = [];\n        this.mBitangents = [];\n        this.mColors = [[]];\n        this.mTextureCoords = [[]];\n        this.mFaces = [];\n        this.mBones = [];\n        this.hookupSkeletons = function(scene) {\n          if (this.mBones.length == 0)\n            return;\n          var allBones = [];\n          var offsetMatrix = [];\n          var skeletonRoot = scene.findNode(this.mBones[0].mName);\n          while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n            skeletonRoot = skeletonRoot.mParent;\n          }\n          var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n          var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n          this.threeNode.add(threeSkeletonRootBone);\n          for (let i = 0; i < this.mBones.length; i++) {\n            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n            if (bone) {\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            } else {\n              var skeletonRoot = scene.findNode(this.mBones[i].mName);\n              if (!skeletonRoot)\n                return;\n              var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n              var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n              this.threeNode.add(threeSkeletonRootBone);\n              var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            }\n          }\n          var skeleton = new Skeleton(allBones, offsetMatrix);\n          this.threeNode.bind(skeleton, new Matrix4());\n          this.threeNode.material.skinning = true;\n        };\n        this.toTHREE = function(scene) {\n          if (this.threeNode)\n            return this.threeNode;\n          var geometry = new BufferGeometry();\n          var mat;\n          if (scene.mMaterials[this.mMaterialIndex])\n            mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);\n          else\n            mat = new MeshLambertMaterial();\n          geometry.setIndex(new BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n          geometry.setAttribute(\"position\", new BufferAttribute(this.mVertexBuffer, 3));\n          if (this.mNormalBuffer && this.mNormalBuffer.length > 0) {\n            geometry.setAttribute(\"normal\", new BufferAttribute(this.mNormalBuffer, 3));\n          }\n          if (this.mColorBuffer && this.mColorBuffer.length > 0) {\n            geometry.setAttribute(\"color\", new BufferAttribute(this.mColorBuffer, 4));\n          }\n          if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0) {\n            geometry.setAttribute(\"uv\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n          }\n          if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0) {\n            geometry.setAttribute(\"uv1\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n          }\n          if (this.mTangentBuffer && this.mTangentBuffer.length > 0) {\n            geometry.setAttribute(\"tangents\", new BufferAttribute(this.mTangentBuffer, 3));\n          }\n          if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0) {\n            geometry.setAttribute(\"bitangents\", new BufferAttribute(this.mBitangentBuffer, 3));\n          }\n          if (this.mBones.length > 0) {\n            var weights = [];\n            var bones = [];\n            for (let i = 0; i < this.mBones.length; i++) {\n              for (let j = 0; j < this.mBones[i].mWeights.length; j++) {\n                var weight = this.mBones[i].mWeights[j];\n                if (weight) {\n                  if (!weights[weight.mVertexId])\n                    weights[weight.mVertexId] = [];\n                  if (!bones[weight.mVertexId])\n                    bones[weight.mVertexId] = [];\n                  weights[weight.mVertexId].push(weight.mWeight);\n                  bones[weight.mVertexId].push(parseInt(i));\n                }\n              }\n            }\n            for (let i in bones) {\n              sortWeights(bones[i], weights[i]);\n            }\n            var _weights = [];\n            var _bones = [];\n            for (let i = 0; i < weights.length; i++) {\n              for (let j = 0; j < 4; j++) {\n                if (weights[i] && bones[i]) {\n                  _weights.push(weights[i][j]);\n                  _bones.push(bones[i][j]);\n                } else {\n                  _weights.push(0);\n                  _bones.push(0);\n                }\n              }\n            }\n            geometry.setAttribute(\"skinWeight\", new BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n            geometry.setAttribute(\"skinIndex\", new BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n          }\n          var mesh;\n          if (this.mBones.length == 0)\n            mesh = new Mesh(geometry, mat);\n          if (this.mBones.length > 0) {\n            mesh = new SkinnedMesh(geometry, mat);\n            mesh.normalizeSkinWeights();\n          }\n          this.threeNode = mesh;\n          return mesh;\n        };\n      }\n    }\n    class aiFace {\n      constructor() {\n        this.mNumIndices = 0;\n        this.mIndices = [];\n      }\n    }\n    class aiVector3D {\n      constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.toTHREE = function() {\n          return new Vector3(this.x, this.y, this.z);\n        };\n      }\n    }\n    class aiColor3D {\n      constructor() {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.toTHREE = function() {\n          return new Color(this.r, this.g, this.b);\n        };\n      }\n    }\n    class aiQuaternion {\n      constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n        this.toTHREE = function() {\n          return new Quaternion(this.x, this.y, this.z, this.w);\n        };\n      }\n    }\n    class aiVertexWeight {\n      constructor() {\n        this.mVertexId = 0;\n        this.mWeight = 0;\n      }\n    }\n    class aiString {\n      constructor() {\n        this.data = [];\n        this.toString = function() {\n          var str = \"\";\n          this.data.forEach(function(i) {\n            str += String.fromCharCode(i);\n          });\n          return str.replace(/[^\\x20-\\x7E]+/g, \"\");\n        };\n      }\n    }\n    class aiVectorKey {\n      constructor() {\n        this.mTime = 0;\n        this.mValue = null;\n      }\n    }\n    class aiQuatKey {\n      constructor() {\n        this.mTime = 0;\n        this.mValue = null;\n      }\n    }\n    class aiNode {\n      constructor() {\n        this.mName = \"\";\n        this.mTransformation = [];\n        this.mNumChildren = 0;\n        this.mNumMeshes = 0;\n        this.mMeshes = [];\n        this.mChildren = [];\n        this.toTHREE = function(scene) {\n          if (this.threeNode)\n            return this.threeNode;\n          var o = new Object3D();\n          o.name = this.mName;\n          o.matrix = this.mTransformation.toTHREE();\n          for (let i = 0; i < this.mChildren.length; i++) {\n            o.add(this.mChildren[i].toTHREE(scene));\n          }\n          for (let i = 0; i < this.mMeshes.length; i++) {\n            o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n          }\n          this.threeNode = o;\n          o.matrix.decompose(o.position, o.quaternion, o.scale);\n          return o;\n        };\n      }\n    }\n    class aiBone {\n      constructor() {\n        this.mName = \"\";\n        this.mNumWeights = 0;\n        this.mOffsetMatrix = 0;\n      }\n    }\n    class aiMaterialProperty {\n      constructor() {\n        this.mKey = \"\";\n        this.mSemantic = 0;\n        this.mIndex = 0;\n        this.mData = [];\n        this.mDataLength = 0;\n        this.mType = 0;\n        this.dataAsColor = function() {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          var g = reader.getFloat32(4, true);\n          var b = reader.getFloat32(8, true);\n          return new Color(r, g, b);\n        };\n        this.dataAsFloat = function() {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return r;\n        };\n        this.dataAsBool = function() {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return !!r;\n        };\n        this.dataAsString = function() {\n          var s = new aiString();\n          s.data = this.mData;\n          return s.toString();\n        };\n        this.dataAsMap = function() {\n          var s = new aiString();\n          s.data = this.mData;\n          var path2 = s.toString();\n          path2 = path2.replace(/\\\\/g, \"/\");\n          if (path2.indexOf(\"/\") != -1) {\n            path2 = path2.substr(path2.lastIndexOf(\"/\") + 1);\n          }\n          return textureLoader.load(path2);\n        };\n      }\n    }\n    var namePropMapping = {\n      \"?mat.name\": \"name\",\n      \"$mat.shadingm\": \"shading\",\n      \"$mat.twosided\": \"twoSided\",\n      \"$mat.wireframe\": \"wireframe\",\n      \"$clr.ambient\": \"ambient\",\n      \"$clr.diffuse\": \"color\",\n      \"$clr.specular\": \"specular\",\n      \"$clr.emissive\": \"emissive\",\n      \"$clr.transparent\": \"transparent\",\n      \"$clr.reflective\": \"reflect\",\n      \"$mat.shininess\": \"shininess\",\n      \"$mat.reflectivity\": \"reflectivity\",\n      \"$mat.refracti\": \"refraction\",\n      \"$tex.file\": \"map\"\n    };\n    var nameTypeMapping = {\n      \"?mat.name\": \"string\",\n      \"$mat.shadingm\": \"bool\",\n      \"$mat.twosided\": \"bool\",\n      \"$mat.wireframe\": \"bool\",\n      \"$clr.ambient\": \"color\",\n      \"$clr.diffuse\": \"color\",\n      \"$clr.specular\": \"color\",\n      \"$clr.emissive\": \"color\",\n      \"$clr.transparent\": \"color\",\n      \"$clr.reflective\": \"color\",\n      \"$mat.shininess\": \"float\",\n      \"$mat.reflectivity\": \"float\",\n      \"$mat.refracti\": \"float\",\n      \"$tex.file\": \"map\"\n    };\n    class aiMaterial {\n      constructor() {\n        this.mNumAllocated = 0;\n        this.mNumProperties = 0;\n        this.mProperties = [];\n        this.toTHREE = function() {\n          var mat = new MeshPhongMaterial();\n          for (let i = 0; i < this.mProperties.length; i++) {\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"float\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"color\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"bool\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"string\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"map\") {\n              var prop = this.mProperties[i];\n              if (prop.mSemantic == aiTextureType_DIFFUSE)\n                mat.map = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_NORMALS)\n                mat.normalMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_LIGHTMAP)\n                mat.lightMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_OPACITY)\n                mat.alphaMap = this.mProperties[i].dataAsMap();\n            }\n          }\n          mat.ambient.r = 0.53;\n          mat.ambient.g = 0.53;\n          mat.ambient.b = 0.53;\n          mat.color.r = 1;\n          mat.color.g = 1;\n          mat.color.b = 1;\n          return mat;\n        };\n      }\n    }\n    function veclerp(v1, v2, l) {\n      var v = new Vector3();\n      var lm1 = 1 - l;\n      v.x = v1.x * l + v2.x * lm1;\n      v.y = v1.y * l + v2.y * lm1;\n      v.z = v1.z * l + v2.z * lm1;\n      return v;\n    }\n    function quatlerp(q1, q2, l) {\n      return q1.clone().slerp(q2, 1 - l);\n    }\n    function sampleTrack(keys, time, lne, lerp) {\n      if (keys.length == 1)\n        return keys[0].mValue.toTHREE();\n      var dist = Infinity;\n      var key = null;\n      var nextKey = null;\n      for (let i = 0; i < keys.length; i++) {\n        var timeDist = Math.abs(keys[i].mTime - time);\n        if (timeDist < dist && keys[i].mTime <= time) {\n          dist = timeDist;\n          key = keys[i];\n          nextKey = keys[i + 1];\n        }\n      }\n      if (!key) {\n        return null;\n      } else if (nextKey) {\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      } else {\n        nextKey = keys[0].clone();\n        nextKey.mTime += lne;\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      }\n    }\n    class aiNodeAnim {\n      constructor() {\n        this.mNodeName = \"\";\n        this.mNumPositionKeys = 0;\n        this.mNumRotationKeys = 0;\n        this.mNumScalingKeys = 0;\n        this.mPositionKeys = [];\n        this.mRotationKeys = [];\n        this.mScalingKeys = [];\n        this.mPreState = \"\";\n        this.mPostState = \"\";\n        this.init = function(tps) {\n          if (!tps)\n            tps = 1;\n          function t(t2) {\n            t2.mTime /= tps;\n          }\n          this.mPositionKeys.forEach(t);\n          this.mRotationKeys.forEach(t);\n          this.mScalingKeys.forEach(t);\n        };\n        this.sortKeys = function() {\n          function comp(a, b) {\n            return a.mTime - b.mTime;\n          }\n          this.mPositionKeys.sort(comp);\n          this.mRotationKeys.sort(comp);\n          this.mScalingKeys.sort(comp);\n        };\n        this.getLength = function() {\n          return Math.max(\n            Math.max.apply(\n              null,\n              this.mPositionKeys.map(function(a) {\n                return a.mTime;\n              })\n            ),\n            Math.max.apply(\n              null,\n              this.mRotationKeys.map(function(a) {\n                return a.mTime;\n              })\n            ),\n            Math.max.apply(\n              null,\n              this.mScalingKeys.map(function(a) {\n                return a.mTime;\n              })\n            )\n          );\n        };\n        this.toTHREE = function(o) {\n          this.sortKeys();\n          var length = this.getLength();\n          var track = new Virtulous.KeyFrameTrack();\n          for (let i = 0; i < length; i += 0.05) {\n            var matrix = new Matrix4();\n            var time = i;\n            var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n            var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n            var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n            matrix.compose(pos, rotation, scale);\n            var key = new Virtulous.KeyFrame(time, matrix);\n            track.addKey(key);\n          }\n          track.target = o.findNode(this.mNodeName).toTHREE();\n          var tracks = [track];\n          if (o.nodeToBoneMap[this.mNodeName]) {\n            for (let i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n              var t2 = track.clone();\n              t2.target = o.nodeToBoneMap[this.mNodeName][i];\n              tracks.push(t2);\n            }\n          }\n          return tracks;\n        };\n      }\n    }\n    class aiAnimation {\n      constructor() {\n        this.mName = \"\";\n        this.mDuration = 0;\n        this.mTicksPerSecond = 0;\n        this.mNumChannels = 0;\n        this.mChannels = [];\n        this.toTHREE = function(root) {\n          var animationHandle = new Virtulous.Animation();\n          for (let i in this.mChannels) {\n            this.mChannels[i].init(this.mTicksPerSecond);\n            var tracks = this.mChannels[i].toTHREE(root);\n            for (let j in tracks) {\n              tracks[j].init();\n              animationHandle.addTrack(tracks[j]);\n            }\n          }\n          animationHandle.length = Math.max.apply(\n            null,\n            animationHandle.tracks.map(function(e) {\n              return e.length;\n            })\n          );\n          return animationHandle;\n        };\n      }\n    }\n    class aiTexture {\n      constructor() {\n        this.mWidth = 0;\n        this.mHeight = 0;\n        this.texAchFormatHint = [];\n        this.pcData = [];\n      }\n    }\n    class aiLight {\n      constructor() {\n        this.mName = \"\";\n        this.mType = 0;\n        this.mAttenuationConstant = 0;\n        this.mAttenuationLinear = 0;\n        this.mAttenuationQuadratic = 0;\n        this.mAngleInnerCone = 0;\n        this.mAngleOuterCone = 0;\n        this.mColorDiffuse = null;\n        this.mColorSpecular = null;\n        this.mColorAmbient = null;\n      }\n    }\n    class aiCamera {\n      constructor() {\n        this.mName = \"\";\n        this.mPosition = null;\n        this.mLookAt = null;\n        this.mUp = null;\n        this.mHorizontalFOV = 0;\n        this.mClipPlaneNear = 0;\n        this.mClipPlaneFar = 0;\n        this.mAspect = 0;\n      }\n    }\n    class aiScene {\n      constructor() {\n        this.versionMajor = 0;\n        this.versionMinor = 0;\n        this.versionRevision = 0;\n        this.compileFlags = 0;\n        this.mFlags = 0;\n        this.mNumMeshes = 0;\n        this.mNumMaterials = 0;\n        this.mNumAnimations = 0;\n        this.mNumTextures = 0;\n        this.mNumLights = 0;\n        this.mNumCameras = 0;\n        this.mRootNode = null;\n        this.mMeshes = [];\n        this.mMaterials = [];\n        this.mAnimations = [];\n        this.mLights = [];\n        this.mCameras = [];\n        this.nodeToBoneMap = {};\n        this.findNode = function(name, root) {\n          if (!root) {\n            root = this.mRootNode;\n          }\n          if (root.mName == name) {\n            return root;\n          }\n          for (let i = 0; i < root.mChildren.length; i++) {\n            var ret = this.findNode(name, root.mChildren[i]);\n            if (ret)\n              return ret;\n          }\n          return null;\n        };\n        this.toTHREE = function() {\n          this.nodeCount = 0;\n          markBones(this);\n          var o = this.mRootNode.toTHREE(this);\n          for (let i in this.mMeshes)\n            this.mMeshes[i].hookupSkeletons(this);\n          if (this.mAnimations.length > 0) {\n            var a = this.mAnimations[0].toTHREE(this);\n          }\n          return { object: o, animation: a };\n        };\n      }\n    }\n    class aiMatrix4 {\n      constructor() {\n        this.elements = [[], [], [], []];\n        this.toTHREE = function() {\n          var m = new Matrix4();\n          for (let i = 0; i < 4; ++i) {\n            for (let i2 = 0; i2 < 4; ++i2) {\n              m.elements[i * 4 + i2] = this.elements[i2][i];\n            }\n          }\n          return m;\n        };\n      }\n    }\n    var littleEndian = true;\n    function readFloat(dataview) {\n      var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_double(dataview) {\n      var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n      dataview.readOffset += 8;\n      return val;\n    }\n    function Read_uint8_t(dataview) {\n      var val = dataview.getUint8(dataview.readOffset);\n      dataview.readOffset += 1;\n      return val;\n    }\n    function Read_uint16_t(dataview) {\n      var val = dataview.getUint16(dataview.readOffset, littleEndian);\n      dataview.readOffset += 2;\n      return val;\n    }\n    function Read_unsigned_int(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_uint32_t(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_aiVector3D(stream) {\n      var v = new aiVector3D();\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n    function Read_aiColor3D(stream) {\n      var c = new aiColor3D();\n      c.r = readFloat(stream);\n      c.g = readFloat(stream);\n      c.b = readFloat(stream);\n      return c;\n    }\n    function Read_aiQuaternion(stream) {\n      var v = new aiQuaternion();\n      v.w = readFloat(stream);\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n    function Read_aiString(stream) {\n      var s = new aiString();\n      var stringlengthbytes = Read_unsigned_int(stream);\n      stream.ReadBytes(s.data, 1, stringlengthbytes);\n      return s.toString();\n    }\n    function Read_aiVertexWeight(stream) {\n      var w = new aiVertexWeight();\n      w.mVertexId = Read_unsigned_int(stream);\n      w.mWeight = readFloat(stream);\n      return w;\n    }\n    function Read_aiMatrix4x4(stream) {\n      var m = new aiMatrix4();\n      for (let i = 0; i < 4; ++i) {\n        for (let i2 = 0; i2 < 4; ++i2) {\n          m.elements[i][i2] = readFloat(stream);\n        }\n      }\n      return m;\n    }\n    function Read_aiVectorKey(stream) {\n      var v = new aiVectorKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiVector3D(stream);\n      return v;\n    }\n    function Read_aiQuatKey(stream) {\n      var v = new aiQuatKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiQuaternion(stream);\n      return v;\n    }\n    function ReadArray_aiVertexWeight(stream, data, size) {\n      for (let i = 0; i < size; i++)\n        data[i] = Read_aiVertexWeight(stream);\n    }\n    function ReadArray_aiVectorKey(stream, data, size) {\n      for (let i = 0; i < size; i++)\n        data[i] = Read_aiVectorKey(stream);\n    }\n    function ReadArray_aiQuatKey(stream, data, size) {\n      for (let i = 0; i < size; i++)\n        data[i] = Read_aiQuatKey(stream);\n    }\n    function ReadBounds(stream, T, n) {\n      return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n    }\n    function ai_assert(bool) {\n      if (!bool)\n        throw \"asset failed\";\n    }\n    function ReadBinaryNode(stream, parent, depth) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n      Read_uint32_t(stream);\n      var node = new aiNode();\n      node.mParent = parent;\n      node.mDepth = depth;\n      node.mName = Read_aiString(stream);\n      node.mTransformation = Read_aiMatrix4x4(stream);\n      node.mNumChildren = Read_unsigned_int(stream);\n      node.mNumMeshes = Read_unsigned_int(stream);\n      if (node.mNumMeshes) {\n        node.mMeshes = [];\n        for (let i = 0; i < node.mNumMeshes; ++i) {\n          node.mMeshes[i] = Read_unsigned_int(stream);\n        }\n      }\n      if (node.mNumChildren) {\n        node.mChildren = [];\n        for (let i = 0; i < node.mNumChildren; ++i) {\n          var node2 = ReadBinaryNode(stream, node, depth++);\n          node.mChildren[i] = node2;\n        }\n      }\n      return node;\n    }\n    function ReadBinaryBone(stream, b) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n      Read_uint32_t(stream);\n      b.mName = Read_aiString(stream);\n      b.mNumWeights = Read_unsigned_int(stream);\n      b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n      if (shortened) {\n        ReadBounds(stream, b.mWeights, b.mNumWeights);\n      } else {\n        b.mWeights = [];\n        ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n      }\n      return b;\n    }\n    function ReadBinaryMesh(stream, mesh) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n      Read_uint32_t(stream);\n      mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n      mesh.mNumVertices = Read_unsigned_int(stream);\n      mesh.mNumFaces = Read_unsigned_int(stream);\n      mesh.mNumBones = Read_unsigned_int(stream);\n      mesh.mMaterialIndex = Read_unsigned_int(stream);\n      mesh.mNumUVComponents = [];\n      var c = Read_unsigned_int(stream);\n      if (c & ASSBIN_MESH_HAS_POSITIONS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n        } else {\n          mesh.mVertices = [];\n          mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      if (c & ASSBIN_MESH_HAS_NORMALS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n        } else {\n          mesh.mNormals = [];\n          mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n          ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n        } else {\n          mesh.mTangents = [];\n          mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          mesh.mBitangents = [];\n          mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      for (let n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_COLOR(n)))\n          break;\n        if (shortened) {\n          ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n        } else {\n          mesh.mColors[n] = [];\n          mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n          stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n        }\n      }\n      mesh.mTexCoordsBuffers = [];\n      for (let n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))\n          break;\n        mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n        if (shortened) {\n          ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n        } else {\n          mesh.mTextureCoords[n] = [];\n          mesh.mTexCoordsBuffers[n] = [];\n          for (let uv = 0; uv < mesh.mNumVertices; uv++) {\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            readFloat(stream);\n          }\n        }\n      }\n      if (shortened) {\n        Read_unsigned_int(stream);\n      } else {\n        mesh.mFaces = [];\n        mesh.mIndexArray = [];\n        for (let i = 0; i < mesh.mNumFaces; ++i) {\n          var f = mesh.mFaces[i] = new aiFace();\n          f.mNumIndices = Read_uint16_t(stream);\n          f.mIndices = [];\n          for (let a = 0; a < f.mNumIndices; ++a) {\n            if (mesh.mNumVertices < 1 << 16) {\n              f.mIndices[a] = Read_uint16_t(stream);\n            } else {\n              f.mIndices[a] = Read_unsigned_int(stream);\n            }\n          }\n          if (f.mNumIndices === 3) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n          } else if (f.mNumIndices === 4) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[3]);\n            mesh.mIndexArray.push(f.mIndices[0]);\n          } else {\n            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n          }\n        }\n      }\n      if (mesh.mNumBones) {\n        mesh.mBones = [];\n        for (let a = 0; a < mesh.mNumBones; ++a) {\n          mesh.mBones[a] = new aiBone();\n          ReadBinaryBone(stream, mesh.mBones[a]);\n        }\n      }\n    }\n    function ReadBinaryMaterialProperty(stream, prop) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n      Read_uint32_t(stream);\n      prop.mKey = Read_aiString(stream);\n      prop.mSemantic = Read_unsigned_int(stream);\n      prop.mIndex = Read_unsigned_int(stream);\n      prop.mDataLength = Read_unsigned_int(stream);\n      prop.mType = Read_unsigned_int(stream);\n      prop.mData = [];\n      stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n    }\n    function ReadBinaryMaterial(stream, mat) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n      Read_uint32_t(stream);\n      mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n      if (mat.mNumProperties) {\n        if (mat.mProperties) {\n          delete mat.mProperties;\n        }\n        mat.mProperties = [];\n        for (let i = 0; i < mat.mNumProperties; ++i) {\n          mat.mProperties[i] = new aiMaterialProperty();\n          ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n        }\n      }\n    }\n    function ReadBinaryNodeAnim(stream, nd) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n      Read_uint32_t(stream);\n      nd.mNodeName = Read_aiString(stream);\n      nd.mNumPositionKeys = Read_unsigned_int(stream);\n      nd.mNumRotationKeys = Read_unsigned_int(stream);\n      nd.mNumScalingKeys = Read_unsigned_int(stream);\n      nd.mPreState = Read_unsigned_int(stream);\n      nd.mPostState = Read_unsigned_int(stream);\n      if (nd.mNumPositionKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        } else {\n          nd.mPositionKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        }\n      }\n      if (nd.mNumRotationKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        } else {\n          nd.mRotationKeys = [];\n          ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        }\n      }\n      if (nd.mNumScalingKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        } else {\n          nd.mScalingKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        }\n      }\n    }\n    function ReadBinaryAnim(stream, anim) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n      Read_uint32_t(stream);\n      anim.mName = Read_aiString(stream);\n      anim.mDuration = Read_double(stream);\n      anim.mTicksPerSecond = Read_double(stream);\n      anim.mNumChannels = Read_unsigned_int(stream);\n      if (anim.mNumChannels) {\n        anim.mChannels = [];\n        for (let a = 0; a < anim.mNumChannels; ++a) {\n          anim.mChannels[a] = new aiNodeAnim();\n          ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n        }\n      }\n    }\n    function ReadBinaryTexture(stream, tex) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n      Read_uint32_t(stream);\n      tex.mWidth = Read_unsigned_int(stream);\n      tex.mHeight = Read_unsigned_int(stream);\n      stream.ReadBytes(tex.achFormatHint, 1, 4);\n      if (!shortened) {\n        if (!tex.mHeight) {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n        } else {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n        }\n      }\n    }\n    function ReadBinaryLight(stream, l) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n      Read_uint32_t(stream);\n      l.mName = Read_aiString(stream);\n      l.mType = Read_unsigned_int(stream);\n      if (l.mType != aiLightSource_DIRECTIONAL) {\n        l.mAttenuationConstant = readFloat(stream);\n        l.mAttenuationLinear = readFloat(stream);\n        l.mAttenuationQuadratic = readFloat(stream);\n      }\n      l.mColorDiffuse = Read_aiColor3D(stream);\n      l.mColorSpecular = Read_aiColor3D(stream);\n      l.mColorAmbient = Read_aiColor3D(stream);\n      if (l.mType == aiLightSource_SPOT) {\n        l.mAngleInnerCone = readFloat(stream);\n        l.mAngleOuterCone = readFloat(stream);\n      }\n    }\n    function ReadBinaryCamera(stream, cam) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n      Read_uint32_t(stream);\n      cam.mName = Read_aiString(stream);\n      cam.mPosition = Read_aiVector3D(stream);\n      cam.mLookAt = Read_aiVector3D(stream);\n      cam.mUp = Read_aiVector3D(stream);\n      cam.mHorizontalFOV = readFloat(stream);\n      cam.mClipPlaneNear = readFloat(stream);\n      cam.mClipPlaneFar = readFloat(stream);\n      cam.mAspect = readFloat(stream);\n    }\n    function ReadBinaryScene(stream, scene) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n      Read_uint32_t(stream);\n      scene.mFlags = Read_unsigned_int(stream);\n      scene.mNumMeshes = Read_unsigned_int(stream);\n      scene.mNumMaterials = Read_unsigned_int(stream);\n      scene.mNumAnimations = Read_unsigned_int(stream);\n      scene.mNumTextures = Read_unsigned_int(stream);\n      scene.mNumLights = Read_unsigned_int(stream);\n      scene.mNumCameras = Read_unsigned_int(stream);\n      scene.mRootNode = new aiNode();\n      scene.mRootNode = ReadBinaryNode(stream, null, 0);\n      if (scene.mNumMeshes) {\n        scene.mMeshes = [];\n        for (let i = 0; i < scene.mNumMeshes; ++i) {\n          scene.mMeshes[i] = new aiMesh();\n          ReadBinaryMesh(stream, scene.mMeshes[i]);\n        }\n      }\n      if (scene.mNumMaterials) {\n        scene.mMaterials = [];\n        for (let i = 0; i < scene.mNumMaterials; ++i) {\n          scene.mMaterials[i] = new aiMaterial();\n          ReadBinaryMaterial(stream, scene.mMaterials[i]);\n        }\n      }\n      if (scene.mNumAnimations) {\n        scene.mAnimations = [];\n        for (let i = 0; i < scene.mNumAnimations; ++i) {\n          scene.mAnimations[i] = new aiAnimation();\n          ReadBinaryAnim(stream, scene.mAnimations[i]);\n        }\n      }\n      if (scene.mNumTextures) {\n        scene.mTextures = [];\n        for (let i = 0; i < scene.mNumTextures; ++i) {\n          scene.mTextures[i] = new aiTexture();\n          ReadBinaryTexture(stream, scene.mTextures[i]);\n        }\n      }\n      if (scene.mNumLights) {\n        scene.mLights = [];\n        for (let i = 0; i < scene.mNumLights; ++i) {\n          scene.mLights[i] = new aiLight();\n          ReadBinaryLight(stream, scene.mLights[i]);\n        }\n      }\n      if (scene.mNumCameras) {\n        scene.mCameras = [];\n        for (let i = 0; i < scene.mNumCameras; ++i) {\n          scene.mCameras[i] = new aiCamera();\n          ReadBinaryCamera(stream, scene.mCameras[i]);\n        }\n      }\n    }\n    var aiOrigin_CUR = 0;\n    var aiOrigin_BEG = 1;\n    function extendStream(stream) {\n      stream.readOffset = 0;\n      stream.Seek = function(off, ori) {\n        if (ori == aiOrigin_CUR) {\n          stream.readOffset += off;\n        }\n        if (ori == aiOrigin_BEG) {\n          stream.readOffset = off;\n        }\n      };\n      stream.ReadBytes = function(buff, size, n) {\n        var bytes = size * n;\n        for (let i = 0; i < bytes; i++)\n          buff[i] = Read_uint8_t(this);\n      };\n      stream.subArray32 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Float32Array(newbuff);\n      };\n      stream.subArrayUint16 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint16Array(newbuff);\n      };\n      stream.subArrayUint8 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint8Array(newbuff);\n      };\n      stream.subArrayUint32 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint32Array(newbuff);\n      };\n    }\n    var shortened, compressed;\n    function InternReadFile(pFiledata) {\n      var pScene = new aiScene();\n      var stream = new DataView(pFiledata);\n      extendStream(stream);\n      stream.Seek(44, aiOrigin_CUR);\n      pScene.versionMajor = Read_unsigned_int(stream);\n      pScene.versionMinor = Read_unsigned_int(stream);\n      pScene.versionRevision = Read_unsigned_int(stream);\n      pScene.compileFlags = Read_unsigned_int(stream);\n      shortened = Read_uint16_t(stream) > 0;\n      compressed = Read_uint16_t(stream) > 0;\n      if (shortened)\n        throw \"Shortened binaries are not supported!\";\n      stream.Seek(256, aiOrigin_CUR);\n      stream.Seek(128, aiOrigin_CUR);\n      stream.Seek(64, aiOrigin_CUR);\n      if (compressed) {\n        var uncompressedSize = Read_uint32_t(stream);\n        var compressedSize = stream.FileSize() - stream.Tell();\n        var compressedData = [];\n        stream.Read(compressedData, 1, compressedSize);\n        var uncompressedData = [];\n        uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n        var buff = new ArrayBuffer(uncompressedData);\n        ReadBinaryScene(buff, pScene);\n      } else {\n        ReadBinaryScene(stream, pScene);\n      }\n      return pScene.toTHREE();\n    }\n    return InternReadFile(buffer);\n  }\n}\nexport {\n  AssimpLoader\n};\n"]},"metadata":{},"sourceType":"module"}