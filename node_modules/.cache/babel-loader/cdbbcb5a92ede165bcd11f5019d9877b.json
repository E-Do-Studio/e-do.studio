{"ast":null,"code":"import { Vector3, Vector2 } from \"three\";\nvar VolumeRenderShader1 = {\n  uniforms: {\n    u_size: {\n      value: /* @__PURE__ */new Vector3(1, 1, 1)\n    },\n    u_renderstyle: {\n      value: 0\n    },\n    u_renderthreshold: {\n      value: 0.5\n    },\n    u_clim: {\n      value: /* @__PURE__ */new Vector2(1, 1)\n    },\n    u_data: {\n      value: null\n    },\n    u_cmdata: {\n      value: null\n    }\n  },\n  vertexShader: [\"\t\tvarying vec4 v_nearpos;\", \"\t\tvarying vec4 v_farpos;\", \"\t\tvarying vec3 v_position;\", \"\t\tvoid main() {\", // Prepare transforms to map to \"camera view\". See also:\n  // https://threejs.org/docs/#api/renderers/webgl/WebGLProgram\n  \"\t\t\t\tmat4 viewtransformf = modelViewMatrix;\", \"\t\t\t\tmat4 viewtransformi = inverse(modelViewMatrix);\", // Project local vertex coordinate to camera position. Then do a step\n  // backward (in cam coords) to the near clipping plane, and project back. Do\n  // the same for the far clipping plane. This gives us all the information we\n  // need to calculate the ray and truncate it to the viewing cone.\n  \"\t\t\t\tvec4 position4 = vec4(position, 1.0);\", \"\t\t\t\tvec4 pos_in_cam = viewtransformf * position4;\", // Intersection of ray and near clipping plane (z = -1 in clip coords)\n  \"\t\t\t\tpos_in_cam.z = -pos_in_cam.w;\", \"\t\t\t\tv_nearpos = viewtransformi * pos_in_cam;\", // Intersection of ray and far clipping plane (z = +1 in clip coords)\n  \"\t\t\t\tpos_in_cam.z = pos_in_cam.w;\", \"\t\t\t\tv_farpos = viewtransformi * pos_in_cam;\", // Set varyings and output pos\n  \"\t\t\t\tv_position = position;\", \"\t\t\t\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * position4;\", \"\t\t}\"].join(\"\\n\"),\n  fragmentShader: [\"\t\tprecision highp float;\", \"\t\tprecision mediump sampler3D;\", \"\t\tuniform vec3 u_size;\", \"\t\tuniform int u_renderstyle;\", \"\t\tuniform float u_renderthreshold;\", \"\t\tuniform vec2 u_clim;\", \"\t\tuniform sampler3D u_data;\", \"\t\tuniform sampler2D u_cmdata;\", \"\t\tvarying vec3 v_position;\", \"\t\tvarying vec4 v_nearpos;\", \"\t\tvarying vec4 v_farpos;\", // The maximum distance through our rendering volume is sqrt(3).\n  \"\t\tconst int MAX_STEPS = 887;\t// 887 for 512^3, 1774 for 1024^3\", \"\t\tconst int REFINEMENT_STEPS = 4;\", \"\t\tconst float relative_step_size = 1.0;\", \"\t\tconst vec4 ambient_color = vec4(0.2, 0.4, 0.2, 1.0);\", \"\t\tconst vec4 diffuse_color = vec4(0.8, 0.2, 0.2, 1.0);\", \"\t\tconst vec4 specular_color = vec4(1.0, 1.0, 1.0, 1.0);\", \"\t\tconst float shininess = 40.0;\", \"\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\", \"\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\", \"\t\tfloat sample1(vec3 texcoords);\", \"\t\tvec4 apply_colormap(float val);\", \"\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray);\", \"\t\tvoid main() {\", // Normalize clipping plane info\n  \"\t\t\t\tvec3 farpos = v_farpos.xyz / v_farpos.w;\", \"\t\t\t\tvec3 nearpos = v_nearpos.xyz / v_nearpos.w;\", // Calculate unit vector pointing in the view direction through this fragment.\n  \"\t\t\t\tvec3 view_ray = normalize(nearpos.xyz - farpos.xyz);\", // Compute the (negative) distance to the front surface or near clipping plane.\n  // v_position is the back face of the cuboid, so the initial distance calculated in the dot\n  // product below is the distance from near clip plane to the back of the cuboid\n  \"\t\t\t\tfloat distance = dot(nearpos - v_position, view_ray);\", \"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.x) / view_ray.x,\", \"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.x - 0.5 - v_position.x) / view_ray.x));\", \"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.y) / view_ray.y,\", \"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.y - 0.5 - v_position.y) / view_ray.y));\", \"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.z) / view_ray.z,\", \"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.z - 0.5 - v_position.z) / view_ray.z));\", // Now we have the starting position on the front surface\n  \"\t\t\t\tvec3 front = v_position + view_ray * distance;\", // Decide how many steps to take\n  \"\t\t\t\tint nsteps = int(-distance / relative_step_size + 0.5);\", \"\t\t\t\tif ( nsteps < 1 )\", \"\t\t\t\t\t\tdiscard;\", // Get starting location and step vector in texture coordinates\n  \"\t\t\t\tvec3 step = ((v_position - front) / u_size) / float(nsteps);\", \"\t\t\t\tvec3 start_loc = front / u_size;\", // For testing: show the number of steps. This helps to establish\n  // whether the rays are correctly oriented\n  //'gl_FragColor = vec4(0.0, float(nsteps) / 1.0 / u_size.x, 1.0, 1.0);',\n  //'return;',\n  \"\t\t\t\tif (u_renderstyle == 0)\", \"\t\t\t\t\t\tcast_mip(start_loc, step, nsteps, view_ray);\", \"\t\t\t\telse if (u_renderstyle == 1)\", \"\t\t\t\t\t\tcast_iso(start_loc, step, nsteps, view_ray);\", \"\t\t\t\tif (gl_FragColor.a < 0.05)\", \"\t\t\t\t\t\tdiscard;\", \"\t\t}\", \"\t\tfloat sample1(vec3 texcoords) {\", \"\t\t\t\t/* Sample float value from a 3D texture. Assumes intensity data. */\", \"\t\t\t\treturn texture(u_data, texcoords.xyz).r;\", \"\t\t}\", \"\t\tvec4 apply_colormap(float val) {\", \"\t\t\t\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);\", \"\t\t\t\treturn texture2D(u_cmdata, vec2(val, 0.5));\", \"\t\t}\", \"\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\", \"\t\t\t\tfloat max_val = -1e6;\", \"\t\t\t\tint max_i = 100;\", \"\t\t\t\tvec3 loc = start_loc;\", // Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n  // non-constant expression. So we use a hard-coded max, and an additional condition\n  // inside the loop.\n  \"\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\", \"\t\t\t\t\t\tif (iter >= nsteps)\", \"\t\t\t\t\t\t\t\tbreak;\", // Sample from the 3D texture\n  \"\t\t\t\t\t\tfloat val = sample1(loc);\", // Apply MIP operation\n  \"\t\t\t\t\t\tif (val > max_val) {\", \"\t\t\t\t\t\t\t\tmax_val = val;\", \"\t\t\t\t\t\t\t\tmax_i = iter;\", \"\t\t\t\t\t\t}\", // Advance location deeper into the volume\n  \"\t\t\t\t\t\tloc += step;\", \"\t\t\t\t}\", // Refine location, gives crispier images\n  \"\t\t\t\tvec3 iloc = start_loc + step * (float(max_i) - 0.5);\", \"\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\", \"\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\", \"\t\t\t\t\t\tmax_val = max(max_val, sample1(iloc));\", \"\t\t\t\t\t\tiloc += istep;\", \"\t\t\t\t}\", // Resolve final color\n  \"\t\t\t\tgl_FragColor = apply_colormap(max_val);\", \"\t\t}\", \"\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\", \"\t\t\t\tgl_FragColor = vec4(0.0);\t// init transparent\", \"\t\t\t\tvec4 color3 = vec4(0.0);\t// final color\", \"\t\t\t\tvec3 dstep = 1.5 / u_size;\t// step to sample derivative\", \"\t\t\t\tvec3 loc = start_loc;\", \"\t\t\t\tfloat low_threshold = u_renderthreshold - 0.02 * (u_clim[1] - u_clim[0]);\", // Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n  // non-constant expression. So we use a hard-coded max, and an additional condition\n  // inside the loop.\n  \"\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\", \"\t\t\t\t\t\tif (iter >= nsteps)\", \"\t\t\t\t\t\t\t\tbreak;\", // Sample from the 3D texture\n  \"\t\t\t\t\t\tfloat val = sample1(loc);\", \"\t\t\t\t\t\tif (val > low_threshold) {\", // Take the last interval in smaller steps\n  \"\t\t\t\t\t\t\t\tvec3 iloc = loc - 0.5 * step;\", \"\t\t\t\t\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\", \"\t\t\t\t\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\", \"\t\t\t\t\t\t\t\t\t\tval = sample1(iloc);\", \"\t\t\t\t\t\t\t\t\t\tif (val > u_renderthreshold) {\", \"\t\t\t\t\t\t\t\t\t\t\t\tgl_FragColor = add_lighting(val, iloc, dstep, view_ray);\", \"\t\t\t\t\t\t\t\t\t\t\t\treturn;\", \"\t\t\t\t\t\t\t\t\t\t}\", \"\t\t\t\t\t\t\t\t\t\tiloc += istep;\", \"\t\t\t\t\t\t\t\t}\", \"\t\t\t\t\t\t}\", // Advance location deeper into the volume\n  \"\t\t\t\t\t\tloc += step;\", \"\t\t\t\t}\", \"\t\t}\", \"\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray)\", \"\t\t{\", // Calculate color by incorporating lighting\n  // View direction\n  \"\t\t\t\tvec3 V = normalize(view_ray);\", // calculate normal vector from gradient\n  \"\t\t\t\tvec3 N;\", \"\t\t\t\tfloat val1, val2;\", \"\t\t\t\tval1 = sample1(loc + vec3(-step[0], 0.0, 0.0));\", \"\t\t\t\tval2 = sample1(loc + vec3(+step[0], 0.0, 0.0));\", \"\t\t\t\tN[0] = val1 - val2;\", \"\t\t\t\tval = max(max(val1, val2), val);\", \"\t\t\t\tval1 = sample1(loc + vec3(0.0, -step[1], 0.0));\", \"\t\t\t\tval2 = sample1(loc + vec3(0.0, +step[1], 0.0));\", \"\t\t\t\tN[1] = val1 - val2;\", \"\t\t\t\tval = max(max(val1, val2), val);\", \"\t\t\t\tval1 = sample1(loc + vec3(0.0, 0.0, -step[2]));\", \"\t\t\t\tval2 = sample1(loc + vec3(0.0, 0.0, +step[2]));\", \"\t\t\t\tN[2] = val1 - val2;\", \"\t\t\t\tval = max(max(val1, val2), val);\", \"\t\t\t\tfloat gm = length(N); // gradient magnitude\", \"\t\t\t\tN = normalize(N);\", // Flip normal so it points towards viewer\n  \"\t\t\t\tfloat Nselect = float(dot(N, V) > 0.0);\", \"\t\t\t\tN = (2.0 * Nselect - 1.0) * N;\t// ==\tNselect * N - (1.0-Nselect)*N;\", // Init colors\n  \"\t\t\t\tvec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);\", \"\t\t\t\tvec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);\", \"\t\t\t\tvec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);\", // note: could allow multiple lights\n  \"\t\t\t\tfor (int i=0; i<1; i++)\", \"\t\t\t\t{\", // Get light direction (make sure to prevent zero devision)\n  \"\t\t\t\t\t\tvec3 L = normalize(view_ray);\t//lightDirs[i];\", \"\t\t\t\t\t\tfloat lightEnabled = float( length(L) > 0.0 );\", \"\t\t\t\t\t\tL = normalize(L + (1.0 - lightEnabled));\", // Calculate lighting properties\n  \"\t\t\t\t\t\tfloat lambertTerm = clamp(dot(N, L), 0.0, 1.0);\", \"\t\t\t\t\t\tvec3 H = normalize(L+V); // Halfway vector\", \"\t\t\t\t\t\tfloat specularTerm = pow(max(dot(H, N), 0.0), shininess);\", // Calculate mask\n  \"\t\t\t\t\t\tfloat mask1 = lightEnabled;\", // Calculate colors\n  \"\t\t\t\t\t\tambient_color +=\tmask1 * ambient_color;\t// * gl_LightSource[i].ambient;\", \"\t\t\t\t\t\tdiffuse_color +=\tmask1 * lambertTerm;\", \"\t\t\t\t\t\tspecular_color += mask1 * specularTerm * specular_color;\", \"\t\t\t\t}\", // Calculate final color by componing different components\n  \"\t\t\t\tvec4 final_color;\", \"\t\t\t\tvec4 color = apply_colormap(val);\", \"\t\t\t\tfinal_color = color * (ambient_color + diffuse_color) + specular_color;\", \"\t\t\t\tfinal_color.a = color.a;\", \"\t\t\t\treturn final_color;\", \"\t\t}\"].join(\"\\n\")\n};\nexport { VolumeRenderShader1 };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/shaders/VolumeShader.js"],"names":["Vector3","Vector2","VolumeRenderShader1","uniforms","u_size","value","u_renderstyle","u_renderthreshold","u_clim","u_data","u_cmdata","vertexShader","join","fragmentShader"],"mappings":"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","sourcesContent":["import { Vector3, Vector2 } from \"three\";\nconst VolumeRenderShader1 = {\n  uniforms: {\n    u_size: { value: /* @__PURE__ */ new Vector3(1, 1, 1) },\n    u_renderstyle: { value: 0 },\n    u_renderthreshold: { value: 0.5 },\n    u_clim: { value: /* @__PURE__ */ new Vector2(1, 1) },\n    u_data: { value: null },\n    u_cmdata: { value: null }\n  },\n  vertexShader: [\n    \"\t\tvarying vec4 v_nearpos;\",\n    \"\t\tvarying vec4 v_farpos;\",\n    \"\t\tvarying vec3 v_position;\",\n    \"\t\tvoid main() {\",\n    // Prepare transforms to map to \"camera view\". See also:\n    // https://threejs.org/docs/#api/renderers/webgl/WebGLProgram\n    \"\t\t\t\tmat4 viewtransformf = modelViewMatrix;\",\n    \"\t\t\t\tmat4 viewtransformi = inverse(modelViewMatrix);\",\n    // Project local vertex coordinate to camera position. Then do a step\n    // backward (in cam coords) to the near clipping plane, and project back. Do\n    // the same for the far clipping plane. This gives us all the information we\n    // need to calculate the ray and truncate it to the viewing cone.\n    \"\t\t\t\tvec4 position4 = vec4(position, 1.0);\",\n    \"\t\t\t\tvec4 pos_in_cam = viewtransformf * position4;\",\n    // Intersection of ray and near clipping plane (z = -1 in clip coords)\n    \"\t\t\t\tpos_in_cam.z = -pos_in_cam.w;\",\n    \"\t\t\t\tv_nearpos = viewtransformi * pos_in_cam;\",\n    // Intersection of ray and far clipping plane (z = +1 in clip coords)\n    \"\t\t\t\tpos_in_cam.z = pos_in_cam.w;\",\n    \"\t\t\t\tv_farpos = viewtransformi * pos_in_cam;\",\n    // Set varyings and output pos\n    \"\t\t\t\tv_position = position;\",\n    \"\t\t\t\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * position4;\",\n    \"\t\t}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"\t\tprecision highp float;\",\n    \"\t\tprecision mediump sampler3D;\",\n    \"\t\tuniform vec3 u_size;\",\n    \"\t\tuniform int u_renderstyle;\",\n    \"\t\tuniform float u_renderthreshold;\",\n    \"\t\tuniform vec2 u_clim;\",\n    \"\t\tuniform sampler3D u_data;\",\n    \"\t\tuniform sampler2D u_cmdata;\",\n    \"\t\tvarying vec3 v_position;\",\n    \"\t\tvarying vec4 v_nearpos;\",\n    \"\t\tvarying vec4 v_farpos;\",\n    // The maximum distance through our rendering volume is sqrt(3).\n    \"\t\tconst int MAX_STEPS = 887;\t// 887 for 512^3, 1774 for 1024^3\",\n    \"\t\tconst int REFINEMENT_STEPS = 4;\",\n    \"\t\tconst float relative_step_size = 1.0;\",\n    \"\t\tconst vec4 ambient_color = vec4(0.2, 0.4, 0.2, 1.0);\",\n    \"\t\tconst vec4 diffuse_color = vec4(0.8, 0.2, 0.2, 1.0);\",\n    \"\t\tconst vec4 specular_color = vec4(1.0, 1.0, 1.0, 1.0);\",\n    \"\t\tconst float shininess = 40.0;\",\n    \"\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\",\n    \"\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);\",\n    \"\t\tfloat sample1(vec3 texcoords);\",\n    \"\t\tvec4 apply_colormap(float val);\",\n    \"\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray);\",\n    \"\t\tvoid main() {\",\n    // Normalize clipping plane info\n    \"\t\t\t\tvec3 farpos = v_farpos.xyz / v_farpos.w;\",\n    \"\t\t\t\tvec3 nearpos = v_nearpos.xyz / v_nearpos.w;\",\n    // Calculate unit vector pointing in the view direction through this fragment.\n    \"\t\t\t\tvec3 view_ray = normalize(nearpos.xyz - farpos.xyz);\",\n    // Compute the (negative) distance to the front surface or near clipping plane.\n    // v_position is the back face of the cuboid, so the initial distance calculated in the dot\n    // product below is the distance from near clip plane to the back of the cuboid\n    \"\t\t\t\tfloat distance = dot(nearpos - v_position, view_ray);\",\n    \"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.x) / view_ray.x,\",\n    \"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.x - 0.5 - v_position.x) / view_ray.x));\",\n    \"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.y) / view_ray.y,\",\n    \"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.y - 0.5 - v_position.y) / view_ray.y));\",\n    \"\t\t\t\tdistance = max(distance, min((-0.5 - v_position.z) / view_ray.z,\",\n    \"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(u_size.z - 0.5 - v_position.z) / view_ray.z));\",\n    // Now we have the starting position on the front surface\n    \"\t\t\t\tvec3 front = v_position + view_ray * distance;\",\n    // Decide how many steps to take\n    \"\t\t\t\tint nsteps = int(-distance / relative_step_size + 0.5);\",\n    \"\t\t\t\tif ( nsteps < 1 )\",\n    \"\t\t\t\t\t\tdiscard;\",\n    // Get starting location and step vector in texture coordinates\n    \"\t\t\t\tvec3 step = ((v_position - front) / u_size) / float(nsteps);\",\n    \"\t\t\t\tvec3 start_loc = front / u_size;\",\n    // For testing: show the number of steps. This helps to establish\n    // whether the rays are correctly oriented\n    //'gl_FragColor = vec4(0.0, float(nsteps) / 1.0 / u_size.x, 1.0, 1.0);',\n    //'return;',\n    \"\t\t\t\tif (u_renderstyle == 0)\",\n    \"\t\t\t\t\t\tcast_mip(start_loc, step, nsteps, view_ray);\",\n    \"\t\t\t\telse if (u_renderstyle == 1)\",\n    \"\t\t\t\t\t\tcast_iso(start_loc, step, nsteps, view_ray);\",\n    \"\t\t\t\tif (gl_FragColor.a < 0.05)\",\n    \"\t\t\t\t\t\tdiscard;\",\n    \"\t\t}\",\n    \"\t\tfloat sample1(vec3 texcoords) {\",\n    \"\t\t\t\t/* Sample float value from a 3D texture. Assumes intensity data. */\",\n    \"\t\t\t\treturn texture(u_data, texcoords.xyz).r;\",\n    \"\t\t}\",\n    \"\t\tvec4 apply_colormap(float val) {\",\n    \"\t\t\t\tval = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);\",\n    \"\t\t\t\treturn texture2D(u_cmdata, vec2(val, 0.5));\",\n    \"\t\t}\",\n    \"\t\tvoid cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\",\n    \"\t\t\t\tfloat max_val = -1e6;\",\n    \"\t\t\t\tint max_i = 100;\",\n    \"\t\t\t\tvec3 loc = start_loc;\",\n    // Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n    // non-constant expression. So we use a hard-coded max, and an additional condition\n    // inside the loop.\n    \"\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\",\n    \"\t\t\t\t\t\tif (iter >= nsteps)\",\n    \"\t\t\t\t\t\t\t\tbreak;\",\n    // Sample from the 3D texture\n    \"\t\t\t\t\t\tfloat val = sample1(loc);\",\n    // Apply MIP operation\n    \"\t\t\t\t\t\tif (val > max_val) {\",\n    \"\t\t\t\t\t\t\t\tmax_val = val;\",\n    \"\t\t\t\t\t\t\t\tmax_i = iter;\",\n    \"\t\t\t\t\t\t}\",\n    // Advance location deeper into the volume\n    \"\t\t\t\t\t\tloc += step;\",\n    \"\t\t\t\t}\",\n    // Refine location, gives crispier images\n    \"\t\t\t\tvec3 iloc = start_loc + step * (float(max_i) - 0.5);\",\n    \"\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\",\n    \"\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\",\n    \"\t\t\t\t\t\tmax_val = max(max_val, sample1(iloc));\",\n    \"\t\t\t\t\t\tiloc += istep;\",\n    \"\t\t\t\t}\",\n    // Resolve final color\n    \"\t\t\t\tgl_FragColor = apply_colormap(max_val);\",\n    \"\t\t}\",\n    \"\t\tvoid cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {\",\n    \"\t\t\t\tgl_FragColor = vec4(0.0);\t// init transparent\",\n    \"\t\t\t\tvec4 color3 = vec4(0.0);\t// final color\",\n    \"\t\t\t\tvec3 dstep = 1.5 / u_size;\t// step to sample derivative\",\n    \"\t\t\t\tvec3 loc = start_loc;\",\n    \"\t\t\t\tfloat low_threshold = u_renderthreshold - 0.02 * (u_clim[1] - u_clim[0]);\",\n    // Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with\n    // non-constant expression. So we use a hard-coded max, and an additional condition\n    // inside the loop.\n    \"\t\t\t\tfor (int iter=0; iter<MAX_STEPS; iter++) {\",\n    \"\t\t\t\t\t\tif (iter >= nsteps)\",\n    \"\t\t\t\t\t\t\t\tbreak;\",\n    // Sample from the 3D texture\n    \"\t\t\t\t\t\tfloat val = sample1(loc);\",\n    \"\t\t\t\t\t\tif (val > low_threshold) {\",\n    // Take the last interval in smaller steps\n    \"\t\t\t\t\t\t\t\tvec3 iloc = loc - 0.5 * step;\",\n    \"\t\t\t\t\t\t\t\tvec3 istep = step / float(REFINEMENT_STEPS);\",\n    \"\t\t\t\t\t\t\t\tfor (int i=0; i<REFINEMENT_STEPS; i++) {\",\n    \"\t\t\t\t\t\t\t\t\t\tval = sample1(iloc);\",\n    \"\t\t\t\t\t\t\t\t\t\tif (val > u_renderthreshold) {\",\n    \"\t\t\t\t\t\t\t\t\t\t\t\tgl_FragColor = add_lighting(val, iloc, dstep, view_ray);\",\n    \"\t\t\t\t\t\t\t\t\t\t\t\treturn;\",\n    \"\t\t\t\t\t\t\t\t\t\t}\",\n    \"\t\t\t\t\t\t\t\t\t\tiloc += istep;\",\n    \"\t\t\t\t\t\t\t\t}\",\n    \"\t\t\t\t\t\t}\",\n    // Advance location deeper into the volume\n    \"\t\t\t\t\t\tloc += step;\",\n    \"\t\t\t\t}\",\n    \"\t\t}\",\n    \"\t\tvec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray)\",\n    \"\t\t{\",\n    // Calculate color by incorporating lighting\n    // View direction\n    \"\t\t\t\tvec3 V = normalize(view_ray);\",\n    // calculate normal vector from gradient\n    \"\t\t\t\tvec3 N;\",\n    \"\t\t\t\tfloat val1, val2;\",\n    \"\t\t\t\tval1 = sample1(loc + vec3(-step[0], 0.0, 0.0));\",\n    \"\t\t\t\tval2 = sample1(loc + vec3(+step[0], 0.0, 0.0));\",\n    \"\t\t\t\tN[0] = val1 - val2;\",\n    \"\t\t\t\tval = max(max(val1, val2), val);\",\n    \"\t\t\t\tval1 = sample1(loc + vec3(0.0, -step[1], 0.0));\",\n    \"\t\t\t\tval2 = sample1(loc + vec3(0.0, +step[1], 0.0));\",\n    \"\t\t\t\tN[1] = val1 - val2;\",\n    \"\t\t\t\tval = max(max(val1, val2), val);\",\n    \"\t\t\t\tval1 = sample1(loc + vec3(0.0, 0.0, -step[2]));\",\n    \"\t\t\t\tval2 = sample1(loc + vec3(0.0, 0.0, +step[2]));\",\n    \"\t\t\t\tN[2] = val1 - val2;\",\n    \"\t\t\t\tval = max(max(val1, val2), val);\",\n    \"\t\t\t\tfloat gm = length(N); // gradient magnitude\",\n    \"\t\t\t\tN = normalize(N);\",\n    // Flip normal so it points towards viewer\n    \"\t\t\t\tfloat Nselect = float(dot(N, V) > 0.0);\",\n    \"\t\t\t\tN = (2.0 * Nselect - 1.0) * N;\t// ==\tNselect * N - (1.0-Nselect)*N;\",\n    // Init colors\n    \"\t\t\t\tvec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);\",\n    \"\t\t\t\tvec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);\",\n    \"\t\t\t\tvec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);\",\n    // note: could allow multiple lights\n    \"\t\t\t\tfor (int i=0; i<1; i++)\",\n    \"\t\t\t\t{\",\n    // Get light direction (make sure to prevent zero devision)\n    \"\t\t\t\t\t\tvec3 L = normalize(view_ray);\t//lightDirs[i];\",\n    \"\t\t\t\t\t\tfloat lightEnabled = float( length(L) > 0.0 );\",\n    \"\t\t\t\t\t\tL = normalize(L + (1.0 - lightEnabled));\",\n    // Calculate lighting properties\n    \"\t\t\t\t\t\tfloat lambertTerm = clamp(dot(N, L), 0.0, 1.0);\",\n    \"\t\t\t\t\t\tvec3 H = normalize(L+V); // Halfway vector\",\n    \"\t\t\t\t\t\tfloat specularTerm = pow(max(dot(H, N), 0.0), shininess);\",\n    // Calculate mask\n    \"\t\t\t\t\t\tfloat mask1 = lightEnabled;\",\n    // Calculate colors\n    \"\t\t\t\t\t\tambient_color +=\tmask1 * ambient_color;\t// * gl_LightSource[i].ambient;\",\n    \"\t\t\t\t\t\tdiffuse_color +=\tmask1 * lambertTerm;\",\n    \"\t\t\t\t\t\tspecular_color += mask1 * specularTerm * specular_color;\",\n    \"\t\t\t\t}\",\n    // Calculate final color by componing different components\n    \"\t\t\t\tvec4 final_color;\",\n    \"\t\t\t\tvec4 color = apply_colormap(val);\",\n    \"\t\t\t\tfinal_color = color * (ambient_color + diffuse_color) + specular_color;\",\n    \"\t\t\t\tfinal_color.a = color.a;\",\n    \"\t\t\t\treturn final_color;\",\n    \"\t\t}\"\n  ].join(\"\\n\")\n};\nexport {\n  VolumeRenderShader1\n};\n"]},"metadata":{},"sourceType":"module"}