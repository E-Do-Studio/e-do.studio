{"ast":null,"code":"import { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad2, onProgress2, onError2) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== void 0) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad2) onLoad2(texture);\n        }\n      }, onProgress2, onError2);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"names":["Loader","HalfFloatType","CubeTexture","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","constructor","manager","hdrLoader","type","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","colorSpace","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","onLoad2","onProgress2","onError2","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","dataTexture","width","height","format","images","needsUpdate","length","value"],"mappings":"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","sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if (\"colorSpace\" in texture)\n          texture.colorSpace = \"srgb-linear\";\n        else\n          texture.encoding = 3e3;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad2, onProgress2, onError2) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(\n        urls[i],\n        function(buffer) {\n          loaded++;\n          const texData = scope.hdrLoader.parse(buffer);\n          if (!texData)\n            return;\n          if (texData.data !== void 0) {\n            const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad2)\n              onLoad2(texture);\n          }\n        },\n        onProgress2,\n        onError2\n      );\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport {\n  HDRCubeTextureLoader\n};\n"]},"metadata":{},"sourceType":"module"}