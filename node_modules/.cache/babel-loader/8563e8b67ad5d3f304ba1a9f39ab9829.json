{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Scene, Object3D, Group, Vector3, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, RepeatWrapping, ClampToEdgeWrapping, DataTexture, Vector2, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, TextureLoader } from \"three\";\nimport { createToken, Lexer, CstParser } from \"chevrotain\";\n\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, path) {\n    const nodeMap = {};\n\n    function generateVRMLTree(data2) {\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor());\n      const lexingResult = lexer.lex(data2);\n      parser.input = lexingResult.tokens;\n      const cstOutput = parser.vrml();\n\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error(\"THREE.VRMLLoader: Parsing errors detected.\");\n      }\n\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n\n    function createTokens() {\n      const RouteIdentifier = createToken({\n        name: \"RouteIdentifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: \"Identifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      });\n      const nodeTypes = [\"Anchor\", \"Billboard\", \"Collision\", \"Group\", \"Transform\", // grouping nodes\n      \"Inline\", \"LOD\", \"Switch\", // special groups\n      \"AudioClip\", \"DirectionalLight\", \"PointLight\", \"Script\", \"Shape\", \"Sound\", \"SpotLight\", \"WorldInfo\", // common nodes\n      \"CylinderSensor\", \"PlaneSensor\", \"ProximitySensor\", \"SphereSensor\", \"TimeSensor\", \"TouchSensor\", \"VisibilitySensor\", // sensors\n      \"Box\", \"Cone\", \"Cylinder\", \"ElevationGrid\", \"Extrusion\", \"IndexedFaceSet\", \"IndexedLineSet\", \"PointSet\", \"Sphere\", // geometries\n      \"Color\", \"Coordinate\", \"Normal\", \"TextureCoordinate\", // geometric properties\n      \"Appearance\", \"FontStyle\", \"ImageTexture\", \"Material\", \"MovieTexture\", \"PixelTexture\", \"TextureTransform\", // appearance\n      \"ColorInterpolator\", \"CoordinateInterpolator\", \"NormalInterpolator\", \"OrientationInterpolator\", \"PositionInterpolator\", \"ScalarInterpolator\", // interpolators\n      \"Background\", \"Fog\", \"NavigationInfo\", \"Viewpoint\", // bindable nodes\n      \"Text\" // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ];\n      const Version = createToken({\n        name: \"Version\",\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: \"NodeName\",\n        pattern: new RegExp(nodeTypes.join(\"|\")),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: \"DEF\",\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: \"USE\",\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: \"ROUTE\",\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: \"TO\",\n        pattern: /TO/,\n        longer_alt: Identifier\n      });\n      const StringLiteral = createToken({\n        name: \"StringLiteral\",\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({\n        name: \"HexLiteral\",\n        pattern: /0[xX][0-9a-fA-F]+/\n      });\n      const NumberLiteral = createToken({\n        name: \"NumberLiteral\",\n        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n      });\n      const TrueLiteral = createToken({\n        name: \"TrueLiteral\",\n        pattern: /TRUE/\n      });\n      const FalseLiteral = createToken({\n        name: \"FalseLiteral\",\n        pattern: /FALSE/\n      });\n      const NullLiteral = createToken({\n        name: \"NullLiteral\",\n        pattern: /NULL/\n      });\n      const LSquare = createToken({\n        name: \"LSquare\",\n        pattern: /\\[/\n      });\n      const RSquare = createToken({\n        name: \"RSquare\",\n        pattern: /]/\n      });\n      const LCurly = createToken({\n        name: \"LCurly\",\n        pattern: /{/\n      });\n      const RCurly = createToken({\n        name: \"RCurly\",\n        pattern: /}/\n      });\n      const Comment = createToken({\n        name: \"Comment\",\n        pattern: /#.*/,\n        group: Lexer.SKIPPED\n      });\n      const WhiteSpace = createToken({\n        name: \"WhiteSpace\",\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED\n      });\n      const tokens = [WhiteSpace, // keywords appear before the Identifier\n      NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n      Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n      const tokenVocabulary = {};\n\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n\n      return {\n        tokens,\n        tokenVocabulary\n      };\n    }\n\n    function createVisitor(BaseVRMLVisitor) {\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function (ctx) {\n          const data2 = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data2.nodes.push(this.visit(node));\n          }\n\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data2.routes.push(this.visit(route));\n            }\n          }\n\n          return data2;\n        },\n        version: function (ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function (ctx) {\n          const data2 = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data2.fields.push(this.visit(field));\n            }\n          }\n\n          if (ctx.def) {\n            data2.DEF = this.visit(ctx.def[0]);\n          }\n\n          return data2;\n        },\n        field: function (ctx) {\n          const data2 = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result;\n\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          }\n\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n\n          data2.type = result.type;\n          data2.values = result.values;\n          return data2;\n        },\n        def: function (ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function (ctx) {\n          return {\n            USE: (ctx.Identifier || ctx.NodeName)[0].image\n          };\n        },\n        singleFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        route: function (ctx) {\n          const data2 = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data2;\n        }\n      });\n\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n\n        if (ctx.node) {\n          field.type = \"node\";\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n\n        if (ctx.use) {\n          field.type = \"use\";\n\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n\n        if (ctx.StringLiteral) {\n          field.type = \"string\";\n\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, \"\"));\n          }\n        }\n\n        if (ctx.NumberLiteral) {\n          field.type = \"number\";\n\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n\n        if (ctx.HexLiteral) {\n          field.type = \"hex\";\n\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n\n        if (ctx.TrueLiteral) {\n          field.type = \"boolean\";\n\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === \"TRUE\") field.values.push(true);\n          }\n        }\n\n        if (ctx.FalseLiteral) {\n          field.type = \"boolean\";\n\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === \"FALSE\") field.values.push(false);\n          }\n        }\n\n        if (ctx.NullLiteral) {\n          field.type = \"null\";\n          ctx.NullLiteral.forEach(function () {\n            field.values.push(null);\n          });\n        }\n\n        return field;\n      }\n\n      return new VRMLToASTVisitor();\n    }\n\n    function parseTree(tree2) {\n      const nodes = tree2.nodes;\n      const scene2 = new Scene();\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      }\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D) scene2.add(object);\n        if (node.name === \"WorldInfo\") scene2.userData.worldInfo = object;\n      }\n\n      return scene2;\n    }\n\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n\n        if (field.type === \"node\") {\n          const fieldValues = field.values;\n\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n\n    function getNode(node) {\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n\n      if (node.build !== void 0) return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    }\n\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n\n      switch (nodeName) {\n        case \"Group\":\n        case \"Transform\":\n        case \"Collision\":\n          build = buildGroupingNode(node);\n          break;\n\n        case \"Background\":\n          build = buildBackgroundNode(node);\n          break;\n\n        case \"Shape\":\n          build = buildShapeNode(node);\n          break;\n\n        case \"Appearance\":\n          build = buildAppearanceNode(node);\n          break;\n\n        case \"Material\":\n          build = buildMaterialNode(node);\n          break;\n\n        case \"ImageTexture\":\n          build = buildImageTextureNode(node);\n          break;\n\n        case \"PixelTexture\":\n          build = buildPixelTextureNode(node);\n          break;\n\n        case \"TextureTransform\":\n          build = buildTextureTransformNode(node);\n          break;\n\n        case \"IndexedFaceSet\":\n          build = buildIndexedFaceSetNode(node);\n          break;\n\n        case \"IndexedLineSet\":\n          build = buildIndexedLineSetNode(node);\n          break;\n\n        case \"PointSet\":\n          build = buildPointSetNode(node);\n          break;\n\n        case \"Box\":\n          build = buildBoxNode(node);\n          break;\n\n        case \"Cone\":\n          build = buildConeNode(node);\n          break;\n\n        case \"Cylinder\":\n          build = buildCylinderNode(node);\n          break;\n\n        case \"Sphere\":\n          build = buildSphereNode(node);\n          break;\n\n        case \"ElevationGrid\":\n          build = buildElevationGridNode(node);\n          break;\n\n        case \"Extrusion\":\n          build = buildExtrusionNode(node);\n          break;\n\n        case \"Color\":\n        case \"Coordinate\":\n        case \"Normal\":\n        case \"TextureCoordinate\":\n          build = buildGeometricNode(node);\n          break;\n\n        case \"WorldInfo\":\n          build = buildWorldInfoNode(node);\n          break;\n\n        case \"Anchor\":\n        case \"Billboard\":\n        case \"Inline\":\n        case \"LOD\":\n        case \"Switch\":\n        case \"AudioClip\":\n        case \"DirectionalLight\":\n        case \"PointLight\":\n        case \"Script\":\n        case \"Sound\":\n        case \"SpotLight\":\n        case \"CylinderSensor\":\n        case \"PlaneSensor\":\n        case \"ProximitySensor\":\n        case \"SphereSensor\":\n        case \"TimeSensor\":\n        case \"TouchSensor\":\n        case \"VisibilitySensor\":\n        case \"Text\":\n        case \"FontStyle\":\n        case \"MovieTexture\":\n        case \"ColorInterpolator\":\n        case \"CoordinateInterpolator\":\n        case \"NormalInterpolator\":\n        case \"OrientationInterpolator\":\n        case \"PositionInterpolator\":\n        case \"ScalarInterpolator\":\n        case \"Fog\":\n        case \"NavigationInfo\":\n        case \"Viewpoint\":\n          break;\n\n        default:\n          console.warn(\"THREE.VRMLLoader: Unknown node:\", nodeName);\n          break;\n      }\n\n      if (build !== void 0 && node.DEF !== void 0 && build.hasOwnProperty(\"name\") === true) {\n        build.name = node.DEF;\n      }\n\n      return build;\n    }\n\n    function buildGroupingNode(node) {\n      const object = new Group();\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"bboxCenter\":\n            break;\n\n          case \"bboxSize\":\n            break;\n\n          case \"center\":\n            break;\n\n          case \"children\":\n            parseFieldChildren(fieldValues, object);\n            break;\n\n          case \"collide\":\n            break;\n\n          case \"rotation\":\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n\n          case \"scale\":\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case \"scaleOrientation\":\n            break;\n\n          case \"translation\":\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case \"proxy\":\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      return object;\n    }\n\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"groundAngle\":\n            groundAngle = fieldValues;\n            break;\n\n          case \"groundColor\":\n            groundColor = fieldValues;\n            break;\n\n          case \"backUrl\":\n            break;\n\n          case \"bottomUrl\":\n            break;\n\n          case \"frontUrl\":\n            break;\n\n          case \"leftUrl\":\n            break;\n\n          case \"rightUrl\":\n            break;\n\n          case \"topUrl\":\n            break;\n\n          case \"skyAngle\":\n            skyAngle = fieldValues;\n            break;\n\n          case \"skyColor\":\n            skyColor = fieldValues;\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const radius = 1e4;\n\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({\n          fog: false,\n          side: BackSide,\n          depthWrite: false,\n          depthTest: false\n        });\n\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      }\n\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      }\n\n      group.renderOrder = -Infinity;\n      return group;\n    }\n\n    function buildShapeNode(node) {\n      const fields = node.fields;\n      let material = new MeshBasicMaterial({\n        color: 0\n      });\n      let geometry;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"appearance\":\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          case \"geometry\":\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      let object;\n\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n\n        if (type === \"points\") {\n          const pointsMaterial = new PointsMaterial({\n            color: 16777215\n          });\n\n          if (geometry.attributes.color !== void 0) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === \"line\") {\n          const lineMaterial = new LineBasicMaterial({\n            color: 16777215\n          });\n\n          if (geometry.attributes.color !== void 0) {\n            lineMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          if (geometry._solid !== void 0) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          }\n\n          if (geometry.attributes.color !== void 0) {\n            material.vertexColors = true;\n          }\n\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D();\n        object.visible = false;\n      }\n\n      return object;\n    }\n\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"material\":\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess) material.shininess = materialData.shininess;\n              if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n              if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0) material.transparent = true;\n            } else {\n              material = new MeshBasicMaterial({\n                color: 0\n              });\n            }\n\n            break;\n\n          case \"texture\":\n            const textureNode = fieldValues[0];\n\n            if (textureNode !== null) {\n              if (textureNode.name === \"ImageTexture\" || textureNode.name === \"PixelTexture\") {\n                material.map = getNode(textureNode);\n              } else {}\n            }\n\n            break;\n\n          case \"textureTransform\":\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      if (material.map) {\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1;\n              break;\n\n            case TEXTURE_TYPE.RGB:\n              material.color.set(16777215);\n              break;\n\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(16777215);\n              material.opacity = 1;\n              break;\n\n            default:\n          }\n\n          delete material.map.__type;\n        }\n\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n\n      return material;\n    }\n\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"ambientIntensity\":\n            break;\n\n          case \"diffuseColor\":\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case \"emissiveColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case \"shininess\":\n            materialData.shininess = fieldValues[0];\n            break;\n\n          case \"specularColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case \"transparency\":\n            materialData.transparency = fieldValues[0];\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      return materialData;\n    }\n\n    function parseHexColor(hex, textureType, color) {\n      let value;\n\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          value = parseInt(\"0x\" + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt(\"0x\" + hex.substring(4, 6));\n          break;\n\n        case TEXTURE_TYPE.RGB:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.RGBA:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = parseInt(\"0x\" + hex.substring(8, 10));\n          break;\n\n        default:\n      }\n    }\n\n    function getTextureType(num_components) {\n      let type;\n\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n\n        default:\n      }\n\n      return type;\n    }\n\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"image\":\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data2 = new Uint8Array(4 * width * height);\n            const color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 0\n            };\n\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data2[stride + 0] = color.r;\n              data2[stride + 1] = color.g;\n              data2[stride + 2] = color.b;\n              data2[stride + 3] = color.a;\n            }\n\n            texture = new DataTexture(data2, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType;\n            break;\n\n          case \"repeatS\":\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case \"repeatT\":\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"url\":\n            const url = fieldValues[0];\n            if (url) texture = textureLoader.load(url);\n            break;\n\n          case \"repeatS\":\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case \"repeatT\":\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"center\":\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case \"rotation\":\n            transformData.rotation = fieldValues[0];\n            break;\n\n          case \"scale\":\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case \"translation\":\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      return transformData;\n    }\n\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"title\":\n            worldInfo.title = fieldValues[0];\n            break;\n\n          case \"info\":\n            worldInfo.info = fieldValues;\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      return worldInfo;\n    }\n\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true,\n          solid = true,\n          creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true,\n          normalPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case \"coord\":\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case \"normal\":\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case \"convex\":\n            break;\n\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n\n          case \"normalIndex\":\n            normalIndex = fieldValues;\n            break;\n\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n\n          case \"texCoordIndex\":\n            texCoordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      if (coordIndex === void 0) {\n        console.warn(\"THREE.VRMLLoader: Missing coordIndex.\");\n        return new BufferGeometry();\n      }\n\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n\n      if (normal) {\n        if (normalPerVertex === true) {\n          if (normalIndex && normalIndex.length > 0) {\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n          } else {\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          if (normalIndex && normalIndex.length > 0) {\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n\n      if (texCoord) {\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      if (colorAttribute) geometry.setAttribute(\"color\", colorAttribute);\n      if (uvAttribute) geometry.setAttribute(\"uv\", uvAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case \"coord\":\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex);\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            const expandedColorIndex = expandLineIndex(colorIndex);\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            const flattenLineColors = flattenData(color, colorIndex);\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          } else {\n            const expandedLineColors = expandLineData(color, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          }\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      if (colorAttribute) geometry.setAttribute(\"color\", colorAttribute);\n      geometry._type = \"line\";\n      return geometry;\n    }\n\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case \"coord\":\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(coord, 3));\n      if (color) geometry.setAttribute(\"color\", new Float32BufferAttribute(color, 3));\n      geometry._type = \"points\";\n      return geometry;\n    }\n\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"size\":\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n\n    function buildConeNode(node) {\n      let radius = 1,\n          height = 2,\n          openEnded = false;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"bottom\":\n            openEnded = !fieldValues[0];\n            break;\n\n          case \"bottomRadius\":\n            radius = fieldValues[0];\n            break;\n\n          case \"height\":\n            height = fieldValues[0];\n            break;\n\n          case \"side\":\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n\n    function buildCylinderNode(node) {\n      let radius = 1,\n          height = 2;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"bottom\":\n            break;\n\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n\n          case \"height\":\n            height = fieldValues[0];\n            break;\n\n          case \"side\":\n            break;\n\n          case \"top\":\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case \"normal\":\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case \"height\":\n            height = fieldValues;\n            break;\n\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n\n          case \"xDimension\":\n            xDimension = fieldValues[0];\n            break;\n\n          case \"xSpacing\":\n            xSpacing = fieldValues[0];\n            break;\n\n          case \"zDimension\":\n            zDimension = fieldValues[0];\n            break;\n\n          case \"zSpacing\":\n            zSpacing = fieldValues[0];\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          const index = i * xDimension + j;\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z);\n\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          }\n\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          }\n\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      }\n\n      const indices = [];\n\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension;\n\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      }\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute;\n\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2];\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      }\n\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry.setAttribute(\"uv\", uvAttribute);\n      if (colorAttribute) geometry.setAttribute(\"color\", colorAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case \"beginCap\":\n            beginCap = fieldValues[0];\n            break;\n\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n\n          case \"convex\":\n            break;\n\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n\n          case \"crossSection\":\n            crossSection = fieldValues;\n            break;\n\n          case \"endCap\":\n            endCap = fieldValues[0];\n            break;\n\n          case \"orientation\":\n            orientation = fieldValues;\n            break;\n\n          case \"scale\":\n            scale = fieldValues;\n            break;\n\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n\n          case \"spine\":\n            spine = fieldValues;\n            break;\n\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1];\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1];\n          vertex.multiply(scaling);\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion);\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      }\n\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      }\n\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        }\n\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        }\n\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1);\n\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n            } else {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n            }\n          }\n        }\n      }\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node);\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D) owner.add(object);\n      }\n    }\n\n    function triangulateFaceIndex(index, ccw) {\n      const indices = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3);\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n\n      return indices;\n    }\n\n    function triangulateFaceData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    function flattenData(data2, index) {\n      const flattenData2 = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        flattenData2.push(x, y, z);\n      }\n\n      return flattenData2;\n    }\n\n    function expandLineIndex(index) {\n      const indices = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2);\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n\n      return indices;\n    }\n\n    function expandLineData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n\n    function computeAttributeFromIndexedData(coordIndex, index, data2, itemSize) {\n      const array = [];\n\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n\n        if (itemSize === 2) {\n          uvA.fromArray(data2, a * itemSize);\n          uvB.fromArray(data2, b * itemSize);\n          uvC.fromArray(data2, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data2, a * itemSize);\n          vB.fromArray(data2, b * itemSize);\n          vC.fromArray(data2, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n\n      return new Float32BufferAttribute(array, itemSize);\n    }\n\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n          index2 = 0;\n\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n\n    const ab = new Vector3();\n    const cb = new Vector3();\n\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {};\n\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === void 0) vertexNormals[a] = [];\n        if (vertexNormals[b] === void 0) vertexNormals[b] = [];\n        if (vertexNormals[c] === void 0) vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      }\n\n      const normals = [];\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n\n      return new Float32BufferAttribute(normals, 3);\n    }\n\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n\n      return normal.normalize();\n    }\n\n    function toColorArray(colors) {\n      const array = [];\n\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n\n      return array;\n    }\n\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      }\n\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n\n          if (topDown === true) {\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n\n      geometry.setAttribute(\"color\", colorAttribute);\n    }\n\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    if (data.indexOf(\"#VRML V2.0\") === -1) {\n      throw Error(\"THREE.VRMLLexer: Version of VRML asset not supported.\");\n    }\n\n    const tree = generateVRMLTree(data);\n    const scene = parseTree(tree);\n    return scene;\n  }\n\n}\n\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens);\n  }\n\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error(\"THREE.VRMLLexer: Lexing errors detected.\");\n    }\n\n    return lexingResult;\n  }\n\n}\n\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary[\"Version\"];\n    const LCurly = tokenVocabulary[\"LCurly\"];\n    const RCurly = tokenVocabulary[\"RCurly\"];\n    const LSquare = tokenVocabulary[\"LSquare\"];\n    const RSquare = tokenVocabulary[\"RSquare\"];\n    const Identifier = tokenVocabulary[\"Identifier\"];\n    const RouteIdentifier = tokenVocabulary[\"RouteIdentifier\"];\n    const StringLiteral = tokenVocabulary[\"StringLiteral\"];\n    const HexLiteral = tokenVocabulary[\"HexLiteral\"];\n    const NumberLiteral = tokenVocabulary[\"NumberLiteral\"];\n    const TrueLiteral = tokenVocabulary[\"TrueLiteral\"];\n    const FalseLiteral = tokenVocabulary[\"FalseLiteral\"];\n    const NullLiteral = tokenVocabulary[\"NullLiteral\"];\n    const DEF = tokenVocabulary[\"DEF\"];\n    const USE = tokenVocabulary[\"USE\"];\n    const ROUTE = tokenVocabulary[\"ROUTE\"];\n    const TO = tokenVocabulary[\"TO\"];\n    const NodeName = tokenVocabulary[\"NodeName\"];\n    $.RULE(\"vrml\", function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE(\"version\", function () {\n      $.CONSUME(Version);\n    });\n    $.RULE(\"node\", function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE(\"field\", function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE(\"def\", function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE(\"use\", function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE(\"singleFieldValue\", function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE(\"multiFieldValue\", function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE(\"route\", function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n}\n\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n}\n\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport { VRMLLoader };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/VRMLLoader.js"],"names":["Loader","LoaderUtils","FileLoader","Scene","Object3D","Group","Vector3","SphereGeometry","MeshBasicMaterial","BackSide","Mesh","PointsMaterial","Points","LineBasicMaterial","LineSegments","FrontSide","DoubleSide","MeshPhongMaterial","Color","RepeatWrapping","ClampToEdgeWrapping","DataTexture","Vector2","BufferGeometry","Float32BufferAttribute","BoxGeometry","ConeGeometry","CylinderGeometry","Quaternion","ShapeUtils","BufferAttribute","TextureLoader","createToken","Lexer","CstParser","VRMLLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","nodeMap","generateVRMLTree","data2","tokenData","createTokens","lexer","VRMLLexer","tokens","parser","VRMLParser","tokenVocabulary","visitor","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","input","cstOutput","vrml","errors","length","Error","ast","visit","RouteIdentifier","name","pattern","Identifier","longer_alt","nodeTypes","Version","NodeName","RegExp","join","DEF","USE","ROUTE","TO","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","LSquare","RSquare","LCurly","RCurly","Comment","group","SKIPPED","WhiteSpace","i","l","token","BaseVRMLVisitor","VRMLToASTVisitor","call","validateVisitor","prototype","Object","assign","create","ctx","version","nodes","routes","node","push","route","image","fields","field","def","type","values","result","singleFieldValue","multiFieldValue","use","processField","FROM","stringLiteral","replace","numberLiteral","parseFloat","hexLiteral","trueLiteral","falseLiteral","forEach","parseTree","tree2","scene2","buildNodeMap","object","getNode","add","userData","worldInfo","fieldValues","j","jl","resolveUSE","build","buildNode","nodeName","buildGroupingNode","buildBackgroundNode","buildShapeNode","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","buildPixelTextureNode","buildTextureTransformNode","buildIndexedFaceSetNode","buildIndexedLineSetNode","buildPointSetNode","buildBoxNode","buildConeNode","buildCylinderNode","buildSphereNode","buildElevationGridNode","buildExtrusionNode","buildGeometricNode","buildWorldInfoNode","warn","hasOwnProperty","fieldName","parseFieldChildren","axis","angle","quaternion","setFromAxisAngle","scale","set","position","groundAngle","groundColor","skyAngle","skyColor","radius","skyGeometry","skyMaterial","fog","side","depthWrite","depthTest","paintFaces","toColorArray","vertexColors","color","setRGB","sky","groundGeometry","Math","PI","groundMaterial","ground","renderOrder","Infinity","material","geometry","attributes","_type","pointsMaterial","isMeshPhongMaterial","copy","emissive","lineMaterial","_solid","visible","transformData","materialData","diffuseColor","emissiveColor","shininess","specularColor","specular","transparency","opacity","transparent","textureNode","map","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","center","rotation","repeat","offset","translation","parseHexColor","hex","textureType","value","INTENSITY","parseInt","r","g","b","a","substring","getTextureType","num_components","texture","wrapS","wrapT","width","height","Uint8Array","k","stride","needsUpdate","textureLoader","title","info","coord","normal","texCoord","ccw","solid","creaseAngle","colorIndex","coordIndex","normalIndex","texCoordIndex","colorPerVertex","normalPerVertex","colorNode","coordNode","normalNode","texCoordNode","triangulatedCoordIndex","triangulateFaceIndex","colorAttribute","normalAttribute","uvAttribute","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","computeNormalAttribute","triangulatedTexCoordIndex","positionAttribute","setAttribute","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","size","x","y","z","openEnded","xDimension","zDimension","xSpacing","zSpacing","vertices","normals","colors","uvs","index","xn","yn","zn","s","t","indices","c","d","crossSection","spine","orientation","beginCap","endCap","crossSectionClosed","spineVector","scaling","vertex","o","il","fromArray","kl","multiply","applyQuaternion","spineCount","crossSectionCount","contour","faces","triangulateShape","capIndices","face","indexOffset","identifier","isObject3D","isMaterial","clone","children","owner","start","i1","i2","i3","triangulatedData","flattenData2","vA","vB","vC","uvA","uvB","uvC","itemSize","array","faceData","lineData","attribute","array2","index2","ab","cb","vertexNormals","Face","subVectors","cross","normalize","nA","weightedNormal","nB","nC","vector","angleTo","angles","topDown","thresholds","startAngle","point","setFromSphericalCoords","Float32Array","count","getX","fromBufferAttribute","thresholdIndexA","thresholdIndexB","thresholdA","thresholdB","abs","colorA","colorB","lerp","setXYZ","resourcePath","setCrossOrigin","crossOrigin","indexOf","tree","scene","inputText","tokenize","$","RULE","SUBRULE","AT_LEAST_ONE","MANY","CONSUME","OPTION","OR2","ALT","OR","CONSUME2","performSelfAnalysis"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, Scene, Object3D, Group, Vector3, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, RepeatWrapping, ClampToEdgeWrapping, DataTexture, Vector2, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, TextureLoader } from \"three\";\nimport { createToken, Lexer, CstParser } from \"chevrotain\";\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data, path) {\n    const nodeMap = {};\n    function generateVRMLTree(data2) {\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor());\n      const lexingResult = lexer.lex(data2);\n      parser.input = lexingResult.tokens;\n      const cstOutput = parser.vrml();\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error(\"THREE.VRMLLoader: Parsing errors detected.\");\n      }\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n    function createTokens() {\n      const RouteIdentifier = createToken({\n        name: \"RouteIdentifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: \"Identifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      });\n      const nodeTypes = [\n        \"Anchor\",\n        \"Billboard\",\n        \"Collision\",\n        \"Group\",\n        \"Transform\",\n        // grouping nodes\n        \"Inline\",\n        \"LOD\",\n        \"Switch\",\n        // special groups\n        \"AudioClip\",\n        \"DirectionalLight\",\n        \"PointLight\",\n        \"Script\",\n        \"Shape\",\n        \"Sound\",\n        \"SpotLight\",\n        \"WorldInfo\",\n        // common nodes\n        \"CylinderSensor\",\n        \"PlaneSensor\",\n        \"ProximitySensor\",\n        \"SphereSensor\",\n        \"TimeSensor\",\n        \"TouchSensor\",\n        \"VisibilitySensor\",\n        // sensors\n        \"Box\",\n        \"Cone\",\n        \"Cylinder\",\n        \"ElevationGrid\",\n        \"Extrusion\",\n        \"IndexedFaceSet\",\n        \"IndexedLineSet\",\n        \"PointSet\",\n        \"Sphere\",\n        // geometries\n        \"Color\",\n        \"Coordinate\",\n        \"Normal\",\n        \"TextureCoordinate\",\n        // geometric properties\n        \"Appearance\",\n        \"FontStyle\",\n        \"ImageTexture\",\n        \"Material\",\n        \"MovieTexture\",\n        \"PixelTexture\",\n        \"TextureTransform\",\n        // appearance\n        \"ColorInterpolator\",\n        \"CoordinateInterpolator\",\n        \"NormalInterpolator\",\n        \"OrientationInterpolator\",\n        \"PositionInterpolator\",\n        \"ScalarInterpolator\",\n        // interpolators\n        \"Background\",\n        \"Fog\",\n        \"NavigationInfo\",\n        \"Viewpoint\",\n        // bindable nodes\n        \"Text\"\n        // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ];\n      const Version = createToken({\n        name: \"Version\",\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: \"NodeName\",\n        pattern: new RegExp(nodeTypes.join(\"|\")),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: \"DEF\",\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: \"USE\",\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: \"ROUTE\",\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: \"TO\",\n        pattern: /TO/,\n        longer_alt: Identifier\n      });\n      const StringLiteral = createToken({\n        name: \"StringLiteral\",\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({ name: \"HexLiteral\", pattern: /0[xX][0-9a-fA-F]+/ });\n      const NumberLiteral = createToken({ name: \"NumberLiteral\", pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/ });\n      const TrueLiteral = createToken({ name: \"TrueLiteral\", pattern: /TRUE/ });\n      const FalseLiteral = createToken({ name: \"FalseLiteral\", pattern: /FALSE/ });\n      const NullLiteral = createToken({ name: \"NullLiteral\", pattern: /NULL/ });\n      const LSquare = createToken({ name: \"LSquare\", pattern: /\\[/ });\n      const RSquare = createToken({ name: \"RSquare\", pattern: /]/ });\n      const LCurly = createToken({ name: \"LCurly\", pattern: /{/ });\n      const RCurly = createToken({ name: \"RCurly\", pattern: /}/ });\n      const Comment = createToken({\n        name: \"Comment\",\n        pattern: /#.*/,\n        group: Lexer.SKIPPED\n      });\n      const WhiteSpace = createToken({\n        name: \"WhiteSpace\",\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED\n      });\n      const tokens = [\n        WhiteSpace,\n        // keywords appear before the Identifier\n        NodeName,\n        DEF,\n        USE,\n        ROUTE,\n        TO,\n        TrueLiteral,\n        FalseLiteral,\n        NullLiteral,\n        // the Identifier must appear after the keywords because all keywords are valid identifiers\n        Version,\n        Identifier,\n        RouteIdentifier,\n        StringLiteral,\n        HexLiteral,\n        NumberLiteral,\n        LSquare,\n        RSquare,\n        LCurly,\n        RCurly,\n        Comment\n      ];\n      const tokenVocabulary = {};\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n      return { tokens, tokenVocabulary };\n    }\n    function createVisitor(BaseVRMLVisitor) {\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function(ctx) {\n          const data2 = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data2.nodes.push(this.visit(node));\n          }\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data2.routes.push(this.visit(route));\n            }\n          }\n          return data2;\n        },\n        version: function(ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function(ctx) {\n          const data2 = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data2.fields.push(this.visit(field));\n            }\n          }\n          if (ctx.def) {\n            data2.DEF = this.visit(ctx.def[0]);\n          }\n          return data2;\n        },\n        field: function(ctx) {\n          const data2 = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result;\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          }\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n          data2.type = result.type;\n          data2.values = result.values;\n          return data2;\n        },\n        def: function(ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function(ctx) {\n          return { USE: (ctx.Identifier || ctx.NodeName)[0].image };\n        },\n        singleFieldValue: function(ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function(ctx) {\n          return processField(this, ctx);\n        },\n        route: function(ctx) {\n          const data2 = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data2;\n        }\n      });\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n        if (ctx.node) {\n          field.type = \"node\";\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n        if (ctx.use) {\n          field.type = \"use\";\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n        if (ctx.StringLiteral) {\n          field.type = \"string\";\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, \"\"));\n          }\n        }\n        if (ctx.NumberLiteral) {\n          field.type = \"number\";\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n        if (ctx.HexLiteral) {\n          field.type = \"hex\";\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n        if (ctx.TrueLiteral) {\n          field.type = \"boolean\";\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === \"TRUE\")\n              field.values.push(true);\n          }\n        }\n        if (ctx.FalseLiteral) {\n          field.type = \"boolean\";\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === \"FALSE\")\n              field.values.push(false);\n          }\n        }\n        if (ctx.NullLiteral) {\n          field.type = \"null\";\n          ctx.NullLiteral.forEach(function() {\n            field.values.push(null);\n          });\n        }\n        return field;\n      }\n      return new VRMLToASTVisitor();\n    }\n    function parseTree(tree2) {\n      const nodes = tree2.nodes;\n      const scene2 = new Scene();\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      }\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D)\n          scene2.add(object);\n        if (node.name === \"WorldInfo\")\n          scene2.userData.worldInfo = object;\n      }\n      return scene2;\n    }\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        if (field.type === \"node\") {\n          const fieldValues = field.values;\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n    function getNode(node) {\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n      if (node.build !== void 0)\n        return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    }\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n      switch (nodeName) {\n        case \"Group\":\n        case \"Transform\":\n        case \"Collision\":\n          build = buildGroupingNode(node);\n          break;\n        case \"Background\":\n          build = buildBackgroundNode(node);\n          break;\n        case \"Shape\":\n          build = buildShapeNode(node);\n          break;\n        case \"Appearance\":\n          build = buildAppearanceNode(node);\n          break;\n        case \"Material\":\n          build = buildMaterialNode(node);\n          break;\n        case \"ImageTexture\":\n          build = buildImageTextureNode(node);\n          break;\n        case \"PixelTexture\":\n          build = buildPixelTextureNode(node);\n          break;\n        case \"TextureTransform\":\n          build = buildTextureTransformNode(node);\n          break;\n        case \"IndexedFaceSet\":\n          build = buildIndexedFaceSetNode(node);\n          break;\n        case \"IndexedLineSet\":\n          build = buildIndexedLineSetNode(node);\n          break;\n        case \"PointSet\":\n          build = buildPointSetNode(node);\n          break;\n        case \"Box\":\n          build = buildBoxNode(node);\n          break;\n        case \"Cone\":\n          build = buildConeNode(node);\n          break;\n        case \"Cylinder\":\n          build = buildCylinderNode(node);\n          break;\n        case \"Sphere\":\n          build = buildSphereNode(node);\n          break;\n        case \"ElevationGrid\":\n          build = buildElevationGridNode(node);\n          break;\n        case \"Extrusion\":\n          build = buildExtrusionNode(node);\n          break;\n        case \"Color\":\n        case \"Coordinate\":\n        case \"Normal\":\n        case \"TextureCoordinate\":\n          build = buildGeometricNode(node);\n          break;\n        case \"WorldInfo\":\n          build = buildWorldInfoNode(node);\n          break;\n        case \"Anchor\":\n        case \"Billboard\":\n        case \"Inline\":\n        case \"LOD\":\n        case \"Switch\":\n        case \"AudioClip\":\n        case \"DirectionalLight\":\n        case \"PointLight\":\n        case \"Script\":\n        case \"Sound\":\n        case \"SpotLight\":\n        case \"CylinderSensor\":\n        case \"PlaneSensor\":\n        case \"ProximitySensor\":\n        case \"SphereSensor\":\n        case \"TimeSensor\":\n        case \"TouchSensor\":\n        case \"VisibilitySensor\":\n        case \"Text\":\n        case \"FontStyle\":\n        case \"MovieTexture\":\n        case \"ColorInterpolator\":\n        case \"CoordinateInterpolator\":\n        case \"NormalInterpolator\":\n        case \"OrientationInterpolator\":\n        case \"PositionInterpolator\":\n        case \"ScalarInterpolator\":\n        case \"Fog\":\n        case \"NavigationInfo\":\n        case \"Viewpoint\":\n          break;\n        default:\n          console.warn(\"THREE.VRMLLoader: Unknown node:\", nodeName);\n          break;\n      }\n      if (build !== void 0 && node.DEF !== void 0 && build.hasOwnProperty(\"name\") === true) {\n        build.name = node.DEF;\n      }\n      return build;\n    }\n    function buildGroupingNode(node) {\n      const object = new Group();\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bboxCenter\":\n            break;\n          case \"bboxSize\":\n            break;\n          case \"center\":\n            break;\n          case \"children\":\n            parseFieldChildren(fieldValues, object);\n            break;\n          case \"collide\":\n            break;\n          case \"rotation\":\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n          case \"scale\":\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"scaleOrientation\":\n            break;\n          case \"translation\":\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"proxy\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return object;\n    }\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"groundAngle\":\n            groundAngle = fieldValues;\n            break;\n          case \"groundColor\":\n            groundColor = fieldValues;\n            break;\n          case \"backUrl\":\n            break;\n          case \"bottomUrl\":\n            break;\n          case \"frontUrl\":\n            break;\n          case \"leftUrl\":\n            break;\n          case \"rightUrl\":\n            break;\n          case \"topUrl\":\n            break;\n          case \"skyAngle\":\n            skyAngle = fieldValues;\n            break;\n          case \"skyColor\":\n            skyColor = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const radius = 1e4;\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({ fog: false, side: BackSide, depthWrite: false, depthTest: false });\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      }\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      }\n      group.renderOrder = -Infinity;\n      return group;\n    }\n    function buildShapeNode(node) {\n      const fields = node.fields;\n      let material = new MeshBasicMaterial({ color: 0 });\n      let geometry;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"appearance\":\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n            break;\n          case \"geometry\":\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      let object;\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n        if (type === \"points\") {\n          const pointsMaterial = new PointsMaterial({ color: 16777215 });\n          if (geometry.attributes.color !== void 0) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === \"line\") {\n          const lineMaterial = new LineBasicMaterial({ color: 16777215 });\n          if (geometry.attributes.color !== void 0) {\n            lineMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          if (geometry._solid !== void 0) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          }\n          if (geometry.attributes.color !== void 0) {\n            material.vertexColors = true;\n          }\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D();\n        object.visible = false;\n      }\n      return object;\n    }\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"material\":\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor)\n                material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor)\n                material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess)\n                material.shininess = materialData.shininess;\n              if (materialData.specularColor)\n                material.specular.copy(materialData.specularColor);\n              if (materialData.transparency)\n                material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0)\n                material.transparent = true;\n            } else {\n              material = new MeshBasicMaterial({ color: 0 });\n            }\n            break;\n          case \"texture\":\n            const textureNode = fieldValues[0];\n            if (textureNode !== null) {\n              if (textureNode.name === \"ImageTexture\" || textureNode.name === \"PixelTexture\") {\n                material.map = getNode(textureNode);\n              } else {\n              }\n            }\n            break;\n          case \"textureTransform\":\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (material.map) {\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1;\n              break;\n            case TEXTURE_TYPE.RGB:\n              material.color.set(16777215);\n              break;\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(16777215);\n              material.opacity = 1;\n              break;\n            default:\n          }\n          delete material.map.__type;\n        }\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n      return material;\n    }\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"ambientIntensity\":\n            break;\n          case \"diffuseColor\":\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"emissiveColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"shininess\":\n            materialData.shininess = fieldValues[0];\n            break;\n          case \"specularColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"transparency\":\n            materialData.transparency = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return materialData;\n    }\n    function parseHexColor(hex, textureType, color) {\n      let value;\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          value = parseInt(\"0x\" + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt(\"0x\" + hex.substring(4, 6));\n          break;\n        case TEXTURE_TYPE.RGB:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = 1;\n          break;\n        case TEXTURE_TYPE.RGBA:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = parseInt(\"0x\" + hex.substring(8, 10));\n          break;\n        default:\n      }\n    }\n    function getTextureType(num_components) {\n      let type;\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n        default:\n      }\n      return type;\n    }\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"image\":\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data2 = new Uint8Array(4 * width * height);\n            const color = { r: 0, g: 0, b: 0, a: 0 };\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data2[stride + 0] = color.r;\n              data2[stride + 1] = color.g;\n              data2[stride + 2] = color.b;\n              data2[stride + 3] = color.a;\n            }\n            texture = new DataTexture(data2, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType;\n            break;\n          case \"repeatS\":\n            if (fieldValues[0] === false)\n              wrapS = ClampToEdgeWrapping;\n            break;\n          case \"repeatT\":\n            if (fieldValues[0] === false)\n              wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n      return texture;\n    }\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"url\":\n            const url = fieldValues[0];\n            if (url)\n              texture = textureLoader.load(url);\n            break;\n          case \"repeatS\":\n            if (fieldValues[0] === false)\n              wrapS = ClampToEdgeWrapping;\n            break;\n          case \"repeatT\":\n            if (fieldValues[0] === false)\n              wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n      return texture;\n    }\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"center\":\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n          case \"rotation\":\n            transformData.rotation = fieldValues[0];\n            break;\n          case \"scale\":\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n          case \"translation\":\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return transformData;\n    }\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"title\":\n            worldInfo.title = fieldValues[0];\n            break;\n          case \"info\":\n            worldInfo.info = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return worldInfo;\n    }\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true, solid = true, creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true, normalPerVertex = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          case \"normal\":\n            const normalNode = fieldValues[0];\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n            break;\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"convex\":\n            break;\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"normalIndex\":\n            normalIndex = fieldValues;\n            break;\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"texCoordIndex\":\n            texCoordIndex = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (coordIndex === void 0) {\n        console.warn(\"THREE.VRMLLoader: Missing coordIndex.\");\n        return new BufferGeometry();\n      }\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n      if (normal) {\n        if (normalPerVertex === true) {\n          if (normalIndex && normalIndex.length > 0) {\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(\n              triangulatedCoordIndex,\n              triangulatedNormalIndex,\n              normal,\n              3\n            );\n          } else {\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          if (normalIndex && normalIndex.length > 0) {\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n      if (texCoord) {\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      if (colorAttribute)\n        geometry.setAttribute(\"color\", colorAttribute);\n      if (uvAttribute)\n        geometry.setAttribute(\"uv\", uvAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex);\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            const expandedColorIndex = expandLineIndex(colorIndex);\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            const flattenLineColors = flattenData(color, colorIndex);\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          } else {\n            const expandedLineColors = expandLineData(color, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          }\n        }\n      }\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      if (colorAttribute)\n        geometry.setAttribute(\"color\", colorAttribute);\n      geometry._type = \"line\";\n      return geometry;\n    }\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(coord, 3));\n      if (color)\n        geometry.setAttribute(\"color\", new Float32BufferAttribute(color, 3));\n      geometry._type = \"points\";\n      return geometry;\n    }\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"size\":\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n    function buildConeNode(node) {\n      let radius = 1, height = 2, openEnded = false;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bottom\":\n            openEnded = !fieldValues[0];\n            break;\n          case \"bottomRadius\":\n            radius = fieldValues[0];\n            break;\n          case \"height\":\n            height = fieldValues[0];\n            break;\n          case \"side\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n    function buildCylinderNode(node) {\n      let radius = 1, height = 2;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bottom\":\n            break;\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n          case \"height\":\n            height = fieldValues[0];\n            break;\n          case \"side\":\n            break;\n          case \"top\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"normal\":\n            const normalNode = fieldValues[0];\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n            break;\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n            break;\n          case \"height\":\n            height = fieldValues;\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"xDimension\":\n            xDimension = fieldValues[0];\n            break;\n          case \"xSpacing\":\n            xSpacing = fieldValues[0];\n            break;\n          case \"zDimension\":\n            zDimension = fieldValues[0];\n            break;\n          case \"zSpacing\":\n            zSpacing = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          const index = i * xDimension + j;\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z);\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          }\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          }\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      }\n      const indices = [];\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension;\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      }\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute;\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2];\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      }\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      }\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry.setAttribute(\"uv\", uvAttribute);\n      if (colorAttribute)\n        geometry.setAttribute(\"color\", colorAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"beginCap\":\n            beginCap = fieldValues[0];\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"convex\":\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"crossSection\":\n            crossSection = fieldValues;\n            break;\n          case \"endCap\":\n            endCap = fieldValues[0];\n            break;\n          case \"orientation\":\n            orientation = fieldValues;\n            break;\n          case \"scale\":\n            scale = fieldValues;\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"spine\":\n            spine = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1];\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1];\n          vertex.multiply(scaling);\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion);\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      }\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      }\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        }\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        }\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1);\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(\n                indexOffset + capIndices[i + 0],\n                indexOffset + capIndices[i + 2],\n                indexOffset + capIndices[i + 1]\n              );\n            } else {\n              indices.push(\n                indexOffset + capIndices[i + 0],\n                indexOffset + capIndices[i + 1],\n                indexOffset + capIndices[i + 2]\n              );\n            }\n          }\n        }\n      }\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node);\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D)\n          owner.add(object);\n      }\n    }\n    function triangulateFaceIndex(index, ccw) {\n      const indices = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3);\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n      return indices;\n    }\n    function triangulateFaceData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n      return triangulatedData;\n    }\n    function flattenData(data2, index) {\n      const flattenData2 = [];\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        flattenData2.push(x, y, z);\n      }\n      return flattenData2;\n    }\n    function expandLineIndex(index) {\n      const indices = [];\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2);\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n      return indices;\n    }\n    function expandLineData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n      return triangulatedData;\n    }\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n    function computeAttributeFromIndexedData(coordIndex, index, data2, itemSize) {\n      const array = [];\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        if (itemSize === 2) {\n          uvA.fromArray(data2, a * itemSize);\n          uvB.fromArray(data2, b * itemSize);\n          uvC.fromArray(data2, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data2, a * itemSize);\n          vB.fromArray(data2, b * itemSize);\n          vC.fromArray(data2, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n      return new Float32BufferAttribute(array, itemSize);\n    }\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n      return new Float32BufferAttribute(array, 3);\n    }\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n      return new Float32BufferAttribute(array, 3);\n    }\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0, index2 = 0;\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n    const ab = new Vector3();\n    const cb = new Vector3();\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {};\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === void 0)\n          vertexNormals[a] = [];\n        if (vertexNormals[b] === void 0)\n          vertexNormals[b] = [];\n        if (vertexNormals[c] === void 0)\n          vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      }\n      const normals = [];\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n      return new Float32BufferAttribute(normals, 3);\n    }\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n      return normal.normalize();\n    }\n    function toColorArray(colors) {\n      const array = [];\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n      return array;\n    }\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      }\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n          if (topDown === true) {\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n      geometry.setAttribute(\"color\", colorAttribute);\n    }\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    if (data.indexOf(\"#VRML V2.0\") === -1) {\n      throw Error(\"THREE.VRMLLexer: Version of VRML asset not supported.\");\n    }\n    const tree = generateVRMLTree(data);\n    const scene = parseTree(tree);\n    return scene;\n  }\n}\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens);\n  }\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error(\"THREE.VRMLLexer: Lexing errors detected.\");\n    }\n    return lexingResult;\n  }\n}\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary[\"Version\"];\n    const LCurly = tokenVocabulary[\"LCurly\"];\n    const RCurly = tokenVocabulary[\"RCurly\"];\n    const LSquare = tokenVocabulary[\"LSquare\"];\n    const RSquare = tokenVocabulary[\"RSquare\"];\n    const Identifier = tokenVocabulary[\"Identifier\"];\n    const RouteIdentifier = tokenVocabulary[\"RouteIdentifier\"];\n    const StringLiteral = tokenVocabulary[\"StringLiteral\"];\n    const HexLiteral = tokenVocabulary[\"HexLiteral\"];\n    const NumberLiteral = tokenVocabulary[\"NumberLiteral\"];\n    const TrueLiteral = tokenVocabulary[\"TrueLiteral\"];\n    const FalseLiteral = tokenVocabulary[\"FalseLiteral\"];\n    const NullLiteral = tokenVocabulary[\"NullLiteral\"];\n    const DEF = tokenVocabulary[\"DEF\"];\n    const USE = tokenVocabulary[\"USE\"];\n    const ROUTE = tokenVocabulary[\"ROUTE\"];\n    const TO = tokenVocabulary[\"TO\"];\n    const NodeName = tokenVocabulary[\"NodeName\"];\n    $.RULE(\"vrml\", function() {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function() {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function() {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE(\"version\", function() {\n      $.CONSUME(Version);\n    });\n    $.RULE(\"node\", function() {\n      $.OPTION(function() {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function() {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE(\"field\", function() {\n      $.CONSUME(Identifier);\n      $.OR2([\n        {\n          ALT: function() {\n            $.SUBRULE($.singleFieldValue);\n          }\n        },\n        {\n          ALT: function() {\n            $.SUBRULE($.multiFieldValue);\n          }\n        }\n      ]);\n    });\n    $.RULE(\"def\", function() {\n      $.CONSUME(DEF);\n      $.OR([\n        {\n          ALT: function() {\n            $.CONSUME(Identifier);\n          }\n        },\n        {\n          ALT: function() {\n            $.CONSUME(NodeName);\n          }\n        }\n      ]);\n    });\n    $.RULE(\"use\", function() {\n      $.CONSUME(USE);\n      $.OR([\n        {\n          ALT: function() {\n            $.CONSUME(Identifier);\n          }\n        },\n        {\n          ALT: function() {\n            $.CONSUME(NodeName);\n          }\n        }\n      ]);\n    });\n    $.RULE(\"singleFieldValue\", function() {\n      $.AT_LEAST_ONE(function() {\n        $.OR([\n          {\n            ALT: function() {\n              $.SUBRULE($.node);\n            }\n          },\n          {\n            ALT: function() {\n              $.SUBRULE($.use);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(StringLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(HexLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NumberLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(TrueLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(FalseLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NullLiteral);\n            }\n          }\n        ]);\n      });\n    });\n    $.RULE(\"multiFieldValue\", function() {\n      $.CONSUME(LSquare);\n      $.MANY(function() {\n        $.OR([\n          {\n            ALT: function() {\n              $.SUBRULE($.node);\n            }\n          },\n          {\n            ALT: function() {\n              $.SUBRULE($.use);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(StringLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(HexLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NumberLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NullLiteral);\n            }\n          }\n        ]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE(\"route\", function() {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n}\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n}\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport {\n  VRMLLoader\n};\n"]},"metadata":{},"sourceType":"module"}