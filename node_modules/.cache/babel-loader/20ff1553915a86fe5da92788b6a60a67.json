{"ast":null,"code":"var MirrorShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    side: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform int side;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 p = vUv;\", \"\tif (side == 0){\", \"\t\tif (p.x > 0.5) p.x = 1.0 - p.x;\", \"\t}else if (side == 1){\", \"\t\tif (p.x < 0.5) p.x = 1.0 - p.x;\", \"\t}else if (side == 2){\", \"\t\tif (p.y < 0.5) p.y = 1.0 - p.y;\", \"\t}else if (side == 3){\", \"\t\tif (p.y > 0.5) p.y = 1.0 - p.y;\", \"\t} \", \"\tvec4 color = texture2D(tDiffuse, p);\", \"\tgl_FragColor = color;\", \"}\"].join(\"\\n\")\n};\nexport { MirrorShader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/shaders/MirrorShader.js"],"names":["MirrorShader","uniforms","tDiffuse","value","side","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADF;AAERC,IAAAA,IAAI,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT;AAFE,GADS;AAKnBE,EAAAA,YAAY,EAAE,CACZ,mBADY,EAEZ,eAFY,EAGZ,YAHY,EAIZ,4EAJY,EAKZ,GALY,EAMZC,IANY,CAMP,IANO,CALK;AAYnBC,EAAAA,cAAc,EAAE,CACd,6BADc,EAEd,mBAFc,EAGd,mBAHc,EAId,eAJc,EAKd,gBALc,EAMd,kBANc,EAOd,mCAPc,EAQd,wBARc,EASd,mCATc,EAUd,wBAVc,EAWd,mCAXc,EAYd,wBAZc,EAad,mCAbc,EAcd,KAdc,EAed,uCAfc,EAgBd,wBAhBc,EAiBd,GAjBc,EAkBdD,IAlBc,CAkBT,IAlBS;AAZG,CAArB;AAgCA,SACEN,YADF","sourcesContent":["const MirrorShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    side: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform int side;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec2 p = vUv;\",\n    \"\tif (side == 0){\",\n    \"\t\tif (p.x > 0.5) p.x = 1.0 - p.x;\",\n    \"\t}else if (side == 1){\",\n    \"\t\tif (p.x < 0.5) p.x = 1.0 - p.x;\",\n    \"\t}else if (side == 2){\",\n    \"\t\tif (p.y < 0.5) p.y = 1.0 - p.y;\",\n    \"\t}else if (side == 3){\",\n    \"\t\tif (p.y > 0.5) p.y = 1.0 - p.y;\",\n    \"\t} \",\n    \"\tvec4 color = texture2D(tDiffuse, p);\",\n    \"\tgl_FragColor = color;\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  MirrorShader\n};\n"]},"metadata":{},"sourceType":"module"}