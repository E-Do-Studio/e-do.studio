{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const RGBE_RETURN_FAILURE = -1,\n          rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n          break;\n\n        case rgbe_write_error:\n          console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n          break;\n\n        case rgbe_format_error:\n          console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n          RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = \"\\n\",\n          fgets = function (buffer2, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer2.pos,\n          i = -1,\n          len = 0,\n          s = \"\",\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        if (false !== consume) buffer2.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n          RGBE_ReadHeader = function (buffer2) {\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            header = {\n        valid: 0,\n        string: \"\",\n        comments: \"\",\n        programtype: \"RGBE\",\n        format: \"\",\n        gamma: 1,\n        exposure: 1,\n        width: 0,\n        height: 0\n      };\n      let line, match;\n\n      if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n        return rgbe_error(rgbe_read_error, \"no header found\");\n      }\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, \"bad initial token\");\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + \"\\n\";\n\n      while (true) {\n        line = fgets(buffer2);\n        if (false === line) break;\n        header.string += line + \"\\n\";\n\n        if (\"#\" === line.charAt(0)) {\n          header.comments += line + \"\\n\";\n          continue;\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1];\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, \"missing format specifier\");\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer2, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 32767 || // this file is not run length encoded\n      2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128) {\n        return new Uint8Array(buffer2);\n      }\n\n      if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n        return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h;\n\n      while (num_scanlines > 0 && pos < buffer2.byteLength) {\n        if (pos + 4 > buffer2.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer2[pos++];\n        rgbeStart[1] = buffer2[pos++];\n        rgbeStart[2] = buffer2[pos++];\n        rgbeStart[3] = buffer2[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n        }\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer2.byteLength) {\n          count = buffer2[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, \"bad scanline data\");\n          }\n\n          if (isEncodedRun) {\n            const byteValue = buffer2[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            }\n          } else {\n            scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        }\n\n        const l = scanline_width;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n\n            data = floatArray;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/loaders/RGBELoader.js"],"names":["DataTextureLoader","HalfFloatType","DataUtils","FloatType","LinearFilter","RGBELoader","constructor","manager","type","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","buffer2","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","colorSpace","encoding","minFilter","magFilter","generateMipmaps","flipY"],"mappings":"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","sourcesContent":["import { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const RGBE_RETURN_FAILURE = -1, rgbe_read_error = 1, rgbe_write_error = 2, rgbe_format_error = 3, rgbe_memory_error = 4, rgbe_error = function(rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n          break;\n        case rgbe_write_error:\n          console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n          break;\n        case rgbe_format_error:\n          console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n          break;\n        default:\n        case rgbe_memory_error:\n          console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n      }\n      return RGBE_RETURN_FAILURE;\n    }, RGBE_VALID_PROGRAMTYPE = 1, RGBE_VALID_FORMAT = 2, RGBE_VALID_DIMENSIONS = 4, NEWLINE = \"\\n\", fgets = function(buffer2, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer2.pos, i = -1, len = 0, s = \"\", chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      }\n      if (-1 < i) {\n        if (false !== consume)\n          buffer2.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n      return false;\n    }, RGBE_ReadHeader = function(buffer2) {\n      const magic_token_re = /^#\\?(\\S+)/, gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, format_re = /^\\s*FORMAT=(\\S+)\\s*$/, dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/, header = {\n        valid: 0,\n        string: \"\",\n        comments: \"\",\n        programtype: \"RGBE\",\n        format: \"\",\n        gamma: 1,\n        exposure: 1,\n        width: 0,\n        height: 0\n      };\n      let line, match;\n      if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n        return rgbe_error(rgbe_read_error, \"no header found\");\n      }\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, \"bad initial token\");\n      }\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + \"\\n\";\n      while (true) {\n        line = fgets(buffer2);\n        if (false === line)\n          break;\n        header.string += line + \"\\n\";\n        if (\"#\" === line.charAt(0)) {\n          header.comments += line + \"\\n\";\n          continue;\n        }\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1];\n        }\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS)\n          break;\n      }\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, \"missing format specifier\");\n      }\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n      }\n      return header;\n    }, RGBE_ReadPixels_RLE = function(buffer2, w, h) {\n      const scanline_width = w;\n      if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 || // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128\n      ) {\n        return new Uint8Array(buffer2);\n      }\n      if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n        return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n      }\n      const data_rgba = new Uint8Array(4 * w * h);\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n      }\n      let offset = 0, pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h;\n      while (num_scanlines > 0 && pos < buffer2.byteLength) {\n        if (pos + 4 > buffer2.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n        rgbeStart[0] = buffer2[pos++];\n        rgbeStart[1] = buffer2[pos++];\n        rgbeStart[2] = buffer2[pos++];\n        rgbeStart[3] = buffer2[pos++];\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n        }\n        let ptr = 0, count;\n        while (ptr < ptr_end && pos < buffer2.byteLength) {\n          count = buffer2[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun)\n            count -= 128;\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, \"bad scanline data\");\n          }\n          if (isEncodedRun) {\n            const byteValue = buffer2[pos++];\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            }\n          } else {\n            scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        }\n        const l = scanline_width;\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n        num_scanlines--;\n      }\n      return data_rgba;\n    };\n    const RGBEByteToRGBFloat = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width, h = rgbe_header_info.height, image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n            data = floatArray;\n            type = FloatType;\n            break;\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n          default:\n            console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type\n        };\n      }\n    }\n    return null;\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture)\n            texture.colorSpace = \"srgb-linear\";\n          else\n            texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad)\n        onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport {\n  RGBELoader\n};\n"]},"metadata":{},"sourceType":"module"}