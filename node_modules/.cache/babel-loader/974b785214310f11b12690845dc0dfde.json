{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Git_Repo/E-Do-Studio/src/Hooks/viewportProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst viewportContext = /*#__PURE__*/React.createContext({});\n\nconst ViewportProvider = ({\n  children\n}) => {\n  _s();\n\n  // This is the exact same logic that we previously had in our hook\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const [height, setHeight] = React.useState(window.innerHeight);\n\n  const handleWindowResize = () => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n  /* Now we are dealing with a context instead of a Hook, so instead\n     of returning the width and height we store the values in the\n     value of the Provider */\n\n  return /*#__PURE__*/_jsxDEV(viewportContext.Provider, {\n    value: {\n      width,\n      height\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n/* Rewrite the \"useViewport\" hook to pull the width and height values\n   out of the context instead of calculating them itself */\n\n\n_s(ViewportProvider, \"vAGnFdFdurCehSBscD3dkx1WqBk=\");\n\n_c = ViewportProvider;\nexport const useViewport = () => {\n  _s2();\n\n  /* We can use the \"useContext\" Hook to acccess a context from within\n     another Hook, remember, Hooks are composable! */\n  const {\n    width,\n    height\n  } = React.useContext(viewportContext);\n  return {\n    width,\n    height\n  };\n};\n\n_s2(useViewport, \"nNvDMNlzxADpqeYJV0RHOhUIPL8=\");\n\nexport default ViewportProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewportProvider\");","map":{"version":3,"sources":["/Users/theodaguier/Git_Repo/E-Do-Studio/src/Hooks/viewportProvider.js"],"names":["React","viewportContext","createContext","ViewportProvider","children","width","setWidth","useState","window","innerWidth","height","setHeight","innerHeight","handleWindowResize","useEffect","addEventListener","removeEventListener","useViewport","useContext"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAe,gBAAGD,KAAK,CAACE,aAAN,CAAoB,EAApB,CAAxB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACzC;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,KAAK,CAACO,QAAN,CAAeC,MAAM,CAACC,UAAtB,CAA1B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,KAAK,CAACO,QAAN,CAAeC,MAAM,CAACI,WAAtB,CAA5B;;AAEA,QAAMC,kBAAkB,GAAG,MAAM;AAC/BP,IAAAA,QAAQ,CAACE,MAAM,CAACC,UAAR,CAAR;AACAE,IAAAA,SAAS,CAACH,MAAM,CAACI,WAAR,CAAT;AACD,GAHD;;AAKAZ,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpBN,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCF,kBAAlC;AACA,WAAO,MAAML,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCH,kBAArC,CAAb;AACD,GAHD,EAGG,EAHH;AAKA;AACF;AACA;;AAIE,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAACR,MAAAA,KAAD;AAAQK,MAAAA;AAAR,KAAjC;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3BD;AA+BA;AACA;;;GAhCMD,gB;;KAAAA,gB;AAiCN,OAAO,MAAMc,WAAW,GAAG,MAAM;AAAA;;AAC/B;AACF;AACE,QAAM;AAAEZ,IAAAA,KAAF;AAASK,IAAAA;AAAT,MAAoBV,KAAK,CAACkB,UAAN,CAAiBjB,eAAjB,CAA1B;AACA,SAAO;AAAEI,IAAAA,KAAF;AAASK,IAAAA;AAAT,GAAP;AACD,CALM;;IAAMO,W;;AAQb,eAAed,gBAAf","sourcesContent":["import React from 'react'\n\nconst viewportContext = React.createContext({});\n\nconst ViewportProvider = ({ children }) => {\n  // This is the exact same logic that we previously had in our hook\n\n  const [width, setWidth] = React.useState(window.innerWidth);\n  const [height, setHeight] = React.useState(window.innerHeight);\n\n  const handleWindowResize = () => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight);\n  }\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", handleWindowResize);\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  /* Now we are dealing with a context instead of a Hook, so instead\n     of returning the width and height we store the values in the\n     value of the Provider */\n  \n  \n  \n  return (\n    <viewportContext.Provider value={{width, height}}>\n      {children}\n    </viewportContext.Provider>\n  );\n};\n\n\n\n/* Rewrite the \"useViewport\" hook to pull the width and height values\n   out of the context instead of calculating them itself */\nexport const useViewport = () => {\n  /* We can use the \"useContext\" Hook to acccess a context from within\n     another Hook, remember, Hooks are composable! */\n  const { width, height } = React.useContext(viewportContext);\n  return { width, height };\n}\n\n\nexport default ViewportProvider\n\n"]},"metadata":{},"sourceType":"module"}