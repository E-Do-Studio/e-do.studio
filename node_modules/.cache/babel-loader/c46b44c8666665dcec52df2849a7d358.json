{"ast":null,"code":"import _get from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\n\nvar MMDPhysics = /*#__PURE__*/function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams) {\n    var constraintParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, MMDPhysics);\n\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0) this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n\n\n  _createClass(MMDPhysics, [{\n    key: \"update\",\n    value: function update(delta) {\n      var manager = this.manager;\n      var mesh = this.mesh;\n      var isNonDefaultScale = false;\n      var position = manager.allocThreeVector3();\n      var quaternion = manager.allocThreeQuaternion();\n      var scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n\n      var parent;\n\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      }\n\n      this._updateRigidBodies();\n\n      this._stepSimulation(delta);\n\n      this._updateBones();\n\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    }\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n\n      return this;\n    }\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n\n  }, {\n    key: \"warmup\",\n    value: function warmup(cycles) {\n      for (var i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n\n      return this;\n    }\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n\n  }, {\n    key: \"setGravity\",\n    value: function setGravity(gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    }\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n\n  }, {\n    key: \"createHelper\",\n    value: function createHelper() {\n      return new MMDPhysicsHelper(this.mesh, this);\n    } // private methods\n\n  }, {\n    key: \"_init\",\n    value: function _init(mesh, rigidBodyParams, constraintParams) {\n      var manager = this.manager;\n      var parent = mesh.parent;\n      if (parent !== null) mesh.parent = null;\n      var currentPosition = manager.allocThreeVector3();\n      var currentQuaternion = manager.allocThreeQuaternion();\n      var currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n\n      this._initRigidBodies(rigidBodyParams);\n\n      this._initConstraints(constraintParams);\n\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    }\n  }, {\n    key: \"_createWorld\",\n    value: function _createWorld() {\n      var config = new Ammo.btDefaultCollisionConfiguration();\n      var dispatcher = new Ammo.btCollisionDispatcher(config);\n      var cache = new Ammo.btDbvtBroadphase();\n      var solver = new Ammo.btSequentialImpulseConstraintSolver();\n      var world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    }\n  }, {\n    key: \"_initRigidBodies\",\n    value: function _initRigidBodies(rigidBodies) {\n      for (var i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    }\n  }, {\n    key: \"_initConstraints\",\n    value: function _initConstraints(constraints) {\n      for (var i = 0, il = constraints.length; i < il; i++) {\n        var params = constraints[i];\n        var bodyA = this.bodies[params.rigidBodyIndex1];\n        var bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    }\n  }, {\n    key: \"_stepSimulation\",\n    value: function _stepSimulation(delta) {\n      var unitStep = this.unitStep;\n      var stepTime = delta;\n      var maxStepNum = (delta / unitStep | 0) + 1;\n\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    }\n  }, {\n    key: \"_updateRigidBodies\",\n    value: function _updateRigidBodies() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    }\n  }, {\n    key: \"_updateBones\",\n    value: function _updateBones() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  }]);\n\n  return MMDPhysics;\n}();\n\nvar ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager() {\n    _classCallCheck(this, ResourceManager);\n\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n\n  _createClass(ResourceManager, [{\n    key: \"allocThreeVector3\",\n    value: function allocThreeVector3() {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n    }\n  }, {\n    key: \"freeThreeVector3\",\n    value: function freeThreeVector3(v) {\n      this.threeVector3s.push(v);\n    }\n  }, {\n    key: \"allocThreeMatrix4\",\n    value: function allocThreeMatrix4() {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n    }\n  }, {\n    key: \"freeThreeMatrix4\",\n    value: function freeThreeMatrix4(m) {\n      this.threeMatrix4s.push(m);\n    }\n  }, {\n    key: \"allocThreeQuaternion\",\n    value: function allocThreeQuaternion() {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n    }\n  }, {\n    key: \"freeThreeQuaternion\",\n    value: function freeThreeQuaternion(q) {\n      this.threeQuaternions.push(q);\n    }\n  }, {\n    key: \"allocThreeEuler\",\n    value: function allocThreeEuler() {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n    }\n  }, {\n    key: \"freeThreeEuler\",\n    value: function freeThreeEuler(e) {\n      this.threeEulers.push(e);\n    }\n  }, {\n    key: \"allocTransform\",\n    value: function allocTransform() {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    }\n  }, {\n    key: \"freeTransform\",\n    value: function freeTransform(t) {\n      this.transforms.push(t);\n    }\n  }, {\n    key: \"allocQuaternion\",\n    value: function allocQuaternion() {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    }\n  }, {\n    key: \"freeQuaternion\",\n    value: function freeQuaternion(q) {\n      this.quaternions.push(q);\n    }\n  }, {\n    key: \"allocVector3\",\n    value: function allocVector3() {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    }\n  }, {\n    key: \"freeVector3\",\n    value: function freeVector3(v) {\n      this.vector3s.push(v);\n    }\n  }, {\n    key: \"setIdentity\",\n    value: function setIdentity(t) {\n      t.setIdentity();\n    }\n  }, {\n    key: \"getBasis\",\n    value: function getBasis(t) {\n      var q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    }\n  }, {\n    key: \"getBasisAsMatrix3\",\n    value: function getBasisAsMatrix3(t) {\n      var q = this.getBasis(t);\n      var m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    }\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin(t) {\n      return t.getOrigin();\n    }\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    }\n  }, {\n    key: \"copyOrigin\",\n    value: function copyOrigin(t1, t2) {\n      var o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    }\n  }, {\n    key: \"setBasis\",\n    value: function setBasis(t, q) {\n      t.setRotation(q);\n    }\n  }, {\n    key: \"setBasisFromMatrix3\",\n    value: function setBasisFromMatrix3(t, m) {\n      var q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    }\n  }, {\n    key: \"setOriginFromArray3\",\n    value: function setOriginFromArray3(t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    }\n  }, {\n    key: \"setOriginFromThreeVector3\",\n    value: function setOriginFromThreeVector3(t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    }\n  }, {\n    key: \"setBasisFromArray3\",\n    value: function setBasisFromArray3(t, a) {\n      var thQ = this.allocThreeQuaternion();\n      var thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    }\n  }, {\n    key: \"setBasisFromThreeQuaternion\",\n    value: function setBasisFromThreeQuaternion(t, a) {\n      var q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    }\n  }, {\n    key: \"multiplyTransforms\",\n    value: function multiplyTransforms(t1, t2) {\n      var t = this.allocTransform();\n      this.setIdentity(t);\n      var m1 = this.getBasisAsMatrix3(t1);\n      var m2 = this.getBasisAsMatrix3(t2);\n      var o1 = this.getOrigin(t1);\n      var o2 = this.getOrigin(t2);\n      var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      var v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      var m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    }\n  }, {\n    key: \"inverseTransform\",\n    value: function inverseTransform(t) {\n      var t2 = this.allocTransform();\n      var m1 = this.getBasisAsMatrix3(t);\n      var o = this.getOrigin(t);\n      var m2 = this.transposeMatrix3(m1);\n      var v1 = this.negativeVector3(o);\n      var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    }\n  }, {\n    key: \"multiplyMatrices3\",\n    value: function multiplyMatrices3(m1, m2) {\n      var m3 = [];\n      var v10 = this.rowOfMatrix3(m1, 0);\n      var v11 = this.rowOfMatrix3(m1, 1);\n      var v12 = this.rowOfMatrix3(m1, 2);\n      var v20 = this.columnOfMatrix3(m2, 0);\n      var v21 = this.columnOfMatrix3(m2, 1);\n      var v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    }\n  }, {\n    key: \"addVector3\",\n    value: function addVector3(v1, v2) {\n      var v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    }\n  }, {\n    key: \"dotVectors3\",\n    value: function dotVectors3(v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    }\n  }, {\n    key: \"rowOfMatrix3\",\n    value: function rowOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    }\n  }, {\n    key: \"columnOfMatrix3\",\n    value: function columnOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    }\n  }, {\n    key: \"negativeVector3\",\n    value: function negativeVector3(v) {\n      var v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    }\n  }, {\n    key: \"multiplyMatrix3ByVector3\",\n    value: function multiplyMatrix3ByVector3(m, v) {\n      var v4 = this.allocVector3();\n      var v0 = this.rowOfMatrix3(m, 0);\n      var v1 = this.rowOfMatrix3(m, 1);\n      var v2 = this.rowOfMatrix3(m, 2);\n      var x = this.dotVectors3(v0, v);\n      var y = this.dotVectors3(v1, v);\n      var z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    }\n  }, {\n    key: \"transposeMatrix3\",\n    value: function transposeMatrix3(m) {\n      var m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    }\n  }, {\n    key: \"quaternionToMatrix3\",\n    value: function quaternionToMatrix3(q) {\n      var m = [];\n      var x = q.x();\n      var y = q.y();\n      var z = q.z();\n      var w = q.w();\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var xy = x * y;\n      var yz = y * z;\n      var zx = z * x;\n      var xw = x * w;\n      var yw = y * w;\n      var zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    }\n  }, {\n    key: \"matrix3ToQuaternion\",\n    value: function matrix3ToQuaternion(m) {\n      var t = m[0] + m[4] + m[8];\n      var s, x, y, z, w;\n\n      if (t > 0) {\n        s = Math.sqrt(t + 1) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n\n      var q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  }]);\n\n  return ResourceManager;\n}();\n\nvar RigidBody = /*#__PURE__*/function () {\n  function RigidBody(mesh, world, params, manager) {\n    _classCallCheck(this, RigidBody);\n\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n\n\n  _createClass(RigidBody, [{\n    key: \"reset\",\n    value: function reset() {\n      this._setTransformFromBone();\n\n      return this;\n    }\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n\n  }, {\n    key: \"updateFromBone\",\n    value: function updateFromBone() {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n\n      return this;\n    }\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n\n  }, {\n    key: \"updateBone\",\n    value: function updateBone() {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n\n      this._updateBoneRotation();\n\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n\n      this.bone.updateMatrixWorld(true);\n\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n\n      return this;\n    } // private methods\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n\n          default:\n            throw new Error(\"unknown shape type \" + p.shapeType);\n        }\n      }\n\n      var manager = this.manager;\n      var params = this.params;\n      var bones = this.mesh.skeleton.bones;\n      var bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n      var shape = generateShape(params);\n      var weight = params.type === 0 ? 0 : params.weight;\n      var localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n\n      var boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      var vector = manager.allocThreeVector3();\n      var boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      var form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      var state = new Ammo.btDefaultMotionState(form);\n      var info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      var body = new Ammo.btRigidBody(info);\n\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        body.setActivationState(4);\n      }\n\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    }\n  }, {\n    key: \"_getBoneTransform\",\n    value: function _getBoneTransform() {\n      var manager = this.manager;\n      var p = manager.allocThreeVector3();\n      var q = manager.allocThreeQuaternion();\n      var s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      var tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      var form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    }\n  }, {\n    key: \"_getWorldTransformForBone\",\n    value: function _getWorldTransformForBone() {\n      var manager = this.manager;\n      var tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    }\n  }, {\n    key: \"_setTransformFromBone\",\n    value: function _setTransformFromBone() {\n      var manager = this.manager;\n\n      var form = this._getBoneTransform();\n\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    }\n  }, {\n    key: \"_setPositionFromBone\",\n    value: function _setPositionFromBone() {\n      var manager = this.manager;\n\n      var form = this._getBoneTransform();\n\n      var tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form);\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    }\n  }, {\n    key: \"_updateBoneRotation\",\n    value: function _updateBoneRotation() {\n      var manager = this.manager;\n\n      var tr = this._getWorldTransformForBone();\n\n      var q = manager.getBasis(tr);\n      var thQ = manager.allocThreeQuaternion();\n      var thQ2 = manager.allocThreeQuaternion();\n      var thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ);\n      thQ3.setFromRotationMatrix(this.bone.matrix);\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    }\n  }, {\n    key: \"_updateBonePosition\",\n    value: function _updateBonePosition() {\n      var manager = this.manager;\n\n      var tr = this._getWorldTransformForBone();\n\n      var thV = manager.allocThreeVector3();\n      var o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  }]);\n\n  return RigidBody;\n}();\n\nvar Constraint = /*#__PURE__*/function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    _classCallCheck(this, Constraint);\n\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n\n    this._init();\n  } // private method\n\n\n  _createClass(Constraint, [{\n    key: \"_init\",\n    value: function _init() {\n      var manager = this.manager;\n      var params = this.params;\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      var formA = manager.allocTransform();\n      var formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      var formInverseA = manager.inverseTransform(formA);\n      var formInverseB = manager.inverseTransform(formB);\n      var formA2 = manager.multiplyTransforms(formInverseA, form);\n      var formB2 = manager.multiplyTransforms(formInverseB, form);\n      var constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      var lll = manager.allocVector3();\n      var lul = manager.allocVector3();\n      var all = manager.allocVector3();\n      var aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n\n      for (var i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n\n      for (var _i = 0; _i < 3; _i++) {\n        if (params.springRotation[_i] !== 0) {\n          constraint.enableSpring(_i + 3, true);\n          constraint.setStiffness(_i + 3, params.springRotation[_i]);\n        }\n      }\n\n      if (constraint.setParam !== void 0) {\n        for (var _i2 = 0; _i2 < 6; _i2++) {\n          constraint.setParam(2, 0.475, _i2);\n        }\n      }\n\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  }]);\n\n  return Constraint;\n}();\n\nvar _position = /* @__PURE__ */new Vector3();\n\nvar _quaternion = /* @__PURE__ */new Quaternion();\n\nvar _scale = /* @__PURE__ */new Vector3();\n\nvar _matrixWorldInv = /* @__PURE__ */new Matrix4();\n\nvar MMDPhysicsHelper = /*#__PURE__*/function (_Object3D) {\n  _inherits(MMDPhysicsHelper, _Object3D);\n\n  var _super = _createSuper(MMDPhysicsHelper);\n\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  function MMDPhysicsHelper(mesh, physics) {\n    var _this;\n\n    _classCallCheck(this, MMDPhysicsHelper);\n\n    _this = _super.call(this);\n    _this.root = mesh;\n    _this.physics = physics;\n\n    _this.matrix.copy(mesh.matrixWorld);\n\n    _this.matrixAutoUpdate = false;\n    _this.materials = [];\n\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(16746632),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(8978312),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(8947967),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    _this._init();\n\n    return _this;\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n\n\n  _createClass(MMDPhysicsHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      var materials = this.materials;\n      var children = this.children;\n\n      for (var i = 0; i < materials.length; i++) {\n        materials[i].dispose();\n      }\n\n      for (var _i3 = 0; _i3 < children.length; _i3++) {\n        var child = children[_i3];\n        if (child.isMesh) child.geometry.dispose();\n      }\n    }\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      var mesh = this.root;\n\n      if (this.visible) {\n        var bodies = this.physics.bodies;\n\n        _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n\n        for (var i = 0, il = bodies.length; i < il; i++) {\n          var body = bodies[i].body;\n          var child = this.children[i];\n          var tr = body.getCenterOfMassTransform();\n          var origin = tr.getOrigin();\n          var rotation = tr.getRotation();\n          child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n          child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n        }\n      }\n\n      this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n\n      _get(_getPrototypeOf(MMDPhysicsHelper.prototype), \"updateMatrixWorld\", this).call(this, force);\n    } // private method\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var bodies = this.physics.bodies;\n\n      function createGeometry(param2) {\n        switch (param2.shapeType) {\n          case 0:\n            return new SphereGeometry(param2.width, 16, 8);\n\n          case 1:\n            return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n\n          case 2:\n            return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n\n          default:\n            return null;\n        }\n      }\n\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var param = bodies[i].params;\n        this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  }]);\n\n  return MMDPhysicsHelper;\n}(Object3D);\n\nexport { MMDPhysics };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/animation/MMDPhysics.js"],"names":["Vector3","Matrix4","Quaternion","Euler","Bone","Object3D","MeshBasicMaterial","Color","BoxGeometry","SphereGeometry","Mesh","CapsuleGeometry","MMDPhysics","mesh","rigidBodyParams","constraintParams","params","Ammo","Error","manager","ResourceManager","unitStep","maxStepNum","gravity","copy","world","bodies","constraints","_init","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","i","il","length","reset","cycles","update","setGravity","btVector3","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","m","q","e","btTransform","t","btQuaternion","setIdentity","allocQuaternion","getBasis","getRotation","quaternionToMatrix3","freeQuaternion","getOrigin","setValue","t1","t2","o","setOrigin","setRotation","matrix3ToQuaternion","setBasis","a","thQ","thE","allocThreeEuler","setBasisFromThreeQuaternion","setFromEuler","freeThreeEuler","setX","setY","setZ","setW","w","allocTransform","m1","getBasisAsMatrix3","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","setBasisFromMatrix3","freeVector3","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","allocVector3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","shape","weight","localInertia","calculateLocalInertia","setOriginFromArray3","setBasisFromArray3","rotation","vector","boneForm","setOriginFromThreeVector3","getWorldPosition","form","multiplyTransforms","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","inverseTransform","freeTransform","tr","getCenterOfMassTransform","_getBoneTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","copyOrigin","_getWorldTransformForBone","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","_position","_quaternion","_scale","_matrixWorldInv","physics","root","matrixAutoUpdate","materials","color","wireframe","depthTest","depthWrite","opacity","transparent","children","dispose","child","isMesh","geometry","force","visible","compose","invert","origin","applyMatrix4","createGeometry","param2","param","add"],"mappings":"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","sourcesContent":["import { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0)\n      this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n    let parent;\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null)\n        mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n    this._updateRigidBodies();\n    this._stepSimulation(delta);\n    this._updateBones();\n    if (isNonDefaultScale) {\n      if (parent !== null)\n        mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n    return this;\n  }\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n    return this;\n  }\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  }\n  // private methods\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n    const parent = mesh.parent;\n    if (parent !== null)\n      mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n    this._initRigidBodies(rigidBodyParams);\n    this._initConstraints(constraintParams);\n    if (parent !== null)\n      mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n}\nclass ResourceManager {\n  constructor() {\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n  setIdentity(t) {\n    t.setIdentity();\n  }\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n    if (t > 0) {\n      s = Math.sqrt(t + 1) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n}\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone();\n    return this;\n  }\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n    return this;\n  }\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n    this._updateBoneRotation();\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n    this.bone.updateMatrixWorld(true);\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n    return this;\n  }\n  // private methods\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n        default:\n          throw new Error(\"unknown shape type \" + p.shapeType);\n      }\n    }\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n      body.setActivationState(4);\n    }\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n  _setTransformFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n  _setPositionFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n  _updateBoneRotation() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n  _updateBonePosition() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n}\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n    if (constraint.setParam !== void 0) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n}\nconst _position = /* @__PURE__ */ new Vector3();\nconst _quaternion = /* @__PURE__ */ new Quaternion();\nconst _scale = /* @__PURE__ */ new Vector3();\nconst _matrixWorldInv = /* @__PURE__ */ new Matrix4();\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(16746632),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8978312),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8947967),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this._init();\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh)\n        child.geometry.dispose();\n    }\n  }\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  }\n  // private method\n  _init() {\n    var bodies = this.physics.bodies;\n    function createGeometry(param2) {\n      switch (param2.shapeType) {\n        case 0:\n          return new SphereGeometry(param2.width, 16, 8);\n        case 1:\n          return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n        case 2:\n          return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n        default:\n          return null;\n      }\n    }\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n}\nexport {\n  MMDPhysics\n};\n"]},"metadata":{},"sourceType":"module"}