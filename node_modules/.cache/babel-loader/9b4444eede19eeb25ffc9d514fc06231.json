{"ast":null,"code":"import { Loader, FileLoader, ShapePath, Vector2, Path, Matrix3, Vector3, ShapeUtils, Box2, Shape, BufferGeometry, Float32BufferAttribute } from \"three\";\n\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.defaultDPI = 90;\n    this.defaultUnit = \"px\";\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    const scope = this;\n\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n\n      switch (node.nodeName) {\n        case \"svg\":\n          break;\n\n        case \"style\":\n          parseCSSStylesheet(node);\n          break;\n\n        case \"g\":\n          style = parseStyle(node, style);\n          break;\n\n        case \"path\":\n          style = parseStyle(node, style);\n          if (node.hasAttribute(\"d\")) path = parsePathNode(node);\n          break;\n\n        case \"rect\":\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n\n        case \"polygon\":\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n\n        case \"polyline\":\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n\n        case \"circle\":\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n\n        case \"ellipse\":\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n\n        case \"line\":\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n\n        case \"defs\":\n          traverseChildNodes = false;\n          break;\n\n        case \"mask\":\n          traverseChildNodes = false;\n          break;\n\n        case \"use\":\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n\n          break;\n\n        default:\n      }\n\n      if (path) {\n        if (style.fill !== void 0 && style.fill !== \"none\") {\n          path.color.setStyle(style.fill);\n        }\n\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node,\n          style\n        };\n      }\n\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n\n      if (transform) {\n        transformStack.pop();\n\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute(\"d\");\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data2 = command.substr(1).trim();\n\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n\n        let numbers;\n\n        switch (type) {\n          case \"M\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"H\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"V\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"L\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"C\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"S\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"Q\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"T\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"A\":\n            numbers = parseFloats(data2, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"m\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"h\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"v\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"l\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"c\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"s\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"q\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"t\":\n            numbers = parseFloats(data2);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"a\":\n            numbers = parseFloats(data2, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case \"Z\":\n          case \"z\":\n            path.currentPath.autoClose = true;\n\n            if (path.currentPath.curves.length > 0) {\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n\n            break;\n\n          default:\n            console.warn(command);\n        }\n\n        doSetFirstPoint = false;\n      }\n\n      return path;\n    }\n\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i2 => i2.trim());\n\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        path.lineTo(end.x, end.y);\n        return;\n      }\n\n      x_axis_rotation = x_axis_rotation * Math.PI / 180;\n      rx = Math.abs(rx);\n      ry = Math.abs(ry);\n      const dx2 = (start.x - end.x) / 2;\n      const dy2 = (start.y - end.y) / 2;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p;\n      const cr = x1ps / rxs + y1ps / rys;\n\n      if (cr > 1) {\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx;\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"x\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"y\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || node.getAttribute(\"ry\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || node.getAttribute(\"rx\") || 0);\n      const w = parseFloatWithUnits(node.getAttribute(\"width\"));\n      const h = parseFloatWithUnits(node.getAttribute(\"height\"));\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath();\n      path.moveTo(x + rx, y);\n      path.lineTo(x + w - rx, y);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      }\n\n      path.lineTo(x + w, y + h - ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      }\n\n      path.lineTo(x + rx, y + h);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      }\n\n      path.lineTo(x, y + ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n\n      return path;\n    }\n\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const r = parseFloatWithUnits(node.getAttribute(\"r\") || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute(\"x1\") || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute(\"y1\") || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute(\"x2\") || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute(\"y2\") || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n\n    function parseStyle(node, style) {\n      style = Object.assign({}, style);\n      let stylesheetStyles = {};\n\n      if (node.hasAttribute(\"class\")) {\n        const classSelectors = node.getAttribute(\"class\").split(/\\s/).filter(Boolean).map(i => i.trim());\n\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\".\" + classSelectors[i]]);\n        }\n      }\n\n      if (node.hasAttribute(\"id\")) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\"#\" + node.getAttribute(\"id\")]);\n      }\n\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === void 0) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith(\"url\")) console.warn(\"SVGLoader: url access in attributes is not implemented.\");\n            return v;\n          };\n        }\n\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== \"\") style[jsName] = adjustFunction(node.style[svgName]);\n      }\n\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n\n      addStyle(\"fill\", \"fill\");\n      addStyle(\"fill-opacity\", \"fillOpacity\", clamp);\n      addStyle(\"fill-rule\", \"fillRule\");\n      addStyle(\"opacity\", \"opacity\", clamp);\n      addStyle(\"stroke\", \"stroke\");\n      addStyle(\"stroke-opacity\", \"strokeOpacity\", clamp);\n      addStyle(\"stroke-width\", \"strokeWidth\", positive);\n      addStyle(\"stroke-linejoin\", \"strokeLineJoin\");\n      addStyle(\"stroke-linecap\", \"strokeLineCap\");\n      addStyle(\"stroke-miterlimit\", \"strokeMiterLimit\", positive);\n      addStyle(\"visibility\", \"visibility\");\n      return style;\n    }\n\n    function getReflection(a, b) {\n      return a - (b - a);\n    }\n\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== \"string\") {\n        throw new TypeError(\"Invalid input: \" + typeof input);\n      }\n\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      };\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = \"\",\n          exponent = \"\";\n      const result = [];\n\n      function throwSyntaxError(current2, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current2 + '\" at index ' + i + \".\");\n        error.partial = partial;\n        throw error;\n      }\n\n      function newNumber() {\n        if (number !== \"\") {\n          if (exponent === \"\") result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n\n        number = \"\";\n        exponent = \"\";\n      }\n\n      let current;\n      const length = input.length;\n\n      for (let i = 0; i < length; i++) {\n        current = input[i];\n\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        }\n\n        if (state === SEP) {\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          }\n\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          }\n\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n\n            seenComma = true;\n          }\n        }\n\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        }\n\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n\n          if (RE.POINT.test(current) && number[number.length - 1] === \".\") {\n            throwSyntaxError(current, i, result);\n          }\n        }\n\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n\n          if (RE.SIGN.test(current)) {\n            if (exponent === \"\") {\n              exponent += current;\n              continue;\n            }\n\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        }\n\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      }\n\n      newNumber();\n      return result;\n    }\n\n    const units = [\"mm\", \"cm\", \"in\", \"pt\", \"pc\", \"px\"];\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n\n    function parseFloatWithUnits(string) {\n      let theUnit = \"px\";\n\n      if (typeof string === \"string\" || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n\n      let scale = void 0;\n\n      if (theUnit === \"px\" && scope.defaultUnit !== \"px\") {\n        scale = unitConversion[\"in\"][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n\n        if (scale < 0) {\n          scale = unitConversion[theUnit][\"in\"] * scope.defaultDPI;\n        }\n      }\n\n      return scale * parseFloat(string);\n    }\n\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute(\"transform\") || node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\")))) {\n        return null;\n      }\n\n      const transform = parseNodeTransform(node);\n\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform2 = tempTransform0;\n\n      if (node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\"))) {\n        const tx = parseFloatWithUnits(node.getAttribute(\"x\"));\n        const ty = parseFloatWithUnits(node.getAttribute(\"y\"));\n        transform.translate(tx, ty);\n      }\n\n      if (node.hasAttribute(\"transform\")) {\n        const transformsTexts = node.getAttribute(\"transform\").split(\")\");\n\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === \"\") continue;\n          const openParPos = transformText.indexOf(\"(\");\n          const closeParPos = transformText.length;\n\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform2.identity();\n\n            switch (transformType) {\n              case \"translate\":\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n\n                  currentTransform2.translate(tx, ty);\n                }\n\n                break;\n\n              case \"rotate\":\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0;\n                  angle = -array[0] * Math.PI / 180;\n\n                  if (array.length >= 3) {\n                    cx = array[1];\n                    cy = array[2];\n                  }\n\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform2.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n\n                break;\n\n              case \"scale\":\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n\n                  currentTransform2.scale(scaleX, scaleY);\n                }\n\n                break;\n\n              case \"skewX\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case \"skewY\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case \"matrix\":\n                if (array.length === 6) {\n                  currentTransform2.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n\n                break;\n            }\n          }\n\n          transform.premultiply(currentTransform2);\n        }\n      }\n\n      return transform;\n    }\n\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn(\"SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.\");\n            }\n\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    }\n\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, \"image/svg+xml\");\n    parseNode(xml.documentElement, {\n      fill: \"#000\",\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: \"miter\",\n      strokeLineCap: \"butt\",\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths,\n      xml: xml.documentElement\n    };\n    return data;\n  }\n\n  static createShapes(shapePath) {\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x,\n              y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        return null;\n      } else {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x,\n          y,\n          t: t1\n        };\n      }\n    }\n\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n\n      let t;\n\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === void 0) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n\n      return intersections;\n    }\n\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n\n    function isHoleTo(simplePath, allPaths, scanlineMinX2, scanlineMaxX2, _fillRule) {\n      if (_fillRule === null || _fillRule === void 0 || _fillRule === \"\") {\n        _fillRule = \"nonzero\";\n      }\n\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX2, centerBoundingBox.y), new Vector2(scanlineMaxX2, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i2 => {\n        if (i2.identifier === simplePath.identifier) {\n          baseIntersections.push(i2);\n        } else {\n          otherIntersections.push(i2);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x;\n      const stack = [];\n      let i = 0;\n\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n\n        i++;\n      }\n\n      stack.push(simplePath.identifier);\n\n      if (_fillRule === \"evenodd\") {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === \"nonzero\") {\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n\n        for (let i2 = 0; i2 < stack.length; i2++) {\n          const identifier2 = stack[i2];\n\n          if (isHole) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = false;\n            isHoleFor = identifier2;\n          } else if (lastCWValue !== allPaths[identifier2].isCW) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = true;\n          }\n        }\n\n        return {\n          identifier: simplePath.identifier,\n          isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    }\n\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER;\n\n      for (let i = 0; i < points.length; i++) {\n        const p2 = points[i];\n\n        if (p2.y > maxY) {\n          maxY = p2.y;\n        }\n\n        if (p2.y < minY) {\n          minY = p2.y;\n        }\n\n        if (p2.x > maxX) {\n          maxX = p2.x;\n        }\n\n        if (p2.x < minX) {\n          minX = p2.x;\n        }\n      }\n\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n\n      return {\n        curves: p.curves,\n        points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 1);\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    width = width !== void 0 ? width : 1;\n    color = color !== void 0 ? color : \"#000\";\n    lineJoin = lineJoin !== void 0 ? lineJoin : \"miter\";\n    lineCap = lineCap !== void 0 ? lineCap : \"butt\";\n    miterLimit = miterLimit !== void 0 ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== void 0 ? arcDivisions : 12;\n    minDistance = minDistance !== void 0 ? minDistance : 1e-3;\n    vertexOffset = vertexOffset !== void 0 ? vertexOffset : 0;\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n        u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2;\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint];\n\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          nextPoint = points[1];\n        } else {\n          nextPoint = void 0;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      }\n\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n\n      if (nextPoint !== void 0) {\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3));\n\n        if (dot !== 0) {\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext);\n\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            makeSegmentTriangles();\n          }\n\n          switch (style.strokeLineJoin) {\n            case \"bevel\":\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n\n            case \"round\":\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n\n              break;\n\n            case \"miter\":\n            case \"miter-clip\":\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n\n              if (miterFraction < 1) {\n                if (style.strokeLineJoin !== \"miter-clip\") {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                if (innerSideModified) {\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n\n                isMiter = true;\n              }\n\n              break;\n          }\n        } else {\n          makeSegmentTriangles();\n        }\n      } else {\n        makeSegmentTriangles();\n      }\n\n      if (!isClosed && iPoint === numPoints - 1) {\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      }\n\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n\n    if (!isClosed) {\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n\n    return numVertices;\n\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n\n        currentCoordinate += 3;\n\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n\n      numVertices += 3;\n    }\n\n    function makeCircularSector(center, p1, p2, u, v) {\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide2, innerSideModified2, u) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        if (joinIsOnLeftSide2) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide2, innerSideModified2) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide2, start, u) {\n      switch (style.strokeLineCap) {\n        case \"round\":\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n\n          break;\n\n        case \"square\":\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length;\n\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n\n          break;\n\n        case \"butt\":\n        default:\n          break;\n      }\n    }\n\n    function removeDuplicatedPoints(points2) {\n      let dupPoints = false;\n\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n\n      if (!dupPoints) return points2;\n      const newPoints = [];\n      newPoints.push(points2[0]);\n\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) >= minDistance) {\n          newPoints.push(points2[i]);\n        }\n      }\n\n      newPoints.push(points2[points2.length - 1]);\n      return newPoints;\n    }\n  }\n\n}\n\nexport { SVGLoader };","map":{"version":3,"sources":["/Users/theodaguier/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/SVGLoader.js"],"names":["Loader","FileLoader","ShapePath","Vector2","Path","Matrix3","Vector3","ShapeUtils","Box2","Shape","BufferGeometry","Float32BufferAttribute","SVGLoader","constructor","manager","defaultDPI","defaultUnit","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","parseNode","node","style","nodeType","transform","getNodeTransform","traverseChildNodes","nodeName","parseCSSStylesheet","parseStyle","hasAttribute","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","parseCircleNode","parseEllipseNode","parseLineNode","usedNodeId","href","baseVal","substring","usedNode","viewportElement","getElementById","warn","fill","color","setStyle","transformPath","currentTransform","paths","push","userData","nodes","childNodes","i","length","transformStack","pop","copy","identity","point","control","firstPoint","isFirstPoint","doSetFirstPoint","d","getAttribute","commands","match","l","command","type","charAt","data2","substr","trim","numbers","parseFloats","j","jl","x","y","moveTo","lineTo","bezierCurveTo","getReflection","quadraticCurveTo","rx","ry","start","clone","parseArcCommand","currentPath","autoClose","curves","currentPoint","sheet","cssRules","stylesheet","selectorList","selectorText","split","filter","Boolean","map","i2","stylesheets","Object","assign","x_axis_rotation","large_arc_flag","sweep_flag","end","Math","PI","abs","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","absellipse","ux","uy","vx","vy","dot","len","ang","acos","min","parseFloatWithUnits","w","h","bci","iterator","a","b","index","regex","replace","r","subpath","absarc","subPaths","x1","y1","x2","y2","stylesheetStyles","classSelectors","addStyle","svgName","jsName","adjustFunction","v","startsWith","clamp","positive","input","flags","stride","TypeError","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","SEP","INT","FLOAT","state","seenComma","number","exponent","result","throwSyntaxError","current2","partial","SyntaxError","newNumber","Number","pow","current","Array","isArray","includes","test","units","unitConversion","mm","cm","in","pt","pc","px","string","theUnit","String","n","u","endsWith","scale","parseFloat","parseNodeTransform","premultiply","currentTransform2","tempTransform0","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","array","angle","tempTransform1","tempTransform2","rotate","tempTransform3","multiplyMatrices","scaleX","scaleY","set","tan","m","transfVec2","v2","tempV3","applyMatrix3","isRotated","isTransformRotated","subPath","curve","isLineCurve","v1","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","tempV2","aX","aY","xRadius","getTransformScaleX","yRadius","getTransformScaleY","elements","te","xml","DOMParser","parseFromString","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","data","createShapes","shapePath","BIGNUMBER","IntersectionLocationType","ORIGIN","DESTINATION","BETWEEN","LEFT","RIGHT","BEHIND","BEYOND","classifyResult","loc","t","findEdgeIntersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","nom2","denom","t1","t2","classifyPoint","toPrecision","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","EPSILON","getIntersections","path1","path2","intersectionsRaw","intersections","path1EdgeStart","path1EdgeEnd","index2","path2EdgeStart","path2EdgeEnd","intersection","find","getScanlineIntersections","scanline","boundingBox","center","getCenter","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i1","isHoleTo","simplePath","allPaths","scanlineMinX2","scanlineMaxX2","_fillRule","centerBoundingBox","scanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","isHole","isHoleFor","for","lastCWValue","identifier2","scanlineMinX","scanlineMaxX","simplePaths","getPoints","maxY","minY","maxX","minX","p2","isClockWise","sp","isAHole","fillRule","shapesToReturn","amIAHole","shape","holes","hole","getStrokeStyle","width","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","setAttribute","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","removeDuplicatedPoints","numPoints","isClosed","equals","previousPoint","nextPoint","strokeWidth2","deltaU","u0","u1","innerSideModified","joinIsOnLeftSide","isMiter","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","position","il","rotateAround","joinIsOnLeftSide2","innerSideModified2","addVectors","vl","points2","dupPoints","distanceTo","newPoints"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, ShapePath, Vector2, Path, Matrix3, Vector3, ShapeUtils, Box2, Shape, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.defaultDPI = 90;\n    this.defaultUnit = \"px\";\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(text) {\n    const scope = this;\n    function parseNode(node, style) {\n      if (node.nodeType !== 1)\n        return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n      switch (node.nodeName) {\n        case \"svg\":\n          break;\n        case \"style\":\n          parseCSSStylesheet(node);\n          break;\n        case \"g\":\n          style = parseStyle(node, style);\n          break;\n        case \"path\":\n          style = parseStyle(node, style);\n          if (node.hasAttribute(\"d\"))\n            path = parsePathNode(node);\n          break;\n        case \"rect\":\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n        case \"polygon\":\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n        case \"polyline\":\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n        case \"circle\":\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n        case \"ellipse\":\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n        case \"line\":\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n        case \"defs\":\n          traverseChildNodes = false;\n          break;\n        case \"mask\":\n          traverseChildNodes = false;\n          break;\n        case \"use\":\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n          break;\n        default:\n      }\n      if (path) {\n        if (style.fill !== void 0 && style.fill !== \"none\") {\n          path.color.setStyle(style.fill);\n        }\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = { node, style };\n      }\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n      if (transform) {\n        transformStack.pop();\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute(\"d\");\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data2 = command.substr(1).trim();\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n        let numbers;\n        switch (type) {\n          case \"M\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"H\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"V\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"L\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"C\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(\n                numbers[j + 0],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                numbers[j + 5]\n              );\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"S\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(\n                getReflection(point.x, control.x),\n                getReflection(point.y, control.y),\n                numbers[j + 0],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3]\n              );\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"Q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"T\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"A\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y)\n                continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(\n                path,\n                numbers[j],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                start,\n                point\n              );\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"m\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"h\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"v\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"l\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"c\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3],\n                point.x + numbers[j + 4],\n                point.y + numbers[j + 5]\n              );\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"s\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(\n                getReflection(point.x, control.x),\n                getReflection(point.y, control.y),\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3]\n              );\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3]\n              );\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"t\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"a\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0)\n                continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(\n                path,\n                numbers[j],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                start,\n                point\n              );\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"Z\":\n          case \"z\":\n            path.currentPath.autoClose = true;\n            if (path.currentPath.curves.length > 0) {\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n            break;\n          default:\n            console.warn(command);\n        }\n        doSetFirstPoint = false;\n      }\n      return path;\n    }\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length)\n        return;\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1)\n          continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map((i2) => i2.trim());\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        path.lineTo(end.x, end.y);\n        return;\n      }\n      x_axis_rotation = x_axis_rotation * Math.PI / 180;\n      rx = Math.abs(rx);\n      ry = Math.abs(ry);\n      const dx2 = (start.x - end.x) / 2;\n      const dy2 = (start.y - end.y) / 2;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p;\n      const cr = x1ps / rxs + y1ps / rys;\n      if (cr > 1) {\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag)\n        q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx;\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n      if (ux * vy - uy * vx < 0)\n        ang = -ang;\n      return ang;\n    }\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"x\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"y\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || node.getAttribute(\"ry\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || node.getAttribute(\"rx\") || 0);\n      const w = parseFloatWithUnits(node.getAttribute(\"width\"));\n      const h = parseFloatWithUnits(node.getAttribute(\"height\"));\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath();\n      path.moveTo(x + rx, y);\n      path.lineTo(x + w - rx, y);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      }\n      path.lineTo(x + w, y + h - ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      }\n      path.lineTo(x + rx, y + h);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      }\n      path.lineTo(x, y + ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n      return path;\n    }\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const r = parseFloatWithUnits(node.getAttribute(\"r\") || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute(\"x1\") || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute(\"y1\") || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute(\"x2\") || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute(\"y2\") || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseStyle(node, style) {\n      style = Object.assign({}, style);\n      let stylesheetStyles = {};\n      if (node.hasAttribute(\"class\")) {\n        const classSelectors = node.getAttribute(\"class\").split(/\\s/).filter(Boolean).map((i) => i.trim());\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\".\" + classSelectors[i]]);\n        }\n      }\n      if (node.hasAttribute(\"id\")) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\"#\" + node.getAttribute(\"id\")]);\n      }\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === void 0) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith(\"url\"))\n              console.warn(\"SVGLoader: url access in attributes is not implemented.\");\n            return v;\n          };\n        }\n        if (node.hasAttribute(svgName))\n          style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName])\n          style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== \"\")\n          style[jsName] = adjustFunction(node.style[svgName]);\n      }\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n      addStyle(\"fill\", \"fill\");\n      addStyle(\"fill-opacity\", \"fillOpacity\", clamp);\n      addStyle(\"fill-rule\", \"fillRule\");\n      addStyle(\"opacity\", \"opacity\", clamp);\n      addStyle(\"stroke\", \"stroke\");\n      addStyle(\"stroke-opacity\", \"strokeOpacity\", clamp);\n      addStyle(\"stroke-width\", \"strokeWidth\", positive);\n      addStyle(\"stroke-linejoin\", \"strokeLineJoin\");\n      addStyle(\"stroke-linecap\", \"strokeLineCap\");\n      addStyle(\"stroke-miterlimit\", \"strokeMiterLimit\", positive);\n      addStyle(\"visibility\", \"visibility\");\n      return style;\n    }\n    function getReflection(a, b) {\n      return a - (b - a);\n    }\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== \"string\") {\n        throw new TypeError(\"Invalid input: \" + typeof input);\n      }\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      };\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = \"\", exponent = \"\";\n      const result = [];\n      function throwSyntaxError(current2, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current2 + '\" at index ' + i + \".\");\n        error.partial = partial;\n        throw error;\n      }\n      function newNumber() {\n        if (number !== \"\") {\n          if (exponent === \"\")\n            result.push(Number(number));\n          else\n            result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n        number = \"\";\n        exponent = \"\";\n      }\n      let current;\n      const length = input.length;\n      for (let i = 0; i < length; i++) {\n        current = input[i];\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        }\n        if (state === SEP) {\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          }\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          }\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n            seenComma = true;\n          }\n        }\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.POINT.test(current) && number[number.length - 1] === \".\") {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n          if (RE.SIGN.test(current)) {\n            if (exponent === \"\") {\n              exponent += current;\n              continue;\n            }\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        }\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      }\n      newNumber();\n      return result;\n    }\n    const units = [\"mm\", \"cm\", \"in\", \"pt\", \"pc\", \"px\"];\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n    function parseFloatWithUnits(string) {\n      let theUnit = \"px\";\n      if (typeof string === \"string\" || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n      let scale = void 0;\n      if (theUnit === \"px\" && scope.defaultUnit !== \"px\") {\n        scale = unitConversion[\"in\"][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n        if (scale < 0) {\n          scale = unitConversion[theUnit][\"in\"] * scope.defaultDPI;\n        }\n      }\n      return scale * parseFloat(string);\n    }\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute(\"transform\") || node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\")))) {\n        return null;\n      }\n      const transform = parseNodeTransform(node);\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform2 = tempTransform0;\n      if (node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\"))) {\n        const tx = parseFloatWithUnits(node.getAttribute(\"x\"));\n        const ty = parseFloatWithUnits(node.getAttribute(\"y\"));\n        transform.translate(tx, ty);\n      }\n      if (node.hasAttribute(\"transform\")) {\n        const transformsTexts = node.getAttribute(\"transform\").split(\")\");\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === \"\")\n            continue;\n          const openParPos = transformText.indexOf(\"(\");\n          const closeParPos = transformText.length;\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform2.identity();\n            switch (transformType) {\n              case \"translate\":\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n                  currentTransform2.translate(tx, ty);\n                }\n                break;\n              case \"rotate\":\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0;\n                  angle = -array[0] * Math.PI / 180;\n                  if (array.length >= 3) {\n                    cx = array[1];\n                    cy = array[2];\n                  }\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform2.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n                break;\n              case \"scale\":\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n                  currentTransform2.scale(scaleX, scaleY);\n                }\n                break;\n              case \"skewX\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"skewY\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"matrix\":\n                if (array.length === 6) {\n                  currentTransform2.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n                break;\n            }\n          }\n          transform.premultiply(currentTransform2);\n        }\n      }\n      return transform;\n    }\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn(\"SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.\");\n            }\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    }\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, \"image/svg+xml\");\n    parseNode(xml.documentElement, {\n      fill: \"#000\",\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: \"miter\",\n      strokeLineCap: \"butt\",\n      strokeMiterLimit: 4\n    });\n    const data = { paths, xml: xml.documentElement };\n    return data;\n  }\n  static createShapes(shapePath) {\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return { x: point.x, y: point.y, t: classifyResult.t };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return { x, y, t: classifyResult.t };\n          }\n        }\n        return null;\n      } else {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return { x: point.x, y: point.y, t: classifyResult.t };\n          }\n        }\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return { x, y, t: t1 };\n      }\n    }\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n      let t;\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n          if (intersection !== null && intersectionsRaw.find(\n            (i) => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON\n          ) === void 0) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n      return intersections;\n    }\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach((path) => {\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach((p) => {\n            allIntersections.push({ identifier: path.identifier, isCW: path.isCW, point: p });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n    function isHoleTo(simplePath, allPaths, scanlineMinX2, scanlineMaxX2, _fillRule) {\n      if (_fillRule === null || _fillRule === void 0 || _fillRule === \"\") {\n        _fillRule = \"nonzero\";\n      }\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX2, centerBoundingBox.y), new Vector2(scanlineMaxX2, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach((i2) => {\n        if (i2.identifier === simplePath.identifier) {\n          baseIntersections.push(i2);\n        } else {\n          otherIntersections.push(i2);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x;\n      const stack = [];\n      let i = 0;\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n        i++;\n      }\n      stack.push(simplePath.identifier);\n      if (_fillRule === \"evenodd\") {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return { identifier: simplePath.identifier, isHole, for: isHoleFor };\n      } else if (_fillRule === \"nonzero\") {\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n        for (let i2 = 0; i2 < stack.length; i2++) {\n          const identifier2 = stack[i2];\n          if (isHole) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = false;\n            isHoleFor = identifier2;\n          } else if (lastCWValue !== allPaths[identifier2].isCW) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = true;\n          }\n        }\n        return { identifier: simplePath.identifier, isHole, for: isHoleFor };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    }\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map((p) => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER;\n      for (let i = 0; i < points.length; i++) {\n        const p2 = points[i];\n        if (p2.y > maxY) {\n          maxY = p2.y;\n        }\n        if (p2.y < minY) {\n          minY = p2.y;\n        }\n        if (p2.x > maxX) {\n          maxX = p2.x;\n        }\n        if (p2.x < minX) {\n          minX = p2.x;\n        }\n      }\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n      return {\n        curves: p.curves,\n        points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter((sp) => sp.points.length > 1);\n    const isAHole = simplePaths.map(\n      (p) => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule)\n    );\n    const shapesToReturn = [];\n    simplePaths.forEach((p) => {\n      const amIAHole = isAHole[p.identifier];\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter((h) => h.isHole && h.for === p.identifier);\n        holes.forEach((h) => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    width = width !== void 0 ? width : 1;\n    color = color !== void 0 ? color : \"#000\";\n    lineJoin = lineJoin !== void 0 ? lineJoin : \"miter\";\n    lineCap = lineCap !== void 0 ? lineCap : \"butt\";\n    miterLimit = miterLimit !== void 0 ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== void 0 ? arcDivisions : 12;\n    minDistance = minDistance !== void 0 ? minDistance : 1e-3;\n    vertexOffset = vertexOffset !== void 0 ? vertexOffset : 0;\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2)\n      return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0, u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2;\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint];\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          nextPoint = points[1];\n        } else {\n          nextPoint = void 0;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      }\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n      if (nextPoint !== void 0) {\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n        if (iPoint === 1)\n          initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3));\n        if (dot !== 0) {\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext);\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            makeSegmentTriangles();\n          }\n          switch (style.strokeLineJoin) {\n            case \"bevel\":\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n            case \"round\":\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n              break;\n            case \"miter\":\n            case \"miter-clip\":\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n              if (miterFraction < 1) {\n                if (style.strokeLineJoin !== \"miter-clip\") {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                if (innerSideModified) {\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n                isMiter = true;\n              }\n              break;\n          }\n        } else {\n          makeSegmentTriangles();\n        }\n      } else {\n        makeSegmentTriangles();\n      }\n      if (!isClosed && iPoint === numPoints - 1) {\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      }\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n    if (!isClosed) {\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n    return numVertices;\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n        currentCoordinate += 3;\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n      numVertices += 3;\n    }\n    function makeCircularSector(center, p1, p2, u, v) {\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1)\n        angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide2, innerSideModified2, u) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        if (joinIsOnLeftSide2) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide2, innerSideModified2) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide2, start, u) {\n      switch (style.strokeLineCap) {\n        case \"round\":\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n          break;\n        case \"square\":\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length;\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n          break;\n        case \"butt\":\n        default:\n          break;\n      }\n    }\n    function removeDuplicatedPoints(points2) {\n      let dupPoints = false;\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n      if (!dupPoints)\n        return points2;\n      const newPoints = [];\n      newPoints.push(points2[0]);\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) >= minDistance) {\n          newPoints.push(points2[i]);\n        }\n      }\n      newPoints.push(points2[points2.length - 1]);\n      return newPoints;\n    }\n  }\n}\nexport {\n  SVGLoader\n};\n"]},"metadata":{},"sourceType":"module"}