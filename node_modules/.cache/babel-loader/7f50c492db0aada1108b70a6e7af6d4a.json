{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { DotScreenShader } from \"../shaders/DotScreenShader.js\";\n\nclass DotScreenPass extends Pass {\n  constructor(center, angle, scale) {\n    super();\n\n    __publicField(this, \"material\");\n\n    __publicField(this, \"fsQuad\");\n\n    __publicField(this, \"uniforms\");\n\n    if (DotScreenShader === void 0) console.error(\"THREE.DotScreenPass relies on THREE.DotScreenShader\");\n    const shader = DotScreenShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (center !== void 0) this.uniforms[\"center\"].value.copy(center);\n    if (angle !== void 0) this.uniforms[\"angle\"].value = angle;\n    if (scale !== void 0) this.uniforms[\"scale\"].value = scale;\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"tSize\"].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { DotScreenPass };","map":{"version":3,"sources":["/Users/theodaguier/Repositories/E-Do-Studio/node_modules/three-stdlib/postprocessing/DotScreenPass.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","UniformsUtils","ShaderMaterial","DotScreenShader","DotScreenPass","constructor","center","angle","scale","console","error","shader","uniforms","clone","copy","material","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { DotScreenShader } from \"../shaders/DotScreenShader.js\";\nclass DotScreenPass extends Pass {\n  constructor(center, angle, scale) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"uniforms\");\n    if (DotScreenShader === void 0)\n      console.error(\"THREE.DotScreenPass relies on THREE.DotScreenShader\");\n    const shader = DotScreenShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (center !== void 0)\n      this.uniforms[\"center\"].value.copy(center);\n    if (angle !== void 0)\n      this.uniforms[\"angle\"].value = angle;\n    if (scale !== void 0)\n      this.uniforms[\"scale\"].value = scale;\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"tSize\"].value.set(readBuffer.width, readBuffer.height);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport {\n  DotScreenPass\n};\n"]},"metadata":{},"sourceType":"module"}