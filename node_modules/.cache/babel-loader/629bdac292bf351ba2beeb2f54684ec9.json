{"ast":null,"code":"import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\n\nconst _taskCache = /* @__PURE__ */new WeakMap();\n\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = \"\";\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = \"\";\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = {};\n    this.materials = [];\n  }\n\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n\n  debug() {\n    console.log(\"Task load: \", this.workerPool.map(worker => worker._taskLoad));\n  }\n\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: \"decode\",\n          id: taskID,\n          buffer\n        }, [buffer]);\n      });\n    }).then(message => this._createGeometry(message.data));\n\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n      }\n    });\n\n    _taskCache.set(buffer, {\n      url,\n      promise: objectPending\n    });\n\n    return objectPending;\n  }\n\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n  }\n\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n\n    this.materials.push(material);\n    return material;\n  }\n\n  _createMaterial(material) {\n    if (material === void 0) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: \"default\",\n        side: 2\n      });\n    }\n\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    }\n\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n\n        switch (texture.type) {\n          case \"Diffuse\":\n            mat.map = map;\n            break;\n\n          case \"Bump\":\n            mat.bumpMap = map;\n            break;\n\n          case \"Transparency\":\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n\n          case \"Emap\":\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n\n    return mat;\n  }\n\n  _createGeometry(data) {\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData[\"layers\"] = data.layers;\n    object.userData[\"groups\"] = data.groups;\n    object.userData[\"settings\"] = data.settings;\n    object.userData[\"objectType\"] = \"File3dm\";\n    object.userData[\"materials\"] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n\n      switch (obj.objectType) {\n        case \"InstanceDefinition\":\n          instanceDefinitions.push(obj);\n          break;\n\n        case \"InstanceReference\":\n          instanceReferences.push(obj);\n          break;\n\n        default:\n          let _object;\n\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n\n            let material = this._createMaterial(rMaterial);\n\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n\n            _object = this._createObject(obj, material);\n          }\n\n          if (_object === void 0) {\n            continue;\n          }\n\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n\n          break;\n      }\n    }\n\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      }\n\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n          iRefObject.applyMatrix4(matrix);\n\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n\n          object.add(iRefObject);\n        }\n      }\n    }\n\n    object.userData[\"materials\"] = this.materials;\n    return object;\n  }\n\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n\n    let geometry, material, _color, color;\n\n    switch (obj.objectType) {\n      case \"Point\":\n      case \"PointSet\":\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new PointsMaterial({\n            color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData[\"attributes\"] = attributes;\n        points.userData[\"objectType\"] = obj.objectType;\n\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n\n        return points;\n\n      case \"Mesh\":\n      case \"Extrusion\":\n      case \"SubD\":\n      case \"Brep\":\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          mat.vertexColors = true;\n        }\n\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData[\"attributes\"] = attributes;\n        mesh.userData[\"objectType\"] = obj.objectType;\n\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n\n        return mesh;\n\n      case \"Curve\":\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n        material = new LineBasicMaterial({\n          color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData[\"attributes\"] = attributes;\n        lines.userData[\"objectType\"] = obj.objectType;\n\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n\n        return lines;\n\n      case \"TextDot\":\n        geometry = obj.geometry;\n        const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + \"px\";\n        ctx.canvas.style.height = height + \"px\";\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = \"white\";\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1);\n        sprite.userData[\"attributes\"] = attributes;\n        sprite.userData[\"objectType\"] = obj.objectType;\n\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n\n        return sprite;\n\n      case \"Light\":\n        geometry = obj.geometry;\n        let light;\n\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width2 = Math.abs(geometry.width[2]);\n          const height2 = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n          light.height = height2;\n          light.width = width2;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n          return;\n        }\n\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          light.color = color;\n          light.userData[\"attributes\"] = attributes;\n          light.userData[\"objectType\"] = obj.objectType;\n        }\n\n        return light;\n    }\n  }\n\n  _initLibrary() {\n    if (!this.libraryPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        this.libraryConfig.wasmBinary = binaryContent2;\n        const fn = Rhino3dmWorker.toString();\n        const body = [\"/* rhino3dm.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n\n    return this.libraryPending;\n  }\n\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskCosts = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          libraryConfig: this.libraryConfig\n        });\n\n        worker2.onmessage = function (e) {\n          const message = e.data;\n\n          switch (message.type) {\n            case \"decode\":\n              worker2._callbacks[message.id].resolve(message);\n\n              break;\n\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n\n}\n\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n\n  onmessage = function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule);\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n\n      case \"decode\":\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: \"decode\",\n            id: message.id,\n            data\n          });\n        });\n        break;\n    }\n  };\n\n  function decodeObjects(rhino2, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino2.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = [];\n    const objs = doc.objects();\n    const cnt = objs.count;\n\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n\n      const object = extractObjectData(_object, doc);\n\n      _object.delete();\n\n      if (object) {\n        objects.push(object);\n      }\n    }\n\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: \"InstanceDefinition\"\n      });\n    }\n\n    const textureTypes = [// rhino.TextureType.Bitmap,\n    rhino2.TextureType.Diffuse, rhino2.TextureType.Bump, rhino2.TextureType.Transparency, rhino2.TextureType.Opacity, rhino2.TextureType.Emap];\n    const pbrTextureTypes = [rhino2.TextureType.PBR_BaseColor, rhino2.TextureType.PBR_Subsurface, rhino2.TextureType.PBR_SubsurfaceScattering, rhino2.TextureType.PBR_SubsurfaceScatteringRadius, rhino2.TextureType.PBR_Metallic, rhino2.TextureType.PBR_Specular, rhino2.TextureType.PBR_SpecularTint, rhino2.TextureType.PBR_Roughness, rhino2.TextureType.PBR_Anisotropic, rhino2.TextureType.PBR_Anisotropic_Rotation, rhino2.TextureType.PBR_Sheen, rhino2.TextureType.PBR_SheenTint, rhino2.TextureType.PBR_Clearcoat, rhino2.TextureType.PBR_ClearcoatBump, rhino2.TextureType.PBR_ClearcoatRoughness, rhino2.TextureType.PBR_OpacityIor, rhino2.TextureType.PBR_OpacityRoughness, rhino2.TextureType.PBR_Emission, rhino2.TextureType.PBR_AmbientOcclusion, rhino2.TextureType.PBR_Displacement];\n\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n\n      const _pbrMaterial = _material.physicallyBased();\n\n      let material = extractProperties(_material);\n      const textures = [];\n\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = {\n            type: textureType\n          };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n\n          textures.push(texture);\n\n          _texture.delete();\n        }\n      }\n\n      material.textures = textures;\n\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = {\n              type: textureType,\n              image: \"data:image/png;base64,\" + image\n            };\n            textures.push(texture);\n\n            _texture.delete();\n          }\n        }\n\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n\n      materials.push(material);\n\n      _material.delete();\n\n      _pbrMaterial.delete();\n    }\n\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n\n      _layer.delete();\n    }\n\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n\n      const view = extractProperties(_view);\n      views.push(view);\n\n      _view.delete();\n    }\n\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n\n      _namedView.delete();\n    }\n\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n\n      const group = extractProperties(_group);\n      groups.push(group);\n\n      _group.delete();\n    }\n\n    const settings = extractProperties(doc.settings());\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      settings\n    };\n  }\n\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n\n    const _attributes = object.attributes();\n\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh;\n\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n\n        const _color = _attributes.drawColor(doc);\n\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n\n        mesh = new rhino.Mesh();\n\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n\n          if (_mesh) {\n            mesh.append(_mesh);\n\n            _mesh.delete();\n          }\n\n          face.delete();\n        }\n\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n\n        mesh.delete();\n        break;\n\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n\n        break;\n\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n\n  function extractProperties(object) {\n    const result = {};\n\n    for (const property in object) {\n      const value = object[property];\n\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      } else {}\n    }\n\n    return result;\n  }\n\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n\n      return rc;\n    }\n\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n\n      pLine.delete();\n      return rc;\n    }\n\n    const domain = curve.domain;\n    const divisions = pointCount - 1;\n\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\n\nexport { Rhino3dmLoader };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/loaders/3DMLoader.js"],"names":["Loader","FileLoader","MeshStandardMaterial","Color","TextureLoader","Object3D","Matrix4","BufferGeometryLoader","DirectionalLight","PointLight","RectAreaLight","Vector3","SpotLight","CanvasTexture","LinearFilter","ClampToEdgeWrapping","SpriteMaterial","Sprite","LineBasicMaterial","Line","Mesh","PointsMaterial","Points","_taskCache","WeakMap","Rhino3dmLoader","constructor","manager","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","debug","console","log","map","worker","_taskLoad","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","_createMaterial","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","hasOwnProperty","vertexColors","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","wrapS","wrapT","depthTest","sprite","position","point","scale","light","isDirectionalLight","location","target","direction","shadow","normalBias","isPointLight","isRectangularLight","width2","Math","abs","height2","lookAt","isSpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","_initLibrary","jsLoader","jsContent","binaryLoader","binaryContent","all","jsContent2","binaryContent2","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","worker2","Worker","_taskCosts","onmessage","e","error","sort","dispose","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","rhino2","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","value","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","concat","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = \"\";\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = \"\";\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = {};\n    this.materials = [];\n  }\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  debug() {\n    console.log(\n      \"Task load: \",\n      this.workerPool.map((worker) => worker._taskLoad)\n    );\n  }\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n    const objectPending = this._getWorker(taskCost).then((_worker) => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"decode\", id: taskID, buffer }, [buffer]);\n      });\n    }).then((message) => this._createGeometry(message.data));\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n      }\n    });\n    _taskCache.set(buffer, {\n      url,\n      promise: objectPending\n    });\n    return objectPending;\n  }\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n  }\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n    this.materials.push(material);\n    return material;\n  }\n  _createMaterial(material) {\n    if (material === void 0) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: \"default\",\n        side: 2\n      });\n    }\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    }\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n        switch (texture.type) {\n          case \"Diffuse\":\n            mat.map = map;\n            break;\n          case \"Bump\":\n            mat.bumpMap = map;\n            break;\n          case \"Transparency\":\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case \"Emap\":\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n    return mat;\n  }\n  _createGeometry(data) {\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData[\"layers\"] = data.layers;\n    object.userData[\"groups\"] = data.groups;\n    object.userData[\"settings\"] = data.settings;\n    object.userData[\"objectType\"] = \"File3dm\";\n    object.userData[\"materials\"] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n      switch (obj.objectType) {\n        case \"InstanceDefinition\":\n          instanceDefinitions.push(obj);\n          break;\n        case \"InstanceReference\":\n          instanceReferences.push(obj);\n          break;\n        default:\n          let _object;\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n            let material = this._createMaterial(rMaterial);\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n            _object = this._createObject(obj, material);\n          }\n          if (_object === void 0) {\n            continue;\n          }\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n          break;\n      }\n    }\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      }\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(\n            xf[0],\n            xf[1],\n            xf[2],\n            xf[3],\n            xf[4],\n            xf[5],\n            xf[6],\n            xf[7],\n            xf[8],\n            xf[9],\n            xf[10],\n            xf[11],\n            xf[12],\n            xf[13],\n            xf[14],\n            xf[15]\n          );\n          iRefObject.applyMatrix4(matrix);\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n          object.add(iRefObject);\n        }\n      }\n    }\n    object.userData[\"materials\"] = this.materials;\n    return object;\n  }\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n    let geometry, material, _color, color;\n    switch (obj.objectType) {\n      case \"Point\":\n      case \"PointSet\":\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          material = new PointsMaterial({ vertexColors: true, sizeAttenuation: false, size: 2 });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new PointsMaterial({ color, sizeAttenuation: false, size: 2 });\n        }\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData[\"attributes\"] = attributes;\n        points.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n        return points;\n      case \"Mesh\":\n      case \"Extrusion\":\n      case \"SubD\":\n      case \"Brep\":\n        if (obj.geometry === null)\n          return;\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          mat.vertexColors = true;\n        }\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData[\"attributes\"] = attributes;\n        mesh.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n        return mesh;\n      case \"Curve\":\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n        material = new LineBasicMaterial({ color });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData[\"attributes\"] = attributes;\n        lines.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n        return lines;\n      case \"TextDot\":\n        geometry = obj.geometry;\n        const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + \"px\";\n        ctx.canvas.style.height = height + \"px\";\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = \"white\";\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({ map: texture, depthTest: false });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1);\n        sprite.userData[\"attributes\"] = attributes;\n        sprite.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n        return sprite;\n      case \"Light\":\n        geometry = obj.geometry;\n        let light;\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width2 = Math.abs(geometry.width[2]);\n          const height2 = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n          light.height = height2;\n          light.width = width2;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n          return;\n        }\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          light.color = color;\n          light.userData[\"attributes\"] = attributes;\n          light.userData[\"objectType\"] = obj.objectType;\n        }\n        return light;\n    }\n  }\n  _initLibrary() {\n    if (!this.libraryPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        this.libraryConfig.wasmBinary = binaryContent2;\n        const fn = Rhino3dmWorker.toString();\n        const body = [\n          \"/* rhino3dm.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n    return this.libraryPending;\n  }\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskCosts = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          libraryConfig: this.libraryConfig\n        });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"decode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function(resolve) {\n          RhinoModule = { wasmBinary, onRuntimeInitialized: resolve };\n          rhino3dm(RhinoModule);\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n      case \"decode\":\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({ type: \"decode\", id: message.id, data });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino2, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino2.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = [];\n    const objs = doc.objects();\n    const cnt = objs.count;\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n      const object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({ geometry: null, attributes: idefAttributes, objectType: \"InstanceDefinition\" });\n    }\n    const textureTypes = [\n      // rhino.TextureType.Bitmap,\n      rhino2.TextureType.Diffuse,\n      rhino2.TextureType.Bump,\n      rhino2.TextureType.Transparency,\n      rhino2.TextureType.Opacity,\n      rhino2.TextureType.Emap\n    ];\n    const pbrTextureTypes = [\n      rhino2.TextureType.PBR_BaseColor,\n      rhino2.TextureType.PBR_Subsurface,\n      rhino2.TextureType.PBR_SubsurfaceScattering,\n      rhino2.TextureType.PBR_SubsurfaceScatteringRadius,\n      rhino2.TextureType.PBR_Metallic,\n      rhino2.TextureType.PBR_Specular,\n      rhino2.TextureType.PBR_SpecularTint,\n      rhino2.TextureType.PBR_Roughness,\n      rhino2.TextureType.PBR_Anisotropic,\n      rhino2.TextureType.PBR_Anisotropic_Rotation,\n      rhino2.TextureType.PBR_Sheen,\n      rhino2.TextureType.PBR_SheenTint,\n      rhino2.TextureType.PBR_Clearcoat,\n      rhino2.TextureType.PBR_ClearcoatBump,\n      rhino2.TextureType.PBR_ClearcoatRoughness,\n      rhino2.TextureType.PBR_OpacityIor,\n      rhino2.TextureType.PBR_OpacityRoughness,\n      rhino2.TextureType.PBR_Emission,\n      rhino2.TextureType.PBR_AmbientOcclusion,\n      rhino2.TextureType.PBR_Displacement\n    ];\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n      const _pbrMaterial = _material.physicallyBased();\n      let material = extractProperties(_material);\n      const textures = [];\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = { type: textureType };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = { type: textureType, image: \"data:image/png;base64,\" + image };\n            textures.push(texture);\n            _texture.delete();\n          }\n        }\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    }\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n      const view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n      const group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n    const settings = extractProperties(doc.settings());\n    doc.delete();\n    return { objects, materials, layers, views, namedViews, groups, settings };\n  }\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n    const _attributes = object.attributes();\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh;\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n        const _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return { geometry, attributes, objectType };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n  function extractProperties(object) {\n    const result = {};\n    for (const property in object) {\n      const value = object[property];\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = { name: value.constructor.name, value: value.value };\n        } else {\n          result[property] = value;\n        }\n      } else {\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n      pLine.delete();\n      return rc;\n    }\n    const domain = curve.domain;\n    const divisions = pointCount - 1;\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1)\n        continue;\n      ts.push(t);\n    }\n    rc = ts.map((t) => curve.pointAt(t));\n    return rc;\n  }\n}\nexport {\n  Rhino3dmLoader\n};\n"]},"metadata":{},"sourceType":"module"}