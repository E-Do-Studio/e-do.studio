{"ast":null,"code":"import { Vector3, Plane, Line3, Sphere, Box3, Triangle } from \"three\";\nimport { Capsule } from \"./Capsule.js\";\n\nconst _v1 = /* @__PURE__ */new Vector3();\n\nconst _v2 = /* @__PURE__ */new Vector3();\n\nconst _plane = /* @__PURE__ */new Plane();\n\nconst _line1 = /* @__PURE__ */new Line3();\n\nconst _line2 = /* @__PURE__ */new Line3();\n\nconst _sphere = /* @__PURE__ */new Sphere();\n\nconst _capsule = /* @__PURE__ */new Capsule();\n\nclass Octree {\n  constructor(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n\n  addTriangle(triangle) {\n    if (!this.bounds) this.bounds = new Box3();\n    this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.triangles.push(triangle);\n    return this;\n  }\n\n  calcBox() {\n    this.box = this.bounds.clone();\n    this.box.min.x -= 0.01;\n    this.box.min.y -= 0.01;\n    this.box.min.z -= 0.01;\n    return this;\n  }\n\n  split(level) {\n    if (!this.box) return;\n    const subTrees = [];\n\n    const halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5);\n\n    for (let x = 0; x < 2; x++) {\n      for (let y = 0; y < 2; y++) {\n        for (let z = 0; z < 2; z++) {\n          const box = new Box3();\n\n          const v = _v1.set(x, y, z);\n\n          box.min.copy(this.box.min).add(v.multiply(halfsize));\n          box.max.copy(box.min).add(halfsize);\n          subTrees.push(new Octree(box));\n        }\n      }\n    }\n\n    let triangle;\n\n    while (triangle = this.triangles.pop()) {\n      for (let i = 0; i < subTrees.length; i++) {\n        if (subTrees[i].box.intersectsTriangle(triangle)) {\n          subTrees[i].triangles.push(triangle);\n        }\n      }\n    }\n\n    for (let i = 0; i < subTrees.length; i++) {\n      const len = subTrees[i].triangles.length;\n\n      if (len > 8 && level < 16) {\n        subTrees[i].split(level + 1);\n      }\n\n      if (len !== 0) {\n        this.subTrees.push(subTrees[i]);\n      }\n    }\n\n    return this;\n  }\n\n  build() {\n    this.calcBox();\n    this.split(0);\n    return this;\n  }\n\n  getRayTriangles(ray, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!ray.intersectsBox(subTree.box)) continue;\n\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getRayTriangles(ray, triangles);\n      }\n    }\n\n    return triangles;\n  }\n\n  triangleCapsuleIntersect(capsule, triangle) {\n    triangle.getPlane(_plane);\n    const d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n    const d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n\n    if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n      return false;\n    }\n\n    const delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n\n    const intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n\n    if (triangle.containsPoint(intersectPoint)) {\n      return {\n        normal: _plane.normal.clone(),\n        point: intersectPoint.clone(),\n        depth: Math.abs(Math.min(d1, d2))\n      };\n    }\n\n    const r2 = capsule.radius * capsule.radius;\n\n    const line1 = _line1.set(capsule.start, capsule.end);\n\n    const lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const line2 = _line2.set(lines[i][0], lines[i][1]);\n\n      const [point1, point2] = capsule.lineLineMinimumPoints(line1, line2);\n\n      if (point1.distanceToSquared(point2) < r2) {\n        return {\n          normal: point1.clone().sub(point2).normalize(),\n          point: point2.clone(),\n          depth: capsule.radius - point1.distanceTo(point2)\n        };\n      }\n    }\n\n    return false;\n  }\n\n  triangleSphereIntersect(sphere, triangle) {\n    triangle.getPlane(_plane);\n    if (!sphere.intersectsPlane(_plane)) return false;\n    const depth = Math.abs(_plane.distanceToSphere(sphere));\n    const r2 = sphere.radius * sphere.radius - depth * depth;\n\n    const plainPoint = _plane.projectPoint(sphere.center, _v1);\n\n    if (triangle.containsPoint(sphere.center)) {\n      return {\n        normal: _plane.normal.clone(),\n        point: plainPoint.clone(),\n        depth: Math.abs(_plane.distanceToSphere(sphere))\n      };\n    }\n\n    const lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n    for (let i = 0; i < lines.length; i++) {\n      _line1.set(lines[i][0], lines[i][1]);\n\n      _line1.closestPointToPoint(plainPoint, true, _v2);\n\n      const d = _v2.distanceToSquared(sphere.center);\n\n      if (d < r2) {\n        return {\n          normal: sphere.center.clone().sub(_v2).normalize(),\n          point: _v2.clone(),\n          depth: sphere.radius - Math.sqrt(d)\n        };\n      }\n    }\n\n    return false;\n  }\n\n  getSphereTriangles(sphere, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!sphere.intersectsBox(subTree.box)) continue;\n\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getSphereTriangles(sphere, triangles);\n      }\n    }\n  }\n\n  getCapsuleTriangles(capsule, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!capsule.intersectsBox(subTree.box)) continue;\n\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getCapsuleTriangles(capsule, triangles);\n      }\n    }\n  }\n\n  sphereIntersect(sphere) {\n    _sphere.copy(sphere);\n\n    const triangles = [];\n    let result,\n        hit = false;\n    this.getSphereTriangles(sphere, triangles);\n\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n        hit = true;\n\n        _sphere.center.add(result.normal.multiplyScalar(result.depth));\n      }\n    }\n\n    if (hit) {\n      const collisionVector = _sphere.center.clone().sub(sphere.center);\n\n      const depth = collisionVector.length();\n      return {\n        normal: collisionVector.normalize(),\n        depth\n      };\n    }\n\n    return false;\n  }\n\n  capsuleIntersect(capsule) {\n    _capsule.copy(capsule);\n\n    const triangles = [];\n    let result,\n        hit = false;\n    this.getCapsuleTriangles(_capsule, triangles);\n\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n        hit = true;\n\n        _capsule.translate(result.normal.multiplyScalar(result.depth));\n      }\n    }\n\n    if (hit) {\n      const collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n\n      const depth = collisionVector.length();\n      return {\n        normal: collisionVector.normalize(),\n        depth\n      };\n    }\n\n    return false;\n  }\n\n  rayIntersect(ray) {\n    if (ray.direction.length() === 0) return;\n    const triangles = [];\n    let triangle,\n        position,\n        distance = 1e100;\n    this.getRayTriangles(ray, triangles);\n\n    for (let i = 0; i < triangles.length; i++) {\n      const result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n\n      if (result) {\n        const newdistance = result.sub(ray.origin).length();\n\n        if (distance > newdistance) {\n          position = result.clone().add(ray.origin);\n          distance = newdistance;\n          triangle = triangles[i];\n        }\n      }\n    }\n\n    return distance < 1e100 ? {\n      distance,\n      triangle,\n      position\n    } : false;\n  }\n\n  fromGraphNode(group) {\n    group.updateWorldMatrix(true, true);\n    group.traverse(obj => {\n      if (obj.isMesh === true) {\n        let geometry,\n            isTemp = false;\n\n        if (obj.geometry.index !== null) {\n          isTemp = true;\n          geometry = obj.geometry.toNonIndexed();\n        } else {\n          geometry = obj.geometry;\n        }\n\n        const positionAttribute = geometry.getAttribute(\"position\");\n\n        for (let i = 0; i < positionAttribute.count; i += 3) {\n          const v1 = new Vector3().fromBufferAttribute(positionAttribute, i);\n          const v2 = new Vector3().fromBufferAttribute(positionAttribute, i + 1);\n          const v3 = new Vector3().fromBufferAttribute(positionAttribute, i + 2);\n          v1.applyMatrix4(obj.matrixWorld);\n          v2.applyMatrix4(obj.matrixWorld);\n          v3.applyMatrix4(obj.matrixWorld);\n          this.addTriangle(new Triangle(v1, v2, v3));\n        }\n\n        if (isTemp) {\n          geometry.dispose();\n        }\n      }\n    });\n    this.build();\n    return this;\n  }\n\n}\n\nexport { Octree };","map":{"version":3,"sources":["/Users/theodaguier/Developer/old/_dev/pro/e-do/website/old/E-Do-Studio/node_modules/three-stdlib/math/Octree.js"],"names":["Vector3","Plane","Line3","Sphere","Box3","Triangle","Capsule","_v1","_v2","_plane","_line1","_line2","_sphere","_capsule","Octree","constructor","box","triangles","subTrees","addTriangle","triangle","bounds","min","x","Math","a","b","c","y","z","max","push","calcBox","clone","split","level","halfsize","copy","sub","multiplyScalar","v","set","add","multiply","pop","i","length","intersectsTriangle","len","build","getRayTriangles","ray","subTree","intersectsBox","j","indexOf","triangleCapsuleIntersect","capsule","getPlane","d1","distanceToPoint","start","radius","d2","end","delta","abs","intersectPoint","lerp","containsPoint","normal","point","depth","r2","line1","lines","line2","point1","point2","lineLineMinimumPoints","distanceToSquared","normalize","distanceTo","triangleSphereIntersect","sphere","intersectsPlane","distanceToSphere","plainPoint","projectPoint","center","closestPointToPoint","d","sqrt","getSphereTriangles","getCapsuleTriangles","sphereIntersect","result","hit","collisionVector","capsuleIntersect","translate","getCenter","rayIntersect","direction","position","distance","intersectTriangle","newdistance","origin","fromGraphNode","group","updateWorldMatrix","traverse","obj","isMesh","geometry","isTemp","index","toNonIndexed","positionAttribute","getAttribute","count","v1","fromBufferAttribute","v2","v3","applyMatrix4","matrixWorld","dispose"],"mappings":"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","sourcesContent":["import { Vector3, Plane, Line3, Sphere, Box3, Triangle } from \"three\";\nimport { Capsule } from \"./Capsule.js\";\nconst _v1 = /* @__PURE__ */ new Vector3();\nconst _v2 = /* @__PURE__ */ new Vector3();\nconst _plane = /* @__PURE__ */ new Plane();\nconst _line1 = /* @__PURE__ */ new Line3();\nconst _line2 = /* @__PURE__ */ new Line3();\nconst _sphere = /* @__PURE__ */ new Sphere();\nconst _capsule = /* @__PURE__ */ new Capsule();\nclass Octree {\n  constructor(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n  addTriangle(triangle) {\n    if (!this.bounds)\n      this.bounds = new Box3();\n    this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.triangles.push(triangle);\n    return this;\n  }\n  calcBox() {\n    this.box = this.bounds.clone();\n    this.box.min.x -= 0.01;\n    this.box.min.y -= 0.01;\n    this.box.min.z -= 0.01;\n    return this;\n  }\n  split(level) {\n    if (!this.box)\n      return;\n    const subTrees = [];\n    const halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5);\n    for (let x = 0; x < 2; x++) {\n      for (let y = 0; y < 2; y++) {\n        for (let z = 0; z < 2; z++) {\n          const box = new Box3();\n          const v = _v1.set(x, y, z);\n          box.min.copy(this.box.min).add(v.multiply(halfsize));\n          box.max.copy(box.min).add(halfsize);\n          subTrees.push(new Octree(box));\n        }\n      }\n    }\n    let triangle;\n    while (triangle = this.triangles.pop()) {\n      for (let i = 0; i < subTrees.length; i++) {\n        if (subTrees[i].box.intersectsTriangle(triangle)) {\n          subTrees[i].triangles.push(triangle);\n        }\n      }\n    }\n    for (let i = 0; i < subTrees.length; i++) {\n      const len = subTrees[i].triangles.length;\n      if (len > 8 && level < 16) {\n        subTrees[i].split(level + 1);\n      }\n      if (len !== 0) {\n        this.subTrees.push(subTrees[i]);\n      }\n    }\n    return this;\n  }\n  build() {\n    this.calcBox();\n    this.split(0);\n    return this;\n  }\n  getRayTriangles(ray, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!ray.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getRayTriangles(ray, triangles);\n      }\n    }\n    return triangles;\n  }\n  triangleCapsuleIntersect(capsule, triangle) {\n    triangle.getPlane(_plane);\n    const d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n    const d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n    if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n      return false;\n    }\n    const delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n    const intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n    if (triangle.containsPoint(intersectPoint)) {\n      return { normal: _plane.normal.clone(), point: intersectPoint.clone(), depth: Math.abs(Math.min(d1, d2)) };\n    }\n    const r2 = capsule.radius * capsule.radius;\n    const line1 = _line1.set(capsule.start, capsule.end);\n    const lines = [\n      [triangle.a, triangle.b],\n      [triangle.b, triangle.c],\n      [triangle.c, triangle.a]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const line2 = _line2.set(lines[i][0], lines[i][1]);\n      const [point1, point2] = capsule.lineLineMinimumPoints(line1, line2);\n      if (point1.distanceToSquared(point2) < r2) {\n        return {\n          normal: point1.clone().sub(point2).normalize(),\n          point: point2.clone(),\n          depth: capsule.radius - point1.distanceTo(point2)\n        };\n      }\n    }\n    return false;\n  }\n  triangleSphereIntersect(sphere, triangle) {\n    triangle.getPlane(_plane);\n    if (!sphere.intersectsPlane(_plane))\n      return false;\n    const depth = Math.abs(_plane.distanceToSphere(sphere));\n    const r2 = sphere.radius * sphere.radius - depth * depth;\n    const plainPoint = _plane.projectPoint(sphere.center, _v1);\n    if (triangle.containsPoint(sphere.center)) {\n      return {\n        normal: _plane.normal.clone(),\n        point: plainPoint.clone(),\n        depth: Math.abs(_plane.distanceToSphere(sphere))\n      };\n    }\n    const lines = [\n      [triangle.a, triangle.b],\n      [triangle.b, triangle.c],\n      [triangle.c, triangle.a]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      _line1.set(lines[i][0], lines[i][1]);\n      _line1.closestPointToPoint(plainPoint, true, _v2);\n      const d = _v2.distanceToSquared(sphere.center);\n      if (d < r2) {\n        return {\n          normal: sphere.center.clone().sub(_v2).normalize(),\n          point: _v2.clone(),\n          depth: sphere.radius - Math.sqrt(d)\n        };\n      }\n    }\n    return false;\n  }\n  getSphereTriangles(sphere, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!sphere.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getSphereTriangles(sphere, triangles);\n      }\n    }\n  }\n  getCapsuleTriangles(capsule, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!capsule.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getCapsuleTriangles(capsule, triangles);\n      }\n    }\n  }\n  sphereIntersect(sphere) {\n    _sphere.copy(sphere);\n    const triangles = [];\n    let result, hit = false;\n    this.getSphereTriangles(sphere, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n        hit = true;\n        _sphere.center.add(result.normal.multiplyScalar(result.depth));\n      }\n    }\n    if (hit) {\n      const collisionVector = _sphere.center.clone().sub(sphere.center);\n      const depth = collisionVector.length();\n      return { normal: collisionVector.normalize(), depth };\n    }\n    return false;\n  }\n  capsuleIntersect(capsule) {\n    _capsule.copy(capsule);\n    const triangles = [];\n    let result, hit = false;\n    this.getCapsuleTriangles(_capsule, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n        hit = true;\n        _capsule.translate(result.normal.multiplyScalar(result.depth));\n      }\n    }\n    if (hit) {\n      const collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n      const depth = collisionVector.length();\n      return { normal: collisionVector.normalize(), depth };\n    }\n    return false;\n  }\n  rayIntersect(ray) {\n    if (ray.direction.length() === 0)\n      return;\n    const triangles = [];\n    let triangle, position, distance = 1e100;\n    this.getRayTriangles(ray, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      const result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n      if (result) {\n        const newdistance = result.sub(ray.origin).length();\n        if (distance > newdistance) {\n          position = result.clone().add(ray.origin);\n          distance = newdistance;\n          triangle = triangles[i];\n        }\n      }\n    }\n    return distance < 1e100 ? { distance, triangle, position } : false;\n  }\n  fromGraphNode(group) {\n    group.updateWorldMatrix(true, true);\n    group.traverse((obj) => {\n      if (obj.isMesh === true) {\n        let geometry, isTemp = false;\n        if (obj.geometry.index !== null) {\n          isTemp = true;\n          geometry = obj.geometry.toNonIndexed();\n        } else {\n          geometry = obj.geometry;\n        }\n        const positionAttribute = geometry.getAttribute(\"position\");\n        for (let i = 0; i < positionAttribute.count; i += 3) {\n          const v1 = new Vector3().fromBufferAttribute(positionAttribute, i);\n          const v2 = new Vector3().fromBufferAttribute(positionAttribute, i + 1);\n          const v3 = new Vector3().fromBufferAttribute(positionAttribute, i + 2);\n          v1.applyMatrix4(obj.matrixWorld);\n          v2.applyMatrix4(obj.matrixWorld);\n          v3.applyMatrix4(obj.matrixWorld);\n          this.addTriangle(new Triangle(v1, v2, v3));\n        }\n        if (isTemp) {\n          geometry.dispose();\n        }\n      }\n    });\n    this.build();\n    return this;\n  }\n}\nexport {\n  Octree\n};\n"]},"metadata":{},"sourceType":"module"}