{"ast":null,"code":"var __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from \"three\";\n\nclass TessellateModifier {\n  constructor(maxEdgeLength = 0.1, maxIterations = 6) {\n    __publicField(this, \"maxEdgeLength\");\n\n    __publicField(this, \"maxIterations\");\n\n    __publicField(this, \"modify\", geometry => {\n      if (geometry.index !== null) {\n        geometry = geometry.toNonIndexed();\n      }\n\n      const maxIterations = this.maxIterations;\n      const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n      const va = new Vector3();\n      const vb = new Vector3();\n      const vc = new Vector3();\n      const vm = new Vector3();\n      const vs = [va, vb, vc, vm];\n      const na = new Vector3();\n      const nb = new Vector3();\n      const nc = new Vector3();\n      const nm = new Vector3();\n      const ns = [na, nb, nc, nm];\n      const ca = new Color();\n      const cb = new Color();\n      const cc = new Color();\n      const cm = new Color();\n      const cs = [ca, cb, cc, cm];\n      const ua = new Vector2();\n      const ub = new Vector2();\n      const uc = new Vector2();\n      const um = new Vector2();\n      const us = [ua, ub, uc, um];\n      const u2a = new Vector2();\n      const u2b = new Vector2();\n      const u2c = new Vector2();\n      const u2m = new Vector2();\n      const u2s = [u2a, u2b, u2c, u2m];\n      const attributes = geometry.attributes;\n      const hasNormals = attributes.normal !== void 0;\n      const hasColors = attributes.color !== void 0;\n      const hasUVs = attributes.uv !== void 0;\n      const hasUV2s = attributes.uv2 !== void 0;\n      let positions = attributes.position.array;\n      let normals = hasNormals ? attributes.normal.array : null;\n      let colors = hasColors ? attributes.color.array : null;\n      let uvs = hasUVs ? attributes.uv.array : null;\n      let uv2s = hasUV2s ? attributes.uv2.array : null;\n      let positions2 = positions;\n      let normals2 = normals;\n      let colors2 = colors;\n      let uvs2 = uvs;\n      let uv2s2 = uv2s;\n      let iteration = 0;\n      let tessellating = true;\n\n      function addTriangle(a, b, c) {\n        const v1 = vs[a];\n        const v2 = vs[b];\n        const v3 = vs[c];\n        positions2.push(v1.x, v1.y, v1.z);\n        positions2.push(v2.x, v2.y, v2.z);\n        positions2.push(v3.x, v3.y, v3.z);\n\n        if (hasNormals) {\n          const n1 = ns[a];\n          const n2 = ns[b];\n          const n3 = ns[c];\n          normals2.push(n1.x, n1.y, n1.z);\n          normals2.push(n2.x, n2.y, n2.z);\n          normals2.push(n3.x, n3.y, n3.z);\n        }\n\n        if (hasColors) {\n          const c1 = cs[a];\n          const c2 = cs[b];\n          const c3 = cs[c];\n          colors2.push(c1.r, c1.g, c1.b);\n          colors2.push(c2.r, c2.g, c2.b);\n          colors2.push(c3.r, c3.g, c3.b);\n        }\n\n        if (hasUVs) {\n          const u1 = us[a];\n          const u2 = us[b];\n          const u3 = us[c];\n          uvs2.push(u1.x, u1.y);\n          uvs2.push(u2.x, u2.y);\n          uvs2.push(u3.x, u3.y);\n        }\n\n        if (hasUV2s) {\n          const u21 = u2s[a];\n          const u22 = u2s[b];\n          const u23 = u2s[c];\n          uv2s2.push(u21.x, u21.y);\n          uv2s2.push(u22.x, u22.y);\n          uv2s2.push(u23.x, u23.y);\n        }\n      }\n\n      while (tessellating && iteration < maxIterations) {\n        iteration++;\n        tessellating = false;\n        positions = positions2;\n        positions2 = [];\n\n        if (hasNormals) {\n          normals = normals2;\n          normals2 = [];\n        }\n\n        if (hasColors) {\n          colors = colors2;\n          colors2 = [];\n        }\n\n        if (hasUVs) {\n          uvs = uvs2;\n          uvs2 = [];\n        }\n\n        if (hasUV2s) {\n          uv2s = uv2s2;\n          uv2s2 = [];\n        }\n\n        for (let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n          va.fromArray(positions, i + 0);\n          vb.fromArray(positions, i + 3);\n          vc.fromArray(positions, i + 6);\n\n          if (hasNormals && normals) {\n            na.fromArray(normals, i + 0);\n            nb.fromArray(normals, i + 3);\n            nc.fromArray(normals, i + 6);\n          }\n\n          if (hasColors && colors) {\n            ca.fromArray(colors, i + 0);\n            cb.fromArray(colors, i + 3);\n            cc.fromArray(colors, i + 6);\n          }\n\n          if (hasUVs && uvs) {\n            ua.fromArray(uvs, i2 + 0);\n            ub.fromArray(uvs, i2 + 2);\n            uc.fromArray(uvs, i2 + 4);\n          }\n\n          if (hasUV2s && uv2s) {\n            u2a.fromArray(uv2s, i2 + 0);\n            u2b.fromArray(uv2s, i2 + 2);\n            u2c.fromArray(uv2s, i2 + 4);\n          }\n\n          const dab = va.distanceToSquared(vb);\n          const dbc = vb.distanceToSquared(vc);\n          const dac = va.distanceToSquared(vc);\n\n          if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n            tessellating = true;\n\n            if (dab >= dbc && dab >= dac) {\n              vm.lerpVectors(va, vb, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n              if (hasColors) cm.lerpColors(ca, cb, 0.5);\n              if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n              addTriangle(0, 3, 2);\n              addTriangle(3, 1, 2);\n            } else if (dbc >= dab && dbc >= dac) {\n              vm.lerpVectors(vb, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n              if (hasColors) cm.lerpColors(cb, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 2, 0);\n            } else {\n              vm.lerpVectors(va, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n              if (hasColors) cm.lerpColors(ca, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 1, 2);\n            }\n          } else {\n            addTriangle(0, 1, 2);\n          }\n        }\n      }\n\n      const geometry2 = new BufferGeometry();\n      geometry2.setAttribute(\"position\", new Float32BufferAttribute(positions2, 3));\n\n      if (hasNormals) {\n        geometry2.setAttribute(\"normal\", new Float32BufferAttribute(normals2, 3));\n      }\n\n      if (hasColors) {\n        geometry2.setAttribute(\"color\", new Float32BufferAttribute(colors2, 3));\n      }\n\n      if (hasUVs) {\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(uvs2, 2));\n      }\n\n      if (hasUV2s) {\n        geometry2.setAttribute(\"uv2\", new Float32BufferAttribute(uv2s2, 2));\n      }\n\n      return geometry2;\n    });\n\n    this.maxEdgeLength = maxEdgeLength;\n    this.maxIterations = maxIterations;\n  }\n\n}\n\nexport { TessellateModifier };","map":{"version":3,"sources":["/Users/theodaguier/_workdir/dev/pro/e-do/E-Do-Studio/node_modules/three-stdlib/modifiers/TessellateModifier.js"],"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Color","Vector2","BufferGeometry","Float32BufferAttribute","TessellateModifier","constructor","maxEdgeLength","maxIterations","geometry","index","toNonIndexed","maxEdgeLengthSquared","va","vb","vc","vm","vs","na","nb","nc","nm","ns","ca","cb","cc","cm","cs","ua","ub","uc","um","us","u2a","u2b","u2c","u2m","u2s","attributes","hasNormals","normal","hasColors","color","hasUVs","uv","hasUV2s","uv2","positions","position","array","normals","colors","uvs","uv2s","positions2","normals2","colors2","uvs2","uv2s2","iteration","tessellating","addTriangle","a","b","c","v1","v2","v3","push","x","y","z","n1","n2","n3","c1","c2","c3","r","g","u1","u2","u3","u21","u22","u23","i","i2","il","length","fromArray","dab","distanceToSquared","dbc","dac","lerpVectors","lerpColors","geometry2","setAttribute"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass TessellateModifier {\n  constructor(maxEdgeLength = 0.1, maxIterations = 6) {\n    __publicField(this, \"maxEdgeLength\");\n    __publicField(this, \"maxIterations\");\n    __publicField(this, \"modify\", (geometry) => {\n      if (geometry.index !== null) {\n        geometry = geometry.toNonIndexed();\n      }\n      const maxIterations = this.maxIterations;\n      const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n      const va = new Vector3();\n      const vb = new Vector3();\n      const vc = new Vector3();\n      const vm = new Vector3();\n      const vs = [va, vb, vc, vm];\n      const na = new Vector3();\n      const nb = new Vector3();\n      const nc = new Vector3();\n      const nm = new Vector3();\n      const ns = [na, nb, nc, nm];\n      const ca = new Color();\n      const cb = new Color();\n      const cc = new Color();\n      const cm = new Color();\n      const cs = [ca, cb, cc, cm];\n      const ua = new Vector2();\n      const ub = new Vector2();\n      const uc = new Vector2();\n      const um = new Vector2();\n      const us = [ua, ub, uc, um];\n      const u2a = new Vector2();\n      const u2b = new Vector2();\n      const u2c = new Vector2();\n      const u2m = new Vector2();\n      const u2s = [u2a, u2b, u2c, u2m];\n      const attributes = geometry.attributes;\n      const hasNormals = attributes.normal !== void 0;\n      const hasColors = attributes.color !== void 0;\n      const hasUVs = attributes.uv !== void 0;\n      const hasUV2s = attributes.uv2 !== void 0;\n      let positions = attributes.position.array;\n      let normals = hasNormals ? attributes.normal.array : null;\n      let colors = hasColors ? attributes.color.array : null;\n      let uvs = hasUVs ? attributes.uv.array : null;\n      let uv2s = hasUV2s ? attributes.uv2.array : null;\n      let positions2 = positions;\n      let normals2 = normals;\n      let colors2 = colors;\n      let uvs2 = uvs;\n      let uv2s2 = uv2s;\n      let iteration = 0;\n      let tessellating = true;\n      function addTriangle(a, b, c) {\n        const v1 = vs[a];\n        const v2 = vs[b];\n        const v3 = vs[c];\n        positions2.push(v1.x, v1.y, v1.z);\n        positions2.push(v2.x, v2.y, v2.z);\n        positions2.push(v3.x, v3.y, v3.z);\n        if (hasNormals) {\n          const n1 = ns[a];\n          const n2 = ns[b];\n          const n3 = ns[c];\n          normals2.push(n1.x, n1.y, n1.z);\n          normals2.push(n2.x, n2.y, n2.z);\n          normals2.push(n3.x, n3.y, n3.z);\n        }\n        if (hasColors) {\n          const c1 = cs[a];\n          const c2 = cs[b];\n          const c3 = cs[c];\n          colors2.push(c1.r, c1.g, c1.b);\n          colors2.push(c2.r, c2.g, c2.b);\n          colors2.push(c3.r, c3.g, c3.b);\n        }\n        if (hasUVs) {\n          const u1 = us[a];\n          const u2 = us[b];\n          const u3 = us[c];\n          uvs2.push(u1.x, u1.y);\n          uvs2.push(u2.x, u2.y);\n          uvs2.push(u3.x, u3.y);\n        }\n        if (hasUV2s) {\n          const u21 = u2s[a];\n          const u22 = u2s[b];\n          const u23 = u2s[c];\n          uv2s2.push(u21.x, u21.y);\n          uv2s2.push(u22.x, u22.y);\n          uv2s2.push(u23.x, u23.y);\n        }\n      }\n      while (tessellating && iteration < maxIterations) {\n        iteration++;\n        tessellating = false;\n        positions = positions2;\n        positions2 = [];\n        if (hasNormals) {\n          normals = normals2;\n          normals2 = [];\n        }\n        if (hasColors) {\n          colors = colors2;\n          colors2 = [];\n        }\n        if (hasUVs) {\n          uvs = uvs2;\n          uvs2 = [];\n        }\n        if (hasUV2s) {\n          uv2s = uv2s2;\n          uv2s2 = [];\n        }\n        for (let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n          va.fromArray(positions, i + 0);\n          vb.fromArray(positions, i + 3);\n          vc.fromArray(positions, i + 6);\n          if (hasNormals && normals) {\n            na.fromArray(normals, i + 0);\n            nb.fromArray(normals, i + 3);\n            nc.fromArray(normals, i + 6);\n          }\n          if (hasColors && colors) {\n            ca.fromArray(colors, i + 0);\n            cb.fromArray(colors, i + 3);\n            cc.fromArray(colors, i + 6);\n          }\n          if (hasUVs && uvs) {\n            ua.fromArray(uvs, i2 + 0);\n            ub.fromArray(uvs, i2 + 2);\n            uc.fromArray(uvs, i2 + 4);\n          }\n          if (hasUV2s && uv2s) {\n            u2a.fromArray(uv2s, i2 + 0);\n            u2b.fromArray(uv2s, i2 + 2);\n            u2c.fromArray(uv2s, i2 + 4);\n          }\n          const dab = va.distanceToSquared(vb);\n          const dbc = vb.distanceToSquared(vc);\n          const dac = va.distanceToSquared(vc);\n          if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n            tessellating = true;\n            if (dab >= dbc && dab >= dac) {\n              vm.lerpVectors(va, vb, 0.5);\n              if (hasNormals)\n                nm.lerpVectors(na, nb, 0.5);\n              if (hasColors)\n                cm.lerpColors(ca, cb, 0.5);\n              if (hasUVs)\n                um.lerpVectors(ua, ub, 0.5);\n              if (hasUV2s)\n                u2m.lerpVectors(u2a, u2b, 0.5);\n              addTriangle(0, 3, 2);\n              addTriangle(3, 1, 2);\n            } else if (dbc >= dab && dbc >= dac) {\n              vm.lerpVectors(vb, vc, 0.5);\n              if (hasNormals)\n                nm.lerpVectors(nb, nc, 0.5);\n              if (hasColors)\n                cm.lerpColors(cb, cc, 0.5);\n              if (hasUVs)\n                um.lerpVectors(ub, uc, 0.5);\n              if (hasUV2s)\n                u2m.lerpVectors(u2b, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 2, 0);\n            } else {\n              vm.lerpVectors(va, vc, 0.5);\n              if (hasNormals)\n                nm.lerpVectors(na, nc, 0.5);\n              if (hasColors)\n                cm.lerpColors(ca, cc, 0.5);\n              if (hasUVs)\n                um.lerpVectors(ua, uc, 0.5);\n              if (hasUV2s)\n                u2m.lerpVectors(u2a, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 1, 2);\n            }\n          } else {\n            addTriangle(0, 1, 2);\n          }\n        }\n      }\n      const geometry2 = new BufferGeometry();\n      geometry2.setAttribute(\"position\", new Float32BufferAttribute(positions2, 3));\n      if (hasNormals) {\n        geometry2.setAttribute(\"normal\", new Float32BufferAttribute(normals2, 3));\n      }\n      if (hasColors) {\n        geometry2.setAttribute(\"color\", new Float32BufferAttribute(colors2, 3));\n      }\n      if (hasUVs) {\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(uvs2, 2));\n      }\n      if (hasUV2s) {\n        geometry2.setAttribute(\"uv2\", new Float32BufferAttribute(uv2s2, 2));\n      }\n      return geometry2;\n    });\n    this.maxEdgeLength = maxEdgeLength;\n    this.maxIterations = maxIterations;\n  }\n}\nexport {\n  TessellateModifier\n};\n"]},"metadata":{},"sourceType":"module"}